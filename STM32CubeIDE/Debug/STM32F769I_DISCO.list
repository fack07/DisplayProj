
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000260c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000043c0  080262c8  080262c8  000362c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000474  0802a688  0802a688  0003a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802aafc  0802aafc  004dd528  2**0
                  CONTENTS
  5 .ARM          00000008  0802aafc  0802aafc  0003aafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802ab04  0802ab04  004dd528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802ab04  0802ab04  0003ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802ab20  0802ab20  0003ab20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  0802ab28  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000150  0802ac78  00040150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001e9f4  20009750  08034278  00049750  2**2
                  ALLOC
 12 ._user_heap_stack 00002004  20028144  08034278  00058144  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  004dd528  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 00484b38  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 000088b0  90484b38  90484b38  004d4b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000140  9048d3e8  9048d3e8  004dd3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  004e0000  2**2
                  ALLOC
 18 .debug_line   00064fb3  00000000  00000000  004dd556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000e8f67  00000000  00000000  00542509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00018d5e  00000000  00000000  0062b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003420  00000000  00000000  006441d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0015b7e7  00000000  00000000  006475f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00006138  00000000  00000000  007a2dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00040470  00000000  00000000  007a8f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  007e9380  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00009af0  00000000  00000000  007e9450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    0003a35d  00000000  00000000  007f2f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009750 	.word	0x20009750
 800021c:	00000000 	.word	0x00000000
 8000220:	080262b0 	.word	0x080262b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20009754 	.word	0x20009754
 800023c:	080262b0 	.word	0x080262b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b974 	b.w	8000958 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	468e      	mov	lr, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14d      	bne.n	8000732 <__udivmoddi4+0xaa>
 8000696:	428a      	cmp	r2, r1
 8000698:	4694      	mov	ip, r2
 800069a:	d969      	bls.n	8000770 <__udivmoddi4+0xe8>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b152      	cbz	r2, 80006b8 <__udivmoddi4+0x30>
 80006a2:	fa01 f302 	lsl.w	r3, r1, r2
 80006a6:	f1c2 0120 	rsb	r1, r2, #32
 80006aa:	fa20 f101 	lsr.w	r1, r0, r1
 80006ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b2:	ea41 0e03 	orr.w	lr, r1, r3
 80006b6:	4094      	lsls	r4, r2
 80006b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006bc:	0c21      	lsrs	r1, r4, #16
 80006be:	fbbe f6f8 	udiv	r6, lr, r8
 80006c2:	fa1f f78c 	uxth.w	r7, ip
 80006c6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ce:	fb06 f107 	mul.w	r1, r6, r7
 80006d2:	4299      	cmp	r1, r3
 80006d4:	d90a      	bls.n	80006ec <__udivmoddi4+0x64>
 80006d6:	eb1c 0303 	adds.w	r3, ip, r3
 80006da:	f106 30ff 	add.w	r0, r6, #4294967295
 80006de:	f080 811f 	bcs.w	8000920 <__udivmoddi4+0x298>
 80006e2:	4299      	cmp	r1, r3
 80006e4:	f240 811c 	bls.w	8000920 <__udivmoddi4+0x298>
 80006e8:	3e02      	subs	r6, #2
 80006ea:	4463      	add	r3, ip
 80006ec:	1a5b      	subs	r3, r3, r1
 80006ee:	b2a4      	uxth	r4, r4
 80006f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006f4:	fb08 3310 	mls	r3, r8, r0, r3
 80006f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006fc:	fb00 f707 	mul.w	r7, r0, r7
 8000700:	42a7      	cmp	r7, r4
 8000702:	d90a      	bls.n	800071a <__udivmoddi4+0x92>
 8000704:	eb1c 0404 	adds.w	r4, ip, r4
 8000708:	f100 33ff 	add.w	r3, r0, #4294967295
 800070c:	f080 810a 	bcs.w	8000924 <__udivmoddi4+0x29c>
 8000710:	42a7      	cmp	r7, r4
 8000712:	f240 8107 	bls.w	8000924 <__udivmoddi4+0x29c>
 8000716:	4464      	add	r4, ip
 8000718:	3802      	subs	r0, #2
 800071a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800071e:	1be4      	subs	r4, r4, r7
 8000720:	2600      	movs	r6, #0
 8000722:	b11d      	cbz	r5, 800072c <__udivmoddi4+0xa4>
 8000724:	40d4      	lsrs	r4, r2
 8000726:	2300      	movs	r3, #0
 8000728:	e9c5 4300 	strd	r4, r3, [r5]
 800072c:	4631      	mov	r1, r6
 800072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000732:	428b      	cmp	r3, r1
 8000734:	d909      	bls.n	800074a <__udivmoddi4+0xc2>
 8000736:	2d00      	cmp	r5, #0
 8000738:	f000 80ef 	beq.w	800091a <__udivmoddi4+0x292>
 800073c:	2600      	movs	r6, #0
 800073e:	e9c5 0100 	strd	r0, r1, [r5]
 8000742:	4630      	mov	r0, r6
 8000744:	4631      	mov	r1, r6
 8000746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074a:	fab3 f683 	clz	r6, r3
 800074e:	2e00      	cmp	r6, #0
 8000750:	d14a      	bne.n	80007e8 <__udivmoddi4+0x160>
 8000752:	428b      	cmp	r3, r1
 8000754:	d302      	bcc.n	800075c <__udivmoddi4+0xd4>
 8000756:	4282      	cmp	r2, r0
 8000758:	f200 80f9 	bhi.w	800094e <__udivmoddi4+0x2c6>
 800075c:	1a84      	subs	r4, r0, r2
 800075e:	eb61 0303 	sbc.w	r3, r1, r3
 8000762:	2001      	movs	r0, #1
 8000764:	469e      	mov	lr, r3
 8000766:	2d00      	cmp	r5, #0
 8000768:	d0e0      	beq.n	800072c <__udivmoddi4+0xa4>
 800076a:	e9c5 4e00 	strd	r4, lr, [r5]
 800076e:	e7dd      	b.n	800072c <__udivmoddi4+0xa4>
 8000770:	b902      	cbnz	r2, 8000774 <__udivmoddi4+0xec>
 8000772:	deff      	udf	#255	; 0xff
 8000774:	fab2 f282 	clz	r2, r2
 8000778:	2a00      	cmp	r2, #0
 800077a:	f040 8092 	bne.w	80008a2 <__udivmoddi4+0x21a>
 800077e:	eba1 010c 	sub.w	r1, r1, ip
 8000782:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000786:	fa1f fe8c 	uxth.w	lr, ip
 800078a:	2601      	movs	r6, #1
 800078c:	0c20      	lsrs	r0, r4, #16
 800078e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000792:	fb07 1113 	mls	r1, r7, r3, r1
 8000796:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800079a:	fb0e f003 	mul.w	r0, lr, r3
 800079e:	4288      	cmp	r0, r1
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x12c>
 80007a2:	eb1c 0101 	adds.w	r1, ip, r1
 80007a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x12a>
 80007ac:	4288      	cmp	r0, r1
 80007ae:	f200 80cb 	bhi.w	8000948 <__udivmoddi4+0x2c0>
 80007b2:	4643      	mov	r3, r8
 80007b4:	1a09      	subs	r1, r1, r0
 80007b6:	b2a4      	uxth	r4, r4
 80007b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007bc:	fb07 1110 	mls	r1, r7, r0, r1
 80007c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007c4:	fb0e fe00 	mul.w	lr, lr, r0
 80007c8:	45a6      	cmp	lr, r4
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x156>
 80007cc:	eb1c 0404 	adds.w	r4, ip, r4
 80007d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007d4:	d202      	bcs.n	80007dc <__udivmoddi4+0x154>
 80007d6:	45a6      	cmp	lr, r4
 80007d8:	f200 80bb 	bhi.w	8000952 <__udivmoddi4+0x2ca>
 80007dc:	4608      	mov	r0, r1
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007e6:	e79c      	b.n	8000722 <__udivmoddi4+0x9a>
 80007e8:	f1c6 0720 	rsb	r7, r6, #32
 80007ec:	40b3      	lsls	r3, r6
 80007ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80007f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007f6:	fa20 f407 	lsr.w	r4, r0, r7
 80007fa:	fa01 f306 	lsl.w	r3, r1, r6
 80007fe:	431c      	orrs	r4, r3
 8000800:	40f9      	lsrs	r1, r7
 8000802:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000806:	fa00 f306 	lsl.w	r3, r0, r6
 800080a:	fbb1 f8f9 	udiv	r8, r1, r9
 800080e:	0c20      	lsrs	r0, r4, #16
 8000810:	fa1f fe8c 	uxth.w	lr, ip
 8000814:	fb09 1118 	mls	r1, r9, r8, r1
 8000818:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081c:	fb08 f00e 	mul.w	r0, r8, lr
 8000820:	4288      	cmp	r0, r1
 8000822:	fa02 f206 	lsl.w	r2, r2, r6
 8000826:	d90b      	bls.n	8000840 <__udivmoddi4+0x1b8>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000830:	f080 8088 	bcs.w	8000944 <__udivmoddi4+0x2bc>
 8000834:	4288      	cmp	r0, r1
 8000836:	f240 8085 	bls.w	8000944 <__udivmoddi4+0x2bc>
 800083a:	f1a8 0802 	sub.w	r8, r8, #2
 800083e:	4461      	add	r1, ip
 8000840:	1a09      	subs	r1, r1, r0
 8000842:	b2a4      	uxth	r4, r4
 8000844:	fbb1 f0f9 	udiv	r0, r1, r9
 8000848:	fb09 1110 	mls	r1, r9, r0, r1
 800084c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	458e      	cmp	lr, r1
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x1e2>
 8000858:	eb1c 0101 	adds.w	r1, ip, r1
 800085c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000860:	d26c      	bcs.n	800093c <__udivmoddi4+0x2b4>
 8000862:	458e      	cmp	lr, r1
 8000864:	d96a      	bls.n	800093c <__udivmoddi4+0x2b4>
 8000866:	3802      	subs	r0, #2
 8000868:	4461      	add	r1, ip
 800086a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800086e:	fba0 9402 	umull	r9, r4, r0, r2
 8000872:	eba1 010e 	sub.w	r1, r1, lr
 8000876:	42a1      	cmp	r1, r4
 8000878:	46c8      	mov	r8, r9
 800087a:	46a6      	mov	lr, r4
 800087c:	d356      	bcc.n	800092c <__udivmoddi4+0x2a4>
 800087e:	d053      	beq.n	8000928 <__udivmoddi4+0x2a0>
 8000880:	b15d      	cbz	r5, 800089a <__udivmoddi4+0x212>
 8000882:	ebb3 0208 	subs.w	r2, r3, r8
 8000886:	eb61 010e 	sbc.w	r1, r1, lr
 800088a:	fa01 f707 	lsl.w	r7, r1, r7
 800088e:	fa22 f306 	lsr.w	r3, r2, r6
 8000892:	40f1      	lsrs	r1, r6
 8000894:	431f      	orrs	r7, r3
 8000896:	e9c5 7100 	strd	r7, r1, [r5]
 800089a:	2600      	movs	r6, #0
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	f1c2 0320 	rsb	r3, r2, #32
 80008a6:	40d8      	lsrs	r0, r3
 80008a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ac:	fa21 f303 	lsr.w	r3, r1, r3
 80008b0:	4091      	lsls	r1, r2
 80008b2:	4301      	orrs	r1, r0
 80008b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b8:	fa1f fe8c 	uxth.w	lr, ip
 80008bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008c0:	fb07 3610 	mls	r6, r7, r0, r3
 80008c4:	0c0b      	lsrs	r3, r1, #16
 80008c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ca:	fb00 f60e 	mul.w	r6, r0, lr
 80008ce:	429e      	cmp	r6, r3
 80008d0:	fa04 f402 	lsl.w	r4, r4, r2
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x260>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f100 38ff 	add.w	r8, r0, #4294967295
 80008de:	d22f      	bcs.n	8000940 <__udivmoddi4+0x2b8>
 80008e0:	429e      	cmp	r6, r3
 80008e2:	d92d      	bls.n	8000940 <__udivmoddi4+0x2b8>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1b9b      	subs	r3, r3, r6
 80008ea:	b289      	uxth	r1, r1
 80008ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80008f0:	fb07 3316 	mls	r3, r7, r6, r3
 80008f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f8:	fb06 f30e 	mul.w	r3, r6, lr
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x28a>
 8000900:	eb1c 0101 	adds.w	r1, ip, r1
 8000904:	f106 38ff 	add.w	r8, r6, #4294967295
 8000908:	d216      	bcs.n	8000938 <__udivmoddi4+0x2b0>
 800090a:	428b      	cmp	r3, r1
 800090c:	d914      	bls.n	8000938 <__udivmoddi4+0x2b0>
 800090e:	3e02      	subs	r6, #2
 8000910:	4461      	add	r1, ip
 8000912:	1ac9      	subs	r1, r1, r3
 8000914:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000918:	e738      	b.n	800078c <__udivmoddi4+0x104>
 800091a:	462e      	mov	r6, r5
 800091c:	4628      	mov	r0, r5
 800091e:	e705      	b.n	800072c <__udivmoddi4+0xa4>
 8000920:	4606      	mov	r6, r0
 8000922:	e6e3      	b.n	80006ec <__udivmoddi4+0x64>
 8000924:	4618      	mov	r0, r3
 8000926:	e6f8      	b.n	800071a <__udivmoddi4+0x92>
 8000928:	454b      	cmp	r3, r9
 800092a:	d2a9      	bcs.n	8000880 <__udivmoddi4+0x1f8>
 800092c:	ebb9 0802 	subs.w	r8, r9, r2
 8000930:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000934:	3801      	subs	r0, #1
 8000936:	e7a3      	b.n	8000880 <__udivmoddi4+0x1f8>
 8000938:	4646      	mov	r6, r8
 800093a:	e7ea      	b.n	8000912 <__udivmoddi4+0x28a>
 800093c:	4620      	mov	r0, r4
 800093e:	e794      	b.n	800086a <__udivmoddi4+0x1e2>
 8000940:	4640      	mov	r0, r8
 8000942:	e7d1      	b.n	80008e8 <__udivmoddi4+0x260>
 8000944:	46d0      	mov	r8, sl
 8000946:	e77b      	b.n	8000840 <__udivmoddi4+0x1b8>
 8000948:	3b02      	subs	r3, #2
 800094a:	4461      	add	r1, ip
 800094c:	e732      	b.n	80007b4 <__udivmoddi4+0x12c>
 800094e:	4630      	mov	r0, r6
 8000950:	e709      	b.n	8000766 <__udivmoddi4+0xde>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	e742      	b.n	80007de <__udivmoddi4+0x156>

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000994 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000960:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000962:	e003      	b.n	800096c <LoopCopyDataInit>

08000964 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000966:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000968:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800096a:	3104      	adds	r1, #4

0800096c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000970:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000972:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000974:	d3f6      	bcc.n	8000964 <CopyDataInit>
  ldr  r2, =_sbss
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000978:	e002      	b.n	8000980 <LoopFillZerobss>

0800097a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800097a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800097c:	f842 3b04 	str.w	r3, [r2], #4

08000980 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000982:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000984:	d3f9      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000986:	f006 f839 	bl	80069fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098a:	f024 fc17 	bl	80251bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098e:	f002 fd0d 	bl	80033ac <main>
  bx  lr    
 8000992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000994:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000998:	0802ab28 	.word	0x0802ab28
  ldr  r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009a0:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 80009a4:	20009750 	.word	0x20009750
  ldr  r3, = _ebss
 80009a8:	20028144 	.word	0x20028144

080009ac <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <CAN1_RX1_IRQHandler>

080009ae <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80009ae:	4770      	bx	lr

080009b0 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80009b0:	f001 bcb4 	b.w	800231c <touchgfx_init>

080009b4 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80009b4:	f001 bd26 	b.w	8002404 <touchgfx_taskEntry>

080009b8 <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <BSP_PB_Init+0x60>)
 80009ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009bc:	f042 0201 	orr.w	r2, r2, #1
    {
 80009c0:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
    {
 80009c4:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 80009d0:	b959      	cbnz	r1, 80009ea <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 80009d2:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 80009d4:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80009d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009dc:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009de:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009e0:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009e2:	f007 fca3 	bl	800832c <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 80009e6:	b006      	add	sp, #24
 80009e8:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 80009ea:	2901      	cmp	r1, #1
 80009ec:	d1fb      	bne.n	80009e6 <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009ee:	2400      	movs	r4, #0
 80009f0:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 80009f2:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009f4:	a901      	add	r1, sp, #4
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009f8:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80009fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a00:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a02:	f007 fc93 	bl	800832c <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000a06:	4622      	mov	r2, r4
 8000a08:	210f      	movs	r1, #15
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f006 fd0e 	bl	800742c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000a10:	2006      	movs	r0, #6
 8000a12:	f006 fd3d 	bl	8007490 <HAL_NVIC_EnableIRQ>
    }
 8000a16:	e7e6      	b.n	80009e6 <BSP_PB_Init+0x2e>
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000a20:	2100      	movs	r1, #0
{
 8000a22:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000a24:	4608      	mov	r0, r1
 8000a26:	f7ff ffc7 	bl	80009b8 <BSP_PB_Init>
}
 8000a2a:	bd08      	pop	{r3, pc}

08000a2c <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4802      	ldr	r0, [pc, #8]	; (8000a38 <BSP_PB_GetState+0xc>)
    {
 8000a30:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a32:	f007 fe01 	bl	8008638 <HAL_GPIO_ReadPin>
    }
 8000a36:	bd08      	pop	{r3, pc}
 8000a38:	40020000 	.word	0x40020000

08000a3c <_ZN8touchgfx7Buttons6sampleEv>:
{
 8000a3c:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fff4 	bl	8000a2c <BSP_PB_GetState>
}
 8000a44:	bd08      	pop	{r3, pc}

08000a46 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8000a46:	6840      	ldr	r0, [r0, #4]
    }
 8000a48:	4770      	bx	lr

08000a4a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8000a4a:	6041      	str	r1, [r0, #4]
    }
 8000a4c:	4770      	bx	lr
	...

08000a50 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000a50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000a54:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8000a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a5c:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8000a64:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	f042 0201 	orr.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	4770      	bx	lr
 8000a78:	e0001000 	.word	0xe0001000
 8000a7c:	c5acce55 	.word	0xc5acce55

08000a80 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000a80:	1a51      	subs	r1, r2, r1
 8000a82:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8000a86:	fbb1 f0f3 	udiv	r0, r1, r3
 8000a8a:	4770      	bx	lr

08000a8c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000a8c:	4b01      	ldr	r3, [pc, #4]	; (8000a94 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000a8e:	6858      	ldr	r0, [r3, #4]
}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e0001000 	.word	0xe0001000

08000a98 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000a98:	4770      	bx	lr

08000a9a <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000a9a:	b510      	push	{r4, lr}
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	210c      	movs	r1, #12
 8000aa0:	f024 f965 	bl	8024d6e <_ZdlPvj>
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	bd10      	pop	{r4, pc}

08000aa8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000aa8:	6803      	ldr	r3, [r0, #0]
{
 8000aaa:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000aac:	691b      	ldr	r3, [r3, #16]
{
 8000aae:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000ab0:	b131      	cbz	r1, 8000ac0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000ab2:	4798      	blx	r3
 8000ab4:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8000ab6:	6863      	ldr	r3, [r4, #4]
 8000ab8:	1a9b      	subs	r3, r3, r2
 8000aba:	4418      	add	r0, r3
 8000abc:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000abe:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000ac0:	4798      	blx	r3
 8000ac2:	60a0      	str	r0, [r4, #8]
}
 8000ac4:	e7fb      	b.n	8000abe <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08000ac6 <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8000ac6:	4770      	bx	lr

08000ac8 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8000ac8:	4770      	bx	lr
	...

08000acc <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000acc:	b508      	push	{r3, lr}
    Buttons::init();
 8000ace:	f7ff ffa7 	bl	8000a20 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 8000ad2:	4b02      	ldr	r3, [pc, #8]	; (8000adc <_ZN8touchgfx10KeySampler4initEv+0x10>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	bd08      	pop	{r3, pc}
 8000ada:	bf00      	nop
 8000adc:	2000976c 	.word	0x2000976c

08000ae0 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000ae4:	f7ff ffaa 	bl	8000a3c <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 8000aea:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000aec:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000aee:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000af0:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000af2:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 8000af6:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 8000af8:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 8000afa:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000afc:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000afe:	d00a      	beq.n	8000b16 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000b00:	f016 0001 	ands.w	r0, r6, #1
 8000b04:	d007      	beq.n	8000b16 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000b06:	f011 0001 	ands.w	r0, r1, #1
 8000b0a:	d004      	beq.n	8000b16 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 8000b0c:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 8000b0e:	bf56      	itet	pl
 8000b10:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000b12:	2000      	movmi	r0, #0
        key = 1;
 8000b14:	7028      	strbpl	r0, [r5, #0]
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	2000976c 	.word	0x2000976c

08000b1c <_ZN8touchgfx10KeySamplerD0Ev>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	4604      	mov	r4, r0
 8000b20:	2104      	movs	r1, #4
 8000b22:	f024 f924 	bl	8024d6e <_ZdlPvj>
 8000b26:	4620      	mov	r0, r4
 8000b28:	bd10      	pop	{r4, pc}

08000b2a <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000b2a:	4770      	bx	lr

08000b2c <_ZN20STM32TouchControllerD0Ev>:
 8000b2c:	b510      	push	{r4, lr}
 8000b2e:	4604      	mov	r4, r0
 8000b30:	2104      	movs	r1, #4
 8000b32:	f024 f91c 	bl	8024d6e <_ZdlPvj>
 8000b36:	4620      	mov	r0, r4
 8000b38:	bd10      	pop	{r4, pc}

08000b3a <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 8000b3a:	4770      	bx	lr

08000b3c <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 8000b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b3e:	2301      	movs	r3, #1
    {
 8000b40:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b48:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000b4c:	f10d 0217 	add.w	r2, sp, #23
 8000b50:	9200      	str	r2, [sp, #0]
 8000b52:	460a      	mov	r2, r1
 8000b54:	4601      	mov	r1, r0
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <TS_IO_Write+0x34>)
 8000b58:	f007 ff7d 	bl	8008a56 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8000b5c:	b120      	cbz	r0, 8000b68 <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <TS_IO_Write+0x34>)
 8000b60:	f007 ff60 	bl	8008a24 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000b64:	f002 fc00 	bl	8003368 <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 8000b68:	b007      	add	sp, #28
 8000b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b6e:	bf00      	nop
 8000b70:	20012460 	.word	0x20012460

08000b74 <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 8000b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 8000b76:	2300      	movs	r3, #0
    {
 8000b78:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        uint8_t read_value = 0;
 8000b7e:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b82:	2301      	movs	r3, #1
 8000b84:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8000b88:	f10d 0117 	add.w	r1, sp, #23
 8000b8c:	9100      	str	r1, [sp, #0]
 8000b8e:	4601      	mov	r1, r0
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <TS_IO_Read+0x38>)
 8000b92:	f008 f817 	bl	8008bc4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000b96:	b120      	cbz	r0, 8000ba2 <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <TS_IO_Read+0x38>)
 8000b9a:	f007 ff43 	bl	8008a24 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000b9e:	f002 fbe3 	bl	8003368 <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 8000ba2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000ba6:	b007      	add	sp, #28
 8000ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bac:	20012460 	.word	0x20012460

08000bb0 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 8000bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000bb2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000bb6:	9200      	str	r2, [sp, #0]
 8000bb8:	460a      	mov	r2, r1
 8000bba:	4601      	mov	r1, r0
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <TS_IO_ReadMultiple+0x2c>)
 8000bbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f007 fffe 	bl	8008bc4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000bc8:	4604      	mov	r4, r0
 8000bca:	b120      	cbz	r0, 8000bd6 <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <TS_IO_ReadMultiple+0x2c>)
 8000bce:	f007 ff29 	bl	8008a24 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000bd2:	f002 fbc9 	bl	8003368 <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 8000bd6:	b2a0      	uxth	r0, r4
 8000bd8:	b004      	add	sp, #16
 8000bda:	bd10      	pop	{r4, pc}
 8000bdc:	20012460 	.word	0x20012460

08000be0 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000be2:	4d13      	ldr	r5, [pc, #76]	; (8000c30 <BSP_TS_Init+0x50>)
    {
 8000be4:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 8000be6:	4c13      	ldr	r4, [pc, #76]	; (8000c34 <BSP_TS_Init+0x54>)
    {
 8000be8:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	7820      	ldrb	r0, [r4, #0]
 8000bee:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000bf0:	686b      	ldr	r3, [r5, #4]
 8000bf2:	2054      	movs	r0, #84	; 0x54
 8000bf4:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 8000bf6:	b2c0      	uxtb	r0, r0
 8000bf8:	2811      	cmp	r0, #17
 8000bfa:	d009      	beq.n	8000c10 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000bfc:	686b      	ldr	r3, [r5, #4]
 8000bfe:	2070      	movs	r0, #112	; 0x70
 8000c00:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000c02:	2370      	movs	r3, #112	; 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000c04:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000c06:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000c08:	2811      	cmp	r0, #17
 8000c0a:	d003      	beq.n	8000c14 <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 8000c0c:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 8000c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000c10:	2354      	movs	r3, #84	; 0x54
 8000c12:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 8000c16:	42be      	cmp	r6, r7
 8000c18:	bf34      	ite	cc
 8000c1a:	2601      	movcc	r6, #1
 8000c1c:	260c      	movcs	r6, #12
                ft6x06_ts_drv.Reset(I2C_Address);
 8000c1e:	7820      	ldrb	r0, [r4, #0]
 8000c20:	701e      	strb	r6, [r3, #0]
 8000c22:	68ab      	ldr	r3, [r5, #8]
 8000c24:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 8000c26:	7820      	ldrb	r0, [r4, #0]
 8000c28:	68eb      	ldr	r3, [r5, #12]
 8000c2a:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7ee      	b.n	8000c0e <BSP_TS_Init+0x2e>
 8000c30:	20000038 	.word	0x20000038
 8000c34:	20009770 	.word	0x20009770
 8000c38:	20009771 	.word	0x20009771

08000c3c <_ZN20STM32TouchController4initEv>:
{
 8000c3c:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 8000c3e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000c42:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c46:	f7ff ffcb 	bl	8000be0 <BSP_TS_Init>
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <_ZN20STM32TouchController4initEv+0x2c>)
 8000c4c:	b910      	cbnz	r0, 8000c54 <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
}
 8000c52:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1fb      	bne.n	8000c52 <_ZN20STM32TouchController4initEv+0x16>
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <_ZN20STM32TouchController4initEv+0x30>)
 8000c5c:	216a      	movs	r1, #106	; 0x6a
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <_ZN20STM32TouchController4initEv+0x34>)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <_ZN20STM32TouchController4initEv+0x38>)
 8000c62:	f024 fa61 	bl	8025128 <__assert_func>
 8000c66:	bf00      	nop
 8000c68:	20009772 	.word	0x20009772
 8000c6c:	08026358 	.word	0x08026358
 8000c70:	0802636b 	.word	0x0802636b
 8000c74:	08026395 	.word	0x08026395

08000c78 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 8000c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c7c:	4a35      	ldr	r2, [pc, #212]	; (8000d54 <BSP_TS_GetState+0xdc>)
{
 8000c7e:	4607      	mov	r7, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c80:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8000d64 <BSP_TS_GetState+0xec>
{
 8000c84:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c86:	7810      	ldrb	r0, [r2, #0]
 8000c88:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000c8c:	4798      	blx	r3
 8000c8e:	7038      	strb	r0, [r7, #0]
    if (TS_State->touchDetected)
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d05a      	beq.n	8000d4a <BSP_TS_GetState+0xd2>
 8000c94:	4e30      	ldr	r6, [pc, #192]	; (8000d58 <BSP_TS_GetState+0xe0>)
 8000c96:	f107 0902 	add.w	r9, r7, #2
 8000c9a:	4d30      	ldr	r5, [pc, #192]	; (8000d5c <BSP_TS_GetState+0xe4>)
 8000c9c:	f10d 0b0c 	add.w	fp, sp, #12
 8000ca0:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 8000ca2:	f04f 0800 	mov.w	r8, #0
 8000ca6:	783b      	ldrb	r3, [r7, #0]
 8000ca8:	4543      	cmp	r3, r8
 8000caa:	d94e      	bls.n	8000d4a <BSP_TS_GetState+0xd2>
        {
            /* Get each touch coordinates */
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000cac:	4829      	ldr	r0, [pc, #164]	; (8000d54 <BSP_TS_GetState+0xdc>)
 8000cae:	465a      	mov	r2, fp
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	f8da 3014 	ldr.w	r3, [sl, #20]
 8000cb6:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000cb8:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000cbc:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_XY)
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <BSP_TS_GetState+0xe8>)
 8000cc0:	46b4      	mov	ip, r6
 8000cc2:	46ae      	mov	lr, r5
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3604      	adds	r6, #4
 8000cc8:	3504      	adds	r5, #4
 8000cca:	0719      	lsls	r1, r3, #28
            {
                tmp = Raw_x[index];
 8000ccc:	bf41      	itttt	mi
 8000cce:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000cd0:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 8000cd4:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 8000cd8:	8021      	strhmi	r1, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_X)
 8000cda:	079a      	lsls	r2, r3, #30
            {
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000cdc:	bf41      	itttt	mi
 8000cde:	8822      	ldrhmi	r2, [r4, #0]
 8000ce0:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 8000ce4:	3203      	addmi	r2, #3
 8000ce6:	8022      	strhmi	r2, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_Y)
 8000ce8:	075b      	lsls	r3, r3, #29
            {
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
            }

            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000cea:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000cee:	bf48      	it	mi
 8000cf0:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000cf4:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000cf8:	bf42      	ittt	mi
 8000cfa:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 8000cfe:	3301      	addmi	r3, #1
 8000d00:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000d04:	b293      	uxth	r3, r2
 8000d06:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d08:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000d0c:	bf8c      	ite	hi
 8000d0e:	1ac3      	subhi	r3, r0, r3
 8000d10:	1a1b      	subls	r3, r3, r0
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d16:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4299      	cmp	r1, r3

            if ((xDiff + yDiff) > 5)
 8000d1e:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d20:	bf8c      	ite	hi
 8000d22:	1a8a      	subhi	r2, r1, r2
 8000d24:	1a52      	subls	r2, r2, r1
 8000d26:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000d28:	441a      	add	r2, r3
 8000d2a:	2a05      	cmp	r2, #5
            {
                _x[index] = Raw_x[index];
 8000d2c:	bfc8      	it	gt
 8000d2e:	f846 0c04 	strgt.w	r0, [r6, #-4]
                _y[index] = Raw_y[index];
            }


            TS_State->touchX[index] = _x[index];
 8000d32:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000d36:	bfc8      	it	gt
 8000d38:	f845 1c04 	strgt.w	r1, [r5, #-4]
            TS_State->touchX[index] = _x[index];
 8000d3c:	f829 3b02 	strh.w	r3, [r9], #2
            TS_State->touchY[index] = _y[index];
 8000d40:	f8de 3000 	ldr.w	r3, [lr]
 8000d44:	f8a9 3002 	strh.w	r3, [r9, #2]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000d48:	e7ad      	b.n	8000ca6 <BSP_TS_GetState+0x2e>
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	b005      	add	sp, #20
 8000d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d52:	bf00      	nop
 8000d54:	20009770 	.word	0x20009770
 8000d58:	20009774 	.word	0x20009774
 8000d5c:	2000977c 	.word	0x2000977c
 8000d60:	20009771 	.word	0x20009771
 8000d64:	20000038 	.word	0x20000038

08000d68 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000d6c:	460e      	mov	r6, r1
 8000d6e:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000d70:	781c      	ldrb	r4, [r3, #0]
 8000d72:	b15c      	cbz	r4, 8000d8c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
        BSP_TS_GetState(&state);
 8000d74:	a801      	add	r0, sp, #4
 8000d76:	f7ff ff7f 	bl	8000c78 <BSP_TS_GetState>
        if (state.touchDetected)
 8000d7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d7e:	b143      	cbz	r3, 8000d92 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
            x = state.touchX[0];
 8000d80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d84:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000d86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000d8a:	602b      	str	r3, [r5, #0]
}
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	b004      	add	sp, #16
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8000d92:	461c      	mov	r4, r3
 8000d94:	e7fa      	b.n	8000d8c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 8000d96:	bf00      	nop
 8000d98:	20009772 	.word	0x20009772

08000d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000d9c:	2803      	cmp	r0, #3
 8000d9e:	d823      	bhi.n	8000de8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000da0:	e8df f000 	tbb	[pc, r0]
 8000da4:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000db4:	480e      	ldr	r0, [pc, #56]	; (8000df0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000db6:	f007 bc45 	b.w	8008644 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	0952      	lsrs	r2, r2, #5
 8000dc6:	e7f5      	b.n	8000db4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	0952      	lsrs	r2, r2, #5
 8000dd6:	e7ee      	b.n	8000db6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	0952      	lsrs	r2, r2, #5
 8000de6:	e7e6      	b.n	8000db6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20009784 	.word	0x20009784
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40022400 	.word	0x40022400
 8000df8:	40021400 	.word	0x40021400

08000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000dfc:	2803      	cmp	r0, #3
 8000dfe:	d823      	bhi.n	8000e48 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000e00:	e8df f000 	tbb	[pc, r0]
 8000e04:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	3a00      	subs	r2, #0
 8000e10:	bf18      	it	ne
 8000e12:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000e14:	480e      	ldr	r0, [pc, #56]	; (8000e50 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000e16:	f007 bc15 	b.w	8008644 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	3a00      	subs	r2, #0
 8000e22:	bf18      	it	ne
 8000e24:	2201      	movne	r2, #1
 8000e26:	e7f5      	b.n	8000e14 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	3a00      	subs	r2, #0
 8000e32:	bf18      	it	ne
 8000e34:	2201      	movne	r2, #1
 8000e36:	e7ee      	b.n	8000e16 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	3a00      	subs	r2, #0
 8000e42:	bf18      	it	ne
 8000e44:	2201      	movne	r2, #1
 8000e46:	e7e6      	b.n	8000e16 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20009784 	.word	0x20009784
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40022400 	.word	0x40022400
 8000e58:	40021400 	.word	0x40021400

08000e5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000e5c:	2803      	cmp	r0, #3
 8000e5e:	d80f      	bhi.n	8000e80 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000e60:	e8df f000 	tbb	[pc, r0]
 8000e64:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000e68:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000e6c:	f007 bbef 	b.w	800864e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	e7fa      	b.n	8000e6a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000e74:	2102      	movs	r1, #2
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000e78:	e7f8      	b.n	8000e6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000e7e:	e7f5      	b.n	8000e6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40022400 	.word	0x40022400
 8000e8c:	40021400 	.word	0x40021400

08000e90 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000e90:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000e92:	2803      	cmp	r0, #3
 8000e94:	d813      	bhi.n	8000ebe <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000e96:	e8df f000 	tbb	[pc, r0]
 8000e9a:	0a02      	.short	0x0a02
 8000e9c:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000e9e:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000ea2:	f007 fbc9 	bl	8008638 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000ea6:	1e43      	subs	r3, r0, #1
 8000ea8:	4258      	negs	r0, r3
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	e7f6      	b.n	8000ea0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000eb6:	e7f4      	b.n	8000ea2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000eb8:	2140      	movs	r1, #64	; 0x40
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000ebc:	e7f1      	b.n	8000ea2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	e7f1      	b.n	8000ea6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000ec2:	bf00      	nop
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40022400 	.word	0x40022400
 8000ecc:	40021400 	.word	0x40021400

08000ed0 <_ZN8touchgfx4GPIO4initEv>:
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	4d08      	ldr	r5, [pc, #32]	; (8000ef4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000ed4:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000ed6:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000ed8:	b2e0      	uxtb	r0, r4
 8000eda:	f7ff ffd9 	bl	8000e90 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000ede:	b118      	cbz	r0, 8000ee8 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000ee4:	bf18      	it	ne
 8000ee6:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000ee8:	3401      	adds	r4, #1
 8000eea:	3504      	adds	r5, #4
 8000eec:	2c05      	cmp	r4, #5
 8000eee:	d1f3      	bne.n	8000ed8 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20009784 	.word	0x20009784

08000ef8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000ef8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000efa:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000efe:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000f02:	4770      	bx	lr

08000f04 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000f04:	2000      	movs	r0, #0
 8000f06:	4770      	bx	lr

08000f08 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000f08:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000f0a:	3900      	subs	r1, #0
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000f0e:	bf18      	it	ne
 8000f10:	2101      	movne	r1, #1
 8000f12:	7019      	strb	r1, [r3, #0]
    }
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20027e97 	.word	0x20027e97

08000f1c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000f22:	b10b      	cbz	r3, 8000f28 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000f24:	4608      	mov	r0, r1
 8000f26:	4718      	bx	r3
        }
    }
 8000f28:	4770      	bx	lr

08000f2a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000f2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f2e:	4770      	bx	lr

08000f30 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000f30:	6840      	ldr	r0, [r0, #4]
 8000f32:	6803      	ldr	r3, [r0, #0]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4718      	bx	r3

08000f38 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000f38:	4b01      	ldr	r3, [pc, #4]	; (8000f40 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20009794 	.word	0x20009794

08000f44 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000f44:	4770      	bx	lr
	...

08000f48 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000f48:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	4c10      	ldr	r4, [pc, #64]	; (8000f90 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000f4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f52:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f56:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000f5a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f5e:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f62:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f66:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000f68:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f6c:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000f6e:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f72:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000f74:	f8c4 7274 	str.w	r7, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8000f78:	d2f9      	bcs.n	8000f6e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000f7a:	3b20      	subs	r3, #32
 8000f7c:	f113 0f20 	cmn.w	r3, #32
 8000f80:	d1f2      	bne.n	8000f68 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000f82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f86:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000f8a:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000f8c:	f001 badc 	b.w	8002548 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000f94:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8000f96:	f001 fa91 	bl	80024bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8000fa0:	bd08      	pop	{r3, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000fac:	f001 fbe0 	bl	8002770 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000fb0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8000fb4:	b113      	cbz	r3, 8000fbc <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000fb6:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
    }
}
 8000fbc:	bd10      	pop	{r4, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000014 	.word	0x20000014

08000fc4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000fc4:	f001 ba83 	b.w	80024ce <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000fc8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000fcc:	f00e fe1c 	bl	800fc08 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8000fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000fdc:	4718      	bx	r3

08000fde <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000fde:	f00e b87b 	b.w	800f0d8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000fe2 <_ZN11TouchGFXHALD0Ev>:
 8000fe2:	b510      	push	{r4, lr}
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	217c      	movs	r1, #124	; 0x7c
 8000fe8:	f023 fec1 	bl	8024d6e <_ZdlPvj>
 8000fec:	4620      	mov	r0, r4
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000ff6:	f00e b8ab 	b.w	800f150 <_ZN8touchgfx3HAL10beginFrameEv>
 8000ffa:	bf00      	nop
 8000ffc:	20000014 	.word	0x20000014

08001000 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4604      	mov	r4, r0
    GPIO::init();
 8001004:	f7ff ff64 	bl	8000ed0 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001008:	4d08      	ldr	r5, [pc, #32]	; (800102c <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 800100a:	4620      	mov	r0, r4
 800100c:	f001 fa76 	bl	80024fc <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001010:	2300      	movs	r3, #0
    instrumentation.init();
 8001012:	4628      	mov	r0, r5
 8001014:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001018:	f7ff fd1a 	bl	8000a50 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 800101c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800101e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001020:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
        buttonController = btnCtrl;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001026:	6163      	str	r3, [r4, #20]
}
 8001028:	bd38      	pop	{r3, r4, r5, pc}
 800102a:	bf00      	nop
 800102c:	2000979c 	.word	0x2000979c
 8001030:	200097a8 	.word	0x200097a8

08001034 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001034:	6803      	ldr	r3, [r0, #0]
{
 8001036:	4604      	mov	r4, r0
 8001038:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 800103a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800103e:	4798      	blx	r3
    enableInterrupts();
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	4620      	mov	r0, r4
 8001044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001046:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001048:	f000 fefa 	bl	8001e40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	4620      	mov	r0, r4
 8001050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001052:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001054:	2100      	movs	r1, #0
 8001056:	2329      	movs	r3, #41	; 0x29
 8001058:	2215      	movs	r2, #21
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800105c:	9100      	str	r1, [sp, #0]
 800105e:	f007 f8de 	bl	800821e <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001062:	f000 feed 	bl	8001e40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	4620      	mov	r0, r4
 800106a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800106c:	4798      	blx	r3
    for (;;)
 800106e:	e7f8      	b.n	8001062 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001070:	20012444 	.word	0x20012444

08001074 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8001074:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8001076:	f001 fa19 	bl	80024ac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2107      	movs	r1, #7
 800107e:	205a      	movs	r0, #90	; 0x5a
 8001080:	f006 f9d4 	bl	800742c <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2107      	movs	r1, #7
 8001088:	2062      	movs	r0, #98	; 0x62
}
 800108a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800108e:	f006 b9cd 	b.w	800742c <HAL_NVIC_SetPriority>

08001092 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001092:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001096:	b11b      	cbz	r3, 80010a0 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001098:	6840      	ldr	r0, [r0, #4]
 800109a:	6803      	ldr	r3, [r0, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4718      	bx	r3
    }
 80010a0:	4618      	mov	r0, r3
 80010a2:	4770      	bx	lr

080010a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80010a4:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80010aa:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80010ac:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 80010b0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80010b2:	428c      	cmp	r4, r1
 80010b4:	d009      	beq.n	80010ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80010b6:	b93a      	cbnz	r2, 80010c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80010b8:	490a      	ldr	r1, [pc, #40]	; (80010e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80010bc:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010be:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80010c0:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80010c2:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010c4:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80010c6:	701a      	strb	r2, [r3, #0]
        }
    }
 80010c8:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80010ca:	2a00      	cmp	r2, #0
 80010cc:	d0fc      	beq.n	80010c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80010d0:	4904      	ldr	r1, [pc, #16]	; (80010e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010d2:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80010d4:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010d6:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80010d8:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80010da:	2200      	movs	r2, #0
 80010dc:	e7f3      	b.n	80010c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80010de:	bf00      	nop
 80010e0:	20027e90 	.word	0x20027e90
 80010e4:	20027e8e 	.word	0x20027e8e
 80010e8:	20027e8c 	.word	0x20027e8c

080010ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80010ec:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	428b      	cmp	r3, r1
 80010f4:	d803      	bhi.n	80010fe <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d905      	bls.n	800110a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001100:	219e      	movs	r1, #158	; 0x9e
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001106:	f024 f80f 	bl	8025128 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 800110c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001110:	801a      	strh	r2, [r3, #0]
    }
 8001112:	bd08      	pop	{r3, pc}
 8001114:	20027e8c 	.word	0x20027e8c
 8001118:	20027e8e 	.word	0x20027e8e
 800111c:	080263f8 	.word	0x080263f8
 8001120:	0802645b 	.word	0x0802645b
 8001124:	0802649e 	.word	0x0802649e
 8001128:	20027e92 	.word	0x20027e92
 800112c:	20027e94 	.word	0x20027e94

08001130 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8001130:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8001132:	f001 fb4f 	bl	80027d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 8001138:	2204      	movs	r2, #4
 800113a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 800113e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001142:	f3bf 8f6f 	isb	sy
}
 8001146:	bd08      	pop	{r3, pc}
 8001148:	e000e100 	.word	0xe000e100

0800114c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	460d      	mov	r5, r1
 8001150:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001154:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001156:	b935      	cbnz	r5, 8001166 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800115a:	f240 21d2 	movw	r1, #722	; 0x2d2
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001160:	480a      	ldr	r0, [pc, #40]	; (800118c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001162:	f023 ffe1 	bl	8025128 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001166:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800116a:	3a00      	subs	r2, #0
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800116e:	bf18      	it	ne
 8001170:	2201      	movne	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001174:	6803      	ldr	r3, [r0, #0]
}
 8001176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800117a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800117e:	4718      	bx	r3
 8001180:	20009794 	.word	0x20009794
 8001184:	080264e3 	.word	0x080264e3
 8001188:	0802651b 	.word	0x0802651b
 800118c:	0802649e 	.word	0x0802649e
 8001190:	20027e96 	.word	0x20027e96

08001194 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001194:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001198:	60c3      	str	r3, [r0, #12]
 800119a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119e:	2300      	movs	r3, #0
 80011a0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 80011a4:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80011a6:	8503      	strh	r3, [r0, #40]	; 0x28
 80011a8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80011ac:	62c3      	str	r3, [r0, #44]	; 0x2c
 80011ae:	8603      	strh	r3, [r0, #48]	; 0x30
 80011b0:	6603      	str	r3, [r0, #96]	; 0x60
 80011b2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 80011b6:	6703      	str	r3, [r0, #112]	; 0x70
 80011b8:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 80011bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80011c0:	b570      	push	{r4, r5, r6, lr}
 80011c2:	6742      	str	r2, [r0, #116]	; 0x74
 80011c4:	2201      	movs	r2, #1
                           height)
 80011c6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80011ca:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80011ce:	3520      	adds	r5, #32
 80011d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
              inProgress(false)
 80011d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80011d8:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80011dc:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 80011e0:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80011e4:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80011e8:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 80011ec:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80011f0:	b2ad      	uxth	r5, r5
        instance = this;
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80011f4:	42b5      	cmp	r5, r6
        instance = this;
 80011f6:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 80011fa:	8015      	strh	r5, [r2, #0]
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 80011fe:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001200:	bf28      	it	cs
 8001202:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001206:	bf38      	it	cc
 8001208:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800120a:	8016      	strh	r6, [r2, #0]
 800120c:	4a09      	ldr	r2, [pc, #36]	; (8001234 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800120e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001212:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001214:	4a08      	ldr	r2, [pc, #32]	; (8001238 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001216:	7013      	strb	r3, [r2, #0]
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 800121a:	6003      	str	r3, [r0, #0]
}
 800121c:	bd70      	pop	{r4, r5, r6, pc}
 800121e:	bf00      	nop
 8001220:	01000001 	.word	0x01000001
 8001224:	20027e98 	.word	0x20027e98
 8001228:	20027e8c 	.word	0x20027e8c
 800122c:	20027e92 	.word	0x20027e92
 8001230:	20027e8e 	.word	0x20027e8e
 8001234:	20027e94 	.word	0x20027e94
 8001238:	20027e90 	.word	0x20027e90
 800123c:	08026574 	.word	0x08026574

08001240 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8001240:	f005 bc26 	b.w	8006a90 <HAL_Delay>

08001244 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8001244:	2801      	cmp	r0, #1
    {
 8001246:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 8001248:	d80a      	bhi.n	8001260 <DSI_IO_WriteCmd+0x1c>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 800124a:	784b      	ldrb	r3, [r1, #1]
 800124c:	2215      	movs	r2, #21
 800124e:	4809      	ldr	r0, [pc, #36]	; (8001274 <DSI_IO_WriteCmd+0x30>)
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	780b      	ldrb	r3, [r1, #0]
 8001254:	2100      	movs	r1, #0
 8001256:	f006 ffe2 	bl	800821e <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 800125a:	b003      	add	sp, #12
 800125c:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8001260:	9101      	str	r1, [sp, #4]
 8001262:	2239      	movs	r2, #57	; 0x39
 8001264:	5c0b      	ldrb	r3, [r1, r0]
 8001266:	2100      	movs	r1, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	4603      	mov	r3, r0
 800126c:	4801      	ldr	r0, [pc, #4]	; (8001274 <DSI_IO_WriteCmd+0x30>)
 800126e:	f006 ffe7 	bl	8008240 <HAL_DSI_LongWrite>
    }
 8001272:	e7f2      	b.n	800125a <DSI_IO_WriteCmd+0x16>
 8001274:	20012444 	.word	0x20012444

08001278 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001278:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 800127a:	2302      	movs	r3, #2
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 800127e:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8001282:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001284:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8001286:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001288:	4620      	mov	r0, r4
 800128a:	9201      	str	r2, [sp, #4]
 800128c:	2244      	movs	r2, #68	; 0x44
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	2239      	movs	r2, #57	; 0x39
 8001292:	f006 ffd5 	bl	8008240 <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001296:	2100      	movs	r1, #0
 8001298:	2335      	movs	r3, #53	; 0x35
 800129a:	462a      	mov	r2, r5
 800129c:	4620      	mov	r0, r4
 800129e:	9100      	str	r1, [sp, #0]
 80012a0:	f006 ffbd 	bl	800821e <HAL_DSI_ShortWrite>
    }
 80012a4:	b003      	add	sp, #12
 80012a6:	bd30      	pop	{r4, r5, pc}
 80012a8:	200097ac 	.word	0x200097ac
 80012ac:	20012444 	.word	0x20012444

080012b0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80012b0:	b507      	push	{r0, r1, r2, lr}
 80012b2:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 80012b4:	f7ff ffe0 	bl	8001278 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 80012ba:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80012bc:	9801      	ldr	r0, [sp, #4]
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80012ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80012d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012da:	f042 0202 	orr.w	r2, r2, #2
 80012de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80012e8:	f043 0303 	orr.w	r3, r3, #3
 80012ec:	6353      	str	r3, [r2, #52]	; 0x34
}
 80012ee:	b003      	add	sp, #12
 80012f0:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80012f4:	f001 b8ea 	b.w	80024cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 80012f8:	20012444 	.word	0x20012444
 80012fc:	20012504 	.word	0x20012504

08001300 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <LCD_SetUpdateRegion+0x20>)
    {
 8001302:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001304:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001308:	232a      	movs	r3, #42	; 0x2a
 800130a:	2239      	movs	r2, #57	; 0x39
 800130c:	2100      	movs	r1, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2304      	movs	r3, #4
 8001312:	9001      	str	r0, [sp, #4]
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <LCD_SetUpdateRegion+0x24>)
 8001316:	f006 ff93 	bl	8008240 <HAL_DSI_LongWrite>
    }
 800131a:	b003      	add	sp, #12
 800131c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001320:	20000004 	.word	0x20000004
 8001324:	20012444 	.word	0x20012444

08001328 <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001328:	b570      	push	{r4, r5, r6, lr}
        return instance;
 800132a:	4d15      	ldr	r5, [pc, #84]	; (8001380 <HAL_DSI_TearingEffectCallback+0x58>)
 800132c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fd34 	bl	8000d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001334:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001336:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800133a:	3301      	adds	r3, #1
 800133c:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001340:	f000 fd72 	bl	8001e28 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 8001346:	6828      	ldr	r0, [r5, #0]
 8001348:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 800134a:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 800134c:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8001350:	b123      	cbz	r3, 800135c <HAL_DSI_TearingEffectCallback+0x34>
 8001352:	4d0d      	ldr	r5, [pc, #52]	; (8001388 <HAL_DSI_TearingEffectCallback+0x60>)
 8001354:	782b      	ldrb	r3, [r5, #0]
 8001356:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800135a:	b123      	cbz	r3, 8001366 <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 800135c:	2000      	movs	r0, #0
        }
    }
 800135e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001362:	f7ff bd4b 	b.w	8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 8001366:	f00e fc4f 	bl	800fc08 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 800136c:	4630      	mov	r0, r6
            updateRegion = 0;
 800136e:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8001370:	f7ff ffc6 	bl	8001300 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8001374:	4620      	mov	r0, r4
 8001376:	f006 ff42 	bl	80081fe <HAL_DSI_Refresh>
            displayRefreshing = true;
 800137a:	2301      	movs	r3, #1
 800137c:	702b      	strb	r3, [r5, #0]
    }
 800137e:	bd70      	pop	{r4, r5, r6, pc}
 8001380:	20027e98 	.word	0x20027e98
 8001384:	20000014 	.word	0x20000014
 8001388:	200097ae 	.word	0x200097ae
 800138c:	20009798 	.word	0x20009798

08001390 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	3201      	adds	r2, #1
    {
 8001396:	b570      	push	{r4, r5, r6, lr}
        if (updateRegion < 4)
 8001398:	2a03      	cmp	r2, #3
        updateRegion++;
 800139a:	601a      	str	r2, [r3, #0]
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_DSI_EndOfRefreshCallback+0xd4>)
    {
 800139e:	4605      	mov	r5, r0
 80013a0:	4c31      	ldr	r4, [pc, #196]	; (8001468 <HAL_DSI_EndOfRefreshCallback+0xd8>)
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_DSI_EndOfRefreshCallback+0xdc>)
        if (updateRegion < 4)
 80013a6:	dc2e      	bgt.n	8001406 <HAL_DSI_EndOfRefreshCallback+0x76>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80013a8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80013ac:	f020 0008 	bic.w	r0, r0, #8
 80013b0:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80013b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013b8:	fb00 1102 	mla	r1, r0, r2, r1
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
            LCD_SetUpdateRegion(updateRegion);
 80013bc:	4610      	mov	r0, r2
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80013be:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
                ADJUSTED_WIDTH += 32;
 80013c2:	bf0c      	ite	eq
 80013c4:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 80013c6:	23c8      	movne	r3, #200	; 0xc8
            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 80013c8:	4928      	ldr	r1, [pc, #160]	; (800146c <HAL_DSI_EndOfRefreshCallback+0xdc>)
 80013ca:	3302      	adds	r3, #2
 80013cc:	041b      	lsls	r3, r3, #16
 80013ce:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 80013d2:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 80013d6:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 80013d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80013dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 80013e2:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 80013ea:	f7ff ff89 	bl	8001300 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_DSI_EndOfRefreshCallback+0xd8>)
            HAL_DSI_Refresh(hdsi);
 80013f0:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 80013f2:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80013f6:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 80013fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 80013fe:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            HAL_DSI_Refresh(hdsi);
 8001402:	f006 befc 	b.w	80081fe <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001406:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
            LCD_SetUpdateRegion(0);
 800140a:	2000      	movs	r0, #0
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800140c:	f022 0208 	bic.w	r2, r2, #8
 8001410:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001414:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_DSI_EndOfRefreshCallback+0xe8>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 8001416:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800141a:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 800141c:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8001420:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_DSI_EndOfRefreshCallback+0xec>)
 8001424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 800142a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800142e:	2201      	movs	r2, #1
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 8001432:	f7ff ff65 	bl	8001300 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 8001436:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 800143a:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001444:	f7ff fcda 	bl	8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_DSI_EndOfRefreshCallback+0xf0>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
        return instance;
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_DSI_EndOfRefreshCallback+0xf4>)
 8001450:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 8001452:	b120      	cbz	r0, 800145e <HAL_DSI_EndOfRefreshCallback+0xce>
        allowDMATransfers();
 8001454:	6803      	ldr	r3, [r0, #0]
    }
 8001456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4718      	bx	r3
 800145e:	bd70      	pop	{r4, r5, r6, pc}
 8001460:	20009798 	.word	0x20009798
 8001464:	20009794 	.word	0x20009794
 8001468:	40016c00 	.word	0x40016c00
 800146c:	40016800 	.word	0x40016800
 8001470:	00ca01e3 	.word	0x00ca01e3
 8001474:	06800193 	.word	0x06800193
 8001478:	00ca01e2 	.word	0x00ca01e2
 800147c:	00ca0003 	.word	0x00ca0003
 8001480:	200097ae 	.word	0x200097ae
 8001484:	20027e98 	.word	0x20027e98

08001488 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001488:	4601      	mov	r1, r0
 800148a:	b508      	push	{r3, lr}
        return instance;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <IdleTaskHook+0x14>)
 800148e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001490:	b101      	cbz	r1, 8001494 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001492:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001494:	f00e fbd2 	bl	800fc3c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001498:	2001      	movs	r0, #1
 800149a:	bd08      	pop	{r3, pc}
 800149c:	20027e98 	.word	0x20027e98

080014a0 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <_GLOBAL__sub_I_displayRefreshing+0x18>)
 80014a2:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 80014b0:	6003      	str	r3, [r0, #0]
        init();
 80014b2:	f7ff bb0b 	b.w	8000acc <_ZN8touchgfx10KeySampler4initEv>
 80014b6:	bf00      	nop
 80014b8:	2000979c 	.word	0x2000979c
 80014bc:	200097a8 	.word	0x200097a8
 80014c0:	0802631c 	.word	0x0802631c
 80014c4:	08026344 	.word	0x08026344

080014c8 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 80014c8:	6940      	ldr	r0, [r0, #20]
 80014ca:	4770      	bx	lr

080014cc <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 80014cc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80014d0:	4770      	bx	lr

080014d2 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80014d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80014d4:	b923      	cbnz	r3, 80014e0 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80014d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80014d8:	3800      	subs	r0, #0
 80014da:	bf18      	it	ne
 80014dc:	2001      	movne	r0, #1
 80014de:	4770      	bx	lr
 80014e0:	2001      	movs	r0, #1
}
 80014e2:	4770      	bx	lr

080014e4 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80014e4:	6880      	ldr	r0, [r0, #8]
 80014e6:	4770      	bx	lr

080014e8 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80014e8:	4770      	bx	lr

080014ea <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80014ea:	3004      	adds	r0, #4
{
 80014ec:	b510      	push	{r4, lr}
 80014ee:	460c      	mov	r4, r1
    *data = videoInfo;
 80014f0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80014f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80014f6:	bd10      	pop	{r4, pc}

080014f8 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80014f8:	4770      	bx	lr
	...

080014fc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80014fc:	b508      	push	{r3, lr}
    assert(0);
 80014fe:	4a03      	ldr	r2, [pc, #12]	; (800150c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001500:	f240 11d1 	movw	r1, #465	; 0x1d1
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8001508:	f023 fe0e 	bl	8025128 <__assert_func>
 800150c:	08026644 	.word	0x08026644
 8001510:	08028aa7 	.word	0x08028aa7
 8001514:	0802669f 	.word	0x0802669f

08001518 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8001518:	b510      	push	{r4, lr}
 800151a:	4604      	mov	r4, r0
 800151c:	2144      	movs	r1, #68	; 0x44
 800151e:	f023 fc26 	bl	8024d6e <_ZdlPvj>
 8001522:	4620      	mov	r0, r4
 8001524:	bd10      	pop	{r4, pc}
	...

08001528 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001528:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800152a:	2500      	movs	r5, #0
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800152e:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001530:	6003      	str	r3, [r0, #0]
 8001532:	63c5      	str	r5, [r0, #60]	; 0x3c
 8001534:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
 8001538:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800153c:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8001540:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 8001544:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
 8001548:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
 800154c:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 8001550:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 8001554:	f001 fd36 	bl	8002fc4 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 8001558:	462a      	mov	r2, r5
 800155a:	4629      	mov	r1, r5
 800155c:	2001      	movs	r0, #1
 800155e:	f00a fa27 	bl	800b9b0 <osSemaphoreNew>
 8001562:	4b03      	ldr	r3, [pc, #12]	; (8001570 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 8001564:	6018      	str	r0, [r3, #0]
}
 8001566:	4620      	mov	r0, r4
 8001568:	bd38      	pop	{r3, r4, r5, pc}
 800156a:	bf00      	nop
 800156c:	08026924 	.word	0x08026924
 8001570:	200097f4 	.word	0x200097f4

08001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8001574:	b420      	push	{r5}
 8001576:	460d      	mov	r5, r1
 8001578:	4611      	mov	r1, r2
 800157a:	461a      	mov	r2, r3
    if (reader != 0)
 800157c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800157e:	b13b      	cbz	r3, 8001590 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001580:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001582:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001584:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 8001586:	4428      	add	r0, r5
}
 8001588:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 800158c:	f024 ba86 	b.w	8025a9c <strncmp>
        src = (const char*)movieData + offset;
 8001590:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001592:	e7f8      	b.n	8001586 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08001594 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8001594:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8001596:	b510      	push	{r4, lr}
    if (reader != 0)
 8001598:	b173      	cbz	r3, 80015b8 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800159a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 800159c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800159e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80015a0:	1853      	adds	r3, r2, r1
 80015a2:	5c52      	ldrb	r2, [r2, r1]
 80015a4:	7898      	ldrb	r0, [r3, #2]
 80015a6:	785c      	ldrb	r4, [r3, #1]
 80015a8:	0400      	lsls	r0, r0, #16
 80015aa:	78db      	ldrb	r3, [r3, #3]
 80015ac:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80015b0:	4310      	orrs	r0, r2
 80015b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80015b6:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80015b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015ba:	5858      	ldr	r0, [r3, r1]
 80015bc:	e7fb      	b.n	80015b6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x22>

080015be <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80015be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80015c0:	b143      	cbz	r3, 80015d4 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80015c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80015c4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 80015c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015c8:	185a      	adds	r2, r3, r1
 80015ca:	5c58      	ldrb	r0, [r3, r1]
 80015cc:	7852      	ldrb	r2, [r2, #1]
 80015ce:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80015d2:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80015d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015d6:	5a58      	ldrh	r0, [r3, r1]
}
 80015d8:	4770      	bx	lr
	...

080015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	4604      	mov	r4, r0
    if (reader != 0)
 80015e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 80015e2:	460d      	mov	r5, r1
 80015e4:	4616      	mov	r6, r2
    if (reader != 0)
 80015e6:	b1d8      	cbz	r0, 8001620 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80015e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d208      	bcs.n	8001600 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80015ee:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80015f2:	21ad      	movs	r1, #173	; 0xad
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80015f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            assert(!"Buffer to small");
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80015fc:	f023 fd94 	bl	8025128 <__assert_func>
        reader->seek(offset);
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8001606:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001608:	4632      	mov	r2, r6
 800160a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160c:	6803      	ldr	r3, [r0, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4798      	blx	r3
 8001612:	b910      	cbnz	r0, 800161a <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8001614:	230d      	movs	r3, #13
 8001616:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
 800161a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
 800161c:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800161e:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8001620:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001622:	4408      	add	r0, r1
 8001624:	e7fb      	b.n	800161e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 8001626:	bf00      	nop
 8001628:	08026705 	.word	0x08026705
 800162c:	0802669f 	.word	0x0802669f
 8001630:	080266f2 	.word	0x080266f2

08001634 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8001634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001638:	6943      	ldr	r3, [r0, #20]
{
 800163a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800163c:	b92b      	cbnz	r3, 800164a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8001640:	21f3      	movs	r1, #243	; 0xf3
 8001642:	4a22      	ldr	r2, [pc, #136]	; (80016cc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8001644:	4822      	ldr	r0, [pc, #136]	; (80016d0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8001646:	f023 fd6f 	bl	8025128 <__assert_func>
    readData(currentMovieOffset, 8);
 800164a:	2208      	movs	r2, #8
 800164c:	6981      	ldr	r1, [r0, #24]
 800164e:	f7ff ffc5 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001652:	69a1      	ldr	r1, [r4, #24]
 8001654:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001656:	f243 0730 	movw	r7, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800165a:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800165c:	f246 3664 	movw	r6, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001660:	f7ff ff98 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001664:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8001666:	69a1      	ldr	r1, [r4, #24]
 8001668:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800166a:	440d      	add	r5, r1
 800166c:	f105 0208 	add.w	r2, r5, #8
 8001670:	429a      	cmp	r2, r3
 8001672:	d222      	bcs.n	80016ba <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
        frameNumber++;
 8001674:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001676:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8001678:	2208      	movs	r2, #8
 800167a:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800167c:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 8001680:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001682:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 8001684:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 8001686:	f7ff ffa9 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800168a:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800168e:	4620      	mov	r0, r4
 8001690:	4641      	mov	r1, r8
 8001692:	f7ff ff94 	bl	80015be <_ZN20HardwareMJPEGDecoder6getU16Em>
 8001696:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8001698:	f108 0104 	add.w	r1, r8, #4
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff ff79 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80016a2:	45b9      	cmp	r9, r7
        chunkSize = getU32(currentMovieOffset + 4);
 80016a4:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80016a6:	d1de      	bne.n	8001666 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80016a8:	f108 0102 	add.w	r1, r8, #2
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff ff86 	bl	80015be <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80016b2:	42b0      	cmp	r0, r6
 80016b4:	d1d7      	bne.n	8001666 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 80016b6:	2001      	movs	r0, #1
 80016b8:	e004      	b.n	80016c4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x90>
    frameNumber = 1;
 80016ba:	2301      	movs	r3, #1
    return false;
 80016bc:	2000      	movs	r0, #0
    frameNumber = 1;
 80016be:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 80016c0:	6a23      	ldr	r3, [r4, #32]
 80016c2:	61a3      	str	r3, [r4, #24]
}
 80016c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016c8:	08026747 	.word	0x08026747
 80016cc:	08026790 	.word	0x08026790
 80016d0:	0802669f 	.word	0x0802669f

080016d4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber==0)
 80016d4:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80016d6:	6803      	ldr	r3, [r0, #0]
 80016d8:	bf38      	it	cc
 80016da:	2101      	movcc	r1, #1
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80016de:	b570      	push	{r4, r5, r6, lr}
 80016e0:	460d      	mov	r5, r1
 80016e2:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80016e4:	4798      	blx	r3
 80016e6:	42a8      	cmp	r0, r5
 80016e8:	d204      	bcs.n	80016f4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	4620      	mov	r0, r4
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	4798      	blx	r3
 80016f2:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 80016f4:	1e6b      	subs	r3, r5, #1
 80016f6:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80016f8:	2210      	movs	r2, #16
 80016fa:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 80016fc:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001700:	f106 0108 	add.w	r1, r6, #8
 8001704:	f7ff ff6a 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001708:	f106 0110 	add.w	r1, r6, #16
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ff41 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001712:	6a23      	ldr	r3, [r4, #32]
 8001714:	3b04      	subs	r3, #4
 8001716:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8001718:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 800171c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001720 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
 8001720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8001724:	2100      	movs	r1, #0
{
 8001726:	4604      	mov	r4, r0
    readData(0, 72);
 8001728:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 800172a:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 800172c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    readData(0, 72);
 8001730:	f7ff ff54 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8001734:	69a7      	ldr	r7, [r4, #24]
 8001736:	2304      	movs	r3, #4
 8001738:	4a64      	ldr	r2, [pc, #400]	; (80018cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800173a:	4639      	mov	r1, r7
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff ff19 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001742:	b148      	cbz	r0, 8001758 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8001744:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8001746:	4a62      	ldr	r2, [pc, #392]	; (80018d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8001748:	f240 113b 	movw	r1, #315	; 0x13b
        lastError = AVI_ERROR_NOT_RIFF;
 800174c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"RIFF header not found");
 8001750:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
        assert(!"AVI header not found");
 8001752:	4861      	ldr	r0, [pc, #388]	; (80018d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8001754:	f023 fce8 	bl	8025128 <__assert_func>
    currentMovieOffset += 8;
 8001758:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800175c:	2304      	movs	r3, #4
 800175e:	4a5f      	ldr	r2, [pc, #380]	; (80018dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8001760:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8001762:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001764:	f7ff ff06 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001768:	b138      	cbz	r0, 800177a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800176a:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800176c:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 800176e:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI header not found");
 8001776:	4b5a      	ldr	r3, [pc, #360]	; (80018e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8001778:	e7eb      	b.n	8001752 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800177a:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800177e:	2304      	movs	r3, #4
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8001782:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8001784:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8001786:	f7ff fef5 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800178a:	4606      	mov	r6, r0
 800178c:	b138      	cbz	r0, 800179e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800178e:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8001790:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8001792:	f44f 71a5 	mov.w	r1, #330	; 0x14a
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001796:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI LIST not found");
 800179a:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 800179c:	e7d9      	b.n	8001752 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800179e:	f107 0110 	add.w	r1, r7, #16
 80017a2:	4620      	mov	r0, r4
 80017a4:	f7ff fef6 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80017a8:	4605      	mov	r5, r0
 80017aa:	b920      	cbnz	r0, 80017b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80017ae:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80017b2:	4a47      	ldr	r2, [pc, #284]	; (80018d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80017b4:	e7cd      	b.n	8001752 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80017b6:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80017ba:	2304      	movs	r3, #4
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80017be:	4620      	mov	r0, r4
 80017c0:	4641      	mov	r1, r8
 80017c2:	f7ff fed7 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	d04b      	beq.n	8001862 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80017ca:	2306      	movs	r3, #6
 80017cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (compare(offset, "avih", 4))
 80017d0:	2304      	movs	r3, #4
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 80017d4:	f107 0118 	add.w	r1, r7, #24
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff fecb 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017de:	2800      	cmp	r0, #0
 80017e0:	d041      	beq.n	8001866 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80017e2:	2307      	movs	r3, #7
 80017e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80017e8:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80017ea:	4f43      	ldr	r7, [pc, #268]	; (80018f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
    readData(listOffset, 12);
 80017ec:	220c      	movs	r2, #12
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7ff fef3 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80017f6:	f105 0608 	add.w	r6, r5, #8
 80017fa:	2304      	movs	r3, #4
 80017fc:	463a      	mov	r2, r7
 80017fe:	4620      	mov	r0, r4
 8001800:	4631      	mov	r1, r6
 8001802:	f7ff feb7 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001806:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800180a:	2800      	cmp	r0, #0
 800180c:	d04a      	beq.n	80018a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d14a      	bne.n	80018a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x188>
 8001812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001814:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001816:	42ab      	cmp	r3, r5
 8001818:	d84a      	bhi.n	80018b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x190>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800181a:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800181e:	1d29      	adds	r1, r5, #4
 8001820:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8001822:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001824:	9101      	str	r1, [sp, #4]
 8001826:	f7ff feb5 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800182a:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset+4)+8;
 800182c:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800182e:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff feaf 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8001836:	4406      	add	r6, r0
    readData(listOffset, 4);
 8001838:	2204      	movs	r2, #4
 800183a:	4620      	mov	r0, r4
 800183c:	4631      	mov	r1, r6
 800183e:	f7ff fecd 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8001842:	2304      	movs	r3, #4
 8001844:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1dc>)
 8001846:	4631      	mov	r1, r6
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff fe93 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800184e:	2800      	cmp	r0, #0
 8001850:	d139      	bne.n	80018c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a6>
    frameNumber = 1; //next frame number is 1
 8001852:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8001854:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 8001856:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8001858:	69a3      	ldr	r3, [r4, #24]
 800185a:	6223      	str	r3, [r4, #32]
}
 800185c:	b002      	add	sp, #8
 800185e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8001862:	2601      	movs	r6, #1
 8001864:	e7b4      	b.n	80017d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8001866:	2e00      	cmp	r6, #0
 8001868:	d0be      	beq.n	80017e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800186a:	f107 0120 	add.w	r1, r7, #32
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff fe90 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8001878:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800187c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001880:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8001882:	4620      	mov	r0, r4
 8001884:	f7ff fe86 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8001888:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800188c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff fe80 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8001894:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8001898:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff fe7a 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80018a0:	6120      	str	r0, [r4, #16]
 80018a2:	e7a1      	b.n	80017e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0b8      	beq.n	800181a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfa>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80018a8:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80018aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return;
 80018ae:	e7d5      	b.n	800185c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13c>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fe6f 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80018b6:	3008      	adds	r0, #8
        readData(listOffset, 12);
 80018b8:	220c      	movs	r2, #12
        listOffset += listSize;
 80018ba:	4405      	add	r5, r0
        readData(listOffset, 12);
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7ff fe8c 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80018c4:	e797      	b.n	80017f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80018c6:	230b      	movs	r3, #11
 80018c8:	e7ef      	b.n	80018aa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18a>
 80018ca:	bf00      	nop
 80018cc:	080267c3 	.word	0x080267c3
 80018d0:	080267e1 	.word	0x080267e1
 80018d4:	080267c8 	.word	0x080267c8
 80018d8:	0802669f 	.word	0x0802669f
 80018dc:	0802680e 	.word	0x0802680e
 80018e0:	08026813 	.word	0x08026813
 80018e4:	0802682b 	.word	0x0802682b
 80018e8:	08026830 	.word	0x08026830
 80018ec:	08026846 	.word	0x08026846
 80018f0:	08026852 	.word	0x08026852
 80018f4:	08026857 	.word	0x08026857
 80018f8:	0802685c 	.word	0x0802685c
 80018fc:	08026861 	.word	0x08026861

08001900 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001900:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8001904:	2200      	movs	r2, #0
 8001906:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8001908:	f7ff bf0a 	b.w	8001720 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800190c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800190c:	b510      	push	{r4, lr}
    movieData = 0;
 800190e:	2300      	movs	r3, #0
{
 8001910:	4604      	mov	r4, r0
 8001912:	4608      	mov	r0, r1
    movieData = 0;
 8001914:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8001916:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8001918:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4798      	blx	r3
 800191e:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8001920:	4620      	mov	r0, r4
}
 8001922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8001926:	f7ff befb 	b.w	8001720 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

0800192c <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 800192c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    FrameBufferAddress = output;
 800192e:	4c12      	ldr	r4, [pc, #72]	; (8001978 <JPEG_Decode_DMA+0x4c>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001930:	f44f 75c0 	mov.w	r5, #384	; 0x180
    FrameBufferAddress = output;
 8001934:	6023      	str	r3, [r4, #0]
    Output_Is_Paused = 0;
 8001936:	2400      	movs	r4, #0
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <JPEG_Decode_DMA+0x50>)
 800193a:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <JPEG_Decode_DMA+0x54>)
 800193e:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <JPEG_Decode_DMA+0x58>)
 8001942:	601c      	str	r4, [r3, #0]
    JPEG_InputImageIndex = 0;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <JPEG_Decode_DMA+0x5c>)
 8001946:	601c      	str	r4, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <JPEG_Decode_DMA+0x60>)
 800194a:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <JPEG_Decode_DMA+0x64>)
 800194e:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001950:	4a10      	ldr	r2, [pc, #64]	; (8001994 <JPEG_Decode_DMA+0x68>)
    MCU_BlockIndex = 0;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <JPEG_Decode_DMA+0x6c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001954:	68d2      	ldr	r2, [r2, #12]
    MCU_BlockIndex = 0;
 8001956:	601c      	str	r4, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001958:	436a      	muls	r2, r5
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <JPEG_Decode_DMA+0x70>)
 800195c:	701c      	strb	r4, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 800195e:	609c      	str	r4, [r3, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001960:	731c      	strb	r4, [r3, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001962:	615c      	str	r4, [r3, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001964:	9200      	str	r2, [sp, #0]
 8001966:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f007 fd7a 	bl	8009464 <HAL_JPEG_Decode_DMA>

    return 0;
}
 8001970:	4620      	mov	r0, r4
 8001972:	b003      	add	sp, #12
 8001974:	bd30      	pop	{r4, r5, pc}
 8001976:	bf00      	nop
 8001978:	200097b0 	.word	0x200097b0
 800197c:	200097d8 	.word	0x200097d8
 8001980:	200097c0 	.word	0x200097c0
 8001984:	200097c4 	.word	0x200097c4
 8001988:	200097b8 	.word	0x200097b8
 800198c:	200097b4 	.word	0x200097b4
 8001990:	200097bc 	.word	0x200097bc
 8001994:	200097dc 	.word	0x200097dc
 8001998:	200097d0 	.word	0x200097d0
 800199c:	20000018 	.word	0x20000018

080019a0 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80019a0:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80019a2:	684b      	ldr	r3, [r1, #4]
{
 80019a4:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d119      	bne.n	80019de <HAL_JPEG_InfoReadyCallback+0x3e>
  {
    if((pInfo->ImageWidth % 16) != 0)
 80019aa:	68cb      	ldr	r3, [r1, #12]
 80019ac:	071a      	lsls	r2, r3, #28
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));

    if((pInfo->ImageHeight % 16) != 0)
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_JPEG_InfoReadyCallback+0x88>)
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80019b0:	bf1e      	ittt	ne
 80019b2:	f023 030f 	bicne.w	r3, r3, #15
 80019b6:	3310      	addne	r3, #16
 80019b8:	60cb      	strne	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
 80019ba:	688b      	ldr	r3, [r1, #8]
 80019bc:	0719      	lsls	r1, r3, #28
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80019be:	491b      	ldr	r1, [pc, #108]	; (8001a2c <HAL_JPEG_InfoReadyCallback+0x8c>)
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80019c0:	bf1e      	ittt	ne
 80019c2:	f023 030f 	bicne.w	r3, r3, #15
 80019c6:	3310      	addne	r3, #16
 80019c8:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80019ca:	f001 fa97 	bl	8002efc <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 80019ce:	b348      	cbz	r0, 8001a24 <HAL_JPEG_InfoReadyCallback+0x84>
    {
      assert(status == HAL_OK);
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_JPEG_InfoReadyCallback+0x90>)
 80019d2:	f240 212f 	movw	r1, #559	; 0x22f
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_JPEG_InfoReadyCallback+0x94>)
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
    if(status != HAL_OK)
    {
      assert(status == HAL_OK);
 80019d8:	4817      	ldr	r0, [pc, #92]	; (8001a38 <HAL_JPEG_InfoReadyCallback+0x98>)
 80019da:	f023 fba5 	bl	8025128 <__assert_func>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d117      	bne.n	8001a12 <HAL_JPEG_InfoReadyCallback+0x72>
      if((pInfo->ImageWidth % 16) != 0)
 80019e2:	68cb      	ldr	r3, [r1, #12]
 80019e4:	071a      	lsls	r2, r3, #28
 80019e6:	d003      	beq.n	80019f0 <HAL_JPEG_InfoReadyCallback+0x50>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80019e8:	f023 030f 	bic.w	r3, r3, #15
 80019ec:	3310      	adds	r3, #16
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80019ee:	60c3      	str	r3, [r0, #12]
      if((pInfo->ImageHeight % 8) != 0)
 80019f0:	6883      	ldr	r3, [r0, #8]
 80019f2:	075a      	lsls	r2, r3, #29
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80019f4:	bf1e      	ittt	ne
 80019f6:	f023 0307 	bicne.w	r3, r3, #7
 80019fa:	3308      	addne	r3, #8
 80019fc:	6083      	strne	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_JPEG_InfoReadyCallback+0x88>)
 8001a00:	490a      	ldr	r1, [pc, #40]	; (8001a2c <HAL_JPEG_InfoReadyCallback+0x8c>)
 8001a02:	f00c fc45 	bl	800e290 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
 8001a06:	b168      	cbz	r0, 8001a24 <HAL_JPEG_InfoReadyCallback+0x84>
      assert(status == HAL_OK);
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_JPEG_InfoReadyCallback+0x90>)
 8001a0a:	f240 2149 	movw	r1, #585	; 0x249
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_JPEG_InfoReadyCallback+0x94>)
 8001a10:	e7e2      	b.n	80019d8 <HAL_JPEG_InfoReadyCallback+0x38>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f3      	bne.n	80019fe <HAL_JPEG_InfoReadyCallback+0x5e>
      if((pInfo->ImageWidth % 8) != 0)
 8001a16:	68cb      	ldr	r3, [r1, #12]
 8001a18:	0759      	lsls	r1, r3, #29
 8001a1a:	d0e9      	beq.n	80019f0 <HAL_JPEG_InfoReadyCallback+0x50>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001a1c:	f023 0307 	bic.w	r3, r3, #7
 8001a20:	3308      	adds	r3, #8
 8001a22:	e7e4      	b.n	80019ee <HAL_JPEG_InfoReadyCallback+0x4e>
    }
  }
}
 8001a24:	bd08      	pop	{r3, pc}
 8001a26:	bf00      	nop
 8001a28:	200097d4 	.word	0x200097d4
 8001a2c:	200097f0 	.word	0x200097f0
 8001a30:	08026866 	.word	0x08026866
 8001a34:	08026877 	.word	0x08026877
 8001a38:	0802669f 	.word	0x0802669f

08001a3c <HAL_JPEG_GetDataCallback>:
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_JPEG_GetDataCallback+0x30>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	440a      	add	r2, r1
{
 8001a42:	b430      	push	{r4, r5}
  JPEG_InputImageIndex += NbDecodedData;
 8001a44:	601a      	str	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_JPEG_GetDataCallback+0x34>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d20c      	bcs.n	8001a68 <HAL_JPEG_GetDataCallback+0x2c>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a4e:	4c09      	ldr	r4, [pc, #36]	; (8001a74 <HAL_JPEG_GetDataCallback+0x38>)
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001a50:	1a9a      	subs	r2, r3, r2
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a52:	6825      	ldr	r5, [r4, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a54:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a58:	4429      	add	r1, r5
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a5a:	bf28      	it	cs
 8001a5c:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a60:	6021      	str	r1, [r4, #0]
  }
}
 8001a62:	bc30      	pop	{r4, r5}
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a64:	f007 bd65 	b.w	8009532 <HAL_JPEG_ConfigInputBuffer>
}
 8001a68:	bc30      	pop	{r4, r5}
 8001a6a:	4770      	bx	lr
 8001a6c:	200097b8 	.word	0x200097b8
 8001a70:	200097bc 	.word	0x200097bc
 8001a74:	200097b4 	.word	0x200097b4

08001a78 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001a7a:	4d17      	ldr	r5, [pc, #92]	; (8001ad8 <HAL_JPEG_DataReadyCallback+0x60>)
 8001a7c:	2701      	movs	r7, #1
 8001a7e:	210c      	movs	r1, #12
 8001a80:	4c16      	ldr	r4, [pc, #88]	; (8001adc <HAL_JPEG_DataReadyCallback+0x64>)
 8001a82:	682b      	ldr	r3, [r5, #0]
{
 8001a84:	4606      	mov	r6, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001a86:	4359      	muls	r1, r3
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;

    JPEG_OUT_Write_BufferIndex++;
 8001a88:	443b      	add	r3, r7
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001a8a:	42bb      	cmp	r3, r7
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001a8c:	eb04 0001 	add.w	r0, r4, r1
 8001a90:	5467      	strb	r7, [r4, r1]
    {
      JPEG_OUT_Write_BufferIndex = 0;
 8001a92:	bf88      	it	hi
 8001a94:	2300      	movhi	r3, #0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8001a96:	6082      	str	r2, [r0, #8]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001a98:	220c      	movs	r2, #12
      JPEG_OUT_Write_BufferIndex = 0;
 8001a9a:	602b      	str	r3, [r5, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	4353      	muls	r3, r2
 8001aa0:	5ce3      	ldrb	r3, [r4, r3]
 8001aa2:	b133      	cbz	r3, 8001ab2 <HAL_JPEG_DataReadyCallback+0x3a>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	f007 fd10 	bl	80094cc <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_JPEG_DataReadyCallback+0x68>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001ab2:	682a      	ldr	r2, [r5, #0]
 8001ab4:	210c      	movs	r1, #12
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_JPEG_DataReadyCallback+0x6c>)
 8001ab8:	4630      	mov	r0, r6
 8001aba:	fb01 4402 	mla	r4, r1, r2, r4
 8001abe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	6861      	ldr	r1, [r4, #4]
 8001ac6:	435a      	muls	r2, r3
 8001ac8:	f007 fd36 	bl	8009538 <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_JPEG_DataReadyCallback+0x70>)
 8001ace:	6818      	ldr	r0, [r3, #0]
}
 8001ad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SEM_POST(semDecodingDone);
 8001ad4:	f009 bffc 	b.w	800bad0 <osSemaphoreRelease>
 8001ad8:	200097c4 	.word	0x200097c4
 8001adc:	20000018 	.word	0x20000018
 8001ae0:	200097d8 	.word	0x200097d8
 8001ae4:	200097dc 	.word	0x200097dc
 8001ae8:	200097f4 	.word	0x200097f4

08001aec <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001aec:	b510      	push	{r4, lr}
 8001aee:	4604      	mov	r4, r0
  HAL_JPEG_STATETypeDef  state = HAL_JPEG_GetState(hjpeg);
 8001af0:	f008 f8b3 	bl	8009c5a <HAL_JPEG_GetState>
  uint32_t error = HAL_JPEG_GetError(hjpeg);
 8001af4:	4620      	mov	r0, r4
 8001af6:	f008 f8b3 	bl	8009c60 <HAL_JPEG_GetError>
  while(1){}
 8001afa:	e7fe      	b.n	8001afa <HAL_JPEG_ErrorCallback+0xe>

08001afc <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
  Jpeg_HWDecodingEnd = 1;
 8001afc:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
}
 8001b02:	4770      	bx	lr
 8001b04:	200097cc 	.word	0x200097cc

08001b08 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001b08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001b0c:	4d38      	ldr	r5, [pc, #224]	; (8001bf0 <JPEG_OutputHandler+0xe8>)
 8001b0e:	260c      	movs	r6, #12
 8001b10:	4c38      	ldr	r4, [pc, #224]	; (8001bf4 <JPEG_OutputHandler+0xec>)
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	4373      	muls	r3, r6
 8001b16:	5ce3      	ldrb	r3, [r4, r3]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d149      	bne.n	8001bb0 <JPEG_OutputHandler+0xa8>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <JPEG_OutputHandler+0xf0>)
 8001b1e:	6953      	ldr	r3, [r2, #20]
 8001b20:	03db      	lsls	r3, r3, #15
 8001b22:	d51e      	bpl.n	8001b62 <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001b2e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b32:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b36:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b3a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001b3e:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b40:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b44:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b46:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 8001b4a:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b4c:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001b50:	d2f9      	bcs.n	8001b46 <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 8001b52:	3b20      	subs	r3, #32
 8001b54:	f113 0f20 	cmn.w	r3, #32
 8001b58:	d1f2      	bne.n	8001b40 <JPEG_OutputHandler+0x38>
 8001b5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b5e:	f3bf 8f6f 	isb	sy
    {
      SCB_CleanInvalidateDCache();
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b62:	260c      	movs	r6, #12
 8001b64:	4f25      	ldr	r7, [pc, #148]	; (8001bfc <JPEG_OutputHandler+0xf4>)
 8001b66:	6828      	ldr	r0, [r5, #0]
 8001b68:	eb0d 0306 	add.w	r3, sp, r6
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	fb06 4000 	mla	r0, r6, r0, r4
 8001b72:	4923      	ldr	r1, [pc, #140]	; (8001c00 <JPEG_OutputHandler+0xf8>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <JPEG_OutputHandler+0xfc>)
 8001b78:	6809      	ldr	r1, [r1, #0]
 8001b7a:	f8d3 8000 	ldr.w	r8, [r3]
 8001b7e:	6883      	ldr	r3, [r0, #8]
 8001b80:	6840      	ldr	r0, [r0, #4]
 8001b82:	47c0      	blx	r8

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b84:	682a      	ldr	r2, [r5, #0]
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b86:	683b      	ldr	r3, [r7, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b88:	4356      	muls	r6, r2
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8001b8a:	3201      	adds	r2, #1
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b8c:	4418      	add	r0, r3
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b8e:	2300      	movs	r3, #0
    JPEG_OUT_Read_BufferIndex++;
 8001b90:	2a01      	cmp	r2, #1
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b92:	eb04 0106 	add.w	r1, r4, r6
 8001b96:	55a3      	strb	r3, [r4, r6]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8001b98:	608b      	str	r3, [r1, #8]
    JPEG_OUT_Read_BufferIndex++;
 8001b9a:	bf98      	it	ls
 8001b9c:	4613      	movls	r3, r2
    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b9e:	6038      	str	r0, [r7, #0]
    JPEG_OUT_Read_BufferIndex++;
 8001ba0:	602b      	str	r3, [r5, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
    {
      JPEG_OUT_Read_BufferIndex = 0;
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <JPEG_OutputHandler+0x100>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d10f      	bne.n	8001bcc <JPEG_OutputHandler+0xc4>
    {
      return 1;
 8001bac:	2001      	movs	r0, #1
 8001bae:	e018      	b.n	8001be2 <JPEG_OutputHandler+0xda>
    }
  }
  else if((Output_Is_Paused == 1) && \
 8001bb0:	4916      	ldr	r1, [pc, #88]	; (8001c0c <JPEG_OutputHandler+0x104>)
 8001bb2:	680a      	ldr	r2, [r1, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8001bb4:	2a01      	cmp	r2, #1
 8001bb6:	d117      	bne.n	8001be8 <JPEG_OutputHandler+0xe0>
 8001bb8:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <JPEG_OutputHandler+0x108>)
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4372      	muls	r2, r6
  else if((Output_Is_Paused == 1) && \
 8001bbe:	5ca2      	ldrb	r2, [r4, r2]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <JPEG_OutputHandler+0xe0>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
  {
    Output_Is_Paused = 0;
 8001bc4:	600b      	str	r3, [r1, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	f007 feec 	bl	80099a4 <HAL_JPEG_Resume>
  else
  {
    return 2;
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <JPEG_OutputHandler+0xf4>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <JPEG_OutputHandler+0x100>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d109      	bne.n	8001bec <JPEG_OutputHandler+0xe4>
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <JPEG_OutputHandler+0x10c>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	3800      	subs	r0, #0
 8001bde:	bf18      	it	ne
 8001be0:	2001      	movne	r0, #1
  {
    return 1;
  }

  return 0;
}
 8001be2:	b004      	add	sp, #16
 8001be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 2;
 8001be8:	2002      	movs	r0, #2
 8001bea:	e7fa      	b.n	8001be2 <JPEG_OutputHandler+0xda>
  return 0;
 8001bec:	2000      	movs	r0, #0
 8001bee:	e7f8      	b.n	8001be2 <JPEG_OutputHandler+0xda>
 8001bf0:	200097c0 	.word	0x200097c0
 8001bf4:	20000018 	.word	0x20000018
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	200097d0 	.word	0x200097d0
 8001c00:	200097b0 	.word	0x200097b0
 8001c04:	200097f0 	.word	0x200097f0
 8001c08:	200097d4 	.word	0x200097d4
 8001c0c:	200097d8 	.word	0x200097d8
 8001c10:	200097c4 	.word	0x200097c4
 8001c14:	200097cc 	.word	0x200097cc

08001c18 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8001c18:	b538      	push	{r3, r4, r5, lr}
    if (length == 0)
 8001c1a:	b36a      	cbz	r2, 8001c78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
    if (outputBuffer) //only decode if buffers are assigned.
 8001c1c:	b363      	cbz	r3, 8001c78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8001c1e:	4c17      	ldr	r4, [pc, #92]	; (8001c7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>)
 8001c20:	2502      	movs	r5, #2
 8001c22:	6125      	str	r5, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8001c24:	68c5      	ldr	r5, [r0, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c26:	6900      	ldr	r0, [r0, #16]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8001c28:	f015 0f0f 	tst.w	r5, #15
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c2c:	f000 000f 	and.w	r0, r0, #15
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001c30:	bf18      	it	ne
 8001c32:	f025 050f 	bicne.w	r5, r5, #15
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c36:	f1c0 0010 	rsb	r0, r0, #16
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001c3a:	bf18      	it	ne
 8001c3c:	3510      	addne	r5, #16
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c3e:	60a0      	str	r0, [r4, #8]
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001c40:	6025      	str	r5, [r4, #0]
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001c42:	f44f 65c8 	mov.w	r5, #1600	; 0x640
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001c46:	480e      	ldr	r0, [pc, #56]	; (8001c80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
      JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001c48:	6065      	str	r5, [r4, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001c4a:	6825      	ldr	r5, [r4, #0]
 8001c4c:	092d      	lsrs	r5, r5, #4
 8001c4e:	60e5      	str	r5, [r4, #12]
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001c50:	f7ff fe6c 	bl	800192c <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001c54:	4d0a      	ldr	r5, [pc, #40]	; (8001c80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
 8001c56:	4c0b      	ldr	r4, [pc, #44]	; (8001c84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 8001c58:	4628      	mov	r0, r5
 8001c5a:	f7ff ff55 	bl	8001b08 <JPEG_OutputHandler>
 8001c5e:	6020      	str	r0, [r4, #0]
        if (JpegProcessing_End == 2)
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d105      	bne.n	8001c72 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5a>
          SEM_WAIT(semDecodingDone);
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	f009 fef5 	bl	800ba5c <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d1ef      	bne.n	8001c58 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x40>
}
 8001c78:	bd38      	pop	{r3, r4, r5, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200097dc 	.word	0x200097dc
 8001c80:	200124ac 	.word	0x200124ac
 8001c84:	200097c8 	.word	0x200097c8
 8001c88:	200097f4 	.word	0x200097f4

08001c8c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8001c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c90:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001c92:	6943      	ldr	r3, [r0, #20]
{
 8001c94:	4604      	mov	r4, r0
 8001c96:	460f      	mov	r7, r1
 8001c98:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001c9a:	b92b      	cbnz	r3, 8001ca8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8001c9e:	21bf      	movs	r1, #191	; 0xbf
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8001ca2:	482b      	ldr	r0, [pc, #172]	; (8001d50 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8001ca4:	f023 fa40 	bl	8025128 <__assert_func>
    readData(currentMovieOffset, 8);
 8001ca8:	2208      	movs	r2, #8
 8001caa:	6981      	ldr	r1, [r0, #24]
 8001cac:	f7ff fc96 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001cb0:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f106 0a08 	add.w	sl, r6, #8
 8001cb8:	1d31      	adds	r1, r6, #4
 8001cba:	f7ff fc6b 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001cbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cc0:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001cc4:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d231      	bcs.n	8001d2e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001cca:	4631      	mov	r1, r6
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff fc76 	bl	80015be <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001cd2:	f243 0330 	movw	r3, #12336	; 0x3030
 8001cd6:	4298      	cmp	r0, r3
 8001cd8:	d11d      	bne.n	8001d16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001cda:	1cb1      	adds	r1, r6, #2
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff fc6e 	bl	80015be <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001ce2:	f246 3364 	movw	r3, #25444	; 0x6364
 8001ce6:	4298      	cmp	r0, r3
 8001ce8:	d115      	bne.n	8001d16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001cea:	b1a5      	cbz	r5, 8001d16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001cec:	462a      	mov	r2, r5
 8001cee:	4651      	mov	r1, sl
 8001cf0:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8001cf2:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001cf6:	f7ff fc71 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001cfc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001cfe:	462a      	mov	r2, r5
 8001d00:	4620      	mov	r0, r4
 8001d02:	f8cd 8000 	str.w	r8, [sp]
 8001d06:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	f7ff ff84 	bl	8001c18 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001d10:	6963      	ldr	r3, [r4, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8001d16:	69a3      	ldr	r3, [r4, #24]
 8001d18:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8001d1a:	b18d      	cbz	r5, 8001d40 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
          currentMovieOffset += 8;
 8001d1c:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001d1e:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001d20:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001d22:	3301      	adds	r3, #1
 8001d24:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001d28:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001d2a:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001d2c:	d10a      	bne.n	8001d44 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8001d2e:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8001d30:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8001d32:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8001d34:	61a3      	str	r3, [r4, #24]
}
 8001d36:	f080 0001 	eor.w	r0, r0, #1
 8001d3a:	b004      	add	sp, #16
 8001d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          currentMovieOffset += 8;
 8001d40:	3308      	adds	r3, #8
 8001d42:	e7eb      	b.n	8001d1c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8001d44:	2000      	movs	r0, #0
 8001d46:	e7f6      	b.n	8001d36 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8001d48:	08026747 	.word	0x08026747
 8001d4c:	080268bf 	.word	0x080268bf
 8001d50:	0802669f 	.word	0x0802669f

08001d54 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8001d54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d56:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8001d58:	6981      	ldr	r1, [r0, #24]
{
 8001d5a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	f7ff fc3d 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001d62:	69a6      	ldr	r6, [r4, #24]
 8001d64:	4620      	mov	r0, r4
 8001d66:	1d31      	adds	r1, r6, #4
 8001d68:	f7ff fc14 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001d6c:	f106 0108 	add.w	r1, r6, #8
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001d70:	4602      	mov	r2, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001d72:	9001      	str	r0, [sp, #4]
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff fc31 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001d7a:	4601      	mov	r1, r0
    if (frameBuffer) //only decode if buffers are assigned.
 8001d7c:	b16d      	cbz	r5, 8001d9a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001d7e:	462b      	mov	r3, r5
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001d80:	4c07      	ldr	r4, [pc, #28]	; (8001da0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001d82:	4d08      	ldr	r5, [pc, #32]	; (8001da4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001d84:	9a01      	ldr	r2, [sp, #4]
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001d88:	f7ff fdd0 	bl	800192c <JPEG_Decode_DMA>
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	f7ff febb 	bl	8001b08 <JPEG_OutputHandler>
 8001d92:	6020      	str	r0, [r4, #0]
      while(JpegProcessing_End == 0);
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f8      	beq.n	8001d8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	200097c8 	.word	0x200097c8
 8001da4:	200124ac 	.word	0x200124ac

08001da8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001da8:	2101      	movs	r1, #1
 8001daa:	2200      	movs	r2, #0
{
 8001dac:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001dae:	4608      	mov	r0, r1
 8001db0:	f009 fdfe 	bl	800b9b0 <osSemaphoreNew>
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001db6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001db8:	b928      	cbnz	r0, 8001dc6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001dbc:	2128      	movs	r1, #40	; 0x28
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001dc2:	f023 f9b1 	bl	8025128 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2104      	movs	r1, #4
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f009 feb6 	bl	800bb3c <osMessageQueueNew>
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001dd2:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001dd4:	b918      	cbnz	r0, 8001dde <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001ddc:	e7f0      	b.n	8001dc0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001dde:	bd08      	pop	{r3, pc}
 8001de0:	200097fc 	.word	0x200097fc
 8001de4:	08026960 	.word	0x08026960
 8001de8:	080269a9 	.word	0x080269a9
 8001dec:	080269d8 	.word	0x080269d8
 8001df0:	200097f8 	.word	0x200097f8
 8001df4:	08026a21 	.word	0x08026a21

08001df8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001df8:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	f009 be2c 	b.w	800ba5c <osSemaphoreAcquire>
 8001e04:	200097fc 	.word	0x200097fc

08001e08 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001e08:	4b01      	ldr	r3, [pc, #4]	; (8001e10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	f009 be60 	b.w	800bad0 <osSemaphoreRelease>
 8001e10:	200097fc 	.word	0x200097fc

08001e14 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001e16:	2100      	movs	r1, #0
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f009 be1f 	b.w	800ba5c <osSemaphoreAcquire>
 8001e1e:	bf00      	nop
 8001e20:	200097fc 	.word	0x200097fc

08001e24 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001e24:	f7ff bff0 	b.w	8001e08 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001e28 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6800      	ldr	r0, [r0, #0]
 8001e32:	f009 bec9 	b.w	800bbc8 <osMessageQueuePut>
 8001e36:	bf00      	nop
 8001e38:	200097f8 	.word	0x200097f8
 8001e3c:	20000030 	.word	0x20000030

08001e40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001e40:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001e42:	2300      	movs	r3, #0
 8001e44:	4c07      	ldr	r4, [pc, #28]	; (8001e64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001e46:	a901      	add	r1, sp, #4
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6820      	ldr	r0, [r4, #0]
 8001e4c:	f009 fefe 	bl	800bc4c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
 8001e54:	2200      	movs	r2, #0
 8001e56:	a901      	add	r1, sp, #4
 8001e58:	6820      	ldr	r0, [r4, #0]
 8001e5a:	f009 fef7 	bl	800bc4c <osMessageQueueGet>
}
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd10      	pop	{r4, pc}
 8001e62:	bf00      	nop
 8001e64:	200097f8 	.word	0x200097f8

08001e68 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001e68:	6803      	ldr	r3, [r0, #0]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	4718      	bx	r3

08001e6e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001e6e:	2001      	movs	r0, #1
 8001e70:	4770      	bx	lr

08001e72 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001e72:	6803      	ldr	r3, [r0, #0]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	4718      	bx	r3

08001e78 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001e7a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
 8001e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e86:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001e8a:	9201      	str	r2, [sp, #4]
 8001e8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e94:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001e9c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_ZN8STM32DMA10initializeEv+0x40>)
 8001ea2:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <_ZN8STM32DMA10initializeEv+0x44>)
 8001eaa:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001eac:	b002      	add	sp, #8
 8001eae:	4770      	bx	lr
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	2001232c 	.word	0x2001232c
 8001eb8:	08001f01 	.word	0x08001f01
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001ec0:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001ec4:	4770      	bx	lr
	...

08001ec8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ece:	6003      	str	r3, [r0, #0]
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <_ZN8STM32DMAD1Ev+0x1c>)
 8001ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	4770      	bx	lr
 8001ee0:	08026bbc 	.word	0x08026bbc
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	4604      	mov	r4, r0
}
 8001eec:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001ef0:	f7ff ffea 	bl	8001ec8 <_ZN8STM32DMAD1Ev>
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f022 ff3a 	bl	8024d6e <_ZdlPvj>
 8001efa:	4620      	mov	r0, r4
 8001efc:	bd10      	pop	{r4, pc}
	...

08001f00 <DMA2D_XferCpltCallback>:
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <DMA2D_XferCpltCallback+0xc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4718      	bx	r3
 8001f0c:	20027e98 	.word	0x20027e98

08001f10 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <_ZN8STM32DMAC1Ev+0x30>)
 8001f16:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001f18:	2600      	movs	r6, #0
 8001f1a:	4625      	mov	r5, r4
 8001f1c:	2260      	movs	r2, #96	; 0x60
 8001f1e:	6060      	str	r0, [r4, #4]
 8001f20:	7226      	strb	r6, [r4, #8]
 8001f22:	7266      	strb	r6, [r4, #9]
 8001f24:	f845 3b20 	str.w	r3, [r5], #32
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f00d ffdb 	bl	800fee4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001f2e:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001f32:	60ee      	str	r6, [r5, #12]
 8001f34:	3524      	adds	r5, #36	; 0x24
 8001f36:	42ab      	cmp	r3, r5
 8001f38:	d1fb      	bne.n	8001f32 <_ZN8STM32DMAC1Ev+0x22>
}
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	bd70      	pop	{r4, r5, r6, pc}
 8001f3e:	bf00      	nop
 8001f40:	08026bbc 	.word	0x08026bbc

08001f44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001f44:	b508      	push	{r3, lr}
    switch (format)
 8001f46:	290b      	cmp	r1, #11
 8001f48:	d80b      	bhi.n	8001f62 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001f4a:	e8df f001 	tbb	[pc, r1]
 8001f4e:	0612      	.short	0x0612
 8001f50:	0a0a0a10 	.word	0x0a0a0a10
 8001f54:	0808080a 	.word	0x0808080a
 8001f58:	0808      	.short	0x0808
 8001f5a:	2001      	movs	r0, #1
}
 8001f5c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001f5e:	2005      	movs	r0, #5
        break;
 8001f60:	e7fc      	b.n	8001f5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001f64:	2166      	movs	r1, #102	; 0x66
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001f6a:	f023 f8dd 	bl	8025128 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e7f4      	b.n	8001f5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001f72:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001f74:	e7f2      	b.n	8001f5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001f76:	bf00      	nop
 8001f78:	08026a63 	.word	0x08026a63
 8001f7c:	08026a7e 	.word	0x08026a7e
 8001f80:	08026ac8 	.word	0x08026ac8

08001f84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001f84:	b508      	push	{r3, lr}
    switch (format)
 8001f86:	290a      	cmp	r1, #10
 8001f88:	d809      	bhi.n	8001f9e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001f8a:	e8df f001 	tbb	[pc, r1]
 8001f8e:	0610      	.short	0x0610
 8001f90:	0808080e 	.word	0x0808080e
 8001f94:	06060608 	.word	0x06060608
 8001f98:	06          	.byte	0x06
 8001f99:	00          	.byte	0x00
 8001f9a:	2001      	movs	r0, #1
}
 8001f9c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001fa0:	2187      	movs	r1, #135	; 0x87
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001fa6:	f023 f8bf 	bl	8025128 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001faa:	2000      	movs	r0, #0
 8001fac:	e7f6      	b.n	8001f9c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001fae:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001fb0:	e7f4      	b.n	8001f9c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001fb2:	bf00      	nop
 8001fb4:	08026a63 	.word	0x08026a63
 8001fb8:	08026b0f 	.word	0x08026b0f
 8001fbc:	08026ac8 	.word	0x08026ac8

08001fc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001fc4:	7f4f      	ldrb	r7, [r1, #29]
{
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001fca:	4639      	mov	r1, r7
 8001fcc:	f7ff ffba 	bl	8001f44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fd0:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001fd4:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fd6:	4648      	mov	r0, r9
 8001fd8:	4641      	mov	r1, r8
 8001fda:	f7ff ffb3 	bl	8001f44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fde:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fe0:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fe2:	4648      	mov	r0, r9
 8001fe4:	f7ff ffce 	bl	8001f84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001fe8:	8aa1      	ldrh	r1, [r4, #20]
 8001fea:	8b62      	ldrh	r2, [r4, #26]
 8001fec:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001fee:	1a52      	subs	r2, r2, r1
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ff2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001ff4:	8b22      	ldrh	r2, [r4, #24]
 8001ff6:	1a52      	subs	r2, r2, r1
 8001ff8:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ffa:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001ffc:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ffe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002002:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002006:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002008:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800200a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800200c:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800200e:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8002012:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002014:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002018:	d026      	beq.n	8002068 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 800201a:	d810      	bhi.n	800203e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 800201c:	2920      	cmp	r1, #32
 800201e:	ea45 0402 	orr.w	r4, r5, r2
 8002022:	d062      	beq.n	80020ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8002024:	2940      	cmp	r1, #64	; 0x40
 8002026:	d060      	beq.n	80020ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8002028:	2904      	cmp	r1, #4
 800202a:	d05e      	beq.n	80020ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800202c:	432a      	orrs	r2, r5
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002030:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002032:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002036:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002038:	d05b      	beq.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800203a:	4a30      	ldr	r2, [pc, #192]	; (80020fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800203c:	e040      	b.n	80020c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 800203e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002042:	d007      	beq.n	8002054 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8002044:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002048:	d1f0      	bne.n	800202c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800204a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800204e:	f042 0209 	orr.w	r2, r2, #9
 8002052:	e003      	b.n	800205c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002054:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002058:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800205c:	61da      	str	r2, [r3, #28]
        return color;
 800205e:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002060:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002062:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002064:	6158      	str	r0, [r3, #20]
 8002066:	e02a      	b.n	80020be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002068:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800206a:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800206c:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800206e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002072:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002074:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8002076:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002078:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800207a:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 800207c:	b142      	cbz	r2, 8002090 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800207e:	2a01      	cmp	r2, #1
 8002080:	d021      	beq.n	80020c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002084:	f240 1111 	movw	r1, #273	; 0x111
 8002088:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800208a:	481f      	ldr	r0, [pc, #124]	; (8002108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800208c:	f023 f84c 	bl	8025128 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002090:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8002092:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002094:	8861      	ldrh	r1, [r4, #2]
 8002096:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800209a:	3901      	subs	r1, #1
 800209c:	f022 0210 	bic.w	r2, r2, #16
 80020a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020a4:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	0692      	lsls	r2, r2, #26
 80020b4:	d4fc      	bmi.n	80020b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80020b6:	2210      	movs	r2, #16
 80020b8:	609a      	str	r2, [r3, #8]
            if(blend)
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d0bd      	beq.n	800203a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80020c0:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 80020c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020c6:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 80020c8:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020cc:	69d9      	ldr	r1, [r3, #28]
 80020ce:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 80020d2:	bf18      	it	ne
 80020d4:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020d6:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80020da:	f022 0210 	bic.w	r2, r2, #16
 80020de:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80020e2:	f042 0210 	orr.w	r2, r2, #16
 80020e6:	61da      	str	r2, [r3, #28]
                break;
 80020e8:	e7dd      	b.n	80020a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ea:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80020ee:	61dc      	str	r4, [r3, #28]
 80020f0:	e7b7      	b.n	8002062 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80020f2:	f240 2201 	movw	r2, #513	; 0x201
 80020f6:	e7e3      	b.n	80020c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80020f8:	4002b000 	.word	0x4002b000
 80020fc:	00010201 	.word	0x00010201
 8002100:	08026b5a 	.word	0x08026b5a
 8002104:	08026b74 	.word	0x08026b74
 8002108:	08026ac8 	.word	0x08026ac8
 800210c:	00020201 	.word	0x00020201

08002110 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002114:	7f89      	ldrb	r1, [r1, #30]
 8002116:	f7ff ff35 	bl	8001f84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800211c:	8aa6      	ldrh	r6, [r4, #20]
 800211e:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002120:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002122:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002126:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002128:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800212a:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800212c:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800212e:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002130:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002132:	6826      	ldr	r6, [r4, #0]
 8002134:	68e1      	ldr	r1, [r4, #12]
 8002136:	2e08      	cmp	r6, #8
 8002138:	d10d      	bne.n	8002156 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800213a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800213c:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800213e:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002140:	4a0e      	ldr	r2, [pc, #56]	; (800217c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8002142:	7f20      	ldrb	r0, [r4, #28]
 8002144:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002148:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800214a:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800214c:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800214e:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002150:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002152:	601a      	str	r2, [r3, #0]
    }
}
 8002154:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002156:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002158:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800215a:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 800215c:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800215e:	0a0a      	lsrs	r2, r1, #8
 8002160:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002164:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002168:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 800216c:	4302      	orrs	r2, r0
 800216e:	430a      	orrs	r2, r1
 8002170:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002174:	e7ed      	b.n	8002152 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002176:	bf00      	nop
 8002178:	4002b000 	.word	0x4002b000
 800217c:	00010009 	.word	0x00010009
 8002180:	00020201 	.word	0x00020201
 8002184:	00030201 	.word	0x00030201

08002188 <_ZN8touchgfx5paint6rgb5658tearDownEv>:
    * @brief Waits until previous DMA drawing operation has finished
    */
    void tearDown()
    {
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x10>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	07d2      	lsls	r2, r2, #31
 800218e:	d4fc      	bmi.n	800218a <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8002190:	2223      	movs	r2, #35	; 0x23
 8002192:	609a      	str	r2, [r3, #8]
    }
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	4002b000 	.word	0x4002b000

0800219c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
    *
    * @brief Renders Canvas Widget chunks using DMA.
    * This functions will not generate an interrupt, and will not affect the DMA queue.
    */
    void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
    {
 800219c:	b530      	push	{r4, r5, lr}
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800219e:	4c10      	ldr	r4, [pc, #64]	; (80021e0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 80021a0:	6825      	ldr	r5, [r4, #0]
 80021a2:	07ed      	lsls	r5, r5, #31
 80021a4:	d4fc      	bmi.n	80021a0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 80021a6:	2523      	movs	r5, #35	; 0x23

        /* DMA2D OPFCCR register configuration */
        WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

        /* Configure DMA2D data size */
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80021a8:	0409      	lsls	r1, r1, #16

        /* Configure DMA2D destination address */
        WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

        if (alpha < 0xFF)
 80021aa:	2bff      	cmp	r3, #255	; 0xff
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 80021ac:	60a5      	str	r5, [r4, #8]
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80021ae:	f041 0101 	orr.w	r1, r1, #1
        WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80021b2:	f04f 0502 	mov.w	r5, #2
 80021b6:	6365      	str	r5, [r4, #52]	; 0x34
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80021b8:	6461      	str	r1, [r4, #68]	; 0x44
        WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80021ba:	63e0      	str	r0, [r4, #60]	; 0x3c
        if (alpha < 0xFF)
 80021bc:	d00a      	beq.n	80021d4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
        {
            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

            /* Write DMA2D FGPFCCR register */
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021be:	4909      	ldr	r1, [pc, #36]	; (80021e4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
            WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021c0:	6265      	str	r5, [r4, #36]	; 0x24
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021c2:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 80021c6:	61e3      	str	r3, [r4, #28]

            /* Configure DMA2D source address */
            WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
            WRITE_REG(DMA2D->FGCOLR, color);
 80021ca:	6222      	str	r2, [r4, #32]
            WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 80021cc:	6160      	str	r0, [r4, #20]
            WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 80021ce:	60e0      	str	r0, [r4, #12]

            /* Set color */
            WRITE_REG(DMA2D->OCOLR, color565);

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80021d0:	6023      	str	r3, [r4, #0]
        }
    }
 80021d2:	bd30      	pop	{r4, r5, pc}
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80021d4:	61e5      	str	r5, [r4, #28]
            WRITE_REG(DMA2D->OCOLR, color565);
 80021d6:	9b03      	ldr	r3, [sp, #12]
 80021d8:	63a3      	str	r3, [r4, #56]	; 0x38
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 80021dc:	e7f8      	b.n	80021d0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 80021de:	bf00      	nop
 80021e0:	4002b000 	.word	0x4002b000
 80021e4:	00010009 	.word	0x00010009
 80021e8:	00020001 	.word	0x00020001
 80021ec:	00030001 	.word	0x00030001

080021f0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80021f0:	2001      	movs	r0, #1
 80021f2:	4770      	bx	lr

080021f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80021f4:	200c      	movs	r0, #12
 80021f6:	4770      	bx	lr

080021f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80021f8:	230c      	movs	r3, #12
 80021fa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021fe:	3008      	adds	r0, #8
 8002200:	4770      	bx	lr

08002202 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002202:	230c      	movs	r3, #12
 8002204:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002208:	3008      	adds	r0, #8
 800220a:	4770      	bx	lr

0800220c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800220c:	2001      	movs	r0, #1
 800220e:	4770      	bx	lr

08002210 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002210:	f643 107c 	movw	r0, #14716	; 0x397c
 8002214:	4770      	bx	lr

08002216 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002216:	f643 137c 	movw	r3, #14716	; 0x397c
 800221a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800221e:	3008      	adds	r0, #8
 8002220:	4770      	bx	lr

08002222 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002222:	f643 137c 	movw	r3, #14716	; 0x397c
 8002226:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800222a:	3008      	adds	r0, #8
 800222c:	4770      	bx	lr

0800222e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800222e:	2001      	movs	r0, #1
 8002230:	4770      	bx	lr

08002232 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002232:	2010      	movs	r0, #16
 8002234:	4770      	bx	lr

08002236 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002236:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800223a:	3008      	adds	r0, #8
 800223c:	4770      	bx	lr

0800223e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800223e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002242:	3008      	adds	r0, #8
 8002244:	4770      	bx	lr

08002246 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen2ScreenNoTransition();
 8002246:	4608      	mov	r0, r1
 8002248:	f002 bd2c 	b.w	8004ca4 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>

0800224c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800224e:	b510      	push	{r4, lr}
 8002250:	4604      	mov	r4, r0
 8002252:	6003      	str	r3, [r0, #0]
 8002254:	f00c f8a3 	bl	800e39e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002258:	4620      	mov	r0, r4
 800225a:	bd10      	pop	{r4, pc}
 800225c:	08026c74 	.word	0x08026c74

08002260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002260:	b510      	push	{r4, lr}
 8002262:	4604      	mov	r4, r0
 8002264:	f7ff fff2 	bl	800224c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002268:	2114      	movs	r1, #20
 800226a:	4620      	mov	r0, r4
 800226c:	f022 fd7f 	bl	8024d6e <_ZdlPvj>
 8002270:	4620      	mov	r0, r4
 8002272:	bd10      	pop	{r4, pc}

08002274 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002276:	b510      	push	{r4, lr}
 8002278:	4604      	mov	r4, r0
 800227a:	6003      	str	r3, [r0, #0]
 800227c:	f00c f88f 	bl	800e39e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002280:	4620      	mov	r0, r4
 8002282:	bd10      	pop	{r4, pc}
 8002284:	08026c40 	.word	0x08026c40

08002288 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002288:	b510      	push	{r4, lr}
 800228a:	4604      	mov	r4, r0
 800228c:	f7ff fff2 	bl	8002274 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002290:	f643 1184 	movw	r1, #14724	; 0x3984
 8002294:	4620      	mov	r0, r4
 8002296:	f022 fd6a 	bl	8024d6e <_ZdlPvj>
 800229a:	4620      	mov	r0, r4
 800229c:	bd10      	pop	{r4, pc}
	...

080022a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022a2:	b510      	push	{r4, lr}
 80022a4:	4604      	mov	r4, r0
 80022a6:	6003      	str	r3, [r0, #0]
 80022a8:	f00c f879 	bl	800e39e <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022ac:	4620      	mov	r0, r4
 80022ae:	bd10      	pop	{r4, pc}
 80022b0:	08026c0c 	.word	0x08026c0c

080022b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	4604      	mov	r4, r0
 80022b8:	f7ff fff2 	bl	80022a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022bc:	2118      	movs	r1, #24
 80022be:	4620      	mov	r0, r4
 80022c0:	f022 fd55 	bl	8024d6e <_ZdlPvj>
 80022c4:	4620      	mov	r0, r4
 80022c6:	bd10      	pop	{r4, pc}

080022c8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <_ZN12FrontendHeapD1Ev+0x28>)
 80022ca:	b510      	push	{r4, lr}
 80022cc:	4604      	mov	r4, r0
 80022ce:	6003      	str	r3, [r0, #0]
 80022d0:	f500 5066 	add.w	r0, r0, #14720	; 0x3980
 80022d4:	3030      	adds	r0, #48	; 0x30
 80022d6:	f7ff ffb9 	bl	800224c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80022de:	f7ff ffc9 	bl	8002274 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022e2:	f104 0014 	add.w	r0, r4, #20
 80022e6:	f7ff ffdb 	bl	80022a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022ea:	4620      	mov	r0, r4
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	bf00      	nop
 80022f0:	08026ca8 	.word	0x08026ca8

080022f4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80022f4:	b508      	push	{r3, lr}
 80022f6:	4802      	ldr	r0, [pc, #8]	; (8002300 <__tcf_0+0xc>)
 80022f8:	f7ff ffe6 	bl	80022c8 <_ZN12FrontendHeapD1Ev>
 80022fc:	bd08      	pop	{r3, pc}
 80022fe:	bf00      	nop
 8002300:	20009804 	.word	0x20009804

08002304 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002304:	b510      	push	{r4, lr}
 8002306:	4604      	mov	r4, r0
 8002308:	f7ff ffde 	bl	80022c8 <_ZN12FrontendHeapD1Ev>
 800230c:	f643 3120 	movw	r1, #15136	; 0x3b20
 8002310:	4620      	mov	r0, r4
 8002312:	f022 fd2c 	bl	8024d6e <_ZdlPvj>
 8002316:	4620      	mov	r0, r4
 8002318:	bd10      	pop	{r4, pc}
	...

0800231c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 800231c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002320:	f002 faa4 	bl	800486c <_ZN14BitmapDatabase11getInstanceEv>
 8002324:	2400      	movs	r4, #0
 8002326:	4605      	mov	r5, r0
 8002328:	f002 faa4 	bl	8004874 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800232c:	4623      	mov	r3, r4
 800232e:	4601      	mov	r1, r0
 8002330:	4622      	mov	r2, r4
 8002332:	4628      	mov	r0, r5
 8002334:	9400      	str	r4, [sp, #0]
 8002336:	f014 ffb9 	bl	80172ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <touchgfx_init+0xb8>)
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800233e:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002340:	4d26      	ldr	r5, [pc, #152]	; (80023dc <touchgfx_init+0xc0>)
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f003 fed6 	bl	80060f4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002348:	4825      	ldr	r0, [pc, #148]	; (80023e0 <touchgfx_init+0xc4>)
 800234a:	f014 ff17 	bl	801717c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800234e:	782b      	ldrb	r3, [r5, #0]
 8002350:	f3bf 8f5b 	dmb	ish
 8002354:	07db      	lsls	r3, r3, #31
 8002356:	d436      	bmi.n	80023c6 <touchgfx_init+0xaa>
 8002358:	4628      	mov	r0, r5
 800235a:	f022 fd0a 	bl	8024d72 <__cxa_guard_acquire>
 800235e:	b390      	cbz	r0, 80023c6 <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002360:	4c20      	ldr	r4, [pc, #128]	; (80023e4 <touchgfx_init+0xc8>)
 8002362:	4f21      	ldr	r7, [pc, #132]	; (80023e8 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <touchgfx_init+0xd0>)
 8002366:	f104 0014 	add.w	r0, r4, #20
 800236a:	f107 0618 	add.w	r6, r7, #24
 800236e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002372:	6023      	str	r3, [r4, #0]
 8002374:	6060      	str	r0, [r4, #4]
 8002376:	f8c4 8008 	str.w	r8, [r4, #8]
 800237a:	60e7      	str	r7, [r4, #12]
 800237c:	6126      	str	r6, [r4, #16]
 800237e:	f00c f80f 	bl	800e3a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <touchgfx_init+0xd4>)
 8002384:	4640      	mov	r0, r8
 8002386:	6163      	str	r3, [r4, #20]
 8002388:	f00c f80a 	bl	800e3a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <touchgfx_init+0xd8>)
 800238e:	4638      	mov	r0, r7
 8002390:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002392:	f00c f805 	bl	800e3a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002396:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800239a:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <touchgfx_init+0xdc>)
 800239c:	f603 10c4 	addw	r0, r3, #2500	; 0x9c4
 80023a0:	f8c3 29b0 	str.w	r2, [r3, #2480]	; 0x9b0
 80023a4:	f003 ff2c 	bl	8006200 <_ZN5ModelC1Ev>
 80023a8:	4622      	mov	r2, r4
 80023aa:	f107 0114 	add.w	r1, r7, #20
 80023ae:	4630      	mov	r0, r6
 80023b0:	f003 ff1c 	bl	80061ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80023b4:	4630      	mov	r0, r6
 80023b6:	f002 fc75 	bl	8004ca4 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
        static FrontendHeap instance;
 80023ba:	4810      	ldr	r0, [pc, #64]	; (80023fc <touchgfx_init+0xe0>)
 80023bc:	f022 fed2 	bl	8025164 <atexit>
 80023c0:	4628      	mov	r0, r5
 80023c2:	f022 fce2 	bl	8024d8a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80023c6:	480e      	ldr	r0, [pc, #56]	; (8002400 <touchgfx_init+0xe4>)
}
 80023c8:	b002      	add	sp, #8
 80023ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80023ce:	f7fe be17 	b.w	8001000 <_ZN11TouchGFXHAL10initializeEv>
 80023d2:	bf00      	nop
 80023d4:	20027efc 	.word	0x20027efc
 80023d8:	2000e144 	.word	0x2000e144
 80023dc:	20009800 	.word	0x20009800
 80023e0:	20000034 	.word	0x20000034
 80023e4:	20009804 	.word	0x20009804
 80023e8:	2000d1b4 	.word	0x2000d1b4
 80023ec:	08026ca8 	.word	0x08026ca8
 80023f0:	08026c0c 	.word	0x08026c0c
 80023f4:	08026c40 	.word	0x08026c40
 80023f8:	08026c74 	.word	0x08026c74
 80023fc:	080022f5 	.word	0x080022f5
 8002400:	2000e0c8 	.word	0x2000e0c8

08002404 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002404:	4801      	ldr	r0, [pc, #4]	; (800240c <touchgfx_taskEntry+0x8>)
 8002406:	f7fe be15 	b.w	8001034 <_ZN11TouchGFXHAL9taskEntryEv>
 800240a:	bf00      	nop
 800240c:	2000e0c8 	.word	0x2000e0c8

08002410 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002410:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 8002412:	490c      	ldr	r1, [pc, #48]	; (8002444 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 8002416:	4c0d      	ldr	r4, [pc, #52]	; (800244c <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 8002418:	4608      	mov	r0, r1
 800241a:	6023      	str	r3, [r4, #0]
 800241c:	f7ff fd78 	bl	8001f10 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002420:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002422:	4610      	mov	r0, r2
 8002424:	f018 f84e 	bl	801a4c4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8002428:	f44f 7348 	mov.w	r3, #800	; 0x320
 800242c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002430:	4904      	ldr	r1, [pc, #16]	; (8002444 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 8002432:	4808      	ldr	r0, [pc, #32]	; (8002454 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8002434:	e9cd 3200 	strd	r3, r2, [sp]
 8002438:	4623      	mov	r3, r4
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800243c:	f7fe feaa 	bl	8001194 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8002440:	b002      	add	sp, #8
 8002442:	bd10      	pop	{r4, pc}
 8002444:	2000d328 	.word	0x2000d328
 8002448:	080263e8 	.word	0x080263e8
 800244c:	2000d324 	.word	0x2000d324
 8002450:	2000e148 	.word	0x2000e148
 8002454:	2000e0c8 	.word	0x2000e0c8

08002458 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002458:	4801      	ldr	r0, [pc, #4]	; (8002460 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800245a:	f7ff bd35 	b.w	8001ec8 <_ZN8STM32DMAD1Ev>
 800245e:	bf00      	nop
 8002460:	2000d328 	.word	0x2000d328

08002464 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002464:	4910      	ldr	r1, [pc, #64]	; (80024a8 <SCB_CleanInvalidateDCache+0x44>)
 8002466:	2300      	movs	r3, #0
{
 8002468:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800246a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800246e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002472:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002476:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800247a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800247e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002482:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002484:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002488:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800248a:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 800248e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002490:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002494:	d2f9      	bcs.n	800248a <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8002496:	3b20      	subs	r3, #32
 8002498:	f113 0f20 	cmn.w	r3, #32
 800249c:	d1f2      	bne.n	8002484 <SCB_CleanInvalidateDCache+0x20>
 800249e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024a2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	4b02      	ldr	r3, [pc, #8]	; (80024b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80024ae:	2290      	movs	r2, #144	; 0x90
 80024b0:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80024be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024c2:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 80024cc:	4770      	bx	lr

080024ce <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80024ce:	4770      	bx	lr

080024d0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	03db      	lsls	r3, r3, #15
 80024d6:	d501      	bpl.n	80024dc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 80024d8:	f7ff bfc4 	b.w	8002464 <SCB_CleanInvalidateDCache>
    }
}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80024e4:	6301      	str	r1, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80024e6:	e9c0 210d 	strd	r2, r1, [r0, #52]	; 0x34
    }
 80024ea:	4770      	bx	lr

080024ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80024ec:	4770      	bx	lr

080024ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80024ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80024f2:	4611      	mov	r1, r2
 80024f4:	6840      	ldr	r0, [r0, #4]
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4718      	bx	r3

080024fc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4604      	mov	r4, r0
    HAL::initialize();
 8002500:	f00c fe3f 	bl	800f182 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002508:	f011 fe10 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 800250c:	4601      	mov	r1, r0
 800250e:	4620      	mov	r0, r4
 8002510:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 8002516:	4620      	mov	r0, r4
 8002518:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800251c:	2300      	movs	r3, #0
 800251e:	461a      	mov	r2, r3
 8002520:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002524:	4a05      	ldr	r2, [pc, #20]	; (800253c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002526:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002528:	4a05      	ldr	r2, [pc, #20]	; (8002540 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002532:	bd38      	pop	{r3, r4, r5, pc}
 8002534:	c00bb800 	.word	0xc00bb800
 8002538:	2000e204 	.word	0x2000e204
 800253c:	2000e1c0 	.word	0x2000e1c0
 8002540:	c0000000 	.word	0xc0000000
 8002544:	000bb800 	.word	0x000bb800

08002548 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002548:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 800254a:	f00c fdcb 	bl	800f0e4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	03db      	lsls	r3, r3, #15
 8002554:	d503      	bpl.n	800255e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 800255a:	f7ff bf83 	b.w	8002464 <SCB_CleanInvalidateDCache>
}
 800255e:	bd08      	pop	{r3, pc}
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002564:	f00c bf19 	b.w	800f39a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002568 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	4604      	mov	r4, r0
 800256c:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800256e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	f009 f9c2 	bl	800b8fc <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8002578:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800257a:	f009 f9ef 	bl	800b95c <osMutexRelease>
        streams[handle].isActive = false;
 800257e:	2124      	movs	r1, #36	; 0x24
 8002580:	2300      	movs	r3, #0
 8002582:	fb01 4505 	mla	r5, r1, r5, r4
 8002586:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
        if (oneIsActive == false)
 800258a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800258e:	b90b      	cbnz	r3, 8002594 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8002590:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002592:	63a3      	str	r3, [r4, #56]	; 0x38
    }
 8002594:	bd38      	pop	{r3, r4, r5, pc}

08002596 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002596:	b510      	push	{r4, lr}
 8002598:	4604      	mov	r4, r0
 800259a:	2148      	movs	r1, #72	; 0x48
 800259c:	f022 fbe7 	bl	8024d6e <_ZdlPvj>
 80025a0:	4620      	mov	r0, r4
 80025a2:	bd10      	pop	{r4, pc}

080025a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 80025a4:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 80025a6:	b131      	cbz	r1, 80025b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 80025aa:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 80025b0:	4804      	ldr	r0, [pc, #16]	; (80025c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 80025b2:	f022 fdb9 	bl	8025128 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 80025b6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80025ba:	bd08      	pop	{r3, pc}
 80025bc:	08026cb4 	.word	0x08026cb4
 80025c0:	08026cc8 	.word	0x08026cc8
 80025c4:	08026e52 	.word	0x08026e52

080025c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80025c8:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80025ca:	b131      	cbz	r1, 80025da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 80025ce:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80025d2:	4a06      	ldr	r2, [pc, #24]	; (80025ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 80025d4:	4806      	ldr	r0, [pc, #24]	; (80025f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 80025d6:	f022 fda7 	bl	8025128 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80025da:	6840      	ldr	r0, [r0, #4]
 80025dc:	4611      	mov	r1, r2
 80025de:	6803      	ldr	r3, [r0, #0]
    }
 80025e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4718      	bx	r3
 80025e8:	08026cb4 	.word	0x08026cb4
 80025ec:	08026e95 	.word	0x08026e95
 80025f0:	08026e52 	.word	0x08026e52

080025f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80025f4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80025f6:	b129      	cbz	r1, 8002604 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 80025fa:	2179      	movs	r1, #121	; 0x79
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002600:	f022 fd92 	bl	8025128 <__assert_func>
    }
 8002604:	68c0      	ldr	r0, [r0, #12]
 8002606:	bd08      	pop	{r3, pc}
 8002608:	08026cb4 	.word	0x08026cb4
 800260c:	08027043 	.word	0x08027043
 8002610:	08026e52 	.word	0x08026e52

08002614 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002614:	b510      	push	{r4, lr}
 8002616:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002618:	b129      	cbz	r1, 8002626 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 800261c:	21a2      	movs	r1, #162	; 0xa2
 800261e:	4a19      	ldr	r2, [pc, #100]	; (8002684 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8002620:	4819      	ldr	r0, [pc, #100]	; (8002688 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8002622:	f022 fd81 	bl	8025128 <__assert_func>
        switch (cmd)
 8002626:	2a05      	cmp	r2, #5
 8002628:	d815      	bhi.n	8002656 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800262a:	e8df f002 	tbb	[pc, r2]
 800262e:	1103      	.short	0x1103
 8002630:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8002634:	6840      	ldr	r0, [r0, #4]
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	4798      	blx	r3
 800263c:	b158      	cbz	r0, 8002656 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 800263e:	2301      	movs	r3, #1
 8002640:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8002644:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            stream.frameCount = 0;
 8002648:	2300      	movs	r3, #0
            stream.tickCount = 0;
 800264a:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 800264e:	e002      	b.n	8002656 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8002650:	2300      	movs	r3, #0
 8002652:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
 8002656:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002658:	6203      	str	r3, [r0, #32]
 800265a:	e7f5      	b.n	8002648 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 800265c:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 800265e:	2301      	movs	r3, #1
 8002660:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 8002664:	e7f0      	b.n	8002648 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8002666:	2300      	movs	r3, #0
 8002668:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
 800266c:	2301      	movs	r3, #1
 800266e:	6203      	str	r3, [r0, #32]
            break;
 8002670:	e7f1      	b.n	8002656 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8002672:	3b00      	subs	r3, #0
 8002674:	bf18      	it	ne
 8002676:	2301      	movne	r3, #1
 8002678:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
 800267c:	e7eb      	b.n	8002656 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800267e:	bf00      	nop
 8002680:	08026cb4 	.word	0x08026cb4
 8002684:	080271f8 	.word	0x080271f8
 8002688:	08026e52 	.word	0x08026e52

0800268c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 800268c:	b510      	push	{r4, lr}
 800268e:	460c      	mov	r4, r1
 8002690:	4611      	mov	r1, r2
 8002692:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8002694:	b12c      	cbz	r4, 80026a2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 8002698:	2190      	movs	r1, #144	; 0x90
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 800269c:	4806      	ldr	r0, [pc, #24]	; (80026b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 800269e:	f022 fd43 	bl	8025128 <__assert_func>
        stream.frameNumber = 0;
 80026a2:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80026a4:	6840      	ldr	r0, [r0, #4]
 80026a6:	6803      	ldr	r3, [r0, #0]
    }
 80026a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4718      	bx	r3
 80026b0:	08026cb4 	.word	0x08026cb4
 80026b4:	080273cc 	.word	0x080273cc
 80026b8:	08026e52 	.word	0x08026e52

080026bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80026bc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80026be:	b129      	cbz	r1, 80026cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 80026c2:	2182      	movs	r1, #130	; 0x82
 80026c4:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 80026c8:	f022 fd2e 	bl	8025128 <__assert_func>
        stream.tickCount = 0;
 80026cc:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 80026d0:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 80026d4:	bd08      	pop	{r3, pc}
 80026d6:	bf00      	nop
 80026d8:	08026cb4 	.word	0x08026cb4
 80026dc:	080275a7 	.word	0x080275a7
 80026e0:	08026e52 	.word	0x08026e52

080026e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80026e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80026e8:	b510      	push	{r4, lr}
 80026ea:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80026ec:	b153      	cbz	r3, 8002704 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80026ee:	f04f 31ff 	mov.w	r1, #4294967295
 80026f2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80026f4:	f009 f902 	bl	800b8fc <osMutexAcquire>
            firstDrawThisFrame = false;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
            uiHasMutex = true;
 80026fe:	2301      	movs	r3, #1
 8002700:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    }
 8002704:	bd10      	pop	{r4, pc}
	...

08002708 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002708:	b510      	push	{r4, lr}
 800270a:	4604      	mov	r4, r0
 800270c:	4610      	mov	r0, r2
        assert(handle < no_streams);
 800270e:	b129      	cbz	r1, 800271c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8002712:	21d0      	movs	r1, #208	; 0xd0
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8002716:	4814      	ldr	r0, [pc, #80]	; (8002768 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8002718:	f022 fd06 	bl	8025128 <__assert_func>
        if (stream.isPlaying)
 800271c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002720:	b133      	cbz	r3, 8002730 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 800272a:	6963      	ldr	r3, [r4, #20]
 800272c:	440b      	add	r3, r1
 800272e:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8002730:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8002734:	b90b      	cbnz	r3, 800273a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8002736:	2001      	movs	r0, #1
    }
 8002738:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800273a:	68a3      	ldr	r3, [r4, #8]
 800273c:	6303      	str	r3, [r0, #48]	; 0x30
            widget.invalidate();
 800273e:	6803      	ldr	r3, [r0, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002744:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8002746:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
 800274a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 800274e:	2800      	cmp	r0, #0
 8002750:	d1f1      	bne.n	8002736 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8002752:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ee      	bne.n	8002738 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800275a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 800275e:	e7eb      	b.n	8002738 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8002760:	08026cb4 	.word	0x08026cb4
 8002764:	08027763 	.word	0x08027763
 8002768:	08026e52 	.word	0x08026e52
 800276c:	20027e98 	.word	0x20027e98

08002770 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002770:	b510      	push	{r4, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8002772:	4c17      	ldr	r4, [pc, #92]	; (80027d0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>)
    HAL::endFrame();
 8002774:	f00c fcf8 	bl	800f168 <_ZN8touchgfx3HAL8endFrameEv>
 8002778:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800277c:	b913      	cbnz	r3, 8002784 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>
 800277e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8002782:	b1ab      	cbz	r3, 80027b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002784:	69e1      	ldr	r1, [r4, #28]
 8002786:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800278a:	4353      	muls	r3, r2
 800278c:	6922      	ldr	r2, [r4, #16]
 800278e:	434a      	muls	r2, r1
 8002790:	4293      	cmp	r3, r2
 8002792:	d30d      	bcc.n	80027b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
        {
            if (allowSkipFrames)
 8002794:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8002798:	b138      	cbz	r0, 80027aa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3a>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80027a0:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80027a2:	bf98      	it	ls
 80027a4:	f102 32ff 	addls.w	r2, r2, #4294967295
 80027a8:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        firstDrawThisFrame = true;
 80027b0:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80027b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
 80027b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
 80027b8:	f009 f98a 	bl	800bad0 <osSemaphoreRelease>
        if (uiHasMutex)
 80027bc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80027c0:	b12b      	cbz	r3, 80027ce <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            MUTEX_UNLOCK(mutexBuffers);
 80027c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80027c4:	f009 f8ca 	bl	800b95c <osMutexRelease>
            uiHasMutex = false;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80027ce:	bd10      	pop	{r4, pc}
 80027d0:	2000e204 	.word	0x2000e204

080027d4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80027d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80027de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027e2:	f3bf 8f6f 	isb	sy
}
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100

080027ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80027ec:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80027f0:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 80027f2:	b9db      	cbnz	r3, 800282c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x40>
        streams[handle].isActive = true;
 80027f4:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80027f6:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 80027f8:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 80027fa:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
 80027fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002800:	6103      	str	r3, [r0, #16]
 8002802:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002804:	f505 223b 	add.w	r2, r5, #765952	; 0xbb000
                streams[i] = Stream();
 8002808:	6143      	str	r3, [r0, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800280a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
                streams[i] = Stream();
 800280e:	6183      	str	r3, [r0, #24]
 8002810:	61c3      	str	r3, [r0, #28]
 8002812:	6203      	str	r3, [r0, #32]
 8002814:	6243      	str	r3, [r0, #36]	; 0x24
 8002816:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800281a:	e9d0 460c 	ldrd	r4, r6, [r0, #48]	; 0x30
 800281e:	4434      	add	r4, r6
 8002820:	42a2      	cmp	r2, r4
 8002822:	d90a      	bls.n	800283a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4e>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8002826:	2152      	movs	r1, #82	; 0x52
 8002828:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 800282a:	e003      	b.n	8002834 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 800282e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8002836:	f022 fc77 	bl	8025128 <__assert_func>
        topBufferRGB += sizeOfOneDecodeBuffer;
 800283a:	6382      	str	r2, [r0, #56]	; 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 800283c:	f44f 7248 	mov.w	r2, #800	; 0x320
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002840:	6085      	str	r5, [r0, #8]
    }
 8002842:	4618      	mov	r0, r3
 8002844:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8002846:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
        format = bufferFormat;
 800284a:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 800284e:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 8002850:	630b      	str	r3, [r1, #48]	; 0x30
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	08027abb 	.word	0x08027abb
 8002858:	08027af6 	.word	0x08027af6
 800285c:	08027904 	.word	0x08027904
 8002860:	08027934 	.word	0x08027934
 8002864:	08026e52 	.word	0x08026e52

08002868 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800286c:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800286e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002870:	f44f 67c8 	mov.w	r7, #1600	; 0x640
            SEM_WAIT(semDecode);
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800287a:	f009 f8ef 	bl	800ba5c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800287e:	f04f 31ff 	mov.w	r1, #4294967295
 8002882:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002884:	f009 f83a 	bl	800b8fc <osMutexAcquire>
                if (stream.doDecode)
 8002888:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800288c:	b343      	cbz	r3, 80028e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800288e:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8002890:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8002894:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8002896:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
 800289a:	f1b8 0f00 	cmp.w	r8, #0
 800289e:	d023      	beq.n	80028e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	4641      	mov	r1, r8
 80028a4:	4628      	mov	r0, r5
 80028a6:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80028b2:	9700      	str	r7, [sp, #0]
 80028b4:	4628      	mov	r0, r5
 80028b6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80028ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028be:	68a1      	ldr	r1, [r4, #8]
 80028c0:	47c0      	blx	r8
                    stream.frameCount++;
 80028c2:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80028c4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
 80028c8:	3301      	adds	r3, #1
 80028ca:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 80028cc:	b1f0      	cbz	r0, 800290c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80028ce:	682b      	ldr	r3, [r5, #0]
 80028d0:	4628      	mov	r0, r5
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	4798      	blx	r3
 80028d6:	3801      	subs	r0, #1
 80028d8:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80028da:	2300      	movs	r3, #0
 80028dc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80028e0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80028e2:	f009 f83b 	bl	800b95c <osMutexRelease>
        while (1)
 80028e6:	e7c5      	b.n	8002874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80028e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028ea:	2a00      	cmp	r2, #0
 80028ec:	d0de      	beq.n	80028ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80028ee:	4628      	mov	r0, r5
 80028f0:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 80028f4:	4798      	blx	r3
 80028f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028f8:	4401      	add	r1, r0
 80028fa:	4628      	mov	r0, r5
 80028fc:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80028fe:	6923      	ldr	r3, [r4, #16]
 8002900:	6a62      	ldr	r2, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
 8002902:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
 8002906:	4413      	add	r3, r2
 8002908:	6123      	str	r3, [r4, #16]
 800290a:	e7cf      	b.n	80028ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                        stream.frameNumber = 1;
 800290c:	60e6      	str	r6, [r4, #12]
 800290e:	e7e4      	b.n	80028da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x72>

08002910 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void *argument)
{
    videoController.decoderTaskEntry();
 8002910:	4801      	ldr	r0, [pc, #4]	; (8002918 <videoTaskFunc+0x8>)
{
 8002912:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002914:	f7ff ffa8 	bl	8002868 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8002918:	2000e204 	.word	0x2000e204

0800291c <_GLOBAL__sub_I_mjpegdecoder1>:
}
 800291c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 800291e:	4814      	ldr	r0, [pc, #80]	; (8002970 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002920:	2500      	movs	r5, #0
 8002922:	f7fe fe01 	bl	8001528 <_ZN20HardwareMJPEGDecoderC1Ev>
 8002926:	4c13      	ldr	r4, [pc, #76]	; (8002974 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 800292a:	462a      	mov	r2, r5
 800292c:	4629      	mov	r1, r5
 800292e:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002930:	6023      	str	r3, [r4, #0]
 8002932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002936:	63a5      	str	r5, [r4, #56]	; 0x38
 8002938:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800293a:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800293c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002940:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002944:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8002948:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 800294c:	e9c4 5501 	strd	r5, r5, [r4, #4]
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002950:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8002954:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002958:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800295c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8002960:	f009 f826 	bl	800b9b0 <osSemaphoreNew>
 8002964:	6420      	str	r0, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8002966:	4628      	mov	r0, r5
 8002968:	f008 ff86 	bl	800b878 <osMutexNew>
 800296c:	6460      	str	r0, [r4, #68]	; 0x44
}
 800296e:	bd38      	pop	{r3, r4, r5, pc}
 8002970:	2000e1c0 	.word	0x2000e1c0
 8002974:	2000e204 	.word	0x2000e204
 8002978:	08027ca4 	.word	0x08027ca4

0800297c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800297c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002980:	b08d      	sub	sp, #52	; 0x34
 8002982:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002984:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 8002988:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 800298c:	9001      	str	r0, [sp, #4]
 800298e:	910b      	str	r1, [sp, #44]	; 0x2c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002990:	fbb3 f3f2 	udiv	r3, r3, r2
 8002994:	9306      	str	r3, [sp, #24]

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002996:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800299e:	2200      	movs	r2, #0
 80029a0:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80029a4:	4401      	add	r1, r0
 80029a6:	4541      	cmp	r1, r8
 80029a8:	d806      	bhi.n	80029b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
 80029aa:	b10a      	cbz	r2, 80029b0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x34>
 80029ac:	4a66      	ldr	r2, [pc, #408]	; (8002b48 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 80029ae:	6293      	str	r3, [r2, #40]	; 0x28
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 80029b0:	9806      	ldr	r0, [sp, #24]
 80029b2:	b00d      	add	sp, #52	; 0x34
 80029b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80029b8:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80029bc:	9a05      	ldr	r2, [sp, #20]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80029be:	9905      	ldr	r1, [sp, #20]
    currentMCU++;
 80029c0:	f108 0801 	add.w	r8, r8, #1
    for(i= 0; i <  16; i+=2)
 80029c4:	f04f 0b00 	mov.w	fp, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80029c8:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80029cc:	fb01 3312 	mls	r3, r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80029d0:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fb01 3302 	mla	r3, r1, r2, r3
 80029da:	9302      	str	r3, [sp, #8]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80029dc:	9b01      	ldr	r3, [sp, #4]
 80029de:	f503 7c80 	add.w	ip, r3, #256	; 0x100
    pLum = pInBuffer;
 80029e2:	4699      	mov	r9, r3
      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 80029e4:	9b02      	ldr	r3, [sp, #8]
 80029e6:	4a59      	ldr	r2, [pc, #356]	; (8002b4c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	f200 8099 	bhi.w	8002b20 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a4>
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80029ee:	f503 65c8 	add.w	r5, r3, #1600	; 0x640
 80029f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80029f8:	441d      	add	r5, r3
        for(k= 0; k<2; k++)
 80029fa:	f10c 0308 	add.w	r3, ip, #8
 80029fe:	9309      	str	r3, [sp, #36]	; 0x24
          for(j=0; j < 8; j+=2)
 8002a00:	f10c 33ff 	add.w	r3, ip, #4294967295
 8002a04:	9f03      	ldr	r7, [sp, #12]
    for(i= 0; i <  16; i+=2)
 8002a06:	2600      	movs	r6, #0
 8002a08:	9304      	str	r3, [sp, #16]
 8002a0a:	f5a5 63c8 	sub.w	r3, r5, #1600	; 0x640
 8002a0e:	9308      	str	r3, [sp, #32]
 8002a10:	9b08      	ldr	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002a12:	3702      	adds	r7, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002a14:	484e      	ldr	r0, [pc, #312]	; (8002b50 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 8002a16:	4433      	add	r3, r6
            ycomp = (int32_t)(*(pLum +j));
 8002a18:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 8002a1c:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002a1e:	9b04      	ldr	r3, [sp, #16]
 8002a20:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002a24:	9304      	str	r3, [sp, #16]
 8002a26:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 8002a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002a2c:	9b04      	ldr	r3, [sp, #16]
 8002a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a32:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002a36:	4848      	ldr	r0, [pc, #288]	; (8002b58 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 8002a38:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002a3c:	4847      	ldr	r0, [pc, #284]	; (8002b5c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 8002a3e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002a42:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002a44:	4a46      	ldr	r2, [pc, #280]	; (8002b60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 8002a46:	4414      	add	r4, r2
 8002a48:	4610      	mov	r0, r2
 8002a4a:	eb04 020e 	add.w	r2, r4, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002a4e:	eb00 4323 	add.w	r3, r0, r3, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002a52:	4401      	add	r1, r0
            *(__IO uint16_t *)pOutAddr =
 8002a54:	9808      	ldr	r0, [sp, #32]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002a56:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 8002a5a:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002a5e:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002a62:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002a64:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 8002a68:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 8002a6c:	0892      	lsrs	r2, r2, #2
 8002a6e:	0152      	lsls	r2, r2, #5
 8002a70:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002a74:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002a78:	5382      	strh	r2, [r0, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 8002a7a:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002a7e:	980a      	ldr	r0, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002a80:	eb04 020e 	add.w	r2, r4, lr
 8002a84:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002a88:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002a8c:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002a8e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002a92:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002a96:	0892      	lsrs	r2, r2, #2
 8002a98:	0152      	lsls	r2, r2, #5
 8002a9a:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002a9e:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 8002aa2:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002aa6:	8042      	strh	r2, [r0, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 8002aa8:	f897 e006 	ldrb.w	lr, [r7, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002aac:	eb04 020e 	add.w	r2, r4, lr
 8002ab0:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ab4:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ab8:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002aba:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002abe:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ac2:	0892      	lsrs	r2, r2, #2
 8002ac4:	0152      	lsls	r2, r2, #5
 8002ac6:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002aca:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 8002ace:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
 8002ad2:	53aa      	strh	r2, [r5, r6]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ad6:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ad8:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ada:	440a      	add	r2, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002adc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ae0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ae4:	089b      	lsrs	r3, r3, #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ae6:	08e4      	lsrs	r4, r4, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ae8:	015b      	lsls	r3, r3, #5
 8002aea:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8002aee:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002af2:	19aa      	adds	r2, r5, r6
          for(j=0; j < 8; j+=2)
 8002af4:	3604      	adds	r6, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002af6:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
          for(j=0; j < 8; j+=2)
 8002afa:	2e10      	cmp	r6, #16
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002afc:	8053      	strh	r3, [r2, #2]
          for(j=0; j < 8; j+=2)
 8002afe:	d187      	bne.n	8002a10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x94>
          pLum += 64;
 8002b00:	9b03      	ldr	r3, [sp, #12]
            pChrom++;
 8002b02:	f10c 0c04 	add.w	ip, ip, #4
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8002b06:	3510      	adds	r5, #16
          pLum += 64;
 8002b08:	3340      	adds	r3, #64	; 0x40
 8002b0a:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 8002b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b0e:	4563      	cmp	r3, ip
 8002b10:	f47f af76 	bne.w	8002a00 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x84>
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8002b14:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 8002b16:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8002b1a:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8002b1e:	9302      	str	r3, [sp, #8]
    for(i= 0; i <  16; i+=2)
 8002b20:	f10b 0b02 	add.w	fp, fp, #2
 8002b24:	f1bb 0f10 	cmp.w	fp, #16
 8002b28:	d107      	bne.n	8002b3a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1be>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8002b2a:	9b01      	ldr	r3, [sp, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b32:	9301      	str	r3, [sp, #4]
    JPEG_ConvertorParams.ScaledWidth = 800 * 2;
 8002b34:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002b38:	e732      	b.n	80029a0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
      if(i == 8)
 8002b3a:	f1bb 0f08 	cmp.w	fp, #8
        pLum = pInBuffer + 128;
 8002b3e:	bf04      	itt	eq
 8002b40:	9b01      	ldreq	r3, [sp, #4]
 8002b42:	f103 0980 	addeq.w	r9, r3, #128	; 0x80
 8002b46:	e74d      	b.n	80029e4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
 8002b48:	20010ecc 	.word	0x20010ecc
 8002b4c:	000bb7ff 	.word	0x000bb7ff
 8002b50:	2000fa4c 	.word	0x2000fa4c
 8002b54:	2000ee4c 	.word	0x2000ee4c
 8002b58:	2000f64c 	.word	0x2000f64c
 8002b5c:	2000f24c 	.word	0x2000f24c
 8002b60:	08027cdc 	.word	0x08027cdc

08002b64 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002b68:	0a1b      	lsrs	r3, r3, #8
{
 8002b6a:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002b6c:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b6e:	4b4f      	ldr	r3, [pc, #316]	; (8002cac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 8002b70:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 8002b74:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b78:	9202      	str	r2, [sp, #8]

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b7c:	691b      	ldr	r3, [r3, #16]
{
 8002b7e:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002b80:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002b82:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 8002b84:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4573      	cmp	r3, lr
 8002b8c:	d803      	bhi.n	8002b96 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002b8e:	9805      	ldr	r0, [sp, #20]
 8002b90:	b00d      	add	sp, #52	; 0x34
 8002b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002b96:	ea4f 120e 	mov.w	r2, lr, lsl #4
 8002b9a:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 8002b9c:	f10e 0e01 	add.w	lr, lr, #1
 8002ba0:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 8002ba4:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002ba6:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002bb0:	9b02      	ldr	r3, [sp, #8]
 8002bb2:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002bbc:	9300      	str	r3, [sp, #0]
    currentMCU++;
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002bc2:	9b07      	ldr	r3, [sp, #28]
 8002bc4:	9a00      	ldr	r2, [sp, #0]
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d969      	bls.n	8002c9e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 8002bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bcc:	46d0      	mov	r8, sl
 8002bce:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 8002bd2:	f107 0308 	add.w	r3, r7, #8
 8002bd6:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002bd8:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 8002bda:	2400      	movs	r4, #0
 8002bdc:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 8002bde:	f108 0301 	add.w	r3, r8, #1
 8002be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8002be4:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 8002be8:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002bec:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002bee:	9b01      	ldr	r3, [sp, #4]
 8002bf0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8002bf8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002bfc:	9b01      	ldr	r3, [sp, #4]
 8002bfe:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002c04:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002c0a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002c10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c14:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c1c:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c20:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c24:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 8002c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c28:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c2c:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c30:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c32:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c36:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c3a:	0892      	lsrs	r2, r2, #2
 8002c3c:	0152      	lsls	r2, r2, #5
 8002c3e:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002c42:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 8002c46:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002c4a:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 8002c4e:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 8002c52:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c56:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c58:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002c5a:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 8002c5c:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c5e:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c62:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c66:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002c6a:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002c6e:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002c72:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8002c76:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 8002c7a:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002c7e:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 8002c80:	d1b0      	bne.n	8002be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 8002c82:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 8002c84:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8002c86:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;
 8002c8a:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 8002c8e:	42bb      	cmp	r3, r7
 8002c90:	d1a2      	bne.n	8002bd8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c92:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 8002c94:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002c98:	9b03      	ldr	r3, [sp, #12]
 8002c9a:	441a      	add	r2, r3
 8002c9c:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 8002c9e:	9b04      	ldr	r3, [sp, #16]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	9304      	str	r3, [sp, #16]
 8002ca4:	d18d      	bne.n	8002bc2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8002ca6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002caa:	e76b      	b.n	8002b84 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002cac:	20010ecc 	.word	0x20010ecc
 8002cb0:	2000ee4c 	.word	0x2000ee4c
 8002cb4:	2000fa4c 	.word	0x2000fa4c
 8002cb8:	2000f64c 	.word	0x2000f64c
 8002cbc:	2000f24c 	.word	0x2000f24c
 8002cc0:	08027cdc 	.word	0x08027cdc

08002cc4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc8:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002cca:	22c0      	movs	r2, #192	; 0xc0
{
 8002ccc:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 8002cce:	4654      	mov	r4, sl
{
 8002cd0:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002cd2:	fbb3 f3f2 	udiv	r3, r3, r2

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cd6:	4a35      	ldr	r2, [pc, #212]	; (8002dac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002cd8:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cda:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002cdc:	9100      	str	r1, [sp, #0]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002cde:	6a91      	ldr	r1, [r2, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002ce0:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002ce2:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002ce4:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 8002ce6:	9b04      	ldr	r3, [sp, #16]
 8002ce8:	eb03 020a 	add.w	r2, r3, sl
 8002cec:	42a2      	cmp	r2, r4
 8002cee:	d803      	bhi.n	8002cf8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	b009      	add	sp, #36	; 0x24
 8002cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cf8:	00e1      	lsls	r1, r4, #3
 8002cfa:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;
 8002cfc:	3401      	adds	r4, #1
    pLum = pInBuffer;
 8002cfe:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002d00:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d04:	9a01      	ldr	r2, [sp, #4]
 8002d06:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002d0a:	9a00      	ldr	r2, [sp, #0]
 8002d0c:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;
 8002d10:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d12:	0052      	lsls	r2, r2, #1
    currentMCU++;
 8002d14:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002d16:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002d1a:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002d1e:	9905      	ldr	r1, [sp, #20]
 8002d20:	4291      	cmp	r1, r2
 8002d22:	d93d      	bls.n	8002da0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 8002d24:	9907      	ldr	r1, [sp, #28]
 8002d26:	f106 3eff 	add.w	lr, r6, #4294967295
 8002d2a:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 8002d2c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002d30:	9102      	str	r1, [sp, #8]
 8002d32:	f105 0110 	add.w	r1, r5, #16
 8002d36:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8002d38:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002d3a:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 8002d3e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002d42:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 8002d48:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d4a:	4f1a      	ldr	r7, [pc, #104]	; (8002db4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 8002d4c:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d50:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8002d54:	440f      	add	r7, r1
 8002d56:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d5a:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d60:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d64:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002d66:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d6c:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002d70:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d74:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 8002d76:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002d78:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d7a:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 8002d7e:	eb01 4828 	add.w	r8, r1, r8, asr #16
 8002d82:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 8002d86:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8002d8a:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr =
 8002d8e:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 8002d92:	429d      	cmp	r5, r3
 8002d94:	d1d0      	bne.n	8002d38 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002d96:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 8002d98:	3608      	adds	r6, #8
          pLum += 8;
 8002d9a:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002d9e:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 8002da0:	9b03      	ldr	r3, [sp, #12]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	9303      	str	r3, [sp, #12]
 8002da6:	d1ba      	bne.n	8002d1e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8002da8:	30c0      	adds	r0, #192	; 0xc0
 8002daa:	e79c      	b.n	8002ce6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 8002dac:	20010ecc 	.word	0x20010ecc
 8002db0:	08027cdc 	.word	0x08027cdc
 8002db4:	2000fa4c 	.word	0x2000fa4c
 8002db8:	2000ee4c 	.word	0x2000ee4c
 8002dbc:	2000f64c 	.word	0x2000f64c
 8002dc0:	2000f24c 	.word	0x2000f24c

08002dc4 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	4604      	mov	r4, r0
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8002dcc:	0998      	lsrs	r0, r3, #6
{
 8002dce:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
 8002dd0:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002dd4:	491a      	ldr	r1, [pc, #104]	; (8002e40 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002dd6:	9303      	str	r3, [sp, #12]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002dd8:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002ddc:	6909      	ldr	r1, [r1, #16]
 8002dde:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d802      	bhi.n	8002dec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002de6:	b005      	add	sp, #20
 8002de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002dec:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 8002dee:	46a4      	mov	ip, r4
    currentMCU++;
 8002df0:	3201      	adds	r2, #1
 8002df2:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002df4:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002df8:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002dfc:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002e06:	9901      	ldr	r1, [sp, #4]
 8002e08:	4299      	cmp	r1, r3
 8002e0a:	d914      	bls.n	8002e36 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 8002e0c:	9902      	ldr	r1, [sp, #8]
 8002e0e:	46e2      	mov	sl, ip
 8002e10:	4419      	add	r1, r3
 8002e12:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8002e16:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8002e1a:	08f5      	lsrs	r5, r6, #3
 8002e1c:	08b6      	lsrs	r6, r6, #2
 8002e1e:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002e22:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 8002e26:	432e      	orrs	r6, r5
 8002e28:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 8002e2c:	4559      	cmp	r1, fp
 8002e2e:	d1f2      	bne.n	8002e16 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 8002e30:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002e34:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8002e36:	3f01      	subs	r7, #1
 8002e38:	d1e5      	bne.n	8002e06 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002e3a:	3440      	adds	r4, #64	; 0x40
 8002e3c:	e7d0      	b.n	8002de0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002e3e:	bf00      	nop
 8002e40:	20010ecc 	.word	0x20010ecc

08002e44 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002e4c:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002e4e:	0a18      	lsrs	r0, r3, #8
{
 8002e50:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8002e52:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002e56:	4928      	ldr	r1, [pc, #160]	; (8002ef8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002e58:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002e5a:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002e5e:	6909      	ldr	r1, [r1, #16]
 8002e60:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8002e62:	9b03      	ldr	r3, [sp, #12]
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d802      	bhi.n	8002e6e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002e68:	b005      	add	sp, #20
 8002e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002e6e:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 8002e70:	46ae      	mov	lr, r5
    currentMCU++;
 8002e72:	3201      	adds	r2, #1
 8002e74:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002e78:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002e7c:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002e80:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002e84:	0049      	lsls	r1, r1, #1
 8002e86:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002e8a:	9b00      	ldr	r3, [sp, #0]
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	d92c      	bls.n	8002eea <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;
 8002e90:	9b02      	ldr	r3, [sp, #8]
 8002e92:	4674      	mov	r4, lr
 8002e94:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 8002e96:	f106 0310 	add.w	r3, r6, #16
 8002e9a:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 8002e9c:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 8002ea0:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002ea2:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8002ea6:	fb13 f308 	smulbb	r3, r3, r8
 8002eaa:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002eae:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002eb2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002eb6:	fb13 f308 	smulbb	r3, r3, r8
 8002eba:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002ebe:	109b      	asrs	r3, r3, #2
 8002ec0:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002ec2:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8002ec6:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 8002eca:	fb1b fb08 	smulbb	fp, fp, r8
 8002ece:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002ed2:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 8002ed6:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002ed8:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr =
 8002edc:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 8002ee0:	429e      	cmp	r6, r3
 8002ee2:	d1db      	bne.n	8002e9c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 8002ee4:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002ee8:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 8002eea:	f1bc 0c01 	subs.w	ip, ip, #1
 8002eee:	d1cc      	bne.n	8002e8a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002ef0:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8002ef4:	e7b5      	b.n	8002e62 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8002ef6:	bf00      	nop
 8002ef8:	20010ecc 	.word	0x20010ecc

08002efc <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002efe:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002f00:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002f02:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002f04:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002f0a:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002f0c:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002f0e:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002f12:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002f14:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002f16:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002f18:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002f1a:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002f1c:	d13c      	bne.n	8002f98 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002f1e:	2801      	cmp	r0, #1
 8002f20:	d122      	bne.n	8002f68 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002f22:	4823      	ldr	r0, [pc, #140]	; (8002fb0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
 8002f24:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

      if(JPEG_ConvertorParams.LineOffset != 0)
 8002f26:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002f2a:	bf18      	it	ne
 8002f2c:	f1c1 0110 	rsbne	r1, r1, #16
 8002f30:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8002f32:	2110      	movs	r1, #16
 8002f34:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 8002f36:	6219      	str	r1, [r3, #32]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002f38:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002f3a:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002f3c:	4421      	add	r1, r4
 8002f3e:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8002f40:	0061      	lsls	r1, r4, #1
 8002f42:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002f44:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002f48:	fb00 4411 	mls	r4, r0, r1, r4
 8002f4c:	b104      	cbz	r4, 8002f50 <TGFX_JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8002f4e:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8002f50:	6a1c      	ldr	r4, [r3, #32]
 8002f52:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8002f56:	fb04 5510 	mls	r5, r4, r0, r5
 8002f5a:	b105      	cbz	r5, 8002f5e <TGFX_JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8002f5c:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002f5e:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8002f60:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002f62:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8002f64:	6011      	str	r1, [r2, #0]
}
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002f68:	2802      	cmp	r0, #2
 8002f6a:	d10b      	bne.n	8002f84 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002f6c:	4811      	ldr	r0, [pc, #68]	; (8002fb4 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
 8002f6e:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8002f70:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002f74:	bf18      	it	ne
 8002f76:	f1c1 0110 	rsbne	r1, r1, #16
 8002f7a:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8002f80:	2108      	movs	r1, #8
 8002f82:	e7d8      	b.n	8002f36 <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8002f84:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002f86:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8002f88:	f014 0107 	ands.w	r1, r4, #7
 8002f8c:	d001      	beq.n	8002f92 <TGFX_JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002f8e:	f1c1 0108 	rsb	r1, r1, #8
 8002f92:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 8002f94:	2108      	movs	r1, #8
 8002f96:	e7cd      	b.n	8002f34 <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8002f98:	b90e      	cbnz	r6, 8002f9e <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002f9a:	4808      	ldr	r0, [pc, #32]	; (8002fbc <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 8002f9c:	e7f3      	b.n	8002f86 <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8002f9e:	2e30      	cmp	r6, #48	; 0x30
 8002fa0:	d101      	bne.n	8002fa6 <TGFX_JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002fa2:	4807      	ldr	r0, [pc, #28]	; (8002fc0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>)
 8002fa4:	e7ef      	b.n	8002f86 <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	e7dd      	b.n	8002f66 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6a>
 8002faa:	bf00      	nop
 8002fac:	20010ecc 	.word	0x20010ecc
 8002fb0:	0800297d 	.word	0x0800297d
 8002fb4:	08002b65 	.word	0x08002b65
 8002fb8:	08002cc5 	.word	0x08002cc5
 8002fbc:	08002dc5 	.word	0x08002dc5
 8002fc0:	08002e45 	.word	0x08002e45

08002fc4 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8002fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc8:	f8df c250 	ldr.w	ip, [pc, #592]	; 800321c <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8003220 <TGFX_JPEG_InitColorTables+0x25c>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002fd2:	f644 4b8b 	movw	fp, #19595	; 0x4c8b
 8002fd6:	4f7e      	ldr	r7, [pc, #504]	; (80031d0 <TGFX_JPEG_InitColorTables+0x20c>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002fd8:	f249 6a45 	movw	sl, #38469	; 0x9645
 8002fdc:	4e7d      	ldr	r6, [pc, #500]	; (80031d4 <TGFX_JPEG_InitColorTables+0x210>)
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002fde:	f641 592f 	movw	r9, #7471	; 0x1d2f
 8002fe2:	4d7d      	ldr	r5, [pc, #500]	; (80031d8 <TGFX_JPEG_InitColorTables+0x214>)
 8002fe4:	4c7d      	ldr	r4, [pc, #500]	; (80031dc <TGFX_JPEG_InitColorTables+0x218>)
 8002fe6:	487e      	ldr	r0, [pc, #504]	; (80031e0 <TGFX_JPEG_InitColorTables+0x21c>)
 8002fe8:	497e      	ldr	r1, [pc, #504]	; (80031e4 <TGFX_JPEG_InitColorTables+0x220>)
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002fea:	fb0b f203 	mul.w	r2, fp, r3
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002fee:	f64e 3e2f 	movw	lr, #60207	; 0xeb2f
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ff2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002ff6:	1412      	asrs	r2, r2, #16
 8002ff8:	f848 2b04 	str.w	r2, [r8], #4
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ffc:	fb0a f203 	mul.w	r2, sl, r3
 8003000:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003004:	1412      	asrs	r2, r2, #16
 8003006:	f84c 2b04 	str.w	r2, [ip], #4
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800300a:	fb09 f203 	mul.w	r2, r9, r3
 800300e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003012:	1412      	asrs	r2, r2, #16
 8003014:	f847 2b04 	str.w	r2, [r7], #4
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003018:	4a73      	ldr	r2, [pc, #460]	; (80031e8 <TGFX_JPEG_InitColorTables+0x224>)
 800301a:	435a      	muls	r2, r3
 800301c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003020:	1412      	asrs	r2, r2, #16
 8003022:	f846 2b04 	str.w	r2, [r6], #4
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003026:	4a71      	ldr	r2, [pc, #452]	; (80031ec <TGFX_JPEG_InitColorTables+0x228>)
 8003028:	435a      	muls	r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800302a:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800302c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003034:	ea4f 4222 	mov.w	r2, r2, asr #16
 8003038:	f845 2b04 	str.w	r2, [r5], #4
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800303c:	f343 024f 	sbfx	r2, r3, #1, #16
 8003040:	f844 2b04 	str.w	r2, [r4], #4
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003044:	4a6a      	ldr	r2, [pc, #424]	; (80031f0 <TGFX_JPEG_InitColorTables+0x22c>)
 8003046:	fb02 e203 	mla	r2, r2, r3, lr
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800304a:	f249 4ed0 	movw	lr, #38096	; 0x94d0
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800304e:	ea4f 4222 	mov.w	r2, r2, asr #16
 8003052:	f840 2b04 	str.w	r2, [r0], #4
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003056:	4a67      	ldr	r2, [pc, #412]	; (80031f4 <TGFX_JPEG_InitColorTables+0x230>)
 8003058:	fb02 e203 	mla	r2, r2, r3, lr
 800305c:	ea4f 4222 	mov.w	r2, r2, asr #16
 8003060:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8003064:	d1c1      	bne.n	8002fea <TGFX_JPEG_InitColorTables+0x26>
 8003066:	4c64      	ldr	r4, [pc, #400]	; (80031f8 <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8003068:	2200      	movs	r2, #0
  {
    for(j = 0; j < 16; j++)
 800306a:	00d3      	lsls	r3, r2, #3
  for (i = 0; i <= 255; i++)
 800306c:	4625      	mov	r5, r4
    for(j = 0; j < 16; j++)
 800306e:	2100      	movs	r1, #0
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
 8003070:	2907      	cmp	r1, #7
 8003072:	f240 80a6 	bls.w	80031c2 <TGFX_JPEG_InitColorTables+0x1fe>
 8003076:	2a07      	cmp	r2, #7
 8003078:	bf8c      	ite	hi
 800307a:	f103 0078 	addhi.w	r0, r3, #120	; 0x78
      else  if((j>=8) && (i<8)) offset+= 56;
 800307e:	f103 0038 	addls.w	r0, r3, #56	; 0x38
    for(j = 0; j < 16; j++)
 8003082:	3101      	adds	r1, #1
 8003084:	3301      	adds	r3, #1
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8003086:	f825 0b02 	strh.w	r0, [r5], #2
    for(j = 0; j < 16; j++)
 800308a:	2910      	cmp	r1, #16
 800308c:	d1f0      	bne.n	8003070 <TGFX_JPEG_InitColorTables+0xac>
  for(i = 0; i < 16; i++)
 800308e:	3201      	adds	r2, #1
 8003090:	3420      	adds	r4, #32
 8003092:	2a10      	cmp	r2, #16
 8003094:	d1e9      	bne.n	800306a <TGFX_JPEG_InitColorTables+0xa6>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8003096:	2000      	movs	r0, #0
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8003098:	f8df e188 	ldr.w	lr, [pc, #392]	; 8003224 <TGFX_JPEG_InitColorTables+0x260>
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800309c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003228 <TGFX_JPEG_InitColorTables+0x264>

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 80030a0:	f8df 9188 	ldr.w	r9, [pc, #392]	; 800322c <TGFX_JPEG_InitColorTables+0x268>
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030a4:	f8df a188 	ldr.w	sl, [pc, #392]	; 8003230 <TGFX_JPEG_InitColorTables+0x26c>
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030a8:	0844      	lsrs	r4, r0, #1
    for(j = 0; j < 16; j++)
 80030aa:	2500      	movs	r5, #0
 80030ac:	00c3      	lsls	r3, r0, #3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030ae:	00e4      	lsls	r4, r4, #3
 80030b0:	fa1f fc83 	uxth.w	ip, r3
 80030b4:	b2a4      	uxth	r4, r4
 80030b6:	0142      	lsls	r2, r0, #5
 80030b8:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80030bc:	4f4f      	ldr	r7, [pc, #316]	; (80031fc <TGFX_JPEG_InitColorTables+0x238>)
    for(j = 0; j < 16; j++)
 80030be:	3501      	adds	r5, #1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030c0:	1919      	adds	r1, r3, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80030c2:	4463      	add	r3, ip
    for(j = 0; j < 16; j++)
 80030c4:	2d10      	cmp	r5, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030c6:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80030c8:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030ca:	f501 7680 	add.w	r6, r1, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80030ce:	f103 0b80 	add.w	fp, r3, #128	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 80030d2:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030d6:	b2b6      	uxth	r6, r6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 80030d8:	f822 3008 	strh.w	r3, [r2, r8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030dc:	53d6      	strh	r6, [r2, r7]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80030de:	4f48      	ldr	r7, [pc, #288]	; (8003200 <TGFX_JPEG_InitColorTables+0x23c>)
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80030e0:	f822 600a 	strh.w	r6, [r2, sl]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80030e4:	f822 b007 	strh.w	fp, [r2, r7]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 80030e8:	f501 7ba0 	add.w	fp, r1, #320	; 0x140
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 80030ec:	f501 71c0 	add.w	r1, r1, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 80030f0:	f822 b00e 	strh.w	fp, [r2, lr]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 80030f4:	f822 1009 	strh.w	r1, [r2, r9]
    for(j = 0; j < 16; j++)
 80030f8:	f102 0202 	add.w	r2, r2, #2
 80030fc:	d1dc      	bne.n	80030b8 <TGFX_JPEG_InitColorTables+0xf4>
  for(i = 0; i < 16; i++)
 80030fe:	3001      	adds	r0, #1
 8003100:	2810      	cmp	r0, #16
 8003102:	d1d1      	bne.n	80030a8 <TGFX_JPEG_InitColorTables+0xe4>
 8003104:	2100      	movs	r1, #0
 8003106:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003234 <TGFX_JPEG_InitColorTables+0x270>
 800310a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8003238 <TGFX_JPEG_InitColorTables+0x274>
 800310e:	4608      	mov	r0, r1
 8003110:	f8df e128 	ldr.w	lr, [pc, #296]	; 800323c <TGFX_JPEG_InitColorTables+0x278>
 8003114:	f8df c128 	ldr.w	ip, [pc, #296]	; 8003240 <TGFX_JPEG_InitColorTables+0x27c>
 8003118:	b283      	uxth	r3, r0
 800311a:	eb09 0701 	add.w	r7, r9, r1
 800311e:	eb08 0601 	add.w	r6, r8, r1
 8003122:	eb0e 0501 	add.w	r5, lr, r1
    }
  }

  for(i = 0; i < 8; i++)
  {
    for(j = 0; j < 8; j++)
 8003126:	f103 0208 	add.w	r2, r3, #8
 800312a:	eb0c 0401 	add.w	r4, ip, r1
 800312e:	b292      	uxth	r2, r2
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8003130:	f103 0a40 	add.w	sl, r3, #64	; 0x40
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8003134:	f827 3b02 	strh.w	r3, [r7], #2
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8003138:	f826 ab02 	strh.w	sl, [r6], #2
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800313c:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 8003140:	f825 ab02 	strh.w	sl, [r5], #2
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8003144:	f103 0ac0 	add.w	sl, r3, #192	; 0xc0
    for(j = 0; j < 8; j++)
 8003148:	3301      	adds	r3, #1
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800314a:	f824 ab02 	strh.w	sl, [r4], #2
    for(j = 0; j < 8; j++)
 800314e:	b29b      	uxth	r3, r3
 8003150:	4293      	cmp	r3, r2
 8003152:	d1ed      	bne.n	8003130 <TGFX_JPEG_InitColorTables+0x16c>
  for(i = 0; i < 8; i++)
 8003154:	3008      	adds	r0, #8
 8003156:	3110      	adds	r1, #16
 8003158:	2840      	cmp	r0, #64	; 0x40
 800315a:	d1dd      	bne.n	8003118 <TGFX_JPEG_InitColorTables+0x154>
 800315c:	4d29      	ldr	r5, [pc, #164]	; (8003204 <TGFX_JPEG_InitColorTables+0x240>)
  for (i = 0; i <= 255; i++)
 800315e:	2300      	movs	r3, #0
 8003160:	4c29      	ldr	r4, [pc, #164]	; (8003208 <TGFX_JPEG_InitColorTables+0x244>)
 8003162:	482a      	ldr	r0, [pc, #168]	; (800320c <TGFX_JPEG_InitColorTables+0x248>)
 8003164:	492a      	ldr	r1, [pc, #168]	; (8003210 <TGFX_JPEG_InitColorTables+0x24c>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003166:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8003244 <TGFX_JPEG_InitColorTables+0x280>
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800316a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8003248 <TGFX_JPEG_InitColorTables+0x284>
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800316e:	4f29      	ldr	r7, [pc, #164]	; (8003214 <TGFX_JPEG_InitColorTables+0x250>)
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003170:	4e29      	ldr	r6, [pc, #164]	; (8003218 <TGFX_JPEG_InitColorTables+0x254>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003172:	fb0e f203 	mul.w	r2, lr, r3
 8003176:	f5a2 0232 	sub.w	r2, r2, #11665408	; 0xb20000
 800317a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800317e:	1412      	asrs	r2, r2, #16
 8003180:	f845 2b04 	str.w	r2, [r5], #4
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003184:	fb0c f203 	mul.w	r2, ip, r3
 8003188:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800318c:	f5a2 42a0 	sub.w	r2, r2, #20480	; 0x5000
 8003190:	1412      	asrs	r2, r2, #16
 8003192:	f844 2b04 	str.w	r2, [r4], #4
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8003196:	fb07 f203 	mul.w	r2, r7, r3
 800319a:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800319e:	f502 42d0 	add.w	r2, r2, #26624	; 0x6800
 80031a2:	f840 2b04 	str.w	r2, [r0], #4
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80031a6:	fb06 f203 	mul.w	r2, r6, r3
  for (i = 0; i <= 255; i++)
 80031aa:	3301      	adds	r3, #1
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80031ac:	f502 1230 	add.w	r2, r2, #2883584	; 0x2c0000
  for (i = 0; i <= 255; i++)
 80031b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80031b4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80031b8:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 80031bc:	d1d9      	bne.n	8003172 <TGFX_JPEG_InitColorTables+0x1ae>
}
 80031be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j<8) && (i>=8)) offset+= 64;
 80031c2:	2a07      	cmp	r2, #7
 80031c4:	bf8c      	ite	hi
 80031c6:	f103 0040 	addhi.w	r0, r3, #64	; 0x40
      offset =  j + (i*8);
 80031ca:	4618      	movls	r0, r3
 80031cc:	e759      	b.n	8003082 <TGFX_JPEG_InitColorTables+0xbe>
 80031ce:	bf00      	nop
 80031d0:	2000ea4c 	.word	0x2000ea4c
 80031d4:	20011a8c 	.word	0x20011a8c
 80031d8:	2000fe4c 	.word	0x2000fe4c
 80031dc:	2000e24c 	.word	0x2000e24c
 80031e0:	2001024c 	.word	0x2001024c
 80031e4:	2000e64c 	.word	0x2000e64c
 80031e8:	ffffd4d1 	.word	0xffffd4d1
 80031ec:	ffffab30 	.word	0xffffab30
 80031f0:	ffff94d1 	.word	0xffff94d1
 80031f4:	ffffeb30 	.word	0xffffeb30
 80031f8:	2001188c 	.word	0x2001188c
 80031fc:	20010a4c 	.word	0x20010a4c
 8003200:	20010c4c 	.word	0x20010c4c
 8003204:	2000fa4c 	.word	0x2000fa4c
 8003208:	2000ee4c 	.word	0x2000ee4c
 800320c:	2000f64c 	.word	0x2000f64c
 8003210:	2000f24c 	.word	0x2000f24c
 8003214:	ffff4930 	.word	0xffff4930
 8003218:	ffffa7e8 	.word	0xffffa7e8
 800321c:	2001064c 	.word	0x2001064c
 8003220:	20011e8c 	.word	0x20011e8c
 8003224:	20010f0c 	.word	0x20010f0c
 8003228:	2001110c 	.word	0x2001110c
 800322c:	2001138c 	.word	0x2001138c
 8003230:	2001158c 	.word	0x2001158c
 8003234:	2001180c 	.word	0x2001180c
 8003238:	20010e4c 	.word	0x20010e4c
 800323c:	2001130c 	.word	0x2001130c
 8003240:	2001178c 	.word	0x2001178c
 8003244:	000166e8 	.word	0x000166e8
 8003248:	0001c5a0 	.word	0x0001c5a0

0800324c <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 800324c:	4901      	ldr	r1, [pc, #4]	; (8003254 <vApplicationIdleHook+0x8>)
 800324e:	2000      	movs	r0, #0
 8003250:	f00a b8d4 	b.w	800d3fc <vTaskSetApplicationTaskTag>
 8003254:	08001489 	.word	0x08001489

08003258 <StartDefaultTask>:
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */

  /* USER CODE END 5 */
}
 8003258:	4770      	bx	lr
	...

0800325c <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800325c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800325e:	f44f 7340 	mov.w	r3, #768	; 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003262:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4817      	ldr	r0, [pc, #92]	; (80032c8 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800326a:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800326c:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800326e:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003270:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003272:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003274:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003278:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 800327a:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800327c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800327e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003282:	f007 f80f 	bl	800a2a4 <HAL_QSPI_Command>
 8003286:	b9e0      	cbnz	r0, 80032c2 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 8003288:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 800328a:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800328c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003290:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003292:	480d      	ldr	r0, [pc, #52]	; (80032c8 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8003294:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003298:	2310      	movs	r3, #16
 800329a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800329e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032a0:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80032a2:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 80032a6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032aa:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 80032ac:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80032b2:	f007 f8f2 	bl	800a49a <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 80032b6:	3800      	subs	r0, #0
 80032b8:	bf18      	it	ne
 80032ba:	2001      	movne	r0, #1
}
 80032bc:	b015      	add	sp, #84	; 0x54
 80032be:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 80032c2:	2001      	movs	r0, #1
 80032c4:	e7fa      	b.n	80032bc <QSPI_WriteEnable.constprop.0+0x60>
 80032c6:	bf00      	nop
 80032c8:	200125ac 	.word	0x200125ac

080032cc <SystemClock_Config>:
{
 80032cc:	b510      	push	{r4, lr}
 80032ce:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032d0:	2210      	movs	r2, #16
 80032d2:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032d4:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032d6:	a809      	add	r0, sp, #36	; 0x24
 80032d8:	f021 ffb6 	bl	8025248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032dc:	2214      	movs	r2, #20
 80032de:	2100      	movs	r1, #0
 80032e0:	a802      	add	r0, sp, #8
 80032e2:	f021 ffb1 	bl	8025248 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 80032e8:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ea:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <SystemClock_Config+0x98>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003306:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003308:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003318:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800331c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003320:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003324:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003328:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800332c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800332e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003332:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003334:	f007 f942 	bl	800a5bc <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003338:	f006 fe50 	bl	8009fdc <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800333c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800333e:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003340:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003342:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003346:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800334a:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800334e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003352:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003354:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003356:	f007 fb25 	bl	800a9a4 <HAL_RCC_ClockConfig>
}
 800335a:	b014      	add	sp, #80	; 0x50
 800335c:	bd10      	pop	{r4, pc}
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40007000 	.word	0x40007000

08003368 <MX_I2C4_Init>:
{
 8003368:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 800336a:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800336c:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 800336e:	4c0d      	ldr	r4, [pc, #52]	; (80033a4 <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003372:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003374:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003376:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800337a:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 800337c:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003380:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003384:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003388:	f005 fafb 	bl	8008982 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800338c:	4629      	mov	r1, r5
 800338e:	4620      	mov	r0, r4
 8003390:	f005 fcdb 	bl	8008d4a <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003394:	4629      	mov	r1, r5
 8003396:	4620      	mov	r0, r4
}
 8003398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800339c:	f005 bcfb 	b.w	8008d96 <HAL_I2CEx_ConfigDigitalFilter>
 80033a0:	40006000 	.word	0x40006000
 80033a4:	20012460 	.word	0x20012460
 80033a8:	00c0eaff 	.word	0x00c0eaff

080033ac <main>:
{
 80033ac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80033b0:	b0bb      	sub	sp, #236	; 0xec

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80033b2:	2210      	movs	r2, #16
 80033b4:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80033b6:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80033b8:	a82c      	add	r0, sp, #176	; 0xb0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80033ba:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80033bc:	f021 ff44 	bl	8025248 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80033c0:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 80033c2:	f004 f887 	bl	80074d4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80033c6:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
 80033ca:	4bcb      	ldr	r3, [pc, #812]	; (80036f8 <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033cc:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80033ce:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80033d2:	f240 1701 	movw	r7, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80033d6:	e9cd e32d 	strd	lr, r3, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80033da:	4bc8      	ldr	r3, [pc, #800]	; (80036fc <main+0x350>)
 80033dc:	932f      	str	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033de:	f004 f897 	bl	8007510 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 80033e2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80033e6:	f88d 40b1 	strb.w	r4, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80033ea:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033ec:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.BaseAddress = 0x90000000;
 80033ee:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80033f0:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80033f4:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80033f8:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033fc:	f004 f888 	bl	8007510 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003400:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003402:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003404:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003408:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800340c:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800340e:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003412:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003416:	f004 f87b 	bl	8007510 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 800341a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800341e:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003420:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003424:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003426:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003428:	f88d 50b1 	strb.w	r5, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800342c:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003430:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003434:	f004 f86c 	bl	8007510 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003438:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800343a:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800343c:	f88d 60b1 	strb.w	r6, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003440:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003444:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003448:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800344c:	f004 f860 	bl	8007510 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003450:	4630      	mov	r0, r6
 8003452:	f004 f84d 	bl	80074f0 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8003456:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800345a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800345e:	4aa8      	ldr	r2, [pc, #672]	; (8003700 <main+0x354>)
 8003460:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003464:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003468:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800346c:	6953      	ldr	r3, [r2, #20]
 800346e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003472:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003474:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003478:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800347c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003480:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003484:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003488:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800348c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003490:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003494:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003496:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800349a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800349c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80034a0:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80034a2:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80034a6:	d2f9      	bcs.n	800349c <main+0xf0>
    } while(sets-- != 0U);
 80034a8:	3b20      	subs	r3, #32
 80034aa:	f113 0f20 	cmn.w	r3, #32
 80034ae:	d1f2      	bne.n	8003496 <main+0xea>
 80034b0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80034b4:	6953      	ldr	r3, [r2, #20]
 80034b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ba:	6153      	str	r3, [r2, #20]
 80034bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034c0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80034c4:	f003 fac0 	bl	8006a48 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c8:	2501      	movs	r5, #1
  SystemClock_Config();
 80034ca:	f7ff feff 	bl	80032cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ce:	2214      	movs	r2, #20
 80034d0:	2100      	movs	r1, #0
 80034d2:	a82c      	add	r0, sp, #176	; 0xb0
 80034d4:	f021 feb8 	bl	8025248 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034d8:	4b8a      	ldr	r3, [pc, #552]	; (8003704 <main+0x358>)
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80034da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034de:	488a      	ldr	r0, [pc, #552]	; (8003708 <main+0x35c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e6:	2400      	movs	r4, #0
 80034e8:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ec:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 80034f0:	f04f 0802 	mov.w	r8, #2
  hdsi.Instance = DSI;
 80034f4:	4f85      	ldr	r7, [pc, #532]	; (800370c <main+0x360>)
  hdsi.Init.TXEscapeCkdiv = 4;
 80034f6:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80034fc:	f44f 7980 	mov.w	r9, #256	; 0x100
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003502:	f002 0210 	and.w	r2, r2, #16
 8003506:	9202      	str	r2, [sp, #8]
 8003508:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800350a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350c:	f042 0202 	orr.w	r2, r2, #2
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
 8003512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003514:	f002 0202 	and.w	r2, r2, #2
 8003518:	9203      	str	r2, [sp, #12]
 800351a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800351c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
 8003524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003526:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800352a:	9204      	str	r2, [sp, #16]
 800352c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800352e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003530:	f042 0208 	orr.w	r2, r2, #8
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
 8003536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003538:	f002 0208 	and.w	r2, r2, #8
 800353c:	9205      	str	r2, [sp, #20]
 800353e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003542:	f042 0204 	orr.w	r2, r2, #4
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
 8003548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354a:	f002 0204 	and.w	r2, r2, #4
 800354e:	9206      	str	r2, [sp, #24]
 8003550:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
 800355a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003560:	9207      	str	r2, [sp, #28]
 8003562:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003566:	f042 0220 	orr.w	r2, r2, #32
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
 800356c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356e:	f002 0220 	and.w	r2, r2, #32
 8003572:	9208      	str	r2, [sp, #32]
 8003574:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003584:	9209      	str	r2, [sp, #36]	; 0x24
 8003586:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
 8003590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003592:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003596:	920a      	str	r2, [sp, #40]	; 0x28
 8003598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800359a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80035a2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80035ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80035ae:	f005 f849 	bl	8008644 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80035b2:	2200      	movs	r2, #0
 80035b4:	21c0      	movs	r1, #192	; 0xc0
 80035b6:	4856      	ldr	r0, [pc, #344]	; (8003710 <main+0x364>)
 80035b8:	f005 f844 	bl	8008644 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80035bc:	2200      	movs	r2, #0
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	4854      	ldr	r0, [pc, #336]	; (8003714 <main+0x368>)
 80035c2:	f005 f83f 	bl	8008644 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2102      	movs	r1, #2
 80035ca:	484f      	ldr	r0, [pc, #316]	; (8003708 <main+0x35c>)
 80035cc:	f005 f83a 	bl	8008644 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80035d0:	a92c      	add	r1, sp, #176	; 0xb0
 80035d2:	484d      	ldr	r0, [pc, #308]	; (8003708 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d4:	e9cd 652c 	strd	r6, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80035d8:	e9cd 552e 	strd	r5, r5, [sp, #184]	; 0xb8
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f004 fea6 	bl	800832c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 80035e0:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e2:	a92c      	add	r1, sp, #176	; 0xb0
 80035e4:	484a      	ldr	r0, [pc, #296]	; (8003710 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e6:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ee:	f004 fe9d 	bl	800832c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80035f2:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80035f4:	a92c      	add	r1, sp, #176	; 0xb0
 80035f6:	4847      	ldr	r0, [pc, #284]	; (8003714 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f8:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fc:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8003600:	f004 fe94 	bl	800832c <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8003604:	a92c      	add	r1, sp, #176	; 0xb0
 8003606:	4840      	ldr	r0, [pc, #256]	; (8003708 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003608:	e9cd 852c 	strd	r8, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360c:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8003610:	f004 fe8c 	bl	800832c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8003614:	4840      	ldr	r0, [pc, #256]	; (8003718 <main+0x36c>)
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <main+0x370>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003618:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 800361a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800361c:	6205      	str	r5, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800361e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003622:	f003 ffa1 	bl	8007568 <HAL_CRC_Init>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8003626:	4631      	mov	r1, r6
 8003628:	4622      	mov	r2, r4
 800362a:	4837      	ldr	r0, [pc, #220]	; (8003708 <main+0x35c>)
 800362c:	f005 f80a 	bl	8008644 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8003630:	2014      	movs	r0, #20
 8003632:	f003 fa2d 	bl	8006a90 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003636:	4631      	mov	r1, r6
 8003638:	462a      	mov	r2, r5
 800363a:	4833      	ldr	r0, [pc, #204]	; (8003708 <main+0x35c>)
 800363c:	f005 f802 	bl	8008644 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8003640:	200a      	movs	r0, #10
 8003642:	f003 fa25 	bl	8006a90 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8003646:	2224      	movs	r2, #36	; 0x24
 8003648:	4621      	mov	r1, r4
 800364a:	a815      	add	r0, sp, #84	; 0x54
  DSI_PLLInitTypeDef PLLInit = {0};
 800364c:	940e      	str	r4, [sp, #56]	; 0x38
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800364e:	f021 fdfb 	bl	8025248 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8003652:	2218      	movs	r2, #24
 8003654:	4621      	mov	r1, r4
 8003656:	a80f      	add	r0, sp, #60	; 0x3c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8003658:	2664      	movs	r6, #100	; 0x64
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800365a:	f021 fdf5 	bl	8025248 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 800365e:	2234      	movs	r2, #52	; 0x34
 8003660:	4621      	mov	r1, r4
 8003662:	a82c      	add	r0, sp, #176	; 0xb0
 8003664:	f021 fdf0 	bl	8025248 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8003668:	222c      	movs	r2, #44	; 0x2c
 800366a:	4621      	mov	r1, r4
 800366c:	a81e      	add	r0, sp, #120	; 0x78
 800366e:	f021 fdeb 	bl	8025248 <memset>
  hdsi.Instance = DSI;
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <main+0x374>)
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003674:	a90c      	add	r1, sp, #48	; 0x30
 8003676:	4638      	mov	r0, r7
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8003678:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800367c:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800367e:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8003682:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003686:	f004 fb07 	bl	8007c98 <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800368a:	a915      	add	r1, sp, #84	; 0x54
 800368c:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 800368e:	941d      	str	r4, [sp, #116]	; 0x74
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8003690:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8003694:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
  HostTimeouts.HighSpeedReadTimeout = 0;
 8003698:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800369c:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HostTimeouts.LowPowerWriteTimeout = 0;
 80036a0:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80036a4:	f004 fd22 	bl	80080ec <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80036a8:	f04f 0c1c 	mov.w	ip, #28
 80036ac:	2321      	movs	r3, #33	; 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 80036ae:	f04f 0e0f 	mov.w	lr, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80036b2:	a90f      	add	r1, sp, #60	; 0x3c
 80036b4:	4638      	mov	r0, r7
  PhyTimings.ClockLaneLP2HSTime = 33;
 80036b6:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  PhyTimings.DataLaneLP2HSTime = 25;
 80036ba:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 80036bc:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 80036c0:	e9cd e311 	strd	lr, r3, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80036c4:	f004 fcd5 	bl	8008072 <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80036c8:	4651      	mov	r1, sl
 80036ca:	4638      	mov	r0, r7
 80036cc:	f004 fcc0 	bl	8008050 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80036d0:	f242 7110 	movw	r1, #10000	; 0x2710
 80036d4:	4638      	mov	r0, r7
 80036d6:	f004 fe13 	bl	8008300 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 80036da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036de:	4638      	mov	r0, r7
 80036e0:	f004 fa78 	bl	8007bd4 <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80036e4:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80036e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80036ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80036f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036f4:	e016      	b.n	8003724 <main+0x378>
 80036f6:	bf00      	nop
 80036f8:	03000012 	.word	0x03000012
 80036fc:	01010001 	.word	0x01010001
 8003700:	e000ed00 	.word	0xe000ed00
 8003704:	40023800 	.word	0x40023800
 8003708:	40022400 	.word	0x40022400
 800370c:	20012444 	.word	0x20012444
 8003710:	40020800 	.word	0x40020800
 8003714:	40021400 	.word	0x40021400
 8003718:	20012308 	.word	0x20012308
 800371c:	40023000 	.word	0x40023000
 8003720:	40016c00 	.word	0x40016c00
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003724:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8003728:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800372c:	e9cd 932c 	strd	r9, r3, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8003730:	f44f 6300 	mov.w	r3, #2048	; 0x800
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003734:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8003738:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800373c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003740:	e9cd 1330 	strd	r1, r3, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8003744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003748:	a92c      	add	r1, sp, #176	; 0xb0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800374a:	e9cd 0332 	strd	r0, r3, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800374e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003752:	4638      	mov	r0, r7
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8003754:	e9cd 6334 	strd	r6, r3, [sp, #208]	; 0xd0
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  hltdc.Instance = LTDC;
 800375c:	4ec9      	ldr	r6, [pc, #804]	; (8003a84 <main+0x6d8>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800375e:	e9cd c336 	strd	ip, r3, [sp, #216]	; 0xd8
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003762:	f004 fc41 	bl	8007fe8 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003766:	23c8      	movs	r3, #200	; 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8003768:	a91e      	add	r1, sp, #120	; 0x78
 800376a:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800376c:	9528      	str	r5, [sp, #160]	; 0xa0
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800376e:	e9cd 3920 	strd	r3, r9, [sp, #128]	; 0x80
  CmdCfg.ColorCoding = DSI_RGB565;
 8003772:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8003776:	e9cd 4a22 	strd	r4, sl, [sp, #136]	; 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800377a:	e9cd 8424 	strd	r8, r4, [sp, #144]	; 0x90
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 800377e:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8003782:	f004 fbbf 	bl	8007f04 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8003786:	4621      	mov	r1, r4
 8003788:	4638      	mov	r0, r7
 800378a:	f004 fbaa 	bl	8007ee2 <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800378e:	4621      	mov	r1, r4
 8003790:	2234      	movs	r2, #52	; 0x34
 8003792:	a81e      	add	r0, sp, #120	; 0x78
 8003794:	f021 fd58 	bl	8025248 <memset>
  hltdc.Instance = LTDC;
 8003798:	4abb      	ldr	r2, [pc, #748]	; (8003a88 <main+0x6dc>)
  hltdc.Init.AccumulatedActiveH = 482;
 800379a:	f04f 0eca 	mov.w	lr, #202	; 0xca
  hltdc.Init.TotalHeigh = 483;
 800379e:	23cb      	movs	r3, #203	; 0xcb
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80037a0:	4630      	mov	r0, r6
  hltdc.Init.Backcolor.Blue = 0;
 80037a2:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 80037a4:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Red = 0;
 80037a8:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80037ac:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 80037b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80037b4:	e9c6 e209 	strd	lr, r2, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 80037b8:	f240 12e3 	movw	r2, #483	; 0x1e3
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80037bc:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 483;
 80037c0:	e9c6 320b 	strd	r3, r2, [r6, #44]	; 0x2c
  hltdc.Init.HorizontalSync = 1;
 80037c4:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 80037c8:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80037cc:	f006 fad0 	bl	8009d70 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80037d0:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80037d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 200;
 80037d6:	23c8      	movs	r3, #200	; 0xc8
  pLayerCfg.WindowY1 = 480;
 80037d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowX0 = 0;
 80037dc:	941e      	str	r4, [sp, #120]	; 0x78
  pLayerCfg.Backcolor.Blue = 0;
 80037de:	f8ad 40a8 	strh.w	r4, [sp, #168]	; 0xa8
  pLayerCfg.ImageHeight = 480;
 80037e2:	9229      	str	r2, [sp, #164]	; 0xa4
  pLayerCfg.Backcolor.Red = 0;
 80037e4:	f88d 40aa 	strb.w	r4, [sp, #170]	; 0xaa
  pLayerCfg.Alpha0 = 0;
 80037e8:	e9cd 1423 	strd	r1, r4, [sp, #140]	; 0x8c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80037ec:	2105      	movs	r1, #5
 80037ee:	e9cd 0125 	strd	r0, r1, [sp, #148]	; 0x94
  pLayerCfg.FBStartAdress = 0xC0000000;
 80037f2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80037f6:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 200;
 80037f8:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80037fc:	e9cd 2821 	strd	r2, r8, [sp, #132]	; 0x84
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003800:	a91e      	add	r1, sp, #120	; 0x78
 8003802:	4622      	mov	r2, r4
  pLayerCfg.WindowY0 = 0;
 8003804:	e9cd 341f 	strd	r3, r4, [sp, #124]	; 0x7c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003808:	f006 fb7e 	bl	8009f08 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 800380c:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 800380e:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 8003810:	6993      	ldr	r3, [r2, #24]
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8003818:	f004 fcce 	bl	80081b8 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 800381c:	4629      	mov	r1, r5
 800381e:	4640      	mov	r0, r8
 8003820:	f002 fea0 	bl	8006564 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8003824:	2328      	movs	r3, #40	; 0x28
 8003826:	2215      	movs	r2, #21
 8003828:	4621      	mov	r1, r4
 800382a:	4638      	mov	r0, r7
 800382c:	9400      	str	r4, [sp, #0]
 800382e:	f004 fcf6 	bl	800821e <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8003832:	a92c      	add	r1, sp, #176	; 0xb0
 8003834:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8003836:	9436      	str	r4, [sp, #216]	; 0xd8
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003838:	2720      	movs	r7, #32
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800383a:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800383e:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8003842:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8003846:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800384a:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800384e:	f004 fbcb 	bl	8007fe8 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8003852:	4622      	mov	r2, r4
 8003854:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003858:	4630      	mov	r0, r6
 800385a:	f006 fb83 	bl	8009f64 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 800385e:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003860:	4e8a      	ldr	r6, [pc, #552]	; (8003a8c <main+0x6e0>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003862:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 8003866:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003868:	a92c      	add	r1, sp, #176	; 0xb0
 800386a:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 800386c:	432b      	orrs	r3, r5
 800386e:	6193      	str	r3, [r2, #24]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003870:	4b87      	ldr	r3, [pc, #540]	; (8003a90 <main+0x6e4>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003872:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8003874:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003878:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800387c:	2340      	movs	r3, #64	; 0x40
 800387e:	e9c6 7304 	strd	r7, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003882:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003886:	f44f 7740 	mov.w	r7, #768	; 0x300
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800388a:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800388e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003892:	e9c6 c308 	strd	ip, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003896:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003898:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.SelfRefreshTime = 4;
 800389c:	e9cd 3a2d 	strd	r3, sl, [sp, #180]	; 0xb4
  SdramTiming.WriteRecoveryTime = 2;
 80038a0:	e9cd 382f 	strd	r3, r8, [sp, #188]	; 0xbc
  SdramTiming.RCDDelay = 3;
 80038a4:	e9cd 8b31 	strd	r8, fp, [sp, #196]	; 0xc4
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80038a8:	f007 fbf6 	bl	800b098 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80038ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038b0:	a91e      	add	r1, sp, #120	; 0x78
 80038b2:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 80038b4:	940f      	str	r4, [sp, #60]	; 0x3c
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80038b6:	e9cd 591e 	strd	r5, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 80038ba:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80038be:	f007 fc0b 	bl	800b0d8 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80038c2:	4628      	mov	r0, r5
 80038c4:	f003 f8e4 	bl	8006a90 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80038c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038cc:	a91e      	add	r1, sp, #120	; 0x78
 80038ce:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80038d0:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 80038d4:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80038d8:	f007 fbfe 	bl	800b0d8 <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 80038dc:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80038de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038e2:	a91e      	add	r1, sp, #120	; 0x78
 80038e4:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = 0;
 80038e6:	e9cd 3420 	strd	r3, r4, [sp, #128]	; 0x80
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80038ea:	e9cd b91e 	strd	fp, r9, [sp, #120]	; 0x78
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80038ee:	f007 fbf3 	bl	800b0d8 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80038f2:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80038f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038fa:	a91e      	add	r1, sp, #120	; 0x78
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80038fc:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80038fe:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 8003900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    Command->AutoRefreshNumber      = 1;
 8003902:	9520      	str	r5, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = tmpmrd;
 8003904:	9321      	str	r3, [sp, #132]	; 0x84
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003906:	e9cd a91e 	strd	sl, r9, [sp, #120]	; 0x78
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800390a:	f007 fbe5 	bl	800b0d8 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800390e:	f240 712a 	movw	r1, #1834	; 0x72a
 8003912:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 8003914:	4e5f      	ldr	r6, [pc, #380]	; (8003a94 <main+0x6e8>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8003916:	f007 fbfe 	bl	800b116 <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 800391a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800391e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003922:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8003924:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 8003926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800392a:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 800392c:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003930:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003932:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003936:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800393a:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800393e:	f006 fc5d 	bl	800a1fc <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003942:	9732      	str	r7, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003944:	2766      	movs	r7, #102	; 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	a92c      	add	r1, sp, #176	; 0xb0
 800394c:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 800394e:	972c      	str	r7, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_NONE;
 8003950:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003952:	9431      	str	r4, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003954:	9439      	str	r4, [sp, #228]	; 0xe4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003956:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800395a:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800395e:	f006 fca1 	bl	800a2a4 <HAL_QSPI_Command>
 8003962:	2800      	cmp	r0, #0
 8003964:	f040 80bb 	bne.w	8003ade <main+0x732>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003968:	2499      	movs	r4, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	a92c      	add	r1, sp, #176	; 0xb0
 8003970:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 8003972:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003974:	f006 fc96 	bl	800a2a4 <HAL_QSPI_Command>
 8003978:	2800      	cmp	r0, #0
 800397a:	f040 80b0 	bne.w	8003ade <main+0x732>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800397e:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	a92c      	add	r1, sp, #176	; 0xb0
 8003988:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800398a:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 800398c:	972c      	str	r7, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800398e:	f006 fc89 	bl	800a2a4 <HAL_QSPI_Command>
 8003992:	2800      	cmp	r0, #0
 8003994:	f040 80a3 	bne.w	8003ade <main+0x732>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	a92c      	add	r1, sp, #176	; 0xb0
 800399e:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80039a0:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039a2:	f006 fc7f 	bl	800a2a4 <HAL_QSPI_Command>
 80039a6:	4604      	mov	r4, r0
 80039a8:	2800      	cmp	r0, #0
 80039aa:	f040 8098 	bne.w	8003ade <main+0x732>
  HAL_Delay( 1000 );
 80039ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039b2:	f003 f86d 	bl	8006a90 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80039b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039ba:	aa1e      	add	r2, sp, #120	; 0x78
 80039bc:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80039be:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80039c0:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039c4:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 80039c6:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80039ca:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction     = READ_STATUS_REG_CMD;
 80039cc:	2305      	movs	r3, #5
 80039ce:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode        = QSPI_DATA_1_LINE;
 80039d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039d4:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039d6:	f241 3388 	movw	r3, #5000	; 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 80039da:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
  s_config.StatusBytesSize = 1;
 80039de:	e9cd 5421 	strd	r5, r4, [sp, #132]	; 0x84
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039e2:	f006 fd5a 	bl	800a49a <HAL_QSPI_AutoPolling>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d179      	bne.n	8003ade <main+0x732>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80039ea:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 80039ee:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80039f6:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80039f8:	2305      	movs	r3, #5
 80039fa:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80039fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a00:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003a04:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a08:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a0c:	4630      	mov	r0, r6
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003a0e:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a10:	f006 fc48 	bl	800a2a4 <HAL_QSPI_Command>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d162      	bne.n	8003ade <main+0x732>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	a915      	add	r1, sp, #84	; 0x54
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f006 fcdc 	bl	800a3dc <HAL_QSPI_Receive>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d15a      	bne.n	8003ade <main+0x732>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a28:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DataMode          = QSPI_DATA_NONE;
 8003a2c:	9035      	str	r0, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003a2e:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a34:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003a36:	2306      	movs	r3, #6
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a38:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a3a:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003a3c:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a3e:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003a42:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a46:	4630      	mov	r0, r6
 8003a48:	f006 fc2c 	bl	800a2a4 <HAL_QSPI_Command>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d146      	bne.n	8003ade <main+0x732>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003a50:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 8003a52:	462c      	mov	r4, r5
 8003a54:	9521      	str	r5, [sp, #132]	; 0x84
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003a56:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003a5a:	9322      	str	r3, [sp, #136]	; 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003a5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a60:	aa1e      	add	r2, sp, #120	; 0x78
 8003a62:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003a64:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003a66:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a68:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8003a6a:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003a6e:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a70:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003a74:	9535      	str	r5, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WREN;
 8003a76:	e9cd 881e 	strd	r8, r8, [sp, #120]	; 0x78
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a7a:	f006 fd0e 	bl	800a49a <HAL_QSPI_AutoPolling>
 8003a7e:	bb70      	cbnz	r0, 8003ade <main+0x732>
 8003a80:	e00a      	b.n	8003a98 <main+0x6ec>
 8003a82:	bf00      	nop
 8003a84:	20012504 	.word	0x20012504
 8003a88:	40016800 	.word	0x40016800
 8003a8c:	200125f8 	.word	0x200125f8
 8003a90:	a0000140 	.word	0xa0000140
 8003a94:	200125ac 	.word	0x200125ac
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a98:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 8003a9c:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003aa4:	9332      	str	r3, [sp, #200]	; 0xc8
  reg |= MX25L512_SR_QUADEN;
 8003aa6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003aaa:	942c      	str	r4, [sp, #176]	; 0xb0
  reg |= MX25L512_SR_QUADEN;
 8003aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003ab0:	9535      	str	r5, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ab2:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ab6:	e9cd 4036 	strd	r4, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003aba:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003abe:	4630      	mov	r0, r6
  reg |= MX25L512_SR_QUADEN;
 8003ac0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ac4:	f006 fbee 	bl	800a2a4 <HAL_QSPI_Command>
 8003ac8:	b948      	cbnz	r0, 8003ade <main+0x732>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	a915      	add	r1, sp, #84	; 0x54
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f006 fc2a 	bl	800a32a <HAL_QSPI_Transmit>
 8003ad6:	b910      	cbnz	r0, 8003ade <main+0x732>
  HAL_Delay( 40 );
 8003ad8:	2028      	movs	r0, #40	; 0x28
 8003ada:	f002 ffd9 	bl	8006a90 <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ade:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	a92c      	add	r1, sp, #176	; 0xb0
 8003ae8:	48b8      	ldr	r0, [pc, #736]	; (8003dcc <main+0xa20>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003aea:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = ENTER_QUAD_CMD;
 8003aec:	2335      	movs	r3, #53	; 0x35
 8003aee:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003af0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003af2:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DataMode          = QSPI_DATA_NONE;
 8003af6:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003af8:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003afa:	9339      	str	r3, [sp, #228]	; 0xe4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003afc:	e9cd 3337 	strd	r3, r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b00:	f006 fbd0 	bl	800a2a4 <HAL_QSPI_Command>
 8003b04:	b9d0      	cbnz	r0, 8003b3c <main+0x790>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8003b06:	2341      	movs	r3, #65	; 0x41
 8003b08:	2440      	movs	r4, #64	; 0x40
  s_config.Interval        = 0x10;
 8003b0a:	2501      	movs	r5, #1
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003b0c:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b0e:	aa1e      	add	r2, sp, #120	; 0x78
 8003b10:	a92c      	add	r1, sp, #176	; 0xb0
 8003b12:	48ae      	ldr	r0, [pc, #696]	; (8003dcc <main+0xa20>)
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8003b14:	e9cd 431e 	strd	r4, r3, [sp, #120]	; 0x78
  s_config.Interval        = 0x10;
 8003b18:	2310      	movs	r3, #16
 8003b1a:	e9cd 3520 	strd	r3, r5, [sp, #128]	; 0x80
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b22:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b28:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003b2a:	2305      	movs	r3, #5
 8003b2c:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003b2e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003b32:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b34:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b38:	f006 fcaf 	bl	800a49a <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003b3c:	23b7      	movs	r3, #183	; 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003b3e:	f44f 7440 	mov.w	r4, #768	; 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003b42:	931e      	str	r3, [sp, #120]	; 0x78
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003b44:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003b46:	9424      	str	r4, [sp, #144]	; 0x90
  s_command.DataMode          = QSPI_DATA_NONE;
 8003b48:	9327      	str	r3, [sp, #156]	; 0x9c
  s_command.DummyCycles       = 0;
 8003b4a:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003b4c:	932b      	str	r3, [sp, #172]	; 0xac
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003b4e:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003b52:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003b56:	f7ff fb81 	bl	800325c <QSPI_WriteEnable.constprop.0>
 8003b5a:	bb18      	cbnz	r0, 8003ba4 <main+0x7f8>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	a91e      	add	r1, sp, #120	; 0x78
 8003b62:	489a      	ldr	r0, [pc, #616]	; (8003dcc <main+0xa20>)
 8003b64:	f006 fb9e 	bl	800a2a4 <HAL_QSPI_Command>
 8003b68:	b9e0      	cbnz	r0, 8003ba4 <main+0x7f8>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003b6a:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8003b6c:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003b6e:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003b70:	aa15      	add	r2, sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003b72:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003b74:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  s_config.Match           = 0;
 8003b78:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003b7a:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003b7c:	9335      	str	r3, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WIP;
 8003b7e:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003b80:	9432      	str	r4, [sp, #200]	; 0xc8
  s_config.Mask            = MX25L512_SR_WIP;
 8003b82:	9316      	str	r3, [sp, #88]	; 0x58
  s_config.StatusBytesSize = 1;
 8003b84:	e9cd 3018 	strd	r3, r0, [sp, #96]	; 0x60
  s_config.Interval        = 0x10;
 8003b88:	2310      	movs	r3, #16
 8003b8a:	9317      	str	r3, [sp, #92]	; 0x5c
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003b8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003b90:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003b94:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003b98:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003b9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b9e:	488b      	ldr	r0, [pc, #556]	; (8003dcc <main+0xa20>)
 8003ba0:	f006 fc7b 	bl	800a49a <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003ba4:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003ba6:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003baa:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 8003bae:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003bb0:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003bb2:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb8:	a92c      	add	r1, sp, #176	; 0xb0
 8003bba:	4884      	ldr	r0, [pc, #528]	; (8003dcc <main+0xa20>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003bbc:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003bbe:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003bc0:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003bc2:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003bc6:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003bca:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bce:	f006 fb69 	bl	800a2a4 <HAL_QSPI_Command>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d14f      	bne.n	8003c76 <main+0x8ca>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	a91e      	add	r1, sp, #120	; 0x78
 8003bdc:	487b      	ldr	r0, [pc, #492]	; (8003dcc <main+0xa20>)
 8003bde:	f006 fbfd 	bl	800a3dc <HAL_QSPI_Receive>
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d147      	bne.n	8003c76 <main+0x8ca>
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003be6:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8003be8:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003bf0:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003bf2:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003bf4:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003bf6:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003bfa:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003bfe:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c02:	4872      	ldr	r0, [pc, #456]	; (8003dcc <main+0xa20>)
 8003c04:	f006 fb4e 	bl	800a2a4 <HAL_QSPI_Command>
 8003c08:	bba8      	cbnz	r0, 8003c76 <main+0x8ca>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8003c12:	486e      	ldr	r0, [pc, #440]	; (8003dcc <main+0xa20>)
 8003c14:	f006 fbe2 	bl	800a3dc <HAL_QSPI_Receive>
 8003c18:	bb68      	cbnz	r0, 8003c76 <main+0x8ca>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003c1a:	f7ff fb1f 	bl	800325c <QSPI_WriteEnable.constprop.0>
 8003c1e:	bb50      	cbnz	r0, 8003c76 <main+0x8ca>
  s_command.NbData            = 2;
 8003c20:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	22c0      	movs	r2, #192	; 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c24:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003c26:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003c28:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003c2a:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c2c:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c30:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c34:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 8003c38:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003c3c:	2103      	movs	r1, #3
 8003c3e:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003c42:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c46:	4861      	ldr	r0, [pc, #388]	; (8003dcc <main+0xa20>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c4c:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c50:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003c52:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c54:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003c58:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c5c:	f006 fb22 	bl	800a2a4 <HAL_QSPI_Command>
 8003c60:	b948      	cbnz	r0, 8003c76 <main+0x8ca>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	a91e      	add	r1, sp, #120	; 0x78
 8003c68:	4858      	ldr	r0, [pc, #352]	; (8003dcc <main+0xa20>)
 8003c6a:	f006 fb5e 	bl	800a32a <HAL_QSPI_Transmit>
 8003c6e:	b910      	cbnz	r0, 8003c76 <main+0x8ca>
  HAL_Delay( 40 );
 8003c70:	2028      	movs	r0, #40	; 0x28
 8003c72:	f002 ff0d 	bl	8006a90 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003c76:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c78:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003c7c:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 8003c80:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003c82:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003c84:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	a92c      	add	r1, sp, #176	; 0xb0
 8003c8c:	484f      	ldr	r0, [pc, #316]	; (8003dcc <main+0xa20>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c8e:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003c90:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003c92:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c94:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c98:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c9c:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ca0:	f006 fb00 	bl	800a2a4 <HAL_QSPI_Command>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d14b      	bne.n	8003d40 <main+0x994>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	a91e      	add	r1, sp, #120	; 0x78
 8003cae:	4847      	ldr	r0, [pc, #284]	; (8003dcc <main+0xa20>)
 8003cb0:	f006 fb94 	bl	800a3dc <HAL_QSPI_Receive>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d143      	bne.n	8003d40 <main+0x994>
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003cb8:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8003cba:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003cc2:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003cc4:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003cc6:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003cc8:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ccc:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003cd0:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd4:	483d      	ldr	r0, [pc, #244]	; (8003dcc <main+0xa20>)
 8003cd6:	f006 fae5 	bl	800a2a4 <HAL_QSPI_Command>
 8003cda:	bb88      	cbnz	r0, 8003d40 <main+0x994>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8003ce4:	4839      	ldr	r0, [pc, #228]	; (8003dcc <main+0xa20>)
 8003ce6:	f006 fb79 	bl	800a3dc <HAL_QSPI_Receive>
 8003cea:	bb48      	cbnz	r0, 8003d40 <main+0x994>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003cec:	f7ff fab6 	bl	800325c <QSPI_WriteEnable.constprop.0>
 8003cf0:	bb30      	cbnz	r0, 8003d40 <main+0x994>
  s_command.NbData            = 2;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003cf6:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003cf8:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003cfa:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003cfc:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003cfe:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d02:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d06:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 8003d0a:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003d0e:	2106      	movs	r1, #6
 8003d10:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003d14:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d18:	482c      	ldr	r0, [pc, #176]	; (8003dcc <main+0xa20>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003d1a:	f023 0307 	bic.w	r3, r3, #7
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d22:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003d24:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003d2a:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d2e:	f006 fab9 	bl	800a2a4 <HAL_QSPI_Command>
 8003d32:	b928      	cbnz	r0, 8003d40 <main+0x994>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d38:	a91e      	add	r1, sp, #120	; 0x78
 8003d3a:	4824      	ldr	r0, [pc, #144]	; (8003dcc <main+0xa20>)
 8003d3c:	f006 faf5 	bl	800a32a <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003d40:	f44f 7340 	mov.w	r3, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003d44:	2400      	movs	r4, #0
  hdma2d.Instance = DMA2D;
 8003d46:	4d22      	ldr	r5, [pc, #136]	; (8003dd0 <main+0xa24>)
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003d48:	aa1e      	add	r2, sp, #120	; 0x78
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003d4a:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8003d4c:	23ec      	movs	r3, #236	; 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003d4e:	a92c      	add	r1, sp, #176	; 0xb0
 8003d50:	481e      	ldr	r0, [pc, #120]	; (8003dcc <main+0xa20>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8003d52:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003d54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d58:	9439      	str	r4, [sp, #228]	; 0xe4
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8003d5a:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003d5e:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003d60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d64:	4e1b      	ldr	r6, [pc, #108]	; (8003dd4 <main+0xa28>)
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003d66:	f44f 2940 	mov.w	r9, #786432	; 0xc0000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003d6a:	932f      	str	r3, [sp, #188]	; 0xbc
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003d6c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  hcan1.Init.Prescaler = 25;
 8003d70:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003de4 <main+0xa38>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003d74:	e9cd 4334 	strd	r4, r3, [sp, #208]	; 0xd0
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8003d78:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d7a:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8003d7e:	9331      	str	r3, [sp, #196]	; 0xc4
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003d80:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003d84:	f006 fbd9 	bl	800a53a <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <main+0xa2c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003d8a:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003d8c:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003d90:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8003d94:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
  hdma2d.Init.Mode = DMA2D_M2M;
 8003d98:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8003d9c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003da0:	f003 fde6 	bl	8007970 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003da4:	2101      	movs	r1, #1
 8003da6:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8003da8:	4d0c      	ldr	r5, [pc, #48]	; (8003ddc <main+0xa30>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003daa:	f003 fea3 	bl	8007af4 <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 8003dae:	f7ff fadb 	bl	8003368 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 8003db2:	f7fc fdfc 	bl	80009ae <MX_LIBJPEG_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <main+0xa34>)
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003db8:	2105      	movs	r1, #5
 8003dba:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dbe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003dc4:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	e00e      	b.n	8003de8 <main+0xa3c>
 8003dca:	bf00      	nop
 8003dcc:	200125ac 	.word	0x200125ac
 8003dd0:	2001232c 	.word	0x2001232c
 8003dd4:	40012000 	.word	0x40012000
 8003dd8:	4002b000 	.word	0x4002b000
 8003ddc:	20012298 	.word	0x20012298
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40006400 	.word	0x40006400
 8003de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dec:	9315      	str	r3, [sp, #84]	; 0x54
 8003dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003df0:	f003 fb1c 	bl	800742c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003df4:	2038      	movs	r0, #56	; 0x38
 8003df6:	f003 fb4b 	bl	8007490 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003dfa:	4622      	mov	r2, r4
 8003dfc:	2105      	movs	r1, #5
 8003dfe:	2039      	movs	r0, #57	; 0x39
 8003e00:	f003 fb14 	bl	800742c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003e04:	2039      	movs	r0, #57	; 0x39
 8003e06:	f003 fb43 	bl	8007490 <HAL_NVIC_EnableIRQ>
  hjpeg.Instance = JPEG;
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <main+0xb8c>)
 8003e0c:	484b      	ldr	r0, [pc, #300]	; (8003f3c <main+0xb90>)
 8003e0e:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8003e10:	f005 f976 	bl	8009100 <HAL_JPEG_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003e14:	2210      	movs	r2, #16
 8003e16:	4621      	mov	r1, r4
 8003e18:	a82c      	add	r0, sp, #176	; 0xb0
 8003e1a:	f021 fa15 	bl	8025248 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e22:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e24:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e26:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003e28:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e2a:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e2e:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003e30:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e34:	e9c5 6300 	strd	r6, r3, [r5]
  hadc1.Init.NbrOfConversion = 1;
 8003e38:	2601      	movs	r6, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8003e3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hadc1.Init.NbrOfConversion = 1;
 8003e3e:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e40:	616e      	str	r6, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8003e42:	e9c5 370a 	strd	r3, r7, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e46:	f002 fe35 	bl	8006ab4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 8003e4a:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e4c:	a92c      	add	r1, sp, #176	; 0xb0
 8003e4e:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003e50:	942e      	str	r4, [sp, #184]	; 0xb8
  	pTxHeader.DLC = 2;
 8003e52:	2702      	movs	r7, #2
  htim5.Instance = TIM5;
 8003e54:	4d3a      	ldr	r5, [pc, #232]	; (8003f40 <main+0xb94>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e56:	e9cd 362c 	strd	r3, r6, [sp, #176]	; 0xb0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e5a:	f002 ff63 	bl	8006d24 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e5e:	2210      	movs	r2, #16
 8003e60:	4621      	mov	r1, r4
 8003e62:	a82c      	add	r0, sp, #176	; 0xb0
 8003e64:	f021 f9f0 	bl	8025248 <memset>
  htim5.Init.Prescaler = 275-1;
 8003e68:	f8df c108 	ldr.w	ip, [pc, #264]	; 8003f74 <main+0xbc8>
 8003e6c:	f44f 7389 	mov.w	r3, #274	; 0x112
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e70:	4628      	mov	r0, r5
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e72:	60ac      	str	r4, [r5, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e74:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e76:	9420      	str	r4, [sp, #128]	; 0x80
  htim5.Init.Prescaler = 275-1;
 8003e78:	e9c5 c300 	strd	ip, r3, [r5]
  htim5.Init.Period = 65535;
 8003e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e80:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e84:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e88:	f007 fab6 	bl	800b3f8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e90:	a92c      	add	r1, sp, #176	; 0xb0
 8003e92:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e94:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e96:	f007 fae9 	bl	800b46c <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e9a:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e9c:	a91e      	add	r1, sp, #120	; 0x78
 8003e9e:	4628      	mov	r0, r5
  hcan1.Instance = CAN1;
 8003ea0:	4d28      	ldr	r5, [pc, #160]	; (8003f44 <main+0xb98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ea2:	931e      	str	r3, [sp, #120]	; 0x78
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ea8:	f007 fb7c 	bl	800b5a4 <HAL_TIMEx_MasterConfigSynchronization>
  hcan1.Init.Prescaler = 25;
 8003eac:	2319      	movs	r3, #25
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003eae:	4628      	mov	r0, r5
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003eb0:	83ac      	strh	r4, [r5, #28]
  hcan1.Init.Prescaler = 25;
 8003eb2:	e9c5 8300 	strd	r8, r3, [r5]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003eb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eba:	e9c5 9304 	strd	r9, r3, [r5, #16]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003ebe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ec2:	61ab      	str	r3, [r5, #24]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003ec4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003ec8:	f002 ffdb 	bl	8006e82 <HAL_CAN_Init>
  	pTxHeader.DLC = 2;
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <main+0xb9c>)
	pTxHeader.StdId = 0x244; //Verificar o id disponivel
 8003ece:	f44f 7211 	mov.w	r2, #580	; 0x244
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003ed2:	491e      	ldr	r1, [pc, #120]	; (8003f4c <main+0xba0>)
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8003ed4:	4628      	mov	r0, r5
  	pTxHeader.DLC = 2;
 8003ed6:	611f      	str	r7, [r3, #16]
	pTxHeader.StdId = 0x244; //Verificar o id disponivel
 8003ed8:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003eda:	610c      	str	r4, [r1, #16]
	pTxHeader.RTR = CAN_RTR_DATA;
 8003edc:	e9c3 4402 	strd	r4, r4, [r3, #8]
	sFilterConfig.FilterIdLow = 0;
 8003ee0:	e9c1 4400 	strd	r4, r4, [r1]
	sFilterConfig.FilterMaskIdLow =0;
 8003ee4:	e9c1 4402 	strd	r4, r4, [r1, #8]
	sFilterConfig.FilterActivation = ENABLE;
 8003ee8:	e9c1 6607 	strd	r6, r6, [r1, #28]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8003eec:	f003 f844 	bl	8006f78 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f003 f8c9 	bl	8007088 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8003ef6:	4639      	mov	r1, r7
 8003ef8:	4628      	mov	r0, r5
 8003efa:	f003 f96a 	bl	80071d2 <HAL_CAN_ActivateNotification>
  MX_TouchGFX_Init();
 8003efe:	f7fc fd57 	bl	80009b0 <MX_TouchGFX_Init>
  osKernelInitialize();
 8003f02:	f007 fc29 	bl	800b758 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <main+0xba4>)
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4812      	ldr	r0, [pc, #72]	; (8003f54 <main+0xba8>)
 8003f0c:	f007 fc5e 	bl	800b7cc <osThreadNew>
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <main+0xbac>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003f12:	4a12      	ldr	r2, [pc, #72]	; (8003f5c <main+0xbb0>)
 8003f14:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f16:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003f18:	4811      	ldr	r0, [pc, #68]	; (8003f60 <main+0xbb4>)
 8003f1a:	f007 fc57 	bl	800b7cc <osThreadNew>
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <main+0xbb8>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003f20:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <main+0xbbc>)
 8003f22:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003f24:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003f26:	4811      	ldr	r0, [pc, #68]	; (8003f6c <main+0xbc0>)
 8003f28:	f007 fc50 	bl	800b7cc <osThreadNew>
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <main+0xbc4>)
 8003f2e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003f30:	f007 fc2c 	bl	800b78c <osKernelStart>
  while (1)
 8003f34:	e7fe      	b.n	8003f34 <main+0xb88>
 8003f36:	bf00      	nop
 8003f38:	50051000 	.word	0x50051000
 8003f3c:	200124ac 	.word	0x200124ac
 8003f40:	2001262c 	.word	0x2001262c
 8003f44:	200122e0 	.word	0x200122e0
 8003f48:	20012694 	.word	0x20012694
 8003f4c:	200126b4 	.word	0x200126b4
 8003f50:	08028024 	.word	0x08028024
 8003f54:	08003259 	.word	0x08003259
 8003f58:	20012294 	.word	0x20012294
 8003f5c:	08028000 	.word	0x08028000
 8003f60:	080009b5 	.word	0x080009b5
 8003f64:	2001228c 	.word	0x2001228c
 8003f68:	08028048 	.word	0x08028048
 8003f6c:	08002911 	.word	0x08002911
 8003f70:	200126e4 	.word	0x200126e4
 8003f74:	40000c00 	.word	0x40000c00

08003f78 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8003f78:	b538      	push	{r3, r4, r5, lr}
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pRxHeader, rxData);
 8003f7a:	4d0f      	ldr	r5, [pc, #60]	; (8003fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4c0f      	ldr	r4, [pc, #60]	; (8003fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8003f80:	462b      	mov	r3, r5
 8003f82:	4622      	mov	r2, r4
 8003f84:	f003 f8ae 	bl	80070e4 <HAL_CAN_GetRxMessage>
	adcRxData = (rxData[0] << 8) | rxData[1];
 8003f88:	882b      	ldrh	r3, [r5, #0]
 8003f8a:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8003f8c:	ba5b      	rev16	r3, r3
 8003f8e:	8013      	strh	r3, [r2, #0]
	if(pRxHeader.StdId==560)	//colocar o id da devida can
 8003f90:	6822      	ldr	r2, [r4, #0]
 8003f92:	f5b2 7f0c 	cmp.w	r2, #560	; 0x230
 8003f96:	d102      	bne.n	8003f9e <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		v_corrente = adcRxData;
 8003f98:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
		v_bateria = adcRxData;
 8003f9a:	8013      	strh	r3, [r2, #0]
}
 8003f9c:	bd38      	pop	{r3, r4, r5, pc}
	}else if(pRxHeader.StdId==590) //colocar o id da devida can
 8003f9e:	f240 214e 	movw	r1, #590	; 0x24e
 8003fa2:	428a      	cmp	r2, r1
 8003fa4:	d101      	bne.n	8003faa <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		v_gauge = adcRxData;
 8003fa6:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8003fa8:	e7f7      	b.n	8003f9a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	}else if(pRxHeader.StdId==570) //colocar o id da devida can
 8003faa:	f240 213a 	movw	r1, #570	; 0x23a
 8003fae:	428a      	cmp	r2, r1
 8003fb0:	d1f4      	bne.n	8003f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
		v_bateria = adcRxData;
 8003fb2:	4a06      	ldr	r2, [pc, #24]	; (8003fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8003fb4:	e7f1      	b.n	8003f9a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
 8003fb6:	bf00      	nop
 8003fb8:	200126ac 	.word	0x200126ac
 8003fbc:	20012678 	.word	0x20012678
 8003fc0:	20012290 	.word	0x20012290
 8003fc4:	200126de 	.word	0x200126de
 8003fc8:	200126e0 	.word	0x200126e0
 8003fcc:	200126dc 	.word	0x200126dc

08003fd0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003fd0:	6802      	ldr	r2, [r0, #0]
 8003fd2:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d101      	bne.n	8003fdc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003fd8:	f002 bd48 	b.w	8006a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40001000 	.word	0x40001000

08003fe4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_MspInit+0x38>)
{
 8003fea:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fec:	210f      	movs	r1, #15
 8003fee:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8003ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004000:	9200      	str	r2, [sp, #0]
 8004002:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800400c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004018:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800401a:	f003 ba07 	b.w	800742c <HAL_NVIC_SetPriority>
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800

08004024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004024:	b510      	push	{r4, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402a:	2214      	movs	r2, #20
 800402c:	2100      	movs	r1, #0
 800402e:	a803      	add	r0, sp, #12
 8004030:	f021 f90a 	bl	8025248 <memset>
  if(hadc->Instance==ADC1)
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <HAL_ADC_MspInit+0x64>)
 8004038:	429a      	cmp	r2, r3
 800403a:	d123      	bne.n	8004084 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800403c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004040:	a903      	add	r1, sp, #12
 8004042:	4812      	ldr	r0, [pc, #72]	; (800408c <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
 800404c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004052:	9201      	str	r2, [sp, #4]
 8004054:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800405e:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	9302      	str	r3, [sp, #8]
 8004068:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800406a:	2303      	movs	r3, #3
 800406c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004070:	f004 f95c 	bl	800832c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8004074:	2012      	movs	r0, #18
 8004076:	2200      	movs	r2, #0
 8004078:	2105      	movs	r1, #5
 800407a:	f003 f9d7 	bl	800742c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800407e:	2012      	movs	r0, #18
 8004080:	f003 fa06 	bl	8007490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004084:	b008      	add	sp, #32
 8004086:	bd10      	pop	{r4, pc}
 8004088:	40012000 	.word	0x40012000
 800408c:	40020000 	.word	0x40020000

08004090 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004090:	b510      	push	{r4, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004096:	2214      	movs	r2, #20
 8004098:	2100      	movs	r1, #0
 800409a:	a803      	add	r0, sp, #12
 800409c:	f021 f8d4 	bl	8025248 <memset>
  if(hcan->Instance==CAN1)
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	4b17      	ldr	r3, [pc, #92]	; (8004100 <HAL_CAN_MspInit+0x70>)
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d128      	bne.n	80040fa <HAL_CAN_MspInit+0x6a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80040a8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80040ac:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ae:	4815      	ldr	r0, [pc, #84]	; (8004104 <HAL_CAN_MspInit+0x74>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80040b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
 80040b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ba:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80040be:	9201      	str	r2, [sp, #4]
 80040c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c4:	f042 0202 	orr.w	r2, r2, #2
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	9302      	str	r3, [sp, #8]
 80040d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	2302      	movs	r3, #2
 80040da:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80040de:	2309      	movs	r3, #9
 80040e0:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e4:	a903      	add	r1, sp, #12
 80040e6:	f004 f921 	bl	800832c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80040ea:	2014      	movs	r0, #20
 80040ec:	2200      	movs	r2, #0
 80040ee:	2105      	movs	r1, #5
 80040f0:	f003 f99c 	bl	800742c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80040f4:	2014      	movs	r0, #20
 80040f6:	f003 f9cb 	bl	8007490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80040fa:	b008      	add	sp, #32
 80040fc:	bd10      	pop	{r4, pc}
 80040fe:	bf00      	nop
 8004100:	40006400 	.word	0x40006400
 8004104:	40020400 	.word	0x40020400

08004108 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004108:	6802      	ldr	r2, [r0, #0]
{
 800410a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_CRC_MspInit+0x28>)
 800410e:	429a      	cmp	r2, r3
 8004110:	d10b      	bne.n	800412a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004112:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800412a:	b002      	add	sp, #8
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40023000 	.word	0x40023000

08004134 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_DMA2D_MspInit+0x3c>)
{
 8004136:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8004138:	6802      	ldr	r2, [r0, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d115      	bne.n	800416a <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800413e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004142:	2105      	movs	r1, #5
 8004144:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004148:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800414e:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800415a:	f003 f967 	bl	800742c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800415e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004160:	b003      	add	sp, #12
 8004162:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004166:	f003 b993 	b.w	8007490 <HAL_NVIC_EnableIRQ>
}
 800416a:	b003      	add	sp, #12
 800416c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004170:	4002b000 	.word	0x4002b000

08004174 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8004174:	b510      	push	{r4, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417a:	2214      	movs	r2, #20
 800417c:	2100      	movs	r1, #0
 800417e:	a803      	add	r0, sp, #12
 8004180:	f021 f862 	bl	8025248 <memset>
  if(hdsi->Instance==DSI)
 8004184:	6822      	ldr	r2, [r4, #0]
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_DSI_MspInit+0x68>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d125      	bne.n	80041d8 <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800418c:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004190:	a903      	add	r1, sp, #12
 8004192:	4813      	ldr	r0, [pc, #76]	; (80041e0 <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8004194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004196:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800419a:	645a      	str	r2, [r3, #68]	; 0x44
 800419c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80041a2:	9201      	str	r2, [sp, #4]
 80041a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80041a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	9302      	str	r3, [sp, #8]
 80041b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80041c0:	230d      	movs	r3, #13
 80041c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80041c4:	f004 f8b2 	bl	800832c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80041c8:	2062      	movs	r0, #98	; 0x62
 80041ca:	2200      	movs	r2, #0
 80041cc:	2105      	movs	r1, #5
 80041ce:	f003 f92d 	bl	800742c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80041d2:	2062      	movs	r0, #98	; 0x62
 80041d4:	f003 f95c 	bl	8007490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80041d8:	b008      	add	sp, #32
 80041da:	bd10      	pop	{r4, pc}
 80041dc:	40016c00 	.word	0x40016c00
 80041e0:	40022400 	.word	0x40022400

080041e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e6:	b0ad      	sub	sp, #180	; 0xb4
 80041e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ea:	2214      	movs	r2, #20
 80041ec:	2100      	movs	r1, #0
 80041ee:	a803      	add	r0, sp, #12
 80041f0:	f021 f82a 	bl	8025248 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041f4:	2290      	movs	r2, #144	; 0x90
 80041f6:	2100      	movs	r1, #0
 80041f8:	a808      	add	r0, sp, #32
 80041fa:	f021 f825 	bl	8025248 <memset>
  if(hi2c->Instance==I2C4)
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_I2C_MspInit+0xb4>)
 8004202:	429a      	cmp	r2, r3
 8004204:	d146      	bne.n	8004294 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800420a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800420c:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800420e:	f006 fc97 	bl	800ab40 <HAL_RCCEx_PeriphCLKConfig>
 8004212:	b108      	cbz	r0, 8004218 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8004214:	f7ff fee6 	bl	8003fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004218:	4c20      	ldr	r4, [pc, #128]	; (800429c <HAL_I2C_MspInit+0xb8>)
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800421a:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421c:	2601      	movs	r6, #1
 800421e:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004220:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004222:	a903      	add	r1, sp, #12
 8004224:	481e      	ldr	r0, [pc, #120]	; (80042a0 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004226:	f043 0302 	orr.w	r3, r3, #2
 800422a:	6323      	str	r3, [r4, #48]	; 0x30
 800422c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004236:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	6323      	str	r3, [r4, #48]	; 0x30
 800423e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 800424e:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004250:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004254:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004256:	f004 f869 	bl	800832c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800425a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800425e:	a903      	add	r1, sp, #12
 8004260:	4810      	ldr	r0, [pc, #64]	; (80042a4 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004262:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004266:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004268:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800426c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800426e:	f004 f85d 	bl	800832c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004272:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004274:	205f      	movs	r0, #95	; 0x5f
 8004276:	2200      	movs	r2, #0
 8004278:	2105      	movs	r1, #5
    __HAL_RCC_I2C4_CLK_ENABLE();
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427e:	6423      	str	r3, [r4, #64]	; 0x40
 8004280:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 800428a:	f003 f8cf 	bl	800742c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800428e:	205f      	movs	r0, #95	; 0x5f
 8004290:	f003 f8fe 	bl	8007490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004294:	b02d      	add	sp, #180	; 0xb4
 8004296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004298:	40006000 	.word	0x40006000
 800429c:	40023800 	.word	0x40023800
 80042a0:	40020400 	.word	0x40020400
 80042a4:	40020c00 	.word	0x40020c00

080042a8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 80042a8:	6802      	ldr	r2, [r0, #0]
{
 80042aa:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_I2C_MspDeInit+0x34>)
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d112      	bne.n	80042d8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80042b2:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <HAL_I2C_MspDeInit+0x38>)

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80042b4:	2180      	movs	r1, #128	; 0x80
 80042b6:	480b      	ldr	r0, [pc, #44]	; (80042e4 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 80042b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80042ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042be:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80042c0:	f004 f918 	bl	80084f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 80042c4:	4808      	ldr	r0, [pc, #32]	; (80042e8 <HAL_I2C_MspDeInit+0x40>)
 80042c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042ca:	f004 f913 	bl	80084f4 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80042ce:	205f      	movs	r0, #95	; 0x5f
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 80042d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80042d4:	f003 b8ea 	b.w	80074ac <HAL_NVIC_DisableIRQ>
}
 80042d8:	bd08      	pop	{r3, pc}
 80042da:	bf00      	nop
 80042dc:	40006000 	.word	0x40006000
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40020400 	.word	0x40020400
 80042e8:	40020c00 	.word	0x40020c00

080042ec <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80042ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80042ee:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_JPEG_MspInit+0xd8>)
{
 80042f0:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80042f2:	6802      	ldr	r2, [r0, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d162      	bne.n	80043be <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80042f8:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 80042fe:	4c33      	ldr	r4, [pc, #204]	; (80043cc <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004300:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004304:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004308:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 80043d8 <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 800430c:	f042 0202 	orr.w	r2, r2, #2
 8004310:	635a      	str	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004312:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 800431e:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8004322:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004326:	2300      	movs	r3, #0
 8004328:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800432c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8004330:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004332:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 800433a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800433e:	2303      	movs	r3, #3
 8004340:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004348:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 800434a:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 800434e:	f003 f97f 	bl	8007650 <HAL_DMA_Init>
 8004352:	b108      	cbz	r0, 8004358 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8004354:	f7ff fe46 	bl	8003fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004358:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 800435a:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 800435e:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004360:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004364:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004366:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8004368:	4c1a      	ldr	r4, [pc, #104]	; (80043d4 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 800436a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 800436e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004372:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004376:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004378:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800437c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8004380:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8004382:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8004386:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800438a:	2303      	movs	r3, #3
 800438c:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004394:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004396:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 800439a:	f003 f959 	bl	8007650 <HAL_DMA_Init>
 800439e:	b108      	cbz	r0, 80043a4 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 80043a0:	f7ff fe20 	bl	8003fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 80043a4:	636c      	str	r4, [r5, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	2105      	movs	r1, #5
 80043aa:	206c      	movs	r0, #108	; 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 80043ac:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80043ae:	f003 f83d 	bl	800742c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80043b2:	206c      	movs	r0, #108	; 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 80043b4:	b003      	add	sp, #12
 80043b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80043ba:	f003 b869 	b.w	8007490 <HAL_NVIC_EnableIRQ>
}
 80043be:	b003      	add	sp, #12
 80043c0:	bd30      	pop	{r4, r5, pc}
 80043c2:	bf00      	nop
 80043c4:	50051000 	.word	0x50051000
 80043c8:	40023800 	.word	0x40023800
 80043cc:	20012384 	.word	0x20012384
 80043d0:	40026428 	.word	0x40026428
 80043d4:	200123e4 	.word	0x200123e4
 80043d8:	40026410 	.word	0x40026410

080043dc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80043dc:	b510      	push	{r4, lr}
 80043de:	b0a6      	sub	sp, #152	; 0x98
 80043e0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043e2:	2290      	movs	r2, #144	; 0x90
 80043e4:	2100      	movs	r1, #0
 80043e6:	a802      	add	r0, sp, #8
 80043e8:	f020 ff2e 	bl	8025248 <memset>
  if(hltdc->Instance==LTDC)
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_LTDC_MspInit+0x64>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d122      	bne.n	800443a <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80043f4:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80043f6:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80043f8:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80043fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80043fe:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004400:	2302      	movs	r3, #2
 8004402:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004406:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004408:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800440a:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800440c:	f006 fb98 	bl	800ab40 <HAL_RCCEx_PeriphCLKConfig>
 8004410:	b108      	cbz	r0, 8004416 <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 8004412:	f7ff fde7 	bl	8003fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004418:	2058      	movs	r0, #88	; 0x58
 800441a:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 800441c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004424:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004430:	f002 fffc 	bl	800742c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004434:	2058      	movs	r0, #88	; 0x58
 8004436:	f003 f82b 	bl	8007490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800443a:	b026      	add	sp, #152	; 0x98
 800443c:	bd10      	pop	{r4, pc}
 800443e:	bf00      	nop
 8004440:	40016800 	.word	0x40016800
 8004444:	40023800 	.word	0x40023800

08004448 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004448:	2214      	movs	r2, #20
 800444a:	2100      	movs	r1, #0
{
 800444c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004450:	b08a      	sub	sp, #40	; 0x28
 8004452:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	eb0d 0002 	add.w	r0, sp, r2
 8004458:	f020 fef6 	bl	8025248 <memset>
  if(hqspi->Instance==QUADSPI)
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	4b3a      	ldr	r3, [pc, #232]	; (8004548 <HAL_QSPI_MspInit+0x100>)
 8004460:	429a      	cmp	r2, r3
 8004462:	d16e      	bne.n	8004542 <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8004464:	4b39      	ldr	r3, [pc, #228]	; (800454c <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004468:	2403      	movs	r4, #3
 800446a:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 800446c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446e:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004472:	a905      	add	r1, sp, #20
 8004474:	4836      	ldr	r0, [pc, #216]	; (8004550 <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 8004476:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 800447c:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	f022 0202 	bic.w	r2, r2, #2
 8004484:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004488:	f042 0202 	orr.w	r2, r2, #2
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
 800448e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004490:	f002 0202 	and.w	r2, r2, #2
 8004494:	9200      	str	r2, [sp, #0]
 8004496:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800449a:	f042 0210 	orr.w	r2, r2, #16
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
 80044a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a2:	f002 0210 	and.w	r2, r2, #16
 80044a6:	9201      	str	r2, [sp, #4]
 80044a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ac:	f042 0202 	orr.w	r2, r2, #2
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
 80044b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b4:	f002 0202 	and.w	r2, r2, #2
 80044b8:	9202      	str	r2, [sp, #8]
 80044ba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044be:	f042 0204 	orr.w	r2, r2, #4
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
 80044c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c6:	f002 0204 	and.w	r2, r2, #4
 80044ca:	9203      	str	r2, [sp, #12]
 80044cc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d0:	f042 0208 	orr.w	r2, r2, #8
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e0:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80044e4:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044e8:	f003 ff20 	bl	800832c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80044ec:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ee:	a905      	add	r1, sp, #20
 80044f0:	4818      	ldr	r0, [pc, #96]	; (8004554 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044f6:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f8:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80044fc:	230a      	movs	r3, #10
 80044fe:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004500:	f003 ff14 	bl	800832c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8004504:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004508:	a905      	add	r1, sp, #20
 800450a:	4813      	ldr	r0, [pc, #76]	; (8004558 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800450c:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004512:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004516:	f003 ff09 	bl	800832c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451a:	a905      	add	r1, sp, #20
 800451c:	480d      	ldr	r0, [pc, #52]	; (8004554 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800451e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004520:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004524:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004528:	f003 ff00 	bl	800832c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800452c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004530:	a905      	add	r1, sp, #20
 8004532:	480a      	ldr	r0, [pc, #40]	; (800455c <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004534:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800453a:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800453e:	f003 fef5 	bl	800832c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004542:	b00a      	add	sp, #40	; 0x28
 8004544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004548:	a0001000 	.word	0xa0001000
 800454c:	40023800 	.word	0x40023800
 8004550:	40021000 	.word	0x40021000
 8004554:	40020400 	.word	0x40020400
 8004558:	40020800 	.word	0x40020800
 800455c:	40020c00 	.word	0x40020c00

08004560 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM5)
 8004560:	6802      	ldr	r2, [r0, #0]
{
 8004562:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM5)
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <HAL_TIM_Base_MspInit+0x24>)
 8004566:	429a      	cmp	r2, r3
 8004568:	d10a      	bne.n	8004580 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800456a:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 800456e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004570:	f042 0208 	orr.w	r2, r2, #8
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004580:	b002      	add	sp, #8
 8004582:	4770      	bx	lr
 8004584:	40000c00 	.word	0x40000c00

08004588 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004588:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800458a:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800458c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800458e:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8004590:	4b2a      	ldr	r3, [pc, #168]	; (800463c <HAL_SDRAM_MspInit+0xb4>)
 8004592:	681e      	ldr	r6, [r3, #0]
 8004594:	2e00      	cmp	r6, #0
 8004596:	d14f      	bne.n	8004638 <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 8004598:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459a:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800459c:	2503      	movs	r5, #3
 800459e:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80045a0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045a2:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80045a4:	4b26      	ldr	r3, [pc, #152]	; (8004640 <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045a6:	4827      	ldr	r0, [pc, #156]	; (8004644 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80045a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ba:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045be:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045c6:	f003 feb1 	bl	800832c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80045ca:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045ce:	a901      	add	r1, sp, #4
 80045d0:	481d      	ldr	r0, [pc, #116]	; (8004648 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045d2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045dc:	f003 fea6 	bl	800832c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80045e0:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045e4:	a901      	add	r1, sp, #4
 80045e6:	4819      	ldr	r0, [pc, #100]	; (800464c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ea:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ee:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f2:	f003 fe9b 	bl	800832c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 80045f6:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80045fa:	a901      	add	r1, sp, #4
 80045fc:	4814      	ldr	r0, [pc, #80]	; (8004650 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004600:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004604:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004608:	f003 fe90 	bl	800832c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800460c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004610:	a901      	add	r1, sp, #4
 8004612:	4810      	ldr	r0, [pc, #64]	; (8004654 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004614:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004616:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800461e:	f003 fe85 	bl	800832c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8004622:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004626:	a901      	add	r1, sp, #4
 8004628:	480b      	ldr	r0, [pc, #44]	; (8004658 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800462a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004630:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004634:	f003 fe7a 	bl	800832c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004638:	b007      	add	sp, #28
 800463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463c:	200126e8 	.word	0x200126e8
 8004640:	40023800 	.word	0x40023800
 8004644:	40021000 	.word	0x40021000
 8004648:	40021800 	.word	0x40021800
 800464c:	40020c00 	.word	0x40020c00
 8004650:	40022000 	.word	0x40022000
 8004654:	40021400 	.word	0x40021400
 8004658:	40021c00 	.word	0x40021c00

0800465c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800465c:	b510      	push	{r4, lr}
 800465e:	4601      	mov	r1, r0
 8004660:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004662:	2200      	movs	r2, #0
 8004664:	2036      	movs	r0, #54	; 0x36
 8004666:	f002 fee1 	bl	800742c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800466a:	2036      	movs	r0, #54	; 0x36
 800466c:	f002 ff10 	bl	8007490 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004672:	a901      	add	r1, sp, #4
 8004674:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004678:	4c13      	ldr	r4, [pc, #76]	; (80046c8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800467a:	f042 0210 	orr.w	r2, r2, #16
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	9302      	str	r3, [sp, #8]
 8004688:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800468a:	f006 fa3b 	bl	800ab04 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800468e:	f006 fa29 	bl	800aae4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004694:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8004696:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004698:	f240 33e7 	movw	r3, #999	; 0x3e7
 800469c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <HAL_InitTick+0x74>)
 80046a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80046a4:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80046a6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80046a8:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80046aa:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80046ac:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ae:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80046b0:	f006 fea2 	bl	800b3f8 <HAL_TIM_Base_Init>
 80046b4:	b920      	cbnz	r0, 80046c0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80046b6:	4620      	mov	r0, r4
 80046b8:	f006 fd46 	bl	800b148 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80046bc:	b008      	add	sp, #32
 80046be:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80046c0:	2001      	movs	r0, #1
 80046c2:	e7fb      	b.n	80046bc <HAL_InitTick+0x60>
 80046c4:	40023800 	.word	0x40023800
 80046c8:	200126ec 	.word	0x200126ec
 80046cc:	40001000 	.word	0x40001000
 80046d0:	000f4240 	.word	0x000f4240

080046d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046d4:	4770      	bx	lr

080046d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d6:	e7fe      	b.n	80046d6 <HardFault_Handler>

080046d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <MemManage_Handler>

080046da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046da:	e7fe      	b.n	80046da <BusFault_Handler>

080046dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046dc:	e7fe      	b.n	80046dc <UsageFault_Handler>

080046de <DebugMon_Handler>:
 80046de:	4770      	bx	lr

080046e0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80046e0:	4801      	ldr	r0, [pc, #4]	; (80046e8 <ADC_IRQHandler+0x8>)
 80046e2:	f002 ba90 	b.w	8006c06 <HAL_ADC_IRQHandler>
 80046e6:	bf00      	nop
 80046e8:	20012298 	.word	0x20012298

080046ec <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80046ec:	4801      	ldr	r0, [pc, #4]	; (80046f4 <CAN1_RX0_IRQHandler+0x8>)
 80046ee:	f002 bd8d 	b.w	800720c <HAL_CAN_IRQHandler>
 80046f2:	bf00      	nop
 80046f4:	200122e0 	.word	0x200122e0

080046f8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046f8:	4801      	ldr	r0, [pc, #4]	; (8004700 <TIM6_DAC_IRQHandler+0x8>)
 80046fa:	f006 bd67 	b.w	800b1cc <HAL_TIM_IRQHandler>
 80046fe:	bf00      	nop
 8004700:	200126ec 	.word	0x200126ec

08004704 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 8004704:	4801      	ldr	r0, [pc, #4]	; (800470c <DMA2_Stream0_IRQHandler+0x8>)
 8004706:	f003 b873 	b.w	80077f0 <HAL_DMA_IRQHandler>
 800470a:	bf00      	nop
 800470c:	20012384 	.word	0x20012384

08004710 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 8004710:	4801      	ldr	r0, [pc, #4]	; (8004718 <DMA2_Stream1_IRQHandler+0x8>)
 8004712:	f003 b86d 	b.w	80077f0 <HAL_DMA_IRQHandler>
 8004716:	bf00      	nop
 8004718:	200123e4 	.word	0x200123e4

0800471c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800471c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 800471e:	f002 f9b1 	bl	8006a84 <HAL_GetTick>
  diff = last - now;
 8004722:	4a05      	ldr	r2, [pc, #20]	; (8004738 <LTDC_IRQHandler+0x1c>)
 8004724:	4905      	ldr	r1, [pc, #20]	; (800473c <LTDC_IRQHandler+0x20>)
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	1a1b      	subs	r3, r3, r0
 800472a:	600b      	str	r3, [r1, #0]
  last = now;
 800472c:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800472e:	4804      	ldr	r0, [pc, #16]	; (8004740 <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 8004734:	f005 bb8b 	b.w	8009e4e <HAL_LTDC_IRQHandler>
 8004738:	2001273c 	.word	0x2001273c
 800473c:	20012738 	.word	0x20012738
 8004740:	20012504 	.word	0x20012504

08004744 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <DMA2D_IRQHandler+0x8>)
 8004746:	f003 b94b 	b.w	80079e0 <HAL_DMA2D_IRQHandler>
 800474a:	bf00      	nop
 800474c:	2001232c 	.word	0x2001232c

08004750 <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <I2C4_EV_IRQHandler+0x8>)
 8004752:	f004 baf3 	b.w	8008d3c <HAL_I2C_EV_IRQHandler>
 8004756:	bf00      	nop
 8004758:	20012460 	.word	0x20012460

0800475c <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800475c:	4801      	ldr	r0, [pc, #4]	; (8004764 <DSI_IRQHandler+0x8>)
 800475e:	f003 bb4e 	b.w	8007dfe <HAL_DSI_IRQHandler>
 8004762:	bf00      	nop
 8004764:	20012444 	.word	0x20012444

08004768 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8004768:	4801      	ldr	r0, [pc, #4]	; (8004770 <JPEG_IRQHandler+0x8>)
 800476a:	f005 ba19 	b.w	8009ba0 <HAL_JPEG_IRQHandler>
 800476e:	bf00      	nop
 8004770:	200124ac 	.word	0x200124ac

08004774 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004774:	2001      	movs	r0, #1
 8004776:	4770      	bx	lr

08004778 <_kill>:

int _kill(int pid, int sig)
{
 8004778:	b508      	push	{r3, lr}
	errno = EINVAL;
 800477a:	f020 fd07 	bl	802518c <__errno>
 800477e:	2316      	movs	r3, #22
 8004780:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004782:	f04f 30ff 	mov.w	r0, #4294967295
 8004786:	bd08      	pop	{r3, pc}

08004788 <_exit>:

void _exit (int status)
{
 8004788:	b508      	push	{r3, lr}
	errno = EINVAL;
 800478a:	f020 fcff 	bl	802518c <__errno>
 800478e:	2316      	movs	r3, #22
 8004790:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004792:	e7fe      	b.n	8004792 <_exit+0xa>

08004794 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	460d      	mov	r5, r1
 8004798:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800479a:	460e      	mov	r6, r1
 800479c:	1b73      	subs	r3, r6, r5
 800479e:	429c      	cmp	r4, r3
 80047a0:	dc01      	bgt.n	80047a6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80047a2:	4620      	mov	r0, r4
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80047a6:	f3af 8000 	nop.w
 80047aa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ae:	e7f5      	b.n	800479c <_read+0x8>

080047b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	460d      	mov	r5, r1
 80047b4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047b6:	460e      	mov	r6, r1
 80047b8:	1b73      	subs	r3, r6, r5
 80047ba:	429c      	cmp	r4, r3
 80047bc:	dc01      	bgt.n	80047c2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80047be:	4620      	mov	r0, r4
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80047c2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80047c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ca:	e7f5      	b.n	80047b8 <_write+0x8>

080047cc <_close>:

int _close(int file)
{
	return -1;
}
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	4770      	bx	lr

080047d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80047d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80047d6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80047d8:	604b      	str	r3, [r1, #4]
}
 80047da:	4770      	bx	lr

080047dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80047dc:	2001      	movs	r0, #1
 80047de:	4770      	bx	lr

080047e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80047e0:	2000      	movs	r0, #0
 80047e2:	4770      	bx	lr

080047e4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80047e4:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <_sbrk+0x2c>)
 80047e6:	6811      	ldr	r1, [r2, #0]
{
 80047e8:	b508      	push	{r3, lr}
 80047ea:	4603      	mov	r3, r0
	if (heap_end == 0)
 80047ec:	b909      	cbnz	r1, 80047f2 <_sbrk+0xe>
		heap_end = &end;
 80047ee:	4909      	ldr	r1, [pc, #36]	; (8004814 <_sbrk+0x30>)
 80047f0:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80047f2:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80047f4:	4669      	mov	r1, sp
 80047f6:	4403      	add	r3, r0
 80047f8:	428b      	cmp	r3, r1
 80047fa:	d906      	bls.n	800480a <_sbrk+0x26>
	{
		errno = ENOMEM;
 80047fc:	f020 fcc6 	bl	802518c <__errno>
 8004800:	230c      	movs	r3, #12
 8004802:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004808:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800480a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800480c:	e7fc      	b.n	8004808 <_sbrk+0x24>
 800480e:	bf00      	nop
 8004810:	20012740 	.word	0x20012740
 8004814:	20028148 	.word	0x20028148

08004818 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // verdanab_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 5; // verdana_15_4bpp
    static const uint16_t NUMBER_OF_FONTS = 6;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004818:	4770      	bx	lr

0800481a <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800481a:	b508      	push	{r3, lr}
    switch (typography)
 800481c:	2905      	cmp	r1, #5
 800481e:	d81c      	bhi.n	800485a <_ZN23ApplicationFontProvider7getFontEt+0x40>
 8004820:	e8df f001 	tbb	[pc, r1]
 8004824:	0f0b0703 	.word	0x0f0b0703
 8004828:	1713      	.short	0x1713
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800482a:	f001 fcaf 	bl	800618c <_ZN17TypedTextDatabase8getFontsEv>
 800482e:	6800      	ldr	r0, [r0, #0]
        // verdana_15_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
    default:
        return 0;
    }
}
 8004830:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8004832:	f001 fcab 	bl	800618c <_ZN17TypedTextDatabase8getFontsEv>
 8004836:	6840      	ldr	r0, [r0, #4]
 8004838:	e7fa      	b.n	8004830 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800483a:	f001 fca7 	bl	800618c <_ZN17TypedTextDatabase8getFontsEv>
 800483e:	6880      	ldr	r0, [r0, #8]
 8004840:	e7f6      	b.n	8004830 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8004842:	f001 fca3 	bl	800618c <_ZN17TypedTextDatabase8getFontsEv>
 8004846:	68c0      	ldr	r0, [r0, #12]
 8004848:	e7f2      	b.n	8004830 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800484a:	f001 fc9f 	bl	800618c <_ZN17TypedTextDatabase8getFontsEv>
 800484e:	6900      	ldr	r0, [r0, #16]
 8004850:	e7ee      	b.n	8004830 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8004852:	f001 fc9b 	bl	800618c <_ZN17TypedTextDatabase8getFontsEv>
 8004856:	6940      	ldr	r0, [r0, #20]
 8004858:	e7ea      	b.n	8004830 <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 800485a:	2000      	movs	r0, #0
 800485c:	e7e8      	b.n	8004830 <_ZN23ApplicationFontProvider7getFontEt+0x16>

0800485e <_ZN23ApplicationFontProviderD0Ev>:
 800485e:	b510      	push	{r4, lr}
 8004860:	4604      	mov	r4, r0
 8004862:	2104      	movs	r1, #4
 8004864:	f020 fa83 	bl	8024d6e <_ZdlPvj>
 8004868:	4620      	mov	r0, r4
 800486a:	bd10      	pop	{r4, pc}

0800486c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800486c:	4800      	ldr	r0, [pc, #0]	; (8004870 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800486e:	4770      	bx	lr
 8004870:	08028080 	.word	0x08028080

08004874 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8004874:	200f      	movs	r0, #15
 8004876:	4770      	bx	lr

08004878 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8004878:	b513      	push	{r0, r1, r4, lr}
 800487a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800487c:	b151      	cbz	r1, 8004894 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800487e:	6803      	ldr	r3, [r0, #0]
 8004880:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8004882:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8004884:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004888:	689c      	ldr	r4, [r3, #8]
 800488a:	f10d 0303 	add.w	r3, sp, #3
 800488e:	47a0      	blx	r4
        return glyph;
    }
 8004890:	b002      	add	sp, #8
 8004892:	bd10      	pop	{r4, pc}
            return 0;
 8004894:	4608      	mov	r0, r1
 8004896:	e7fb      	b.n	8004890 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08004898 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8004898:	8940      	ldrh	r0, [r0, #10]
 800489a:	4770      	bx	lr

0800489c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800489c:	8980      	ldrh	r0, [r0, #12]
 800489e:	4770      	bx	lr

080048a0 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80048a0:	8880      	ldrh	r0, [r0, #4]
 80048a2:	4770      	bx	lr

080048a4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 80048a4:	7983      	ldrb	r3, [r0, #6]
 80048a6:	8880      	ldrh	r0, [r0, #4]
 80048a8:	4418      	add	r0, r3
    }
 80048aa:	b280      	uxth	r0, r0
 80048ac:	4770      	bx	lr

080048ae <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80048ae:	79c0      	ldrb	r0, [r0, #7]
    }
 80048b0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80048b4:	4770      	bx	lr

080048b6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80048b6:	79c0      	ldrb	r0, [r0, #7]
    }
 80048b8:	09c0      	lsrs	r0, r0, #7
 80048ba:	4770      	bx	lr

080048bc <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80048bc:	4770      	bx	lr

080048be <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80048be:	b510      	push	{r4, lr}
 80048c0:	4604      	mov	r4, r0
    }
 80048c2:	2108      	movs	r1, #8
 80048c4:	f020 fa53 	bl	8024d6e <_ZdlPvj>
 80048c8:	4620      	mov	r0, r4
 80048ca:	bd10      	pop	{r4, pc}

080048cc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80048cc:	4770      	bx	lr

080048ce <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80048ce:	4770      	bx	lr

080048d0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80048d0:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	6849      	ldr	r1, [r1, #4]
 80048d8:	c303      	stmia	r3!, {r0, r1}
    }
 80048da:	4770      	bx	lr

080048dc <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80048dc:	4770      	bx	lr

080048de <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80048de:	4770      	bx	lr

080048e0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80048e0:	6041      	str	r1, [r0, #4]
    }
 80048e2:	4770      	bx	lr

080048e4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80048e4:	4770      	bx	lr
	...

080048e8 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80048ea:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80048ee:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80048f2:	2300      	movs	r3, #0
 80048f4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80048f8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80048fc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoScreen2ScreenNoTransition();
    }
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	08004af9 	.word	0x08004af9

08004908 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8004908:	2301      	movs	r3, #1
 800490a:	7203      	strb	r3, [r0, #8]
    }
 800490c:	4770      	bx	lr

0800490e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800490e:	4770      	bx	lr

08004910 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8004910:	4770      	bx	lr

08004912 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8004912:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8004914:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8004916:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8004918:	68c2      	ldr	r2, [r0, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	1054      	asrs	r4, r2, #1
 800491e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8004922:	07d2      	lsls	r2, r2, #31
 8004924:	bf48      	it	mi
 8004926:	590a      	ldrmi	r2, [r1, r4]
    }
 8004928:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800492c:	bf48      	it	mi
 800492e:	58d3      	ldrmi	r3, [r2, r3]
 8004930:	4718      	bx	r3

08004932 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8004932:	6843      	ldr	r3, [r0, #4]
 8004934:	b12b      	cbz	r3, 8004942 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8004936:	6883      	ldr	r3, [r0, #8]
 8004938:	b92b      	cbnz	r3, 8004946 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800493a:	68c0      	ldr	r0, [r0, #12]
 800493c:	f000 0001 	and.w	r0, r0, #1
 8004940:	4770      	bx	lr
 8004942:	4618      	mov	r0, r3
 8004944:	4770      	bx	lr
 8004946:	2001      	movs	r0, #1
    }
 8004948:	4770      	bx	lr

0800494a <_ZN8touchgfx12NoTransitionD0Ev>:
 800494a:	b510      	push	{r4, lr}
 800494c:	4604      	mov	r4, r0
 800494e:	210c      	movs	r1, #12
 8004950:	f020 fa0d 	bl	8024d6e <_ZdlPvj>
 8004954:	4620      	mov	r0, r4
 8004956:	bd10      	pop	{r4, pc}

08004958 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004958:	b510      	push	{r4, lr}
 800495a:	4604      	mov	r4, r0
 800495c:	2110      	movs	r1, #16
 800495e:	f020 fa06 	bl	8024d6e <_ZdlPvj>
 8004962:	4620      	mov	r0, r4
 8004964:	bd10      	pop	{r4, pc}

08004966 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8004966:	b510      	push	{r4, lr}
 8004968:	4604      	mov	r4, r0
 800496a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800496e:	f020 f9fe 	bl	8024d6e <_ZdlPvj>
 8004972:	4620      	mov	r0, r4
 8004974:	bd10      	pop	{r4, pc}

08004976 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8004976:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8004978:	f00f fbd8 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
    }
 800497c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8004980:	f00f bfb6 	b.w	80148f0 <_ZN8touchgfx11Application10invalidateEv>

08004984 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004984:	b510      	push	{r4, lr}
 8004986:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004988:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800498c:	b158      	cbz	r0, 80049a6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800498e:	6803      	ldr	r3, [r0, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4798      	blx	r3
 8004994:	b138      	cbz	r0, 80049a6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8004996:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800499a:	6803      	ldr	r3, [r0, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80049a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80049ac:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80049b0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80049b2:	68a8      	ldr	r0, [r5, #8]
 80049b4:	6803      	ldr	r3, [r0, #0]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	4798      	blx	r3
 80049ba:	f643 137b 	movw	r3, #14715	; 0x397b
 80049be:	4298      	cmp	r0, r3
 80049c0:	d805      	bhi.n	80049ce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 80049c2:	4b45      	ldr	r3, [pc, #276]	; (8004ad8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80049c4:	21a3      	movs	r1, #163	; 0xa3
 80049c6:	4a45      	ldr	r2, [pc, #276]	; (8004adc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80049c8:	4845      	ldr	r0, [pc, #276]	; (8004ae0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80049ca:	f020 fbad 	bl	8025128 <__assert_func>
 80049ce:	6868      	ldr	r0, [r5, #4]
 80049d0:	6803      	ldr	r3, [r0, #0]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4798      	blx	r3
 80049d6:	280f      	cmp	r0, #15
 80049d8:	d803      	bhi.n	80049e2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 80049da:	4b42      	ldr	r3, [pc, #264]	; (8004ae4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80049dc:	21a4      	movs	r1, #164	; 0xa4
 80049de:	4a3f      	ldr	r2, [pc, #252]	; (8004adc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80049e0:	e7f2      	b.n	80049c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80049e2:	68e8      	ldr	r0, [r5, #12]
 80049e4:	6803      	ldr	r3, [r0, #0]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	4798      	blx	r3
 80049ea:	280b      	cmp	r0, #11
 80049ec:	d803      	bhi.n	80049f6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 80049ee:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80049f0:	21a5      	movs	r1, #165	; 0xa5
 80049f2:	4a3a      	ldr	r2, [pc, #232]	; (8004adc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80049f4:	e7e8      	b.n	80049c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80049f6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8004af0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 80049fa:	f00f fb97 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 80049fe:	f00f fbd6 	bl	80141ae <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004a02:	f8d9 0000 	ldr.w	r0, [r9]
 8004a06:	b110      	cbz	r0, 8004a0e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8004a08:	6803      	ldr	r3, [r0, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4798      	blx	r3
    if (*currentTrans)
 8004a0e:	f8d9 0000 	ldr.w	r0, [r9]
 8004a12:	b110      	cbz	r0, 8004a1a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8004a14:	6803      	ldr	r3, [r0, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4798      	blx	r3
    if (*currentScreen)
 8004a1a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004af4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 8004a1e:	f8d8 0000 	ldr.w	r0, [r8]
 8004a22:	b110      	cbz	r0, 8004a2a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8004a24:	6803      	ldr	r3, [r0, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	4798      	blx	r3
    if (*currentPresenter)
 8004a2a:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004a2e:	b110      	cbz	r0, 8004a36 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004a30:	6803      	ldr	r3, [r0, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4798      	blx	r3
    if (*currentScreen)
 8004a36:	f8d8 0000 	ldr.w	r0, [r8]
 8004a3a:	b110      	cbz	r0, 8004a42 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004a3c:	6803      	ldr	r3, [r0, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4798      	blx	r3
    if (*currentPresenter)
 8004a42:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004a46:	b110      	cbz	r0, 8004a4e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8004a48:	6803      	ldr	r3, [r0, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004a4e:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8004a50:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8004a52:	f04f 0b00 	mov.w	fp, #0
 8004a56:	6803      	ldr	r3, [r0, #0]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	4798      	blx	r3
 8004a5c:	4b23      	ldr	r3, [pc, #140]	; (8004aec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8004a5e:	4604      	mov	r4, r0
 8004a60:	f8c0 b004 	str.w	fp, [r0, #4]
 8004a64:	6003      	str	r3, [r0, #0]
 8004a66:	4659      	mov	r1, fp
 8004a68:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004a6c:	68a8      	ldr	r0, [r5, #8]
 8004a6e:	6803      	ldr	r3, [r0, #0]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	4798      	blx	r3
 8004a74:	4606      	mov	r6, r0
 8004a76:	f001 fcb3 	bl	80063e0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004a7a:	6868      	ldr	r0, [r5, #4]
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	6803      	ldr	r3, [r0, #0]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	4798      	blx	r3
 8004a84:	4605      	mov	r5, r0
 8004a86:	4631      	mov	r1, r6
 8004a88:	f001 fc04 	bl	8006294 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8004a8c:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8004a90:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8004a94:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8004a98:	b1e5      	cbz	r5, 8004ad4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>
 8004a9a:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8004a9c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8004aa4:	f8c5 a008 	str.w	sl, [r5, #8]
 8004aa8:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8004aaa:	63f5      	str	r5, [r6, #60]	; 0x3c
 8004aac:	4798      	blx	r3
    newPresenter->activate();
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f011 f845 	bl	8015b48 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	4798      	blx	r3
    newTransition->invalidate();
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	4620      	mov	r0, r4
 8004aca:	695b      	ldr	r3, [r3, #20]
}
 8004acc:	b001      	add	sp, #4
 8004ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad2:	4718      	bx	r3
    model->bind(newPresenter);
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	e7e1      	b.n	8004a9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf4>
 8004ad8:	080281bc 	.word	0x080281bc
 8004adc:	0802824a 	.word	0x0802824a
 8004ae0:	0802834e 	.word	0x0802834e
 8004ae4:	08028395 	.word	0x08028395
 8004ae8:	08028438 	.word	0x08028438
 8004aec:	0802864c 	.word	0x0802864c
 8004af0:	20027ee0 	.word	0x20027ee0
 8004af4:	20027edc 	.word	0x20027edc

08004af8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
{
 8004af8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004afc:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8004b00:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004b02:	68a8      	ldr	r0, [r5, #8]
 8004b04:	6803      	ldr	r3, [r0, #0]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	4798      	blx	r3
 8004b0a:	28c7      	cmp	r0, #199	; 0xc7
 8004b0c:	d805      	bhi.n	8004b1a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x22>
 8004b0e:	4b45      	ldr	r3, [pc, #276]	; (8004c24 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 8004b10:	21a3      	movs	r1, #163	; 0xa3
 8004b12:	4a45      	ldr	r2, [pc, #276]	; (8004c28 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004b14:	4845      	ldr	r0, [pc, #276]	; (8004c2c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 8004b16:	f020 fb07 	bl	8025128 <__assert_func>
 8004b1a:	6868      	ldr	r0, [r5, #4]
 8004b1c:	6803      	ldr	r3, [r0, #0]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4798      	blx	r3
 8004b22:	280f      	cmp	r0, #15
 8004b24:	d803      	bhi.n	8004b2e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x36>
 8004b26:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 8004b28:	21a4      	movs	r1, #164	; 0xa4
 8004b2a:	4a3f      	ldr	r2, [pc, #252]	; (8004c28 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8004b2c:	e7f2      	b.n	8004b14 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004b2e:	68e8      	ldr	r0, [r5, #12]
 8004b30:	6803      	ldr	r3, [r0, #0]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4798      	blx	r3
 8004b36:	280b      	cmp	r0, #11
 8004b38:	d803      	bhi.n	8004b42 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4a>
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	; (8004c34 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 8004b3c:	21a5      	movs	r1, #165	; 0xa5
 8004b3e:	4a3a      	ldr	r2, [pc, #232]	; (8004c28 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8004b40:	e7e8      	b.n	8004b14 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8004b42:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8004c3c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8004b46:	f00f faf1 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 8004b4a:	f00f fb30 	bl	80141ae <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004b4e:	f8d9 0000 	ldr.w	r0, [r9]
 8004b52:	b110      	cbz	r0, 8004b5a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x62>
        (*currentTrans)->tearDown();
 8004b54:	6803      	ldr	r3, [r0, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4798      	blx	r3
    if (*currentTrans)
 8004b5a:	f8d9 0000 	ldr.w	r0, [r9]
 8004b5e:	b110      	cbz	r0, 8004b66 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x6e>
        (*currentTrans)->~Transition();
 8004b60:	6803      	ldr	r3, [r0, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4798      	blx	r3
    if (*currentScreen)
 8004b66:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004c40 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 8004b6a:	f8d8 0000 	ldr.w	r0, [r8]
 8004b6e:	b110      	cbz	r0, 8004b76 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x7e>
        (*currentScreen)->tearDownScreen();
 8004b70:	6803      	ldr	r3, [r0, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	4798      	blx	r3
    if (*currentPresenter)
 8004b76:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004b7a:	b110      	cbz	r0, 8004b82 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8a>
        (*currentPresenter)->deactivate();
 8004b7c:	6803      	ldr	r3, [r0, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4798      	blx	r3
    if (*currentScreen)
 8004b82:	f8d8 0000 	ldr.w	r0, [r8]
 8004b86:	b110      	cbz	r0, 8004b8e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x96>
        (*currentScreen)->~Screen();
 8004b88:	6803      	ldr	r3, [r0, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4798      	blx	r3
    if (*currentPresenter)
 8004b8e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004b92:	b110      	cbz	r0, 8004b9a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa2>
        (*currentPresenter)->~Presenter();
 8004b94:	6803      	ldr	r3, [r0, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004b9a:	68e8      	ldr	r0, [r5, #12]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	f04f 0b00 	mov.w	fp, #0
 8004ba2:	6803      	ldr	r3, [r0, #0]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	4798      	blx	r3
 8004ba8:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 8004baa:	4604      	mov	r4, r0
 8004bac:	f8c0 b004 	str.w	fp, [r0, #4]
 8004bb0:	6003      	str	r3, [r0, #0]
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004bb8:	68a8      	ldr	r0, [r5, #8]
 8004bba:	6803      	ldr	r3, [r0, #0]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	4798      	blx	r3
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	f001 fc43 	bl	800644c <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004bc6:	6868      	ldr	r0, [r5, #4]
 8004bc8:	4659      	mov	r1, fp
 8004bca:	6803      	ldr	r3, [r0, #0]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	4798      	blx	r3
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	f001 fc20 	bl	8006418 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 8004bd8:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8004bdc:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8004be0:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8004be4:	b1e5      	cbz	r5, 8004c20 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x128>
 8004be6:	1d2b      	adds	r3, r5, #4
 8004be8:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004bec:	4630      	mov	r0, r6
 8004bee:	6833      	ldr	r3, [r6, #0]
 8004bf0:	f8c5 a008 	str.w	sl, [r5, #8]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	63f5      	str	r5, [r6, #60]	; 0x3c
 8004bf8:	4798      	blx	r3
    newPresenter->activate();
 8004bfa:	682b      	ldr	r3, [r5, #0]
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004c02:	4621      	mov	r1, r4
 8004c04:	4630      	mov	r0, r6
 8004c06:	f010 ff9f 	bl	8015b48 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	4798      	blx	r3
    newTransition->invalidate();
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	4620      	mov	r0, r4
 8004c16:	695b      	ldr	r3, [r3, #20]
}
 8004c18:	b001      	add	sp, #4
 8004c1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1e:	4718      	bx	r3
    model->bind(newPresenter);
 8004c20:	462b      	mov	r3, r5
 8004c22:	e7e1      	b.n	8004be8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xf0>
 8004c24:	080281bc 	.word	0x080281bc
 8004c28:	080284db 	.word	0x080284db
 8004c2c:	0802834e 	.word	0x0802834e
 8004c30:	08028395 	.word	0x08028395
 8004c34:	08028438 	.word	0x08028438
 8004c38:	0802864c 	.word	0x0802864c
 8004c3c:	20027ee0 	.word	0x20027ee0
 8004c40:	20027edc 	.word	0x20027edc

08004c44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	4604      	mov	r4, r0
 8004c48:	4617      	mov	r7, r2
 8004c4a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8004c4c:	f00f facc 	bl	80141e8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004c50:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8004c52:	2500      	movs	r5, #0
        instance = this;
 8004c54:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004c56:	4629      	mov	r1, r5
      model(m)
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8004c5a:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8004c5e:	4e0f      	ldr	r6, [pc, #60]	; (8004c9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004c66:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8004c6a:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004c6e:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004c70:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f001 fa3b 	bl	80060f4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004c7e:	6833      	ldr	r3, [r6, #0]
 8004c80:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8004c84:	b10a      	cbz	r2, 8004c8a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8004c86:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004c88:	b900      	cbnz	r0, 8004c8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8004c8a:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004c8c:	f017 fa01 	bl	801c092 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8004c90:	4620      	mov	r0, r4
 8004c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c94:	20027eec 	.word	0x20027eec
 8004c98:	08028600 	.word	0x08028600
 8004c9c:	20027e98 	.word	0x20027e98
 8004ca0:	080285e8 	.word	0x080285e8

08004ca4 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8004ca6:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8004caa:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 8004cb4:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8004cb8:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	08004af9 	.word	0x08004af9

08004cc4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8004cc6:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8004cca:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 8004cd4:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8004cd8:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	080049a9 	.word	0x080049a9

08004ce4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8004ce4:	6a00      	ldr	r0, [r0, #32]
 8004ce6:	4770      	bx	lr

08004ce8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004ce8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004cea:	4770      	bx	lr

08004cec <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004cec:	4770      	bx	lr

08004cee <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004cee:	888b      	ldrh	r3, [r1, #4]
 8004cf0:	6980      	ldr	r0, [r0, #24]
 8004cf2:	0adb      	lsrs	r3, r3, #11
 8004cf4:	680a      	ldr	r2, [r1, #0]
 8004cf6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8004cfa:	4410      	add	r0, r2
 8004cfc:	4770      	bx	lr

08004cfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004cfe:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8004d00:	b1c2      	cbz	r2, 8004d34 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004d02:	7b13      	ldrb	r3, [r2, #12]
 8004d04:	b1b3      	cbz	r3, 8004d34 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004d06:	7b54      	ldrb	r4, [r2, #13]
 8004d08:	7ad2      	ldrb	r2, [r2, #11]
 8004d0a:	0224      	lsls	r4, r4, #8
 8004d0c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004d10:	4314      	orrs	r4, r2
 8004d12:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004d14:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004d16:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004d1a:	8813      	ldrh	r3, [r2, #0]
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	d102      	bne.n	8004d26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004d20:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8004d24:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004d26:	d805      	bhi.n	8004d34 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004d28:	3801      	subs	r0, #1
 8004d2a:	3204      	adds	r2, #4
 8004d2c:	b280      	uxth	r0, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d1f3      	bne.n	8004d1a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004d32:	e7f7      	b.n	8004d24 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004d34:	2000      	movs	r0, #0
 8004d36:	e7f5      	b.n	8004d24 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004d38 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	2128      	movs	r1, #40	; 0x28
 8004d3e:	f020 f816 	bl	8024d6e <_ZdlPvj>
 8004d42:	4620      	mov	r0, r4
 8004d44:	bd10      	pop	{r4, pc}
	...

08004d48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004d48:	b530      	push	{r4, r5, lr}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004d4e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8004d52:	9506      	str	r5, [sp, #24]
 8004d54:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8004d58:	9505      	str	r5, [sp, #20]
 8004d5a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8004d5e:	9504      	str	r5, [sp, #16]
 8004d60:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8004d64:	9503      	str	r5, [sp, #12]
 8004d66:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8004d6a:	9502      	str	r5, [sp, #8]
 8004d6c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8004d70:	9501      	str	r5, [sp, #4]
 8004d72:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8004d76:	9500      	str	r5, [sp, #0]
 8004d78:	f010 fa5a 	bl	8015230 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8004d7e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d84:	61a3      	str	r3, [r4, #24]
 8004d86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d88:	61e3      	str	r3, [r4, #28]
 8004d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d8c:	6223      	str	r3, [r4, #32]
 8004d8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d90:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004d92:	b009      	add	sp, #36	; 0x24
 8004d94:	bd30      	pop	{r4, r5, pc}
 8004d96:	bf00      	nop
 8004d98:	08028670 	.word	0x08028670

08004d9c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	4770      	bx	lr

08004da0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8004da0:	8081      	strh	r1, [r0, #4]
    }
 8004da2:	4770      	bx	lr

08004da4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8004da4:	80c1      	strh	r1, [r0, #6]
    }
 8004da6:	4770      	bx	lr

08004da8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8004da8:	8101      	strh	r1, [r0, #8]
    }
 8004daa:	4770      	bx	lr

08004dac <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8004dac:	8141      	strh	r1, [r0, #10]
    }
 8004dae:	4770      	bx	lr

08004db0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8004db0:	4770      	bx	lr

08004db2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8004db2:	4770      	bx	lr

08004db4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8004db4:	4770      	bx	lr

08004db6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8004db6:	4770      	bx	lr

08004db8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8004db8:	4770      	bx	lr

08004dba <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004dba:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8004dbc:	88c4      	ldrh	r4, [r0, #6]
 8004dbe:	6803      	ldr	r3, [r0, #0]
 8004dc0:	1b12      	subs	r2, r2, r4
 8004dc2:	8884      	ldrh	r4, [r0, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	1b09      	subs	r1, r1, r4
 8004dc8:	b212      	sxth	r2, r2
    }
 8004dca:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8004dce:	b209      	sxth	r1, r1
 8004dd0:	4718      	bx	r3

08004dd2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dd6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ddc:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8004de2:	6010      	str	r0, [r2, #0]
    }
 8004de4:	4770      	bx	lr

08004de6 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004de6:	4770      	bx	lr

08004de8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004de8:	4770      	bx	lr

08004dea <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004dea:	4770      	bx	lr

08004dec <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004dec:	4770      	bx	lr

08004dee <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004dee:	4770      	bx	lr

08004df0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8004df0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004df4:	b11a      	cbz	r2, 8004dfe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8004df6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8004dfa:	b102      	cbz	r2, 8004dfe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8004dfc:	6018      	str	r0, [r3, #0]
        }
    }
 8004dfe:	4770      	bx	lr

08004e00 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8004e00:	b530      	push	{r4, r5, lr}
 8004e02:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8004e04:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8004e06:	4604      	mov	r4, r0
        rect.width = width;
 8004e08:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8004e0a:	466d      	mov	r5, sp
 8004e0c:	4601      	mov	r1, r0
 8004e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e12:	343c      	adds	r4, #60	; 0x3c
 8004e14:	4628      	mov	r0, r5
 8004e16:	4798      	blx	r3
 8004e18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004e20:	b005      	add	sp, #20
 8004e22:	bd30      	pop	{r4, r5, pc}

08004e24 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8004e24:	b530      	push	{r4, r5, lr}
 8004e26:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004e28:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8004e2a:	4604      	mov	r4, r0
        rect.height = height;
 8004e2c:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8004e2e:	466d      	mov	r5, sp
 8004e30:	4601      	mov	r1, r0
 8004e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e36:	343c      	adds	r4, #60	; 0x3c
 8004e38:	4628      	mov	r0, r5
 8004e3a:	4798      	blx	r3
 8004e3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004e44:	b005      	add	sp, #20
 8004e46:	bd30      	pop	{r4, r5, pc}

08004e48 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	8002      	strh	r2, [r0, #0]
 8004e4c:	8042      	strh	r2, [r0, #2]
 8004e4e:	8082      	strh	r2, [r0, #4]
 8004e50:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004e52:	4770      	bx	lr

08004e54 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004e54:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8004e58:	4770      	bx	lr

08004e5a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8004e5a:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4604      	mov	r4, r0
        setX(x);
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004e62:	4615      	mov	r5, r2
        setX(x);
 8004e64:	4798      	blx	r3
        setBaselineY(baselineY);
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8004e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8004e72:	4718      	bx	r3

08004e74 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8004e74:	2000      	movs	r0, #0
 8004e76:	4770      	bx	lr

08004e78 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8004e7e:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004e80:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 8004e84:	4770      	bx	lr

08004e86 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004e86:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8004e88:	4770      	bx	lr

08004e8a <_ZNK8touchgfx24TextAreaWithTwoWildcards12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004e8a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8004e8c:	4770      	bx	lr

08004e8e <_ZNK8touchgfx24TextAreaWithTwoWildcards12getWildcard2Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return wc2;
    }
 8004e8e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8004e90:	4770      	bx	lr

08004e92 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8004e92:	2000      	movs	r0, #0
 8004e94:	4770      	bx	lr

08004e96 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8004e96:	888b      	ldrh	r3, [r1, #4]
 8004e98:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	4770      	bx	lr

08004e9e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8004e9e:	4770      	bx	lr

08004ea0 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8004ea0:	4770      	bx	lr

08004ea2 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8004ea2:	4770      	bx	lr

08004ea4 <_ZN8touchgfx24TextAreaWithTwoWildcardsD1Ev>:
class TextAreaWithTwoWildcards : public TextAreaWithWildcardBase
 8004ea4:	4770      	bx	lr

08004ea6 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004ea6:	4770      	bx	lr

08004ea8 <_ZN8touchgfx24TextAreaWithTwoWildcardsD0Ev>:
class TextAreaWithTwoWildcards : public TextAreaWithWildcardBase
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	4604      	mov	r4, r0
 8004eac:	2150      	movs	r1, #80	; 0x50
 8004eae:	f01f ff5e 	bl	8024d6e <_ZdlPvj>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	bd10      	pop	{r4, pc}

08004eb6 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	4604      	mov	r4, r0
 8004eba:	214c      	movs	r1, #76	; 0x4c
 8004ebc:	f01f ff57 	bl	8024d6e <_ZdlPvj>
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	bd10      	pop	{r4, pc}

08004ec4 <_ZN15Screen1ViewBaseD0Ev>:
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	f643 117c 	movw	r1, #14716	; 0x397c
 8004ecc:	f01f ff4f 	bl	8024d6e <_ZdlPvj>
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8004ed4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004ed8:	b112      	cbz	r2, 8004ee0 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8004eda:	6803      	ldr	r3, [r0, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	4718      	bx	r3
    }
 8004ee0:	4770      	bx	lr
	...

08004ee4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004ee4:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8004ee6:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004ee8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 8004eea:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004eee:	b28d      	uxth	r5, r1
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	b92b      	cbnz	r3, 8004f00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8004ef6:	216c      	movs	r1, #108	; 0x6c
 8004ef8:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004efa:	4811      	ldr	r0, [pc, #68]	; (8004f40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004efc:	f020 f914 	bl	8025128 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004f00:	4910      	ldr	r1, [pc, #64]	; (8004f44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004f02:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004f04:	8809      	ldrh	r1, [r1, #0]
 8004f06:	4291      	cmp	r1, r2
 8004f08:	d803      	bhi.n	8004f12 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004f0c:	216d      	movs	r1, #109	; 0x6d
 8004f0e:	4a0b      	ldr	r2, [pc, #44]	; (8004f3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004f10:	e7f3      	b.n	8004efa <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004f12:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8004f16:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f1e:	6803      	ldr	r3, [r0, #0]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	4798      	blx	r3
 8004f24:	1a28      	subs	r0, r5, r0
 8004f26:	4633      	mov	r3, r6
 8004f28:	b201      	sxth	r1, r0
 8004f2a:	4620      	mov	r0, r4
    }
 8004f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004f30:	4718      	bx	r3
 8004f32:	bf00      	nop
 8004f34:	20027ef0 	.word	0x20027ef0
 8004f38:	080286c0 	.word	0x080286c0
 8004f3c:	08028702 	.word	0x08028702
 8004f40:	0802873d 	.word	0x0802873d
 8004f44:	20027ef4 	.word	0x20027ef4
 8004f48:	08028784 	.word	0x08028784
 8004f4c:	20027ef8 	.word	0x20027ef8

08004f50 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8004f50:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8004f52:	b570      	push	{r4, r5, r6, lr}
 8004f54:	4604      	mov	r4, r0
        setX(x);
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8004f58:	4615      	mov	r5, r2
        setX(x);
 8004f5a:	4798      	blx	r3
        setY(y);
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4629      	mov	r1, r5
 8004f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8004f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8004f68:	4718      	bx	r3

08004f6a <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004f6a:	b570      	push	{r4, r5, r6, lr}
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	461d      	mov	r5, r3
 8004f70:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8004f74:	f7ff ffec 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	4798      	blx	r3
        setHeight(height);
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	4631      	mov	r1, r6
 8004f86:	4620      	mov	r0, r4
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8004f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8004f8e:	4718      	bx	r3

08004f90 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004f90:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <_ZN8touchgfx3BoxC1Ev+0x28>)
          visible(true)
 8004f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f96:	6002      	str	r2, [r0, #0]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	8481      	strh	r1, [r0, #36]	; 0x24
 8004f9c:	21ff      	movs	r1, #255	; 0xff
        : color(col)
 8004f9e:	6282      	str	r2, [r0, #40]	; 0x28
 8004fa0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
        : x(0), y(0), width(0), height(0)
 8004fa4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004fa8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8004fac:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8004fb0:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	08029c38 	.word	0x08029c38

08004fbc <_ZN8touchgfx8TextAreaC1Ev>:
 8004fbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	8481      	strh	r1, [r0, #36]	; 0x24
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004fc4:	490c      	ldr	r1, [pc, #48]	; (8004ff8 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
        : color(col)
 8004fc6:	6302      	str	r2, [r0, #48]	; 0x30
 8004fc8:	6001      	str	r1, [r0, #0]
        : typedTextId(id)
 8004fca:	490c      	ldr	r1, [pc, #48]	; (8004ffc <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8004fcc:	8702      	strh	r2, [r0, #56]	; 0x38
 8004fce:	6281      	str	r1, [r0, #40]	; 0x28
 8004fd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004fd4:	63c2      	str	r2, [r0, #60]	; 0x3c
 8004fd6:	8581      	strh	r1, [r0, #44]	; 0x2c
 8004fd8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8004fdc:	6341      	str	r1, [r0, #52]	; 0x34
 8004fde:	f04f 31ff 	mov.w	r1, #4294967295
        : x(0), y(0), width(0), height(0)
 8004fe2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004fe6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8004fea:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8004fee:	e9c0 2207 	strd	r2, r2, [r0, #28]
              text(0)
 8004ff2:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
    }
 8004ff6:	4770      	bx	lr
 8004ff8:	08029ba8 	.word	0x08029ba8
 8004ffc:	080281b4 	.word	0x080281b4

08005000 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8005000:	b510      	push	{r4, lr}
 8005002:	4604      	mov	r4, r0
        : TextArea()
 8005004:	f7ff ffda 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8005008:	4b02      	ldr	r3, [pc, #8]	; (8005014 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x14>)
    }
 800500a:	4620      	mov	r0, r4
        : TextAreaWithWildcardBase(), wc1(0)
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	64a3      	str	r3, [r4, #72]	; 0x48
    }
 8005012:	bd10      	pop	{r4, pc}
 8005014:	08028900 	.word	0x08028900

08005018 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 8005018:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800501a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800501c:	4e12      	ldr	r6, [pc, #72]	; (8005068 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 800501e:	4605      	mov	r5, r0
 8005020:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 8005024:	6003      	str	r3, [r0, #0]
 8005026:	6833      	ldr	r3, [r6, #0]
 8005028:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800502c:	b10a      	cbz	r2, 8005032 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 800502e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005030:	b900      	cbnz	r0, 8005034 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 8005032:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8005034:	6803      	ldr	r3, [r0, #0]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	4798      	blx	r3
        return auxiliaryLCD;
 800503a:	6833      	ldr	r3, [r6, #0]
 800503c:	fab0 f480 	clz	r4, r0
 8005040:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005042:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 8005044:	b130      	cbz	r0, 8005054 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8005046:	6803      	ldr	r3, [r0, #0]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	4798      	blx	r3
 800504c:	2800      	cmp	r0, #0
 800504e:	bf08      	it	eq
 8005050:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8005054:	b92c      	cbnz	r4, 8005062 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 8005058:	212c      	movs	r1, #44	; 0x2c
 800505a:	4a06      	ldr	r2, [pc, #24]	; (8005074 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 800505c:	4806      	ldr	r0, [pc, #24]	; (8005078 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 800505e:	f020 f863 	bl	8025128 <__assert_func>
    }
 8005062:	4628      	mov	r0, r5
 8005064:	bd70      	pop	{r4, r5, r6, pc}
 8005066:	bf00      	nop
 8005068:	20027e98 	.word	0x20027e98
 800506c:	08028a20 	.word	0x08028a20
 8005070:	080287c2 	.word	0x080287c2
 8005074:	08028820 	.word	0x08028820
 8005078:	08028859 	.word	0x08028859

0800507c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	4604      	mov	r4, r0
        : presenter(0)
 8005082:	2500      	movs	r5, #0
        : TextAreaWithWildcardBase(), wc1(0), wc2(0)
 8005084:	4fa3      	ldr	r7, [pc, #652]	; (8005314 <_ZN15Screen1ViewBaseC1Ev+0x298>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8005086:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800508a:	f504 79e0 	add.w	r9, r4, #448	; 0x1c0
 800508e:	f504 7b29 	add.w	fp, r4, #676	; 0x2a4
 8005092:	f504 7a6e 	add.w	sl, r4, #952	; 0x3b8
 8005096:	ed2d 8b10 	vpush	{d8-d15}
 800509a:	b093      	sub	sp, #76	; 0x4c
 800509c:	f010 fba8 	bl	80157f0 <_ZN8touchgfx6ScreenC1Ev>
 80050a0:	4622      	mov	r2, r4
 80050a2:	4b9d      	ldr	r3, [pc, #628]	; (8005318 <_ZN15Screen1ViewBaseC1Ev+0x29c>)
 80050a4:	63e5      	str	r5, [r4, #60]	; 0x3c
 80050a6:	f842 3b40 	str.w	r3, [r2], #64
 80050aa:	4610      	mov	r0, r2
 80050ac:	ee0f 2a10 	vmov	s30, r2
 80050b0:	f7ff ff6e 	bl	8004f90 <_ZN8touchgfx3BoxC1Ev>
 80050b4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80050b8:	4618      	mov	r0, r3
 80050ba:	9307      	str	r3, [sp, #28]
 80050bc:	f7ff ff68 	bl	8004f90 <_ZN8touchgfx3BoxC1Ev>
 80050c0:	f104 0398 	add.w	r3, r4, #152	; 0x98
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 80050c4:	4618      	mov	r0, r3
 80050c6:	9308      	str	r3, [sp, #32]
 80050c8:	f7ff ff62 	bl	8004f90 <_ZN8touchgfx3BoxC1Ev>
 80050cc:	4b93      	ldr	r3, [pc, #588]	; (800531c <_ZN15Screen1ViewBaseC1Ev+0x2a0>)
        : color(col)
 80050ce:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
 80050d2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80050d6:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
 80050da:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
        : TextArea()
 80050de:	4618      	mov	r0, r3
 80050e0:	ee09 3a10 	vmov	s18, r3
 80050e4:	f7ff ff6a 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 80050e8:	f504 738e 	add.w	r3, r4, #284	; 0x11c
        : TextAreaWithWildcardBase(), wc1(0), wc2(0)
 80050ec:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
 80050f0:	4618      	mov	r0, r3
 80050f2:	ee09 3a90 	vmov	s19, r3
 80050f6:	e9c4 5545 	strd	r5, r5, [r4, #276]	; 0x114
 80050fa:	f7ff ff81 	bl	8005000 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80050fe:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8005102:	a910      	add	r1, sp, #64	; 0x40
 8005104:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8005108:	4618      	mov	r0, r3
 800510a:	ee0f 3a90 	vmov	s31, r3
 800510e:	f00b fb4f 	bl	80107b0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005112:	f504 73ca 	add.w	r3, r4, #404	; 0x194
 8005116:	a910      	add	r1, sp, #64	; 0x40
 8005118:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 800511c:	4618      	mov	r0, r3
 800511e:	9302      	str	r3, [sp, #8]
 8005120:	f00b fb46 	bl	80107b0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005124:	4648      	mov	r0, r9
 8005126:	f009 fb03 	bl	800e730 <_ZN8touchgfx11BoxProgressC1Ev>
 800512a:	4658      	mov	r0, fp
 800512c:	f009 f9ee 	bl	800e50c <_ZN8touchgfx12TextProgressC1Ev>
 8005130:	4650      	mov	r0, sl
 8005132:	f00c f92d 	bl	8011390 <_ZN8touchgfx5GaugeC1Ev>
 8005136:	f504 63ab 	add.w	r3, r4, #1368	; 0x558
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800513a:	4e79      	ldr	r6, [pc, #484]	; (8005320 <_ZN15Screen1ViewBaseC1Ev+0x2a4>)
 800513c:	4618      	mov	r0, r3
 800513e:	ee0a 3a10 	vmov	s20, r3
 8005142:	f7ff ff5d 	bl	8005000 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005146:	f204 53a4 	addw	r3, r4, #1444	; 0x5a4
 800514a:	f106 0824 	add.w	r8, r6, #36	; 0x24
 800514e:	4618      	mov	r0, r3
 8005150:	9303      	str	r3, [sp, #12]
 8005152:	f7ff ff55 	bl	8005000 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005156:	f504 63be 	add.w	r3, r4, #1520	; 0x5f0
 800515a:	4618      	mov	r0, r3
 800515c:	9304      	str	r3, [sp, #16]
 800515e:	f7ff ff4f 	bl	8005000 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005162:	f204 633c 	addw	r3, r4, #1596	; 0x63c
 8005166:	4618      	mov	r0, r3
 8005168:	ee0a 3a90 	vmov	s21, r3
 800516c:	f7ff ff26 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 8005170:	f204 6384 	addw	r3, r4, #1668	; 0x684
 8005174:	4618      	mov	r0, r3
 8005176:	ee0b 3a10 	vmov	s22, r3
 800517a:	f7ff ff1f 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 800517e:	f204 63cc 	addw	r3, r4, #1740	; 0x6cc
 8005182:	4618      	mov	r0, r3
 8005184:	ee0b 3a90 	vmov	s23, r3
 8005188:	f7ff ff18 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 800518c:	f204 7314 	addw	r3, r4, #1812	; 0x714
 8005190:	4618      	mov	r0, r3
 8005192:	ee0c 3a10 	vmov	s24, r3
 8005196:	f7ff ff11 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 800519a:	f204 735c 	addw	r3, r4, #1884	; 0x75c
 800519e:	4618      	mov	r0, r3
 80051a0:	ee08 3a10 	vmov	s16, r3
 80051a4:	f00b f8d2 	bl	801034c <_ZN8touchgfx4LineC1Ev>
 80051a8:	f204 73cc 	addw	r3, r4, #1996	; 0x7cc
 80051ac:	4618      	mov	r0, r3
 80051ae:	9309      	str	r3, [sp, #36]	; 0x24
 80051b0:	f7ff ff32 	bl	8005018 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 80051b4:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 80051b8:	f8c4 67cc 	str.w	r6, [r4, #1996]	; 0x7cc
 80051bc:	4618      	mov	r0, r3
 80051be:	f8c4 87d4 	str.w	r8, [r4, #2004]	; 0x7d4
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80051c2:	f8c4 57d8 	str.w	r5, [r4, #2008]	; 0x7d8
 80051c6:	ee08 3a90 	vmov	s17, r3
 80051ca:	f00b f8bf 	bl	801034c <_ZN8touchgfx4LineC1Ev>
 80051ce:	f504 6305 	add.w	r3, r4, #2128	; 0x850
 80051d2:	4618      	mov	r0, r3
 80051d4:	930a      	str	r3, [sp, #40]	; 0x28
 80051d6:	f7ff ff1f 	bl	8005018 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 80051da:	f604 0364 	addw	r3, r4, #2148	; 0x864
 80051de:	f8c4 6850 	str.w	r6, [r4, #2128]	; 0x850
    __background.setPosition(0, 0, 800, 480);
 80051e2:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
        : TextArea()
 80051e6:	4618      	mov	r0, r3
 80051e8:	f8c4 8858 	str.w	r8, [r4, #2136]	; 0x858
 80051ec:	f8c4 585c 	str.w	r5, [r4, #2140]	; 0x85c
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 80051f0:	f04f 0801 	mov.w	r8, #1
Screen1ViewBase::Screen1ViewBase()
 80051f4:	9305      	str	r3, [sp, #20]
 80051f6:	f7ff fee1 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 80051fa:	f604 03b4 	addw	r3, r4, #2228	; 0x8b4
        : TextAreaWithWildcardBase(), wc1(0), wc2(0)
 80051fe:	f8c4 7864 	str.w	r7, [r4, #2148]	; 0x864
 8005202:	f8c4 58ac 	str.w	r5, [r4, #2220]	; 0x8ac
 8005206:	4618      	mov	r0, r3
 8005208:	f8c4 58b0 	str.w	r5, [r4, #2224]	; 0x8b0
 800520c:	9306      	str	r3, [sp, #24]
 800520e:	f7ff fef7 	bl	8005000 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005212:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005216:	4f43      	ldr	r7, [pc, #268]	; (8005324 <_ZN15Screen1ViewBaseC1Ev+0x2a8>)
 8005218:	4618      	mov	r0, r3
 800521a:	ee0c 3a90 	vmov	s25, r3
 800521e:	f7ff fecd 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 8005222:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8005226:	4618      	mov	r0, r3
 8005228:	ee0d 3a10 	vmov	s26, r3
 800522c:	f7ff fec6 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 8005230:	f504 6319 	add.w	r3, r4, #2448	; 0x990
 8005234:	4618      	mov	r0, r3
 8005236:	ee0d 3a90 	vmov	s27, r3
 800523a:	f7ff febf 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 800523e:	f604 13d8 	addw	r3, r4, #2520	; 0x9d8
 8005242:	4618      	mov	r0, r3
 8005244:	ee0e 3a10 	vmov	s28, r3
 8005248:	f7ff feb8 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
 800524c:	f504 6322 	add.w	r3, r4, #2592	; 0xa20
 8005250:	4618      	mov	r0, r3
 8005252:	ee0e 3a90 	vmov	s29, r3
 8005256:	f7ff feb1 	bl	8004fbc <_ZN8touchgfx8TextAreaC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800525a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800525e:	f604 209c 	addw	r0, r4, #2716	; 0xa9c
 8005262:	f00d fa43 	bl	80126ec <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8005266:	f44f 7348 	mov.w	r3, #800	; 0x320
 800526a:	462a      	mov	r2, r5
 800526c:	4629      	mov	r1, r5
 800526e:	ee1f 0a10 	vmov	r0, s30
 8005272:	9600      	str	r6, [sp, #0]
 8005274:	f7ff fe79 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8005278:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box2.setPosition(2, 0, 800, 480);
 800527c:	462a      	mov	r2, r5
 800527e:	2102      	movs	r1, #2
 8005280:	9807      	ldr	r0, [sp, #28]
 8005282:	66a3      	str	r3, [r4, #104]	; 0x68
 8005284:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005288:	9600      	str	r6, [sp, #0]
        boundingArea = calculateBoundingArea();
 800528a:	ae0c      	add	r6, sp, #48	; 0x30
 800528c:	f7ff fe6d 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 8005290:	f04f 33ff 	mov.w	r3, #4294967295
    boxWithBorder1.setPosition(2, 437, 104, 40);
 8005294:	f240 12b5 	movw	r2, #437	; 0x1b5
 8005298:	2102      	movs	r1, #2
 800529a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800529e:	2328      	movs	r3, #40	; 0x28
 80052a0:	9808      	ldr	r0, [sp, #32]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2368      	movs	r3, #104	; 0x68
 80052a6:	f7ff fe60 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
        borderColor = colorBorder;
 80052aa:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <_ZN15Screen1ViewBaseC1Ev+0x2ac>)
 80052ac:	f04f 32ff 	mov.w	r2, #4294967295
    textArea1.setXY(8, 445);
 80052b0:	2108      	movs	r1, #8
 80052b2:	ee19 0a10 	vmov	r0, s18
        borderSize = size;
 80052b6:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
        borderColor = colorBorder;
 80052ba:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
 80052be:	f240 12bd 	movw	r2, #445	; 0x1bd
 80052c2:	f7ff fe45 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80052c6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80052ca:	ee19 1a10 	vmov	r1, s18
 80052ce:	4630      	mov	r0, r6
        color = newColor;
 80052d0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        boundingArea = calculateBoundingArea();
 80052d4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
        linespace = space;
 80052d8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
        boundingArea = calculateBoundingArea();
 80052dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e0:	4798      	blx	r3
 80052e2:	f504 7384 	add.w	r3, r4, #264	; 0x108
 80052e6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80052ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    touchgfx::Unicode::snprintf(textArea1Buffer1, TEXTAREA1BUFFER1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_S9D1).getText());
 80052ee:	f604 2368 	addw	r3, r4, #2664	; 0xa68
 80052f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	b92b      	cbnz	r3, 8005304 <_ZN15Screen1ViewBaseC1Ev+0x288>
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <_ZN15Screen1ViewBaseC1Ev+0x2b0>)
 80052fa:	2160      	movs	r1, #96	; 0x60
 80052fc:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <_ZN15Screen1ViewBaseC1Ev+0x2b4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80052fe:	480d      	ldr	r0, [pc, #52]	; (8005334 <_ZN15Screen1ViewBaseC1Ev+0x2b8>)
 8005300:	f01f ff12 	bl	8025128 <__assert_func>
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <_ZN15Screen1ViewBaseC1Ev+0x2bc>)
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	2b17      	cmp	r3, #23
 800530a:	d819      	bhi.n	8005340 <_ZN15Screen1ViewBaseC1Ev+0x2c4>
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <_ZN15Screen1ViewBaseC1Ev+0x2c0>)
 800530e:	2161      	movs	r1, #97	; 0x61
 8005310:	4a07      	ldr	r2, [pc, #28]	; (8005330 <_ZN15Screen1ViewBaseC1Ev+0x2b4>)
 8005312:	e7f4      	b.n	80052fe <_ZN15Screen1ViewBaseC1Ev+0x282>
 8005314:	08028990 	.word	0x08028990
 8005318:	08028a40 	.word	0x08028a40
 800531c:	08029d88 	.word	0x08029d88
 8005320:	08029960 	.word	0x08029960
 8005324:	20027ef0 	.word	0x20027ef0
 8005328:	ffc2bcbc 	.word	0xffc2bcbc
 800532c:	080286c0 	.word	0x080286c0
 8005330:	080288bb 	.word	0x080288bb
 8005334:	0802873d 	.word	0x0802873d
 8005338:	20027ef4 	.word	0x20027ef4
 800533c:	08028784 	.word	0x08028784
        return texts->getText(typedTextId);
 8005340:	4bd5      	ldr	r3, [pc, #852]	; (8005698 <_ZN15Screen1ViewBaseC1Ev+0x61c>)
 8005342:	2117      	movs	r1, #23
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	f000 ff11 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 800534a:	4ad4      	ldr	r2, [pc, #848]	; (800569c <_ZN15Screen1ViewBaseC1Ev+0x620>)
 800534c:	4603      	mov	r3, r0
 800534e:	2103      	movs	r1, #3
 8005350:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005352:	f011 ff05 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8005356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    touchgfx::Unicode::snprintf(textArea1Buffer2, TEXTAREA1BUFFER2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_2C3Y).getText());
 800535e:	f604 226e 	addw	r2, r4, #2670	; 0xa6e
 8005362:	920b      	str	r2, [sp, #44]	; 0x2c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0c7      	beq.n	80052f8 <_ZN15Screen1ViewBaseC1Ev+0x27c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005368:	4acd      	ldr	r2, [pc, #820]	; (80056a0 <_ZN15Screen1ViewBaseC1Ev+0x624>)
 800536a:	8813      	ldrh	r3, [r2, #0]
 800536c:	2b16      	cmp	r3, #22
 800536e:	d9cd      	bls.n	800530c <_ZN15Screen1ViewBaseC1Ev+0x290>
        return texts->getText(typedTextId);
 8005370:	4bc9      	ldr	r3, [pc, #804]	; (8005698 <_ZN15Screen1ViewBaseC1Ev+0x61c>)
 8005372:	2116      	movs	r1, #22
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	f000 fef9 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 800537a:	4ac8      	ldr	r2, [pc, #800]	; (800569c <_ZN15Screen1ViewBaseC1Ev+0x620>)
 800537c:	4603      	mov	r3, r0
 800537e:	2103      	movs	r1, #3
 8005380:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005382:	f011 feed 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc2 = value;
 8005386:	990b      	ldr	r1, [sp, #44]	; 0x2c
    textArea1.resizeToCurrentText();
 8005388:	ee19 0a10 	vmov	r0, s18
 800538c:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
 8005390:	f00b ff44 	bl	801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005394:	49c3      	ldr	r1, [pc, #780]	; (80056a4 <_ZN15Screen1ViewBaseC1Ev+0x628>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VLQ5));
 8005396:	a810      	add	r0, sp, #64	; 0x40
 8005398:	2319      	movs	r3, #25
 800539a:	9110      	str	r1, [sp, #64]	; 0x40
 800539c:	4601      	mov	r1, r0
 800539e:	ee19 0a10 	vmov	r0, s18
 80053a2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80053a6:	f00b ff59 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea2.setXY(76, 381);
 80053aa:	f240 127d 	movw	r2, #381	; 0x17d
 80053ae:	214c      	movs	r1, #76	; 0x4c
 80053b0:	ee19 0a90 	vmov	r0, s19
 80053b4:	f7ff fdcc 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80053b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80053bc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80053c0:	ee19 1a90 	vmov	r1, s19
        color = newColor;
 80053c4:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
        boundingArea = calculateBoundingArea();
 80053c8:	4630      	mov	r0, r6
 80053ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 80053ce:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
        boundingArea = calculateBoundingArea();
 80053d2:	4798      	blx	r3
 80053d4:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 80053d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80053dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_TZHX).getText());
 80053e0:	f604 2074 	addw	r0, r4, #2676	; 0xa74
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	900b      	str	r0, [sp, #44]	; 0x2c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d085      	beq.n	80052f8 <_ZN15Screen1ViewBaseC1Ev+0x27c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80053ec:	4aac      	ldr	r2, [pc, #688]	; (80056a0 <_ZN15Screen1ViewBaseC1Ev+0x624>)
 80053ee:	8813      	ldrh	r3, [r2, #0]
 80053f0:	2b15      	cmp	r3, #21
 80053f2:	d98b      	bls.n	800530c <_ZN15Screen1ViewBaseC1Ev+0x290>
        return texts->getText(typedTextId);
 80053f4:	4ba8      	ldr	r3, [pc, #672]	; (8005698 <_ZN15Screen1ViewBaseC1Ev+0x61c>)
 80053f6:	2115      	movs	r1, #21
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	f000 feb7 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 80053fe:	4aa7      	ldr	r2, [pc, #668]	; (800569c <_ZN15Screen1ViewBaseC1Ev+0x620>)
 8005400:	4603      	mov	r3, r0
 8005402:	2105      	movs	r1, #5
 8005404:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005406:	f011 feab 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 800540a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800540c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
    textArea2.resizeToCurrentText();
 8005410:	ee19 0a90 	vmov	r0, s19
 8005414:	f00b ff02 	bl	801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005418:	49a2      	ldr	r1, [pc, #648]	; (80056a4 <_ZN15Screen1ViewBaseC1Ev+0x628>)
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4M43));
 800541a:	a810      	add	r0, sp, #64	; 0x40
 800541c:	2318      	movs	r3, #24
 800541e:	9110      	str	r1, [sp, #64]	; 0x40
 8005420:	4601      	mov	r1, r0
 8005422:	ee19 0a90 	vmov	r0, s19
 8005426:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 800542a:	f00b ff17 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_UTFPR_LOGO_ID));
 800542e:	a810      	add	r0, sp, #64	; 0x40
 8005430:	230e      	movs	r3, #14
 8005432:	4601      	mov	r1, r0
 8005434:	ee1f 0a90 	vmov	r0, s31
 8005438:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800543c:	f00c fa64 	bl	8011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(284, 6, 390, 140);
 8005440:	238c      	movs	r3, #140	; 0x8c
 8005442:	2206      	movs	r2, #6
 8005444:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005448:	ee1f 0a90 	vmov	r0, s31
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8005452:	f7ff fd8a 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005456:	4629      	mov	r1, r5
 8005458:	ee1f 0a90 	vmov	r0, s31
 800545c:	f00b f96f 	bl	801073e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_TUBARAO_BRANCO_LOGO_ID));
 8005460:	a810      	add	r0, sp, #64	; 0x40
 8005462:	230d      	movs	r3, #13
 8005464:	4601      	mov	r1, r0
 8005466:	9802      	ldr	r0, [sp, #8]
 8005468:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800546c:	f00c fa4c 	bl	8011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage2.setPosition(134, 1, 150, 151);
 8005470:	2397      	movs	r3, #151	; 0x97
 8005472:	4642      	mov	r2, r8
 8005474:	2186      	movs	r1, #134	; 0x86
 8005476:	9802      	ldr	r0, [sp, #8]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	2396      	movs	r3, #150	; 0x96
 800547c:	f7ff fd75 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005480:	4629      	mov	r1, r5
 8005482:	9802      	ldr	r0, [sp, #8]
 8005484:	f00b f95b 	bl	801073e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    boxProgress1.setXY(29, 34);
 8005488:	2222      	movs	r2, #34	; 0x22
 800548a:	211d      	movs	r1, #29
 800548c:	4648      	mov	r0, r9
 800548e:	f7ff fd5f 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(2, 2, 30, 400);
 8005492:	2202      	movs	r2, #2
 8005494:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005498:	4648      	mov	r0, r9
 800549a:	4611      	mov	r1, r2
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	231e      	movs	r3, #30
 80054a0:	f009 f8a0 	bl	800e5e4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 15000);
 80054a4:	462b      	mov	r3, r5
 80054a6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80054aa:	4629      	mov	r1, r5
 80054ac:	4648      	mov	r0, r9
 80054ae:	9500      	str	r5, [sp, #0]
 80054b0:	f009 f9b6 	bl	800e820 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::UP);
 80054b4:	2103      	movs	r1, #3
 80054b6:	4648      	mov	r0, r9
 80054b8:	f009 f991 	bl	800e7de <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_SQUARE_90_DEGREES_ID));
 80054bc:	a810      	add	r0, sp, #64	; 0x40
 80054be:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 80054c2:	4601      	mov	r1, r0
 80054c4:	4648      	mov	r0, r9
 80054c6:	f009 fafb 	bl	800eac0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFromRGB(33, 196, 58));
 80054ca:	4977      	ldr	r1, [pc, #476]	; (80056a8 <_ZN15Screen1ViewBaseC1Ev+0x62c>)
 80054cc:	4648      	mov	r0, r9
 80054ce:	f009 f873 	bl	800e5b8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(6000);
 80054d2:	f241 7170 	movw	r1, #6000	; 0x1770
 80054d6:	4648      	mov	r0, r9
 80054d8:	f009 f89c 	bl	800e614 <_ZN8touchgfx11BoxProgress8setValueEi>
    textProgress1.setXY(702, 12);
 80054dc:	220c      	movs	r2, #12
 80054de:	f240 21be 	movw	r1, #702	; 0x2be
 80054e2:	4658      	mov	r0, fp
 80054e4:	f7ff fd34 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 4, 84, 34);
 80054e8:	2322      	movs	r3, #34	; 0x22
 80054ea:	2204      	movs	r2, #4
 80054ec:	4629      	mov	r1, r5
 80054ee:	4658      	mov	r0, fp
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	2354      	movs	r3, #84	; 0x54
 80054f4:	f008 ffeb 	bl	800e4ce <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 80054f8:	2264      	movs	r2, #100	; 0x64
 80054fa:	462b      	mov	r3, r5
 80054fc:	4629      	mov	r1, r5
 80054fe:	4658      	mov	r0, fp
 8005500:	9500      	str	r5, [sp, #0]
 8005502:	f009 f98d 	bl	800e820 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005506:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 800550a:	4658      	mov	r0, fp
 800550c:	f008 ff54 	bl	800e3b8 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setNumberOfDecimals(0);
 8005510:	4629      	mov	r1, r5
 8005512:	4658      	mov	r0, fp
 8005514:	f008 ff56 	bl	800e3c4 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
 8005518:	4962      	ldr	r1, [pc, #392]	; (80056a4 <_ZN15Screen1ViewBaseC1Ev+0x628>)
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZWW4));
 800551a:	a810      	add	r0, sp, #64	; 0x40
 800551c:	2314      	movs	r3, #20
 800551e:	9110      	str	r1, [sp, #64]	; 0x40
 8005520:	4601      	mov	r1, r0
 8005522:	4658      	mov	r0, fp
 8005524:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005528:	f008 ff6b 	bl	800e402 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));
 800552c:	a810      	add	r0, sp, #64	; 0x40
 800552e:	2302      	movs	r3, #2
 8005530:	4601      	mov	r1, r0
 8005532:	4658      	mov	r0, fp
 8005534:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8005538:	f009 fac2 	bl	800eac0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(60);
 800553c:	213c      	movs	r1, #60	; 0x3c
 800553e:	4658      	mov	r0, fp
 8005540:	f008 ff6a 	bl	800e418 <_ZN8touchgfx12TextProgress8setValueEi>
    gauge1.setBackground(touchgfx::Bitmap(BITMAP_ORIGINAL_GAUGE_BACKG_ID));
 8005544:	a810      	add	r0, sp, #64	; 0x40
 8005546:	230b      	movs	r3, #11
 8005548:	4601      	mov	r1, r0
 800554a:	4650      	mov	r0, sl
 800554c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8005550:	f009 fab6 	bl	800eac0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setBackgroundOffset(5.0f, 3.3f);
 8005554:	2203      	movs	r2, #3
 8005556:	2105      	movs	r1, #5
 8005558:	4650      	mov	r0, sl
 800555a:	f00b ff51 	bl	8011400 <_ZN8touchgfx5Gauge19setBackgroundOffsetEss>
    gauge1.setPosition(246, 163, 308, 306);
 800555e:	f44f 7399 	mov.w	r3, #306	; 0x132
 8005562:	22a3      	movs	r2, #163	; 0xa3
 8005564:	21f6      	movs	r1, #246	; 0xf6
 8005566:	4650      	mov	r0, sl
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	f44f 739a 	mov.w	r3, #308	; 0x134
 800556e:	f7ff fcfc 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(152.6f, 155.8f);
 8005572:	229b      	movs	r2, #155	; 0x9b
 8005574:	2198      	movs	r1, #152	; 0x98
 8005576:	4650      	mov	r0, sl
 8005578:	f00b ffbb 	bl	80114f2 <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-90, 90);
 800557c:	225a      	movs	r2, #90	; 0x5a
 800557e:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8005582:	4650      	mov	r0, sl
 8005584:	f00c f83a 	bl	80115fc <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 100);
 8005588:	462b      	mov	r3, r5
 800558a:	2264      	movs	r2, #100	; 0x64
 800558c:	4629      	mov	r1, r5
 800558e:	4650      	mov	r0, sl
 8005590:	9500      	str	r5, [sp, #0]
 8005592:	f009 f945 	bl	800e820 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(50);
 8005596:	2132      	movs	r1, #50	; 0x32
 8005598:	4650      	mov	r0, sl
 800559a:	f00b ffd9 	bl	8011550 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_BLUE_NEEDLES_ORIG_ID, 10.4f, 83.3f);
 800559e:	2353      	movs	r3, #83	; 0x53
 80055a0:	220a      	movs	r2, #10
 80055a2:	4629      	mov	r1, r5
 80055a4:	4650      	mov	r0, sl
 80055a6:	f00b ff8f 	bl	80114c8 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80055aa:	4641      	mov	r1, r8
 80055ac:	4650      	mov	r0, sl
 80055ae:	f00b ff2c 	bl	801140a <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80055b2:	4641      	mov	r1, r8
 80055b4:	4650      	mov	r0, sl
 80055b6:	f00b ff2b 	bl	8011410 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    textArea3.setXY(328, 356);
 80055ba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80055be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80055c2:	ee1a 0a10 	vmov	r0, s20
 80055c6:	f7ff fcc3 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80055ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80055ce:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
 80055d2:	ee1a 1a10 	vmov	r1, s20
        color = newColor;
 80055d6:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        boundingArea = calculateBoundingArea();
 80055da:	4630      	mov	r0, r6
 80055dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 80055e0:	f8a4 558c 	strh.w	r5, [r4, #1420]	; 0x58c
        boundingArea = calculateBoundingArea();
 80055e4:	4798      	blx	r3
 80055e6:	f204 5394 	addw	r3, r4, #1428	; 0x594
 80055ea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80055ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80055f2:	683b      	ldr	r3, [r7, #0]
    Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_R0XH).getText());
 80055f4:	f604 267e 	addw	r6, r4, #2686	; 0xa7e
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f43f ae7d 	beq.w	80052f8 <_ZN15Screen1ViewBaseC1Ev+0x27c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80055fe:	4a28      	ldr	r2, [pc, #160]	; (80056a0 <_ZN15Screen1ViewBaseC1Ev+0x624>)
 8005600:	8813      	ldrh	r3, [r2, #0]
 8005602:	2b12      	cmp	r3, #18
 8005604:	f67f ae82 	bls.w	800530c <_ZN15Screen1ViewBaseC1Ev+0x290>
        return texts->getText(typedTextId);
 8005608:	4b23      	ldr	r3, [pc, #140]	; (8005698 <_ZN15Screen1ViewBaseC1Ev+0x61c>)
 800560a:	2112      	movs	r1, #18
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	f000 fdad 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 8005612:	4a22      	ldr	r2, [pc, #136]	; (800569c <_ZN15Screen1ViewBaseC1Ev+0x620>)
 8005614:	4603      	mov	r3, r0
 8005616:	2104      	movs	r1, #4
 8005618:	4630      	mov	r0, r6
 800561a:	f011 fda1 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea3.resizeToCurrentText();
 800561e:	ee1a 0a10 	vmov	r0, s20
 8005622:	f8c4 65a0 	str.w	r6, [r4, #1440]	; 0x5a0
 8005626:	f00b fdf9 	bl	801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 800562a:	491e      	ldr	r1, [pc, #120]	; (80056a4 <_ZN15Screen1ViewBaseC1Ev+0x628>)
 800562c:	2313      	movs	r3, #19
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8759));
 800562e:	ee1a 0a10 	vmov	r0, s20
 8005632:	9110      	str	r1, [sp, #64]	; 0x40
 8005634:	a910      	add	r1, sp, #64	; 0x40
 8005636:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 800563a:	f00b fe0f 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea4.setXY(591, 344);
 800563e:	f240 214f 	movw	r1, #591	; 0x24f
 8005642:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005646:	9803      	ldr	r0, [sp, #12]
 8005648:	f7ff fc82 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800564c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f8c4 15d4 	str.w	r1, [r4, #1492]	; 0x5d4
        boundingArea = calculateBoundingArea();
 8005656:	f04f 31ff 	mov.w	r1, #4294967295
        linespace = space;
 800565a:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
        boundingArea = calculateBoundingArea();
 800565e:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 8005662:	f8c4 15e4 	str.w	r1, [r4, #1508]	; 0x5e4
 8005666:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 800566a:	2b00      	cmp	r3, #0
 800566c:	f43f ae44 	beq.w	80052f8 <_ZN15Screen1ViewBaseC1Ev+0x27c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005670:	4a0b      	ldr	r2, [pc, #44]	; (80056a0 <_ZN15Screen1ViewBaseC1Ev+0x624>)
 8005672:	8813      	ldrh	r3, [r2, #0]
 8005674:	2b10      	cmp	r3, #16
 8005676:	f67f ae49 	bls.w	800530c <_ZN15Screen1ViewBaseC1Ev+0x290>
        return texts->getText(typedTextId);
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <_ZN15Screen1ViewBaseC1Ev+0x61c>)
 800567c:	2110      	movs	r1, #16
        : typedTextId(id)
 800567e:	4f09      	ldr	r7, [pc, #36]	; (80056a4 <_ZN15Screen1ViewBaseC1Ev+0x628>)
        linespace = space;
 8005680:	2600      	movs	r6, #0
        return texts->getText(typedTextId);
 8005682:	6818      	ldr	r0, [r3, #0]
        color = newColor;
 8005684:	f04f 487f 	mov.w	r8, #4278190080	; 0xff000000
 8005688:	f000 fd70 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 800568c:	f8c4 05ec 	str.w	r0, [r4, #1516]	; 0x5ec
    textArea4.resizeToCurrentText();
 8005690:	9803      	ldr	r0, [sp, #12]
    Unicode::snprintf(textArea5Buffer, TEXTAREA5_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6Q5U).getText());
 8005692:	f604 2586 	addw	r5, r4, #2694	; 0xa86
 8005696:	e009      	b.n	80056ac <_ZN15Screen1ViewBaseC1Ev+0x630>
 8005698:	20027efc 	.word	0x20027efc
 800569c:	080288f3 	.word	0x080288f3
 80056a0:	20027ef4 	.word	0x20027ef4
 80056a4:	080281b4 	.word	0x080281b4
 80056a8:	ff21c43a 	.word	0xff21c43a
    textArea4.resizeToCurrentText();
 80056ac:	f00b fdb6 	bl	801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 80056b0:	2311      	movs	r3, #17
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E703));
 80056b2:	a910      	add	r1, sp, #64	; 0x40
 80056b4:	9803      	ldr	r0, [sp, #12]
 80056b6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80056ba:	9710      	str	r7, [sp, #64]	; 0x40
 80056bc:	f00b fdce 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea5.setXY(591, 384);
 80056c0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80056c4:	f240 214f 	movw	r1, #591	; 0x24f
 80056c8:	9804      	ldr	r0, [sp, #16]
 80056ca:	f7ff fc41 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
        color = newColor;
 80056d2:	f8c4 8620 	str.w	r8, [r4, #1568]	; 0x620
        boundingArea = calculateBoundingArea();
 80056d6:	f8c4 3630 	str.w	r3, [r4, #1584]	; 0x630
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80056da:	4bdc      	ldr	r3, [pc, #880]	; (8005a4c <_ZN15Screen1ViewBaseC1Ev+0x9d0>)
        linespace = space;
 80056dc:	f8a4 6624 	strh.w	r6, [r4, #1572]	; 0x624
 80056e0:	681b      	ldr	r3, [r3, #0]
        boundingArea = calculateBoundingArea();
 80056e2:	f8c4 662c 	str.w	r6, [r4, #1580]	; 0x62c
 80056e6:	f8c4 6634 	str.w	r6, [r4, #1588]	; 0x634
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f43f ae04 	beq.w	80052f8 <_ZN15Screen1ViewBaseC1Ev+0x27c>
        return typedTextId < numberOfTypedTexts;
 80056f0:	4bd7      	ldr	r3, [pc, #860]	; (8005a50 <_ZN15Screen1ViewBaseC1Ev+0x9d4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	2b0e      	cmp	r3, #14
 80056f6:	f67f ae09 	bls.w	800530c <_ZN15Screen1ViewBaseC1Ev+0x290>
        return texts->getText(typedTextId);
 80056fa:	4bd6      	ldr	r3, [pc, #856]	; (8005a54 <_ZN15Screen1ViewBaseC1Ev+0x9d8>)
 80056fc:	210e      	movs	r1, #14
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	f000 fd34 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textArea5Buffer, TEXTAREA5_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6Q5U).getText());
 8005704:	4ad4      	ldr	r2, [pc, #848]	; (8005a58 <_ZN15Screen1ViewBaseC1Ev+0x9dc>)
 8005706:	4603      	mov	r3, r0
 8005708:	2105      	movs	r1, #5
 800570a:	4628      	mov	r0, r5
 800570c:	f011 fd28 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea5.resizeToCurrentText();
 8005710:	9804      	ldr	r0, [sp, #16]
 8005712:	f8c4 5638 	str.w	r5, [r4, #1592]	; 0x638
 8005716:	ad0c      	add	r5, sp, #48	; 0x30
 8005718:	f00b fd80 	bl	801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 800571c:	230f      	movs	r3, #15
    textArea5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IBE4));
 800571e:	a910      	add	r1, sp, #64	; 0x40
 8005720:	9804      	ldr	r0, [sp, #16]
 8005722:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005726:	9710      	str	r7, [sp, #64]	; 0x40
 8005728:	f00b fd98 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea6.setXY(63, 426);
 800572c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005730:	213f      	movs	r1, #63	; 0x3f
 8005732:	ee1a 0a90 	vmov	r0, s21
 8005736:	f7ff fc0b 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 800573a:	ee1a 1a90 	vmov	r1, s21
 800573e:	4628      	mov	r0, r5
        color = newColor;
 8005740:	f8c4 866c 	str.w	r8, [r4, #1644]	; 0x66c
        linespace = space;
 8005744:	f8a4 6670 	strh.w	r6, [r4, #1648]	; 0x670
        boundingArea = calculateBoundingArea();
 8005748:	f00b fb06 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800574c:	ee1a 3a90 	vmov	r3, s21
 8005750:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005754:	333c      	adds	r3, #60	; 0x3c
 8005756:	9710      	str	r7, [sp, #64]	; 0x40
 8005758:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800575c:	230d      	movs	r3, #13
    textArea6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E9UK));
 800575e:	a910      	add	r1, sp, #64	; 0x40
 8005760:	ee1a 0a90 	vmov	r0, s21
 8005764:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005768:	f00b fd78 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea8.setXY(66, 34);
 800576c:	2222      	movs	r2, #34	; 0x22
 800576e:	2142      	movs	r1, #66	; 0x42
 8005770:	ee1b 0a10 	vmov	r0, s22
 8005774:	f7ff fbec 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 8005778:	ee1b 1a10 	vmov	r1, s22
 800577c:	4628      	mov	r0, r5
        color = newColor;
 800577e:	f8c4 86b4 	str.w	r8, [r4, #1716]	; 0x6b4
        linespace = space;
 8005782:	f8a4 66b8 	strh.w	r6, [r4, #1720]	; 0x6b8
        boundingArea = calculateBoundingArea();
 8005786:	f00b fae7 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800578a:	ee1b 3a10 	vmov	r3, s22
 800578e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005792:	333c      	adds	r3, #60	; 0x3c
 8005794:	9710      	str	r7, [sp, #64]	; 0x40
 8005796:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800579a:	230c      	movs	r3, #12
    textArea8.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2LVJ));
 800579c:	a910      	add	r1, sp, #64	; 0x40
 800579e:	ee1b 0a10 	vmov	r0, s22
 80057a2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80057a6:	f00b fd59 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea9.setXY(63, 164);
 80057aa:	22a4      	movs	r2, #164	; 0xa4
 80057ac:	213f      	movs	r1, #63	; 0x3f
 80057ae:	ee1b 0a90 	vmov	r0, s23
 80057b2:	f7ff fbcd 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 80057b6:	ee1b 1a90 	vmov	r1, s23
 80057ba:	4628      	mov	r0, r5
        color = newColor;
 80057bc:	f8c4 86fc 	str.w	r8, [r4, #1788]	; 0x6fc
        linespace = space;
 80057c0:	f8a4 6700 	strh.w	r6, [r4, #1792]	; 0x700
        boundingArea = calculateBoundingArea();
 80057c4:	f00b fac8 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80057c8:	ee1b 3a90 	vmov	r3, s23
 80057cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057d0:	333c      	adds	r3, #60	; 0x3c
 80057d2:	9710      	str	r7, [sp, #64]	; 0x40
 80057d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80057d8:	230b      	movs	r3, #11
    textArea9.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KJY0));
 80057da:	a910      	add	r1, sp, #64	; 0x40
 80057dc:	ee1b 0a90 	vmov	r0, s23
 80057e0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80057e4:	f00b fd3a 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea10.setXY(63, 297);
 80057e8:	f240 1229 	movw	r2, #297	; 0x129
 80057ec:	213f      	movs	r1, #63	; 0x3f
 80057ee:	ee1c 0a10 	vmov	r0, s24
 80057f2:	f7ff fbad 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 80057f6:	ee1c 1a10 	vmov	r1, s24
 80057fa:	4628      	mov	r0, r5
        color = newColor;
 80057fc:	f8c4 8744 	str.w	r8, [r4, #1860]	; 0x744
        linespace = space;
 8005800:	f8a4 6748 	strh.w	r6, [r4, #1864]	; 0x748
        boundingArea = calculateBoundingArea();
 8005804:	f00b faa8 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005808:	ee1c 3a10 	vmov	r3, s24
 800580c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005810:	333c      	adds	r3, #60	; 0x3c
 8005812:	9710      	str	r7, [sp, #64]	; 0x40
 8005814:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005818:	230a      	movs	r3, #10
    textArea10.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EJ9Y));
 800581a:	a910      	add	r1, sp, #64	; 0x40
 800581c:	ee1c 0a10 	vmov	r0, s24
 8005820:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005824:	f00b fd1a 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    line1_2.setPosition(27, 300, 40, 47);
 8005828:	232f      	movs	r3, #47	; 0x2f
 800582a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800582e:	211b      	movs	r1, #27
 8005830:	ee18 0a10 	vmov	r0, s16
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	2328      	movs	r3, #40	; 0x28
 8005838:	f7ff fb97 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 800583c:	4b87      	ldr	r3, [pc, #540]	; (8005a5c <_ZN15Screen1ViewBaseC1Ev+0x9e0>)
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setStart(T x, T y)
    {
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800583e:	2260      	movs	r2, #96	; 0x60
 8005840:	ee18 0a10 	vmov	r0, s16
 8005844:	f8c4 37d8 	str.w	r3, [r4, #2008]	; 0x7d8
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 8005848:	f24e 63db 	movw	r3, #59099	; 0xe6db
 800584c:	4611      	mov	r1, r2
 800584e:	f8a4 37dc 	strh.w	r3, [r4, #2012]	; 0x7dc
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
    {
        canvasPainter = &painter;
 8005852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005854:	f8c4 3784 	str.w	r3, [r4, #1924]	; 0x784
 8005858:	f00a fe8e 	bl	8010578 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setEnd(T x, T y)
    {
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800585c:	2260      	movs	r2, #96	; 0x60
 800585e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005862:	ee18 0a10 	vmov	r0, s16
 8005866:	f00a fe92 	bl	801058e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
    {
        if (lineWidthQ5 == widthQ5)
 800586a:	f8d4 3798 	ldr.w	r3, [r4, #1944]	; 0x798
 800586e:	2b20      	cmp	r3, #32
 8005870:	d006      	beq.n	8005880 <_ZN15Screen1ViewBaseC1Ev+0x804>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 8005872:	2320      	movs	r3, #32

        updateCachedShape();
 8005874:	ee18 0a10 	vmov	r0, s16
        lineWidthQ5 = widthQ5;
 8005878:	f8c4 3798 	str.w	r3, [r4, #1944]	; 0x798
        updateCachedShape();
 800587c:	f00a fd86 	bl	801038c <_ZN8touchgfx4Line17updateCachedShapeEv>
    line1_2.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8005880:	2100      	movs	r1, #0
 8005882:	ee18 0a10 	vmov	r0, s16
 8005886:	f00a fe8d 	bl	80105a4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line1_2_1.setPosition(27, 167, 42, 51);
 800588a:	2333      	movs	r3, #51	; 0x33
 800588c:	22a7      	movs	r2, #167	; 0xa7
 800588e:	211b      	movs	r1, #27
 8005890:	ee18 0a90 	vmov	r0, s17
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	232a      	movs	r3, #42	; 0x2a
 8005898:	f7ff fb67 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 800589c:	4b6f      	ldr	r3, [pc, #444]	; (8005a5c <_ZN15Screen1ViewBaseC1Ev+0x9e0>)
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800589e:	2260      	movs	r2, #96	; 0x60
 80058a0:	ee18 0a90 	vmov	r0, s17
 80058a4:	f8c4 385c 	str.w	r3, [r4, #2140]	; 0x85c
 80058a8:	f24e 63db 	movw	r3, #59099	; 0xe6db
 80058ac:	4611      	mov	r1, r2
 80058ae:	f8a4 3860 	strh.w	r3, [r4, #2144]	; 0x860
 80058b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b4:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
 80058b8:	f00a fe5e 	bl	8010578 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80058bc:	2260      	movs	r2, #96	; 0x60
 80058be:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80058c2:	ee18 0a90 	vmov	r0, s17
 80058c6:	f00a fe62 	bl	801058e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
        if (lineWidthQ5 == widthQ5)
 80058ca:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d006      	beq.n	80058e0 <_ZN15Screen1ViewBaseC1Ev+0x864>
        lineWidthQ5 = widthQ5;
 80058d2:	2320      	movs	r3, #32
        updateCachedShape();
 80058d4:	ee18 0a90 	vmov	r0, s17
        lineWidthQ5 = widthQ5;
 80058d8:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
        updateCachedShape();
 80058dc:	f00a fd56 	bl	801038c <_ZN8touchgfx4Line17updateCachedShapeEv>
    line1_2_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80058e0:	2100      	movs	r1, #0
 80058e2:	ee18 0a90 	vmov	r0, s17
 80058e6:	f00a fe5d 	bl	80105a4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    textArea13.setXY(0, 0);
 80058ea:	2200      	movs	r2, #0
 80058ec:	9805      	ldr	r0, [sp, #20]
        linespace = space;
 80058ee:	2500      	movs	r5, #0
 80058f0:	4611      	mov	r1, r2
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80058f2:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8005a4c <_ZN15Screen1ViewBaseC1Ev+0x9d0>
 80058f6:	f7ff fb2b 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295
        color = newColor;
 80058fe:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
        linespace = space;
 8005902:	f8a4 5898 	strh.w	r5, [r4, #2200]	; 0x898
        boundingArea = calculateBoundingArea();
 8005906:	f8c4 38a4 	str.w	r3, [r4, #2212]	; 0x8a4
 800590a:	f8d8 3000 	ldr.w	r3, [r8]
        color = newColor;
 800590e:	f8c4 7894 	str.w	r7, [r4, #2196]	; 0x894
        boundingArea = calculateBoundingArea();
 8005912:	f8c4 58a0 	str.w	r5, [r4, #2208]	; 0x8a0
 8005916:	f8c4 58a8 	str.w	r5, [r4, #2216]	; 0x8a8
 800591a:	2b00      	cmp	r3, #0
 800591c:	f43f acec 	beq.w	80052f8 <_ZN15Screen1ViewBaseC1Ev+0x27c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005920:	4b4b      	ldr	r3, [pc, #300]	; (8005a50 <_ZN15Screen1ViewBaseC1Ev+0x9d4>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	2b08      	cmp	r3, #8
 8005926:	f67f acf1 	bls.w	800530c <_ZN15Screen1ViewBaseC1Ev+0x290>
        return texts->getText(typedTextId);
 800592a:	4a4a      	ldr	r2, [pc, #296]	; (8005a54 <_ZN15Screen1ViewBaseC1Ev+0x9d8>)
 800592c:	2108      	movs	r1, #8
    touchgfx::Unicode::snprintf(textArea13Buffer2, TEXTAREA13BUFFER2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_K3G3).getText());
 800592e:	f504 6629 	add.w	r6, r4, #2704	; 0xa90
 8005932:	6810      	ldr	r0, [r2, #0]
 8005934:	f000 fc1a 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005938:	f8d8 3000 	ldr.w	r3, [r8]
        wc1 = value;
 800593c:	f8c4 08ac 	str.w	r0, [r4, #2220]	; 0x8ac
 8005940:	2b00      	cmp	r3, #0
 8005942:	f43f acd9 	beq.w	80052f8 <_ZN15Screen1ViewBaseC1Ev+0x27c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005946:	4b42      	ldr	r3, [pc, #264]	; (8005a50 <_ZN15Screen1ViewBaseC1Ev+0x9d4>)
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	2b07      	cmp	r3, #7
 800594c:	f67f acde 	bls.w	800530c <_ZN15Screen1ViewBaseC1Ev+0x290>
        return texts->getText(typedTextId);
 8005950:	4a40      	ldr	r2, [pc, #256]	; (8005a54 <_ZN15Screen1ViewBaseC1Ev+0x9d8>)
 8005952:	2107      	movs	r1, #7
 8005954:	6810      	ldr	r0, [r2, #0]
 8005956:	f000 fc09 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 800595a:	4a3f      	ldr	r2, [pc, #252]	; (8005a58 <_ZN15Screen1ViewBaseC1Ev+0x9dc>)
 800595c:	4603      	mov	r3, r0
 800595e:	2103      	movs	r1, #3
 8005960:	4630      	mov	r0, r6
 8005962:	f011 fbfd 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea13.resizeToCurrentText();
 8005966:	9805      	ldr	r0, [sp, #20]
        wc2 = value;
 8005968:	f8c4 68b0 	str.w	r6, [r4, #2224]	; 0x8b0
 800596c:	f00b fc56 	bl	801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8005970:	4e3b      	ldr	r6, [pc, #236]	; (8005a60 <_ZN15Screen1ViewBaseC1Ev+0x9e4>)
 8005972:	2309      	movs	r3, #9
    textArea13.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TWBV));
 8005974:	a910      	add	r1, sp, #64	; 0x40
 8005976:	9805      	ldr	r0, [sp, #20]
 8005978:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 800597c:	9610      	str	r6, [sp, #64]	; 0x40
 800597e:	f00b fc6d 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea14.setXY(68, 0);
 8005982:	2144      	movs	r1, #68	; 0x44
 8005984:	462a      	mov	r2, r5
 8005986:	9806      	ldr	r0, [sp, #24]
 8005988:	f7ff fae2 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 800598c:	f04f 31ff 	mov.w	r1, #4294967295
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005990:	f8d8 3000 	ldr.w	r3, [r8]
 8005994:	f8c4 18f4 	str.w	r1, [r4, #2292]	; 0x8f4
    Unicode::snprintf(textArea14Buffer, TEXTAREA14_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OZIF).getText());
 8005998:	f604 2196 	addw	r1, r4, #2710	; 0xa96
        color = newColor;
 800599c:	f8c4 78e4 	str.w	r7, [r4, #2276]	; 0x8e4
        linespace = space;
 80059a0:	f8a4 58e8 	strh.w	r5, [r4, #2280]	; 0x8e8
        boundingArea = calculateBoundingArea();
 80059a4:	f8c4 58f0 	str.w	r5, [r4, #2288]	; 0x8f0
 80059a8:	f8c4 58f8 	str.w	r5, [r4, #2296]	; 0x8f8
 80059ac:	9109      	str	r1, [sp, #36]	; 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f43f aca2 	beq.w	80052f8 <_ZN15Screen1ViewBaseC1Ev+0x27c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80059b4:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <_ZN15Screen1ViewBaseC1Ev+0x9d4>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	2b05      	cmp	r3, #5
 80059ba:	f67f aca7 	bls.w	800530c <_ZN15Screen1ViewBaseC1Ev+0x290>
        return texts->getText(typedTextId);
 80059be:	4a25      	ldr	r2, [pc, #148]	; (8005a54 <_ZN15Screen1ViewBaseC1Ev+0x9d8>)
 80059c0:	2105      	movs	r1, #5
 80059c2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80059c6:	6810      	ldr	r0, [r2, #0]
 80059c8:	f000 fbd0 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 80059cc:	4a22      	ldr	r2, [pc, #136]	; (8005a58 <_ZN15Screen1ViewBaseC1Ev+0x9dc>)
 80059ce:	4603      	mov	r3, r0
 80059d0:	2103      	movs	r1, #3
 80059d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059d4:	f011 fbc4 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 80059d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    textArea14.resizeToCurrentText();
 80059da:	9806      	ldr	r0, [sp, #24]
 80059dc:	f8c4 38fc 	str.w	r3, [r4, #2300]	; 0x8fc
 80059e0:	f00b fc1c 	bl	801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 80059e4:	2306      	movs	r3, #6
    textArea14.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O2O4));
 80059e6:	a910      	add	r1, sp, #64	; 0x40
 80059e8:	9806      	ldr	r0, [sp, #24]
 80059ea:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80059ee:	9610      	str	r6, [sp, #64]	; 0x40
 80059f0:	f00b fc34 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea15.setXY(304, 309);
 80059f4:	f240 1235 	movw	r2, #309	; 0x135
 80059f8:	ee1c 0a90 	vmov	r0, s25
 80059fc:	f44f 7198 	mov.w	r1, #304	; 0x130
 8005a00:	f7ff faa6 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 8005a04:	ee1c 1a90 	vmov	r1, s25
 8005a08:	4640      	mov	r0, r8
        linespace = space;
 8005a0a:	f8a4 5934 	strh.w	r5, [r4, #2356]	; 0x934
        color = newColor;
 8005a0e:	f8c4 7930 	str.w	r7, [r4, #2352]	; 0x930
        boundingArea = calculateBoundingArea();
 8005a12:	f00b f9a1 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005a16:	ee1c 3a90 	vmov	r3, s25
 8005a1a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005a1e:	333c      	adds	r3, #60	; 0x3c
 8005a20:	9610      	str	r6, [sp, #64]	; 0x40
 8005a22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a26:	2304      	movs	r3, #4
    textArea15.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AYBT));
 8005a28:	a910      	add	r1, sp, #64	; 0x40
 8005a2a:	ee1c 0a90 	vmov	r0, s25
 8005a2e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005a32:	f00b fc13 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea16.setXY(471, 307);
 8005a36:	f240 1233 	movw	r2, #307	; 0x133
 8005a3a:	ee1d 0a10 	vmov	r0, s26
 8005a3e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8005a42:	f7ff fa85 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 8005a46:	ee1d 1a10 	vmov	r1, s26
 8005a4a:	e00b      	b.n	8005a64 <_ZN15Screen1ViewBaseC1Ev+0x9e8>
 8005a4c:	20027ef0 	.word	0x20027ef0
 8005a50:	20027ef4 	.word	0x20027ef4
 8005a54:	20027efc 	.word	0x20027efc
 8005a58:	080288f3 	.word	0x080288f3
 8005a5c:	ffe0dada 	.word	0xffe0dada
 8005a60:	080281b4 	.word	0x080281b4
 8005a64:	4640      	mov	r0, r8
        linespace = space;
 8005a66:	f8a4 597c 	strh.w	r5, [r4, #2428]	; 0x97c
        color = newColor;
 8005a6a:	f8c4 7978 	str.w	r7, [r4, #2424]	; 0x978
        boundingArea = calculateBoundingArea();
 8005a6e:	f00b f973 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005a72:	ee1d 3a10 	vmov	r3, s26
 8005a76:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005a7a:	333c      	adds	r3, #60	; 0x3c
 8005a7c:	9610      	str	r6, [sp, #64]	; 0x40
 8005a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a82:	2303      	movs	r3, #3
    textArea16.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AUJ0));
 8005a84:	a910      	add	r1, sp, #64	; 0x40
 8005a86:	ee1d 0a10 	vmov	r0, s26
 8005a8a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005a8e:	f00b fbe5 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea17.setXY(391, 218);
 8005a92:	22da      	movs	r2, #218	; 0xda
 8005a94:	ee1d 0a90 	vmov	r0, s27
 8005a98:	f240 1187 	movw	r1, #391	; 0x187
 8005a9c:	f7ff fa58 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 8005aa0:	ee1d 1a90 	vmov	r1, s27
 8005aa4:	4640      	mov	r0, r8
        linespace = space;
 8005aa6:	f8a4 59c4 	strh.w	r5, [r4, #2500]	; 0x9c4
        color = newColor;
 8005aaa:	f8c4 79c0 	str.w	r7, [r4, #2496]	; 0x9c0
        boundingArea = calculateBoundingArea();
 8005aae:	f00b f953 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005ab2:	ee1d 3a90 	vmov	r3, s27
 8005ab6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005aba:	333c      	adds	r3, #60	; 0x3c
 8005abc:	9610      	str	r6, [sp, #64]	; 0x40
 8005abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ac2:	2302      	movs	r3, #2
    textArea17.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T1EI));
 8005ac4:	a910      	add	r1, sp, #64	; 0x40
 8005ac6:	ee1d 0a90 	vmov	r0, s27
 8005aca:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005ace:	f00b fbc5 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea18.setXY(328, 247);
 8005ad2:	22f7      	movs	r2, #247	; 0xf7
 8005ad4:	ee1e 0a10 	vmov	r0, s28
 8005ad8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005adc:	f7ff fa38 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 8005ae0:	ee1e 1a10 	vmov	r1, s28
 8005ae4:	4640      	mov	r0, r8
        linespace = space;
 8005ae6:	f8a4 5a0c 	strh.w	r5, [r4, #2572]	; 0xa0c
        color = newColor;
 8005aea:	f8c4 7a08 	str.w	r7, [r4, #2568]	; 0xa08
        boundingArea = calculateBoundingArea();
 8005aee:	f00b f933 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005af2:	ee1e 3a10 	vmov	r3, s28
 8005af6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005afa:	333c      	adds	r3, #60	; 0x3c
 8005afc:	9610      	str	r6, [sp, #64]	; 0x40
 8005afe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005b02:	2301      	movs	r3, #1
    textArea18.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2OBD));
 8005b04:	a910      	add	r1, sp, #64	; 0x40
 8005b06:	ee1e 0a10 	vmov	r0, s28
 8005b0a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8005b0e:	f00b fba5 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textArea19.setXY(452, 247);
 8005b12:	22f7      	movs	r2, #247	; 0xf7
 8005b14:	ee1e 0a90 	vmov	r0, s29
 8005b18:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005b1c:	f7ff fa18 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 8005b20:	ee1e 1a90 	vmov	r1, s29
 8005b24:	4640      	mov	r0, r8
        linespace = space;
 8005b26:	f8a4 5a54 	strh.w	r5, [r4, #2644]	; 0xa54
        color = newColor;
 8005b2a:	f8c4 7a50 	str.w	r7, [r4, #2640]	; 0xa50
        boundingArea = calculateBoundingArea();
 8005b2e:	f00b f913 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005b32:	ee1e 3a90 	vmov	r3, s29
 8005b36:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005b3a:	333c      	adds	r3, #60	; 0x3c
 8005b3c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8005b40:	1d25      	adds	r5, r4, #4
 8005b42:	9610      	str	r6, [sp, #64]	; 0x40
 8005b44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea19.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RVJY));
 8005b48:	a910      	add	r1, sp, #64	; 0x40
 8005b4a:	ee1e 0a90 	vmov	r0, s29
 8005b4e:	f00b fb85 	bl	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005b52:	ee1f 1a10 	vmov	r1, s30
 8005b56:	4628      	mov	r0, r5
 8005b58:	f009 f820 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b5c:	9907      	ldr	r1, [sp, #28]
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f009 f81c 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b64:	9908      	ldr	r1, [sp, #32]
 8005b66:	4628      	mov	r0, r5
 8005b68:	f009 f818 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b6c:	ee19 1a10 	vmov	r1, s18
 8005b70:	4628      	mov	r0, r5
 8005b72:	f009 f813 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b76:	ee19 1a90 	vmov	r1, s19
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f009 f80e 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b80:	ee1f 1a90 	vmov	r1, s31
 8005b84:	4628      	mov	r0, r5
 8005b86:	f009 f809 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b8a:	9902      	ldr	r1, [sp, #8]
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f009 f805 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b92:	4649      	mov	r1, r9
 8005b94:	4628      	mov	r0, r5
 8005b96:	f009 f801 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005b9a:	4659      	mov	r1, fp
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f008 fffd 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005ba2:	4651      	mov	r1, sl
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f008 fff9 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005baa:	ee1a 1a10 	vmov	r1, s20
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f008 fff4 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bb4:	9903      	ldr	r1, [sp, #12]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f008 fff0 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bbc:	9904      	ldr	r1, [sp, #16]
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f008 ffec 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bc4:	ee1a 1a90 	vmov	r1, s21
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f008 ffe7 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bce:	ee1b 1a10 	vmov	r1, s22
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f008 ffe2 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bd8:	ee1b 1a90 	vmov	r1, s23
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f008 ffdd 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005be2:	ee1c 1a10 	vmov	r1, s24
 8005be6:	4628      	mov	r0, r5
 8005be8:	f008 ffd8 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bec:	ee18 1a10 	vmov	r1, s16
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f008 ffd3 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005bf6:	ee18 1a90 	vmov	r1, s17
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f008 ffce 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005c00:	9905      	ldr	r1, [sp, #20]
 8005c02:	4628      	mov	r0, r5
 8005c04:	f008 ffca 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005c08:	9906      	ldr	r1, [sp, #24]
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f008 ffc6 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005c10:	ee1c 1a90 	vmov	r1, s25
 8005c14:	4628      	mov	r0, r5
 8005c16:	f008 ffc1 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005c1a:	ee1d 1a10 	vmov	r1, s26
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f008 ffbc 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005c24:	ee1d 1a90 	vmov	r1, s27
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f008 ffb7 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005c2e:	ee1e 1a10 	vmov	r1, s28
 8005c32:	4628      	mov	r0, r5
 8005c34:	f008 ffb2 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005c38:	4628      	mov	r0, r5
 8005c3a:	ee1e 1a90 	vmov	r1, s29
 8005c3e:	f008 ffad 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005c42:	4620      	mov	r0, r4
 8005c44:	b013      	add	sp, #76	; 0x4c
 8005c46:	ecbd 8b10 	vpop	{d8-d15}
 8005c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4e:	bf00      	nop

08005c50 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8005c50:	4770      	bx	lr

08005c52 <_ZN15Screen2ViewBase11setupScreenEv>:
{

    //Interaction1
    //When screen transition begins delay
    //Delay for 3000 ms (180 Ticks)
    interaction1Counter = INTERACTION1_DURATION;
 8005c52:	23b4      	movs	r3, #180	; 0xb4
 8005c54:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4

}
 8005c58:	4770      	bx	lr

08005c5a <_ZN15Screen2ViewBaseD0Ev>:
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	21c8      	movs	r1, #200	; 0xc8
 8005c60:	f01f f885 	bl	8024d6e <_ZdlPvj>
 8005c64:	4620      	mov	r0, r4
 8005c66:	bd10      	pop	{r4, pc}

08005c68 <_ZN15Screen2ViewBase15handleTickEventEv>:

//Handles tick based events
void Screen2ViewBase::handleTickEvent()
{
 8005c68:	b508      	push	{r3, lr}
    if(interaction1Counter > 0)
 8005c6a:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
 8005c6e:	b153      	cbz	r3, 8005c86 <_ZN15Screen2ViewBase15handleTickEventEv+0x1e>
    {
        interaction1Counter--;
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
        if(interaction1Counter == 0)
 8005c78:	b92b      	cbnz	r3, 8005c86 <_ZN15Screen2ViewBase15handleTickEventEv+0x1e>
    virtual void setupScreen();
    virtual void handleTickEvent();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005c7a:	f00e fa57 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
            //Go to Screen1 with no screen transition
            application().gotoScreen1ScreenNoTransition();
        }
    }

}
 8005c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            application().gotoScreen1ScreenNoTransition();
 8005c82:	f7ff b81f 	b.w	8004cc4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
}
 8005c86:	bd08      	pop	{r3, pc}

08005c88 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8005c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	b087      	sub	sp, #28
 8005c90:	2500      	movs	r5, #0
 8005c92:	f00f fdad 	bl	80157f0 <_ZN8touchgfx6ScreenC1Ev>
    interaction1Counter(0)
 8005c96:	4627      	mov	r7, r4
 8005c98:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <_ZN15Screen2ViewBaseC1Ev+0xc0>)
 8005c9a:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8005c9e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005ca0:	f847 3b40 	str.w	r3, [r7], #64
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8005caa:	f7ff f971 	bl	8004f90 <_ZN8touchgfx3BoxC1Ev>
 8005cae:	4640      	mov	r0, r8
    __background.setPosition(0, 0, 800, 480);
 8005cb0:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
    interaction1Counter(0)
 8005cb4:	f7ff f96c 	bl	8004f90 <_ZN8touchgfx3BoxC1Ev>
 8005cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cbc:	a905      	add	r1, sp, #20
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cc4:	f00a fd74 	bl	80107b0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 800, 480);
 8005cc8:	462a      	mov	r2, r5
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f44f 7348 	mov.w	r3, #800	; 0x320
    interaction1Counter(0)
 8005cd2:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
    __background.setPosition(0, 0, 800, 480);
 8005cd6:	f8cd 9000 	str.w	r9, [sp]
 8005cda:	f7ff f946 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 8005cde:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 800, 480);
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	66a3      	str	r3, [r4, #104]	; 0x68
 8005cea:	f8cd 9000 	str.w	r9, [sp]
 8005cee:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005cf2:	f7ff f93a 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_TUBARAO_BRANCO_LOGO_ID));
 8005cfa:	a905      	add	r1, sp, #20
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8005d02:	230d      	movs	r3, #13
 8005d04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d08:	f00b fdfe 	bl	8011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 800, 480);
 8005d0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005d10:	462a      	mov	r2, r5
 8005d12:	4629      	mov	r1, r5
 8005d14:	4630      	mov	r0, r6
 8005d16:	f8cd 9000 	str.w	r9, [sp]
 8005d1a:	f7ff f926 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8005d1e:	4629      	mov	r1, r5
 8005d20:	4630      	mov	r0, r6
 8005d22:	f00a fd0c 	bl	801073e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8005d26:	1d20      	adds	r0, r4, #4
 8005d28:	4639      	mov	r1, r7
 8005d2a:	9003      	str	r0, [sp, #12]
 8005d2c:	f008 ff36 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005d30:	4641      	mov	r1, r8
 8005d32:	9803      	ldr	r0, [sp, #12]
 8005d34:	f008 ff32 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005d38:	9803      	ldr	r0, [sp, #12]
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	f008 ff2e 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005d40:	4620      	mov	r0, r4
 8005d42:	b007      	add	sp, #28
 8005d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d48:	08028a74 	.word	0x08028a74

08005d4c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 4, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005d4c:	4770      	bx	lr
	...

08005d50 <_Z23getFont_verdana_10_4bppv>:
{
 8005d50:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 4, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005d52:	4d15      	ldr	r5, [pc, #84]	; (8005da8 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8005d54:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 4, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005d56:	782c      	ldrb	r4, [r5, #0]
 8005d58:	f3bf 8f5b 	dmb	ish
 8005d5c:	f014 0401 	ands.w	r4, r4, #1
 8005d60:	d11e      	bne.n	8005da0 <_Z23getFont_verdana_10_4bppv+0x50>
 8005d62:	4628      	mov	r0, r5
 8005d64:	f01f f805 	bl	8024d72 <__cxa_guard_acquire>
 8005d68:	b1d0      	cbz	r0, 8005da0 <_Z23getFont_verdana_10_4bppv+0x50>
 8005d6a:	233f      	movs	r3, #63	; 0x3f
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	490f      	ldr	r1, [pc, #60]	; (8005dac <_Z23getFont_verdana_10_4bppv+0x5c>)
 8005d70:	9307      	str	r3, [sp, #28]
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <_Z23getFont_verdana_10_4bppv+0x60>)
 8005d74:	480f      	ldr	r0, [pc, #60]	; (8005db4 <_Z23getFont_verdana_10_4bppv+0x64>)
 8005d76:	9306      	str	r3, [sp, #24]
 8005d78:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <_Z23getFont_verdana_10_4bppv+0x68>)
 8005d7a:	9408      	str	r4, [sp, #32]
 8005d7c:	9403      	str	r4, [sp, #12]
 8005d7e:	9400      	str	r4, [sp, #0]
 8005d80:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8005d84:	2301      	movs	r3, #1
 8005d86:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005d8a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005d8e:	230a      	movs	r3, #10
 8005d90:	f7fe ffda 	bl	8004d48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005d94:	4809      	ldr	r0, [pc, #36]	; (8005dbc <_Z23getFont_verdana_10_4bppv+0x6c>)
 8005d96:	f01f f9e5 	bl	8025164 <atexit>
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f01e fff5 	bl	8024d8a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8005da0:	4804      	ldr	r0, [pc, #16]	; (8005db4 <_Z23getFont_verdana_10_4bppv+0x64>)
 8005da2:	b00d      	add	sp, #52	; 0x34
 8005da4:	bd30      	pop	{r4, r5, pc}
 8005da6:	bf00      	nop
 8005da8:	20012744 	.word	0x20012744
 8005dac:	9048c3b0 	.word	0x9048c3b0
 8005db0:	0802a688 	.word	0x0802a688
 8005db4:	20012748 	.word	0x20012748
 8005db8:	0802aae4 	.word	0x0802aae4
 8005dbc:	08005d4d 	.word	0x08005d4d

08005dc0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_15_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_15_4bpp();

touchgfx::GeneratedFont& getFont_verdana_15_4bpp()
{
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 6, 15, 0, 4, 1, 0, 0, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0, 0);
 8005dc0:	4770      	bx	lr
	...

08005dc4 <_Z23getFont_verdana_15_4bppv>:
{
 8005dc4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 6, 15, 0, 4, 1, 0, 0, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0, 0);
 8005dc6:	4d15      	ldr	r5, [pc, #84]	; (8005e1c <_Z23getFont_verdana_15_4bppv+0x58>)
{
 8005dc8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 6, 15, 0, 4, 1, 0, 0, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0, 0);
 8005dca:	782c      	ldrb	r4, [r5, #0]
 8005dcc:	f3bf 8f5b 	dmb	ish
 8005dd0:	f014 0401 	ands.w	r4, r4, #1
 8005dd4:	d11f      	bne.n	8005e16 <_Z23getFont_verdana_15_4bppv+0x52>
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f01e ffcb 	bl	8024d72 <__cxa_guard_acquire>
 8005ddc:	b1d8      	cbz	r0, 8005e16 <_Z23getFont_verdana_15_4bppv+0x52>
 8005dde:	233f      	movs	r3, #63	; 0x3f
 8005de0:	2201      	movs	r2, #1
 8005de2:	490f      	ldr	r1, [pc, #60]	; (8005e20 <_Z23getFont_verdana_15_4bppv+0x5c>)
 8005de4:	9307      	str	r3, [sp, #28]
 8005de6:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <_Z23getFont_verdana_15_4bppv+0x60>)
 8005de8:	480f      	ldr	r0, [pc, #60]	; (8005e28 <_Z23getFont_verdana_15_4bppv+0x64>)
 8005dea:	9306      	str	r3, [sp, #24]
 8005dec:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <_Z23getFont_verdana_15_4bppv+0x68>)
 8005dee:	9408      	str	r4, [sp, #32]
 8005df0:	9403      	str	r4, [sp, #12]
 8005df2:	9400      	str	r4, [sp, #0]
 8005df4:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8005df8:	2304      	movs	r3, #4
 8005dfa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005dfe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e02:	230f      	movs	r3, #15
 8005e04:	2206      	movs	r2, #6
 8005e06:	f7fe ff9f 	bl	8004d48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005e0a:	4809      	ldr	r0, [pc, #36]	; (8005e30 <_Z23getFont_verdana_15_4bppv+0x6c>)
 8005e0c:	f01f f9aa 	bl	8025164 <atexit>
 8005e10:	4628      	mov	r0, r5
 8005e12:	f01e ffba 	bl	8024d8a <__cxa_guard_release>
    return verdana_15_4bpp;
}
 8005e16:	4804      	ldr	r0, [pc, #16]	; (8005e28 <_Z23getFont_verdana_15_4bppv+0x64>)
 8005e18:	b00d      	add	sp, #52	; 0x34
 8005e1a:	bd30      	pop	{r4, r5, pc}
 8005e1c:	20012770 	.word	0x20012770
 8005e20:	9048c3e8 	.word	0x9048c3e8
 8005e24:	0802a68c 	.word	0x0802a68c
 8005e28:	20012774 	.word	0x20012774
 8005e2c:	0802aae8 	.word	0x0802aae8
 8005e30:	08005dc1 	.word	0x08005dc1

08005e34 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005e34:	4770      	bx	lr
	...

08005e38 <_Z23getFont_verdana_20_4bppv>:
{
 8005e38:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005e3a:	4d15      	ldr	r5, [pc, #84]	; (8005e90 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8005e3c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005e3e:	782c      	ldrb	r4, [r5, #0]
 8005e40:	f3bf 8f5b 	dmb	ish
 8005e44:	f014 0401 	ands.w	r4, r4, #1
 8005e48:	d11f      	bne.n	8005e8a <_Z23getFont_verdana_20_4bppv+0x52>
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f01e ff91 	bl	8024d72 <__cxa_guard_acquire>
 8005e50:	b1d8      	cbz	r0, 8005e8a <_Z23getFont_verdana_20_4bppv+0x52>
 8005e52:	233f      	movs	r3, #63	; 0x3f
 8005e54:	225f      	movs	r2, #95	; 0x5f
 8005e56:	490f      	ldr	r1, [pc, #60]	; (8005e94 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <_Z23getFont_verdana_20_4bppv+0x60>)
 8005e5c:	480f      	ldr	r0, [pc, #60]	; (8005e9c <_Z23getFont_verdana_20_4bppv+0x64>)
 8005e5e:	9306      	str	r3, [sp, #24]
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <_Z23getFont_verdana_20_4bppv+0x68>)
 8005e62:	9408      	str	r4, [sp, #32]
 8005e64:	9305      	str	r3, [sp, #20]
 8005e66:	2301      	movs	r3, #1
 8005e68:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005e6c:	9302      	str	r3, [sp, #8]
 8005e6e:	2304      	movs	r3, #4
 8005e70:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005e74:	e9cd 3300 	strd	r3, r3, [sp]
 8005e78:	2314      	movs	r3, #20
 8005e7a:	f7fe ff65 	bl	8004d48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005e7e:	4809      	ldr	r0, [pc, #36]	; (8005ea4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8005e80:	f01f f970 	bl	8025164 <atexit>
 8005e84:	4628      	mov	r0, r5
 8005e86:	f01e ff80 	bl	8024d8a <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8005e8a:	4804      	ldr	r0, [pc, #16]	; (8005e9c <_Z23getFont_verdana_20_4bppv+0x64>)
 8005e8c:	b00d      	add	sp, #52	; 0x34
 8005e8e:	bd30      	pop	{r4, r5, pc}
 8005e90:	2001279c 	.word	0x2001279c
 8005e94:	9048c43c 	.word	0x9048c43c
 8005e98:	0802a690 	.word	0x0802a690
 8005e9c:	200127a0 	.word	0x200127a0
 8005ea0:	0802aaec 	.word	0x0802aaec
 8005ea4:	08005e35 	.word	0x08005e35

08005ea8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 95, 30, 6, 4, 1, 1, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8005ea8:	4770      	bx	lr
	...

08005eac <_Z23getFont_verdana_30_4bppv>:
{
 8005eac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 95, 30, 6, 4, 1, 1, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8005eae:	4d16      	ldr	r5, [pc, #88]	; (8005f08 <_Z23getFont_verdana_30_4bppv+0x5c>)
{
 8005eb0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 95, 30, 6, 4, 1, 1, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 8005eb2:	782c      	ldrb	r4, [r5, #0]
 8005eb4:	f3bf 8f5b 	dmb	ish
 8005eb8:	f014 0401 	ands.w	r4, r4, #1
 8005ebc:	d120      	bne.n	8005f00 <_Z23getFont_verdana_30_4bppv+0x54>
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f01e ff57 	bl	8024d72 <__cxa_guard_acquire>
 8005ec4:	b1e0      	cbz	r0, 8005f00 <_Z23getFont_verdana_30_4bppv+0x54>
 8005ec6:	233f      	movs	r3, #63	; 0x3f
 8005ec8:	2204      	movs	r2, #4
 8005eca:	4910      	ldr	r1, [pc, #64]	; (8005f0c <_Z23getFont_verdana_30_4bppv+0x60>)
 8005ecc:	9307      	str	r3, [sp, #28]
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <_Z23getFont_verdana_30_4bppv+0x64>)
 8005ed0:	4810      	ldr	r0, [pc, #64]	; (8005f14 <_Z23getFont_verdana_30_4bppv+0x68>)
 8005ed2:	9306      	str	r3, [sp, #24]
 8005ed4:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <_Z23getFont_verdana_30_4bppv+0x6c>)
 8005ed6:	9408      	str	r4, [sp, #32]
 8005ed8:	9305      	str	r3, [sp, #20]
 8005eda:	2301      	movs	r3, #1
 8005edc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005ee0:	9302      	str	r3, [sp, #8]
 8005ee2:	2306      	movs	r3, #6
 8005ee4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005ee8:	e9cd 3200 	strd	r3, r2, [sp]
 8005eec:	231e      	movs	r3, #30
 8005eee:	225f      	movs	r2, #95	; 0x5f
 8005ef0:	f7fe ff2a 	bl	8004d48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005ef4:	4809      	ldr	r0, [pc, #36]	; (8005f1c <_Z23getFont_verdana_30_4bppv+0x70>)
 8005ef6:	f01f f935 	bl	8025164 <atexit>
 8005efa:	4628      	mov	r0, r5
 8005efc:	f01e ff45 	bl	8024d8a <__cxa_guard_release>
    return verdana_30_4bpp;
}
 8005f00:	4804      	ldr	r0, [pc, #16]	; (8005f14 <_Z23getFont_verdana_30_4bppv+0x68>)
 8005f02:	b00d      	add	sp, #52	; 0x34
 8005f04:	bd30      	pop	{r4, r5, pc}
 8005f06:	bf00      	nop
 8005f08:	200127c8 	.word	0x200127c8
 8005f0c:	9048c970 	.word	0x9048c970
 8005f10:	0802a834 	.word	0x0802a834
 8005f14:	200127cc 	.word	0x200127cc
 8005f18:	0802aaf0 	.word	0x0802aaf0
 8005f1c:	08005ea9 	.word	0x08005ea9

08005f20 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005f20:	4770      	bx	lr
	...

08005f24 <_Z23getFont_verdana_40_4bppv>:
{
 8005f24:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005f26:	4d15      	ldr	r5, [pc, #84]	; (8005f7c <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8005f28:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005f2a:	782c      	ldrb	r4, [r5, #0]
 8005f2c:	f3bf 8f5b 	dmb	ish
 8005f30:	f014 0401 	ands.w	r4, r4, #1
 8005f34:	d11e      	bne.n	8005f74 <_Z23getFont_verdana_40_4bppv+0x50>
 8005f36:	4628      	mov	r0, r5
 8005f38:	f01e ff1b 	bl	8024d72 <__cxa_guard_acquire>
 8005f3c:	b1d0      	cbz	r0, 8005f74 <_Z23getFont_verdana_40_4bppv+0x50>
 8005f3e:	233f      	movs	r3, #63	; 0x3f
 8005f40:	2201      	movs	r2, #1
 8005f42:	490f      	ldr	r1, [pc, #60]	; (8005f80 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8005f44:	9307      	str	r3, [sp, #28]
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <_Z23getFont_verdana_40_4bppv+0x60>)
 8005f48:	480f      	ldr	r0, [pc, #60]	; (8005f88 <_Z23getFont_verdana_40_4bppv+0x64>)
 8005f4a:	9306      	str	r3, [sp, #24]
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <_Z23getFont_verdana_40_4bppv+0x68>)
 8005f4e:	9408      	str	r4, [sp, #32]
 8005f50:	9403      	str	r4, [sp, #12]
 8005f52:	9400      	str	r4, [sp, #0]
 8005f54:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8005f58:	2304      	movs	r3, #4
 8005f5a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005f5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f62:	2328      	movs	r3, #40	; 0x28
 8005f64:	f7fe fef0 	bl	8004d48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005f68:	4809      	ldr	r0, [pc, #36]	; (8005f90 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8005f6a:	f01f f8fb 	bl	8025164 <atexit>
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f01e ff0b 	bl	8024d8a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8005f74:	4804      	ldr	r0, [pc, #16]	; (8005f88 <_Z23getFont_verdana_40_4bppv+0x64>)
 8005f76:	b00d      	add	sp, #52	; 0x34
 8005f78:	bd30      	pop	{r4, r5, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200127f4 	.word	0x200127f4
 8005f80:	9048cea4 	.word	0x9048cea4
 8005f84:	0802aadc 	.word	0x0802aadc
 8005f88:	200127f8 	.word	0x200127f8
 8005f8c:	0802aaf4 	.word	0x0802aaf4
 8005f90:	08005f21 	.word	0x08005f21

08005f94 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_20_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_20_4bpp()
{
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 8005f94:	4770      	bx	lr
	...

08005f98 <_Z24getFont_verdanab_20_4bppv>:
{
 8005f98:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 8005f9a:	4d15      	ldr	r5, [pc, #84]	; (8005ff0 <_Z24getFont_verdanab_20_4bppv+0x58>)
{
 8005f9c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 8005f9e:	782c      	ldrb	r4, [r5, #0]
 8005fa0:	f3bf 8f5b 	dmb	ish
 8005fa4:	f014 0401 	ands.w	r4, r4, #1
 8005fa8:	d11f      	bne.n	8005fea <_Z24getFont_verdanab_20_4bppv+0x52>
 8005faa:	4628      	mov	r0, r5
 8005fac:	f01e fee1 	bl	8024d72 <__cxa_guard_acquire>
 8005fb0:	b1d8      	cbz	r0, 8005fea <_Z24getFont_verdanab_20_4bppv+0x52>
 8005fb2:	233f      	movs	r3, #63	; 0x3f
 8005fb4:	225f      	movs	r2, #95	; 0x5f
 8005fb6:	490f      	ldr	r1, [pc, #60]	; (8005ff4 <_Z24getFont_verdanab_20_4bppv+0x5c>)
 8005fb8:	9307      	str	r3, [sp, #28]
 8005fba:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <_Z24getFont_verdanab_20_4bppv+0x60>)
 8005fbc:	480f      	ldr	r0, [pc, #60]	; (8005ffc <_Z24getFont_verdanab_20_4bppv+0x64>)
 8005fbe:	9306      	str	r3, [sp, #24]
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <_Z24getFont_verdanab_20_4bppv+0x68>)
 8005fc2:	9408      	str	r4, [sp, #32]
 8005fc4:	9305      	str	r3, [sp, #20]
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005fcc:	9302      	str	r3, [sp, #8]
 8005fce:	2304      	movs	r3, #4
 8005fd0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005fd4:	e9cd 3300 	strd	r3, r3, [sp]
 8005fd8:	2314      	movs	r3, #20
 8005fda:	f7fe feb5 	bl	8004d48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005fde:	4809      	ldr	r0, [pc, #36]	; (8006004 <_Z24getFont_verdanab_20_4bppv+0x6c>)
 8005fe0:	f01f f8c0 	bl	8025164 <atexit>
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f01e fed0 	bl	8024d8a <__cxa_guard_release>
    return verdanab_20_4bpp;
}
 8005fea:	4804      	ldr	r0, [pc, #16]	; (8005ffc <_Z24getFont_verdanab_20_4bppv+0x64>)
 8005fec:	b00d      	add	sp, #52	; 0x34
 8005fee:	bd30      	pop	{r4, r5, pc}
 8005ff0:	20012820 	.word	0x20012820
 8005ff4:	9048ceb4 	.word	0x9048ceb4
 8005ff8:	0802aae0 	.word	0x0802aae0
 8005ffc:	20012824 	.word	0x20012824
 8006000:	0802aaf8 	.word	0x0802aaf8
 8006004:	08005f95 	.word	0x08005f95

08006008 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8006008:	2000      	movs	r0, #0
 800600a:	4770      	bx	lr

0800600c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 800600c:	2000      	movs	r0, #0
 800600e:	4770      	bx	lr

08006010 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006010:	b40e      	push	{r1, r2, r3}
 8006012:	b503      	push	{r0, r1, lr}
 8006014:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006016:	2100      	movs	r1, #0
{
 8006018:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800601c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800601e:	f00e ff37 	bl	8014e90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006022:	b002      	add	sp, #8
 8006024:	f85d eb04 	ldr.w	lr, [sp], #4
 8006028:	b003      	add	sp, #12
 800602a:	4770      	bx	lr

0800602c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800602c:	b40c      	push	{r2, r3}
 800602e:	b507      	push	{r0, r1, r2, lr}
 8006030:	ab04      	add	r3, sp, #16
 8006032:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8006036:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8006038:	f00e ff2a 	bl	8014e90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800603c:	b003      	add	sp, #12
 800603e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006042:	b002      	add	sp, #8
 8006044:	4770      	bx	lr
	...

08006048 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8006048:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800604a:	b510      	push	{r4, lr}
 800604c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800604e:	b373      	cbz	r3, 80060ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006050:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8006052:	b92b      	cbnz	r3, 8006060 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8006054:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8006056:	21c0      	movs	r1, #192	; 0xc0
 8006058:	4a18      	ldr	r2, [pc, #96]	; (80060bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800605a:	4819      	ldr	r0, [pc, #100]	; (80060c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800605c:	f01f f864 	bl	8025128 <__assert_func>
            return buffer[pos];
 8006060:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8006062:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006066:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006068:	b30b      	cbz	r3, 80060ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800606a:	f010 facb 	bl	8016604 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800606e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8006070:	2b01      	cmp	r3, #1
 8006072:	d803      	bhi.n	800607c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8006074:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8006076:	21c5      	movs	r1, #197	; 0xc5
 8006078:	4a13      	ldr	r2, [pc, #76]	; (80060c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800607a:	e7ee      	b.n	800605a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800607c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800607e:	f640 103f 	movw	r0, #2367	; 0x93f
 8006082:	1c53      	adds	r3, r2, #1
 8006084:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8006086:	2b09      	cmp	r3, #9
 8006088:	4619      	mov	r1, r3
 800608a:	bf88      	it	hi
 800608c:	f1a3 010a 	subhi.w	r1, r3, #10
 8006090:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8006094:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8006096:	4281      	cmp	r1, r0
 8006098:	d109      	bne.n	80060ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800609a:	2b0a      	cmp	r3, #10
 800609c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80060a0:	bf28      	it	cs
 80060a2:	2300      	movcs	r3, #0
            return buffer[pos];
 80060a4:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80060a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80060aa:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80060ac:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80060ae:	4620      	mov	r0, r4
}
 80060b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80060b4:	f010 b9a8 	b.w	8016408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80060b8:	08028aa0 	.word	0x08028aa0
 80060bc:	08028aa9 	.word	0x08028aa9
 80060c0:	08028b54 	.word	0x08028b54
 80060c4:	08028b9e 	.word	0x08028b9e
 80060c8:	08028bac 	.word	0x08028bac

080060cc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80060cc:	f010 b965 	b.w	801639a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080060d0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80060d0:	b510      	push	{r4, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	ac02      	add	r4, sp, #8
 80060d6:	e884 0006 	stmia.w	r4, {r1, r2}
 80060da:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80060dc:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80060de:	4621      	mov	r1, r4
    va_start(pArg, format);
 80060e0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	9b08      	ldr	r3, [sp, #32]
 80060ea:	f00d fb39 	bl	8013760 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80060ee:	b006      	add	sp, #24
 80060f0:	bd10      	pop	{r4, pc}
	...

080060f4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80060f4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80060f6:	bb18      	cbnz	r0, 8006140 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80060fa:	4813      	ldr	r0, [pc, #76]	; (8006148 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4913      	ldr	r1, [pc, #76]	; (800614c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8006100:	b1b3      	cbz	r3, 8006130 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006102:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006104:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006106:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006108:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800610a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	441a      	add	r2, r3
 8006110:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8006114:	2200      	movs	r2, #0
 8006116:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8006118:	f000 f838 	bl	800618c <_ZN17TypedTextDatabase8getFontsEv>
 800611c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800611e:	f000 f833 	bl	8006188 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8006122:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8006124:	601c      	str	r4, [r3, #0]
        fonts = f;
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8006128:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800612c:	8018      	strh	r0, [r3, #0]
    }
}
 800612e:	e007      	b.n	8006140 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8006132:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8006136:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8006138:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800613a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800613c:	2c00      	cmp	r4, #0
 800613e:	d1e8      	bne.n	8006112 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8006140:	bd38      	pop	{r3, r4, r5, pc}
 8006142:	bf00      	nop
 8006144:	2001284c 	.word	0x2001284c
 8006148:	20012850 	.word	0x20012850
 800614c:	20012854 	.word	0x20012854
 8006150:	20012858 	.word	0x20012858
 8006154:	20027ef0 	.word	0x20027ef0
 8006158:	20027ef8 	.word	0x20027ef8
 800615c:	20027ef4 	.word	0x20027ef4
 8006160:	9048d450 	.word	0x9048d450
 8006164:	9048d3e8 	.word	0x9048d3e8
 8006168:	9048d524 	.word	0x9048d524

0800616c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006174:	4b03      	ldr	r3, [pc, #12]	; (8006184 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20012854 	.word	0x20012854
 8006184:	20012850 	.word	0x20012850

08006188 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8006188:	201a      	movs	r0, #26
 800618a:	4770      	bx	lr

0800618c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800618c:	4800      	ldr	r0, [pc, #0]	; (8006190 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800618e:	4770      	bx	lr
 8006190:	2001285c 	.word	0x2001285c

08006194 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 5:
        touchgfx_fonts[5] = &(getFont_verdana_15_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006194:	b510      	push	{r4, lr}
};
 8006196:	4c0a      	ldr	r4, [pc, #40]	; (80061c0 <_GLOBAL__sub_I_touchgfx_fonts+0x2c>)
    &(getFont_verdana_20_4bpp()),
 8006198:	f7ff fe4e 	bl	8005e38 <_Z23getFont_verdana_20_4bppv>
};
 800619c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800619e:	f7ff fec1 	bl	8005f24 <_Z23getFont_verdana_40_4bppv>
};
 80061a2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80061a4:	f7ff fdd4 	bl	8005d50 <_Z23getFont_verdana_10_4bppv>
};
 80061a8:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_30_4bpp()),
 80061aa:	f7ff fe7f 	bl	8005eac <_Z23getFont_verdana_30_4bppv>
};
 80061ae:	60e0      	str	r0, [r4, #12]
    &(getFont_verdanab_20_4bpp()),
 80061b0:	f7ff fef2 	bl	8005f98 <_Z24getFont_verdanab_20_4bppv>
};
 80061b4:	6120      	str	r0, [r4, #16]
    &(getFont_verdana_15_4bpp())
 80061b6:	f7ff fe05 	bl	8005dc4 <_Z23getFont_verdana_15_4bppv>
};
 80061ba:	6160      	str	r0, [r4, #20]
} // namespace TypedTextDatabase
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	bf00      	nop
 80061c0:	2001285c 	.word	0x2001285c

080061c4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80061c4:	4770      	bx	lr

080061c6 <_ZN19FrontendApplicationD0Ev>:
 80061c6:	b510      	push	{r4, lr}
 80061c8:	4604      	mov	r4, r0
 80061ca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80061ce:	f01e fdce 	bl	8024d6e <_ZdlPvj>
 80061d2:	4620      	mov	r0, r4
 80061d4:	bd10      	pop	{r4, pc}

080061d6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80061d6:	b510      	push	{r4, lr}
 80061d8:	4604      	mov	r4, r0
    {
        model.tick();
 80061da:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 80061de:	f000 f813 	bl	8006208 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80061e2:	4620      	mov	r0, r4
    }
 80061e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80061e8:	f00d be4e 	b.w	8013e88 <_ZN8touchgfx11Application15handleTickEventEv>

080061ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80061f0:	f7fe fd28 	bl	8004c44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80061f4:	4b01      	ldr	r3, [pc, #4]	; (80061fc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80061f6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80061f8:	6023      	str	r3, [r4, #0]
}
 80061fa:	bd10      	pop	{r4, pc}
 80061fc:	08028c88 	.word	0x08028c88

08006200 <_ZN5ModelC1Ev>:
extern __IO uint16_t v_corrente;
extern __IO uint16_t v_gauge;
extern __IO uint16_t v_bateria;


Model::Model() : modelListener(0)
 8006200:	2200      	movs	r2, #0
 8006202:	6002      	str	r2, [r0, #0]
{

}
 8006204:	4770      	bx	lr
	...

08006208 <_ZN5Model4tickEv>:

void Model::tick()
{
 8006208:	b510      	push	{r4, lr}
	//funções para pegar os valores lido
	modelListener->Update_Corrente_Text(v_corrente);
 800620a:	4b0c      	ldr	r3, [pc, #48]	; (800623c <_ZN5Model4tickEv+0x34>)
{
 800620c:	4604      	mov	r4, r0
	modelListener->Update_Corrente_Text(v_corrente);
 800620e:	6800      	ldr	r0, [r0, #0]
 8006210:	8819      	ldrh	r1, [r3, #0]
 8006212:	6803      	ldr	r3, [r0, #0]
 8006214:	b289      	uxth	r1, r1
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4798      	blx	r3

	modelListener->Update_Gauge(v_gauge);
 800621a:	6820      	ldr	r0, [r4, #0]
 800621c:	4b08      	ldr	r3, [pc, #32]	; (8006240 <_ZN5Model4tickEv+0x38>)
 800621e:	8819      	ldrh	r1, [r3, #0]
 8006220:	6803      	ldr	r3, [r0, #0]
 8006222:	b289      	uxth	r1, r1
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	4798      	blx	r3

	modelListener->Update_Bateria(v_bateria);
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <_ZN5Model4tickEv+0x3c>)
 800622c:	8819      	ldrh	r1, [r3, #0]
 800622e:	6803      	ldr	r3, [r0, #0]
 8006230:	b289      	uxth	r1, r1
 8006232:	691b      	ldr	r3, [r3, #16]


}
 8006234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	modelListener->Update_Bateria(v_bateria);
 8006238:	4718      	bx	r3
 800623a:	bf00      	nop
 800623c:	200126de 	.word	0x200126de
 8006240:	200126e0 	.word	0x200126e0
 8006244:	200126dc 	.word	0x200126dc

08006248 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8006248:	4770      	bx	lr

0800624a <_ZThn4_N16Screen1PresenterD1Ev>:
 800624a:	3804      	subs	r0, #4
 800624c:	4770      	bx	lr

0800624e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800624e:	4770      	bx	lr

08006250 <_ZN16Screen1Presenter20Update_Corrente_TextEt>:

}

/* Código para passar os dados para a tela*/
void Screen1Presenter::Update_Corrente_Text(uint16_t value){
	view.Update_Corrente_Text(value);
 8006250:	68c0      	ldr	r0, [r0, #12]
 8006252:	6803      	ldr	r3, [r0, #0]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	4718      	bx	r3

08006258 <_ZThn4_N16Screen1Presenter20Update_Corrente_TextEt>:

    //adicionar o cabeçalho das funções
    virtual void Update_Corrente_Text(uint16_t value);
 8006258:	f1a0 0004 	sub.w	r0, r0, #4
 800625c:	f7ff bff8 	b.w	8006250 <_ZN16Screen1Presenter20Update_Corrente_TextEt>

08006260 <_ZN16Screen1Presenter12Update_GaugeEt>:
}

void Screen1Presenter::Update_Gauge(uint16_t value_gauge){
	view.Update_Gauge(value_gauge);
 8006260:	68c0      	ldr	r0, [r0, #12]
 8006262:	6803      	ldr	r3, [r0, #0]
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	4718      	bx	r3

08006268 <_ZThn4_N16Screen1Presenter12Update_GaugeEt>:
    virtual void Update_Gauge(uint16_t value_gauge);
 8006268:	f1a0 0004 	sub.w	r0, r0, #4
 800626c:	f7ff bff8 	b.w	8006260 <_ZN16Screen1Presenter12Update_GaugeEt>

08006270 <_ZN16Screen1Presenter14Update_BateriaEt>:
}

void Screen1Presenter::Update_Bateria(uint16_t value_bateria){
	view.Update_Gauge(value_bateria);
 8006270:	68c0      	ldr	r0, [r0, #12]
 8006272:	6803      	ldr	r3, [r0, #0]
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	4718      	bx	r3

08006278 <_ZThn4_N16Screen1Presenter14Update_BateriaEt>:
    virtual void Update_Bateria(uint16_t value_bateria);
 8006278:	f1a0 0004 	sub.w	r0, r0, #4
 800627c:	f7ff bff8 	b.w	8006270 <_ZN16Screen1Presenter14Update_BateriaEt>

08006280 <_ZN16Screen1PresenterD0Ev>:
    virtual ~Screen1Presenter() {};
 8006280:	b510      	push	{r4, lr}
 8006282:	4604      	mov	r4, r0
 8006284:	2110      	movs	r1, #16
 8006286:	f01e fd72 	bl	8024d6e <_ZdlPvj>
 800628a:	4620      	mov	r0, r4
 800628c:	bd10      	pop	{r4, pc}

0800628e <_ZThn4_N16Screen1PresenterD0Ev>:
 800628e:	f1a0 0004 	sub.w	r0, r0, #4
 8006292:	e7f5      	b.n	8006280 <_ZN16Screen1PresenterD0Ev>

08006294 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8006294:	2200      	movs	r2, #0
    : view(v)
 8006296:	60c1      	str	r1, [r0, #12]
 8006298:	6082      	str	r2, [r0, #8]
 800629a:	4a04      	ldr	r2, [pc, #16]	; (80062ac <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 800629c:	b510      	push	{r4, lr}
    : view(v)
 800629e:	f102 0408 	add.w	r4, r2, #8
 80062a2:	322c      	adds	r2, #44	; 0x2c
 80062a4:	6004      	str	r4, [r0, #0]
 80062a6:	6042      	str	r2, [r0, #4]
}
 80062a8:	bd10      	pop	{r4, pc}
 80062aa:	bf00      	nop
 80062ac:	08028ccc 	.word	0x08028ccc

080062b0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80062b0:	4770      	bx	lr

080062b2 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80062b2:	4770      	bx	lr

080062b4 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80062b4:	f7fe bdf5 	b.w	8004ea2 <_ZN15Screen1ViewBase11setupScreenEv>

080062b8 <_ZN11Screen1View20Update_Corrente_TextEt>:

void Screen1View::Update_Corrente_Text(uint16_t value)
{
 80062b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062ba:	460d      	mov	r5, r1
 80062bc:	4604      	mov	r4, r0
	/*Converte os dados em string para representar na tela*/
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%d", value);
 80062be:	460b      	mov	r3, r1
 80062c0:	4a26      	ldr	r2, [pc, #152]	; (800635c <_ZN11Screen1View20Update_Corrente_TextEt+0xa4>)
 80062c2:	2105      	movs	r1, #5
 80062c4:	f600 2074 	addw	r0, r0, #2676	; 0xa74
 80062c8:	f010 ff4a 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    if (value > 999){
 80062cc:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    /*Configuração da barra de progressão da corrente*/
    if(value<10000){
    	boxProgress1.setColor(Color::getColorFromRGB(33, 196, 58));
    	boxProgress1.setValue(value);
    }else if(value>= 10000 && value <13000){
    	boxProgress1.setColor(Color::getColorFromRGB(194, 194, 33));
 80062d0:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 80062d4:	f8b4 1a74 	ldrh.w	r1, [r4, #2676]	; 0xa74
 80062d8:	f8b4 3a7c 	ldrh.w	r3, [r4, #2684]	; 0xa7c
 80062dc:	f8b4 2a76 	ldrh.w	r2, [r4, #2678]	; 0xa76
    if (value > 999){
 80062e0:	d325      	bcc.n	800632e <_ZN11Screen1View20Update_Corrente_TextEt+0x76>
    	textArea1Buffer1[1] = textArea2Buffer[4];
 80062e2:	f8a4 3a6a 	strh.w	r3, [r4, #2666]	; 0xa6a
    	textArea1Buffer2[2] = textArea2Buffer[4];
 80062e6:	f8a4 3a72 	strh.w	r3, [r4, #2674]	; 0xa72
    if(value<10000){
 80062ea:	f242 730f 	movw	r3, #9999	; 0x270f
    	textArea1Buffer2[0] = textArea2Buffer[1];
 80062ee:	f8a4 2a6e 	strh.w	r2, [r4, #2670]	; 0xa6e
    if(value<10000){
 80062f2:	429d      	cmp	r5, r3
    	textArea1Buffer2[1] = textArea2Buffer[2];
 80062f4:	f8b4 2a78 	ldrh.w	r2, [r4, #2680]	; 0xa78
    	textArea1Buffer1[0] = textArea2Buffer[0];
 80062f8:	f8a4 1a68 	strh.w	r1, [r4, #2664]	; 0xa68
    	textArea1Buffer2[1] = textArea2Buffer[2];
 80062fc:	f8a4 2a70 	strh.w	r2, [r4, #2672]	; 0xa70
    if(value<10000){
 8006300:	d821      	bhi.n	8006346 <_ZN11Screen1View20Update_Corrente_TextEt+0x8e>
    	boxProgress1.setColor(Color::getColorFromRGB(33, 196, 58));
 8006302:	4917      	ldr	r1, [pc, #92]	; (8006360 <_ZN11Screen1View20Update_Corrente_TextEt+0xa8>)
    	boxProgress1.setValue(value);
    }else{
    	boxProgress1.setColor(Color::getColorFromRGB(194, 33, 33));
 8006304:	9001      	str	r0, [sp, #4]
 8006306:	f008 f957 	bl	800e5b8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    	boxProgress1.setValue(value);
 800630a:	4629      	mov	r1, r5
 800630c:	9801      	ldr	r0, [sp, #4]
 800630e:	f008 f981 	bl	800e614 <_ZN8touchgfx11BoxProgress8setValueEi>
 8006312:	9801      	ldr	r0, [sp, #4]
    }
    boxProgress1.invalidate();
 8006314:	f00e fede 	bl	80150d4 <_ZNK8touchgfx8Drawable10invalidateEv>
    textArea1.invalidate();
 8006318:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800631c:	f00e feda 	bl	80150d4 <_ZNK8touchgfx8Drawable10invalidateEv>
    textArea2.invalidate();
 8006320:	f504 708e 	add.w	r0, r4, #284	; 0x11c
}
 8006324:	b002      	add	sp, #8
 8006326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    textArea2.invalidate();
 800632a:	f00e bed3 	b.w	80150d4 <_ZNK8touchgfx8Drawable10invalidateEv>
    	textArea1Buffer1[0] = 48;
 800632e:	2630      	movs	r6, #48	; 0x30
    	textArea1Buffer1[1] = textArea2Buffer[4];
 8006330:	f8a4 3a6a 	strh.w	r3, [r4, #2666]	; 0xa6a
    	textArea1Buffer2[0] = textArea2Buffer[0];
 8006334:	f8a4 1a6e 	strh.w	r1, [r4, #2670]	; 0xa6e
    	textArea1Buffer1[0] = 48;
 8006338:	f8a4 6a68 	strh.w	r6, [r4, #2664]	; 0xa68
    	textArea1Buffer2[1] = textArea2Buffer[1];
 800633c:	f8a4 2a70 	strh.w	r2, [r4, #2672]	; 0xa70
    	textArea1Buffer2[2] = textArea2Buffer[4];
 8006340:	f8a4 3a72 	strh.w	r3, [r4, #2674]	; 0xa72
    if(value<10000){
 8006344:	e7dd      	b.n	8006302 <_ZN11Screen1View20Update_Corrente_TextEt+0x4a>
    }else if(value>= 10000 && value <13000){
 8006346:	f5a5 531c 	sub.w	r3, r5, #9984	; 0x2700
 800634a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800634e:	3b10      	subs	r3, #16
 8006350:	b29b      	uxth	r3, r3
 8006352:	4293      	cmp	r3, r2
    	boxProgress1.setColor(Color::getColorFromRGB(194, 194, 33));
 8006354:	bf94      	ite	ls
 8006356:	4903      	ldrls	r1, [pc, #12]	; (8006364 <_ZN11Screen1View20Update_Corrente_TextEt+0xac>)
    	boxProgress1.setColor(Color::getColorFromRGB(194, 33, 33));
 8006358:	4903      	ldrhi	r1, [pc, #12]	; (8006368 <_ZN11Screen1View20Update_Corrente_TextEt+0xb0>)
 800635a:	e7d3      	b.n	8006304 <_ZN11Screen1View20Update_Corrente_TextEt+0x4c>
 800635c:	08028d0c 	.word	0x08028d0c
 8006360:	ff21c43a 	.word	0xff21c43a
 8006364:	ffc2c221 	.word	0xffc2c221
 8006368:	ffc22121 	.word	0xffc22121

0800636c <_ZN11Screen1View12Update_GaugeEt>:

void Screen1View::Update_Gauge(uint16_t value_gauge)
{
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4604      	mov	r4, r0
	/*Configuração do gauge de potência*/
	Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%d", value_gauge);
 8006370:	460b      	mov	r3, r1
{
 8006372:	460d      	mov	r5, r1
	Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%d", value_gauge);
 8006374:	4a08      	ldr	r2, [pc, #32]	; (8006398 <_ZN11Screen1View12Update_GaugeEt+0x2c>)
 8006376:	2104      	movs	r1, #4
 8006378:	f600 207e 	addw	r0, r0, #2686	; 0xa7e
 800637c:	f010 fef0 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea3.invalidate();
 8006380:	f504 60ab 	add.w	r0, r4, #1368	; 0x558
 8006384:	f00e fea6 	bl	80150d4 <_ZNK8touchgfx8Drawable10invalidateEv>
	gauge1.setValue(value_gauge);
 8006388:	4629      	mov	r1, r5
 800638a:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
}
 800638e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	gauge1.setValue(value_gauge);
 8006392:	f00b b8dd 	b.w	8011550 <_ZN8touchgfx5Gauge8setValueEi>
 8006396:	bf00      	nop
 8006398:	08028d0c 	.word	0x08028d0c

0800639c <_ZN11Screen1View14Update_BateriaEt>:

void Screen1View::Update_Bateria(uint16_t value_bateria)
{
	/*Configuração da barra da bateria*/
	if(v_bateria>=15){
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <_ZN11Screen1View14Update_BateriaEt+0x2c>)
{
 800639e:	b507      	push	{r0, r1, r2, lr}
	if(v_bateria>=15){
 80063a0:	8819      	ldrh	r1, [r3, #0]
		textProgress1.setValue(v_bateria);
 80063a2:	f500 7029 	add.w	r0, r0, #676	; 0x2a4
	if(v_bateria>=15){
 80063a6:	290e      	cmp	r1, #14
		textProgress1.setValue(v_bateria);
 80063a8:	9001      	str	r0, [sp, #4]
	if(v_bateria>=15){
 80063aa:	d909      	bls.n	80063c0 <_ZN11Screen1View14Update_BateriaEt+0x24>
		textProgress1.setValue(v_bateria);
 80063ac:	f008 f834 	bl	800e418 <_ZN8touchgfx12TextProgress8setValueEi>
		textProgress1.setColor(Color::getColorFromRGB(0, 0, 0));
 80063b0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	}else{
		textProgress1.setValue(v_bateria);
		textProgress1.setColor(touchgfx::Color::getColorFromRGB(194, 33, 33));
 80063b4:	9801      	ldr	r0, [sp, #4]
	}
}
 80063b6:	b003      	add	sp, #12
 80063b8:	f85d eb04 	ldr.w	lr, [sp], #4
		textProgress1.setColor(touchgfx::Color::getColorFromRGB(194, 33, 33));
 80063bc:	f007 bffc 	b.w	800e3b8 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
		textProgress1.setValue(v_bateria);
 80063c0:	f008 f82a 	bl	800e418 <_ZN8touchgfx12TextProgress8setValueEi>
		textProgress1.setColor(touchgfx::Color::getColorFromRGB(194, 33, 33));
 80063c4:	4901      	ldr	r1, [pc, #4]	; (80063cc <_ZN11Screen1View14Update_BateriaEt+0x30>)
 80063c6:	e7f5      	b.n	80063b4 <_ZN11Screen1View14Update_BateriaEt+0x18>
 80063c8:	200126dc 	.word	0x200126dc
 80063cc:	ffc22121 	.word	0xffc22121

080063d0 <_ZN11Screen1ViewD0Ev>:
 80063d0:	b510      	push	{r4, lr}
 80063d2:	4604      	mov	r4, r0
 80063d4:	f643 117c 	movw	r1, #14716	; 0x397c
 80063d8:	f01e fcc9 	bl	8024d6e <_ZdlPvj>
 80063dc:	4620      	mov	r0, r4
 80063de:	bd10      	pop	{r4, pc}

080063e0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80063e0:	b510      	push	{r4, lr}
 80063e2:	4604      	mov	r4, r0
 80063e4:	f7fe fe4a 	bl	800507c <_ZN15Screen1ViewBaseC1Ev>
 80063e8:	4b01      	ldr	r3, [pc, #4]	; (80063f0 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80063ea:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80063ec:	6023      	str	r3, [r4, #0]
}
 80063ee:	bd10      	pop	{r4, pc}
 80063f0:	08028d18 	.word	0x08028d18

080063f4 <_ZN13ModelListener20Update_Corrente_TextEt>:
    }
    /* Adicionar o cabeçalho das funções*/
    virtual void Update_Corrente_Text(uint16_t value){}
 80063f4:	4770      	bx	lr

080063f6 <_ZN13ModelListener12Update_GaugeEt>:
    virtual void Update_Gauge(uint16_t value_gauge){}
 80063f6:	4770      	bx	lr

080063f8 <_ZN13ModelListener14Update_BateriaEt>:
    virtual void Update_Bateria(uint16_t value_bateria){}
 80063f8:	4770      	bx	lr

080063fa <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80063fa:	4770      	bx	lr

080063fc <_ZThn4_N16Screen2PresenterD1Ev>:
 80063fc:	3804      	subs	r0, #4
 80063fe:	4770      	bx	lr

08006400 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8006400:	4770      	bx	lr

08006402 <_ZN16Screen2PresenterD0Ev>:
 8006402:	b510      	push	{r4, lr}
 8006404:	4604      	mov	r4, r0
 8006406:	2110      	movs	r1, #16
 8006408:	f01e fcb1 	bl	8024d6e <_ZdlPvj>
 800640c:	4620      	mov	r0, r4
 800640e:	bd10      	pop	{r4, pc}

08006410 <_ZThn4_N16Screen2PresenterD0Ev>:
 8006410:	f1a0 0004 	sub.w	r0, r0, #4
 8006414:	e7f5      	b.n	8006402 <_ZN16Screen2PresenterD0Ev>
	...

08006418 <_ZN16Screen2PresenterC1ER11Screen2View>:
    ModelListener() : model(0) {}
 8006418:	2200      	movs	r2, #0
    : view(v)
 800641a:	60c1      	str	r1, [r0, #12]
 800641c:	6082      	str	r2, [r0, #8]
 800641e:	4a04      	ldr	r2, [pc, #16]	; (8006430 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 8006420:	b510      	push	{r4, lr}
    : view(v)
 8006422:	f102 0408 	add.w	r4, r2, #8
 8006426:	3220      	adds	r2, #32
 8006428:	6004      	str	r4, [r0, #0]
 800642a:	6042      	str	r2, [r0, #4]
}
 800642c:	bd10      	pop	{r4, pc}
 800642e:	bf00      	nop
 8006430:	08028d50 	.word	0x08028d50

08006434 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8006434:	4770      	bx	lr

08006436 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8006436:	4770      	bx	lr

08006438 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8006438:	f7ff bc0b 	b.w	8005c52 <_ZN15Screen2ViewBase11setupScreenEv>

0800643c <_ZN11Screen2ViewD0Ev>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4604      	mov	r4, r0
 8006440:	21c8      	movs	r1, #200	; 0xc8
 8006442:	f01e fc94 	bl	8024d6e <_ZdlPvj>
 8006446:	4620      	mov	r0, r4
 8006448:	bd10      	pop	{r4, pc}
	...

0800644c <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 800644c:	b510      	push	{r4, lr}
 800644e:	4604      	mov	r4, r0
 8006450:	f7ff fc1a 	bl	8005c88 <_ZN15Screen2ViewBaseC1Ev>
 8006454:	4b01      	ldr	r3, [pc, #4]	; (800645c <_ZN11Screen2ViewC1Ev+0x10>)
}
 8006456:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8006458:	6023      	str	r3, [r4, #0]
}
 800645a:	bd10      	pop	{r4, pc}
 800645c:	08028d8c 	.word	0x08028d8c

08006460 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8006460:	4770      	bx	lr

08006462 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 8006462:	2000      	movs	r0, #0
 8006464:	4770      	bx	lr

08006466 <ft6x06_ReadID>:
{
 8006466:	b510      	push	{r4, lr}
 8006468:	4604      	mov	r4, r0
  TS_IO_Init();
 800646a:	f7fa fb66 	bl	8000b3a <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800646e:	21a8      	movs	r1, #168	; 0xa8
 8006470:	b2e0      	uxtb	r0, r4
 8006472:	f7fa fb7f 	bl	8000b74 <TS_IO_Read>
}
 8006476:	b280      	uxth	r0, r0
 8006478:	bd10      	pop	{r4, pc}
	...

0800647c <ft6x06_TS_DetectTouch>:
{
 800647c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800647e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8006480:	2102      	movs	r1, #2
 8006482:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8006484:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8006488:	f7fa fb74 	bl	8000b74 <TS_IO_Read>
 800648c:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8006490:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800649c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80064a4:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80064a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80064ac:	4b03      	ldr	r3, [pc, #12]	; (80064bc <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 80064ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80064b2:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 80064b4:	2200      	movs	r2, #0
 80064b6:	709a      	strb	r2, [r3, #2]
}
 80064b8:	b002      	add	sp, #8
 80064ba:	bd10      	pop	{r4, pc}
 80064bc:	20012876 	.word	0x20012876

080064c0 <ft6x06_TS_GetXY>:
{
 80064c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80064c2:	4c15      	ldr	r4, [pc, #84]	; (8006518 <ft6x06_TS_GetXY+0x58>)
{
 80064c4:	4615      	mov	r5, r2
 80064c6:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80064c8:	78a3      	ldrb	r3, [r4, #2]
 80064ca:	7862      	ldrb	r2, [r4, #1]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d91f      	bls.n	8006510 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 80064d0:	b303      	cbz	r3, 8006514 <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	bf14      	ite	ne
 80064d6:	2100      	movne	r1, #0
 80064d8:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80064da:	2304      	movs	r3, #4
 80064dc:	b2c0      	uxtb	r0, r0
 80064de:	eb0d 0203 	add.w	r2, sp, r3
 80064e2:	f7fa fb65 	bl	8000bb0 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80064e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80064ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80064ee:	021b      	lsls	r3, r3, #8
 80064f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80064f4:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80064f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80064fa:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80064fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006506:	4313      	orrs	r3, r2
 8006508:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 800650a:	78a3      	ldrb	r3, [r4, #2]
 800650c:	3301      	adds	r3, #1
 800650e:	70a3      	strb	r3, [r4, #2]
}
 8006510:	b002      	add	sp, #8
 8006512:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8006514:	2103      	movs	r1, #3
 8006516:	e7e0      	b.n	80064da <ft6x06_TS_GetXY+0x1a>
 8006518:	20012876 	.word	0x20012876

0800651c <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800651c:	2201      	movs	r2, #1
 800651e:	21a4      	movs	r1, #164	; 0xa4
 8006520:	b2c0      	uxtb	r0, r0
 8006522:	f7fa bb0b 	b.w	8000b3c <TS_IO_Write>

08006526 <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8006526:	2200      	movs	r2, #0
 8006528:	21a4      	movs	r1, #164	; 0xa4
 800652a:	b2c0      	uxtb	r0, r0
 800652c:	f7fa bb06 	b.w	8000b3c <TS_IO_Write>

08006530 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8006530:	f7ff bff9 	b.w	8006526 <ft6x06_TS_DisableIT>

08006534 <ft6x06_TS_ClearIT>:
 8006534:	4770      	bx	lr
	...

08006538 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8006538:	4b09      	ldr	r3, [pc, #36]	; (8006560 <ft6x06_Init+0x28>)
{  
 800653a:	b410      	push	{r4}
    if(ft6x06[idx] == DeviceAddr)
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	4290      	cmp	r0, r2
 8006540:	d00a      	beq.n	8006558 <ft6x06_Init+0x20>
 8006542:	7859      	ldrb	r1, [r3, #1]
 8006544:	4288      	cmp	r0, r1
 8006546:	d007      	beq.n	8006558 <ft6x06_Init+0x20>
 8006548:	b10a      	cbz	r2, 800654e <ft6x06_Init+0x16>
 800654a:	b929      	cbnz	r1, 8006558 <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800654c:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 800654e:	5498      	strb	r0, [r3, r2]
}
 8006550:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 8006554:	f7fa baf1 	b.w	8000b3a <TS_IO_Init>
}
 8006558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20012874 	.word	0x20012874

08006564 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4604      	mov	r4, r0
 8006568:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800656a:	2000      	movs	r0, #0
 800656c:	49c9      	ldr	r1, [pc, #804]	; (8006894 <OTM8009A_Init+0x330>)
 800656e:	f7fa fe69 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8006572:	49c9      	ldr	r1, [pc, #804]	; (8006898 <OTM8009A_Init+0x334>)
 8006574:	2003      	movs	r0, #3
 8006576:	f7fa fe65 	bl	8001244 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800657a:	49c8      	ldr	r1, [pc, #800]	; (800689c <OTM8009A_Init+0x338>)
 800657c:	2000      	movs	r0, #0
 800657e:	f7fa fe61 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8006582:	49c7      	ldr	r1, [pc, #796]	; (80068a0 <OTM8009A_Init+0x33c>)
 8006584:	2002      	movs	r0, #2
 8006586:	f7fa fe5d 	bl	8001244 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800658a:	49c4      	ldr	r1, [pc, #784]	; (800689c <OTM8009A_Init+0x338>)
 800658c:	2000      	movs	r0, #0
 800658e:	f7fa fe59 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8006592:	49c4      	ldr	r1, [pc, #784]	; (80068a4 <OTM8009A_Init+0x340>)
 8006594:	2000      	movs	r0, #0
 8006596:	f7fa fe55 	bl	8001244 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800659a:	200a      	movs	r0, #10
 800659c:	f7fa fe50 	bl	8001240 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80065a0:	49c1      	ldr	r1, [pc, #772]	; (80068a8 <OTM8009A_Init+0x344>)
 80065a2:	2000      	movs	r0, #0
 80065a4:	f7fa fe4e 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80065a8:	49c0      	ldr	r1, [pc, #768]	; (80068ac <OTM8009A_Init+0x348>)
 80065aa:	2000      	movs	r0, #0
 80065ac:	f7fa fe4a 	bl	8001244 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80065b0:	200a      	movs	r0, #10
 80065b2:	f7fa fe45 	bl	8001240 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80065b6:	49be      	ldr	r1, [pc, #760]	; (80068b0 <OTM8009A_Init+0x34c>)
 80065b8:	2000      	movs	r0, #0
 80065ba:	f7fa fe43 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80065be:	49bd      	ldr	r1, [pc, #756]	; (80068b4 <OTM8009A_Init+0x350>)
 80065c0:	2000      	movs	r0, #0
 80065c2:	f7fa fe3f 	bl	8001244 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80065c6:	49bc      	ldr	r1, [pc, #752]	; (80068b8 <OTM8009A_Init+0x354>)
 80065c8:	2000      	movs	r0, #0
 80065ca:	f7fa fe3b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80065ce:	49bb      	ldr	r1, [pc, #748]	; (80068bc <OTM8009A_Init+0x358>)
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7fa fe37 	bl	8001244 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80065d6:	49ba      	ldr	r1, [pc, #744]	; (80068c0 <OTM8009A_Init+0x35c>)
 80065d8:	2000      	movs	r0, #0
 80065da:	f7fa fe33 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80065de:	49b9      	ldr	r1, [pc, #740]	; (80068c4 <OTM8009A_Init+0x360>)
 80065e0:	2000      	movs	r0, #0
 80065e2:	f7fa fe2f 	bl	8001244 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80065e6:	49ab      	ldr	r1, [pc, #684]	; (8006894 <OTM8009A_Init+0x330>)
 80065e8:	2000      	movs	r0, #0
 80065ea:	f7fa fe2b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80065ee:	49b6      	ldr	r1, [pc, #728]	; (80068c8 <OTM8009A_Init+0x364>)
 80065f0:	2000      	movs	r0, #0
 80065f2:	f7fa fe27 	bl	8001244 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80065f6:	49b5      	ldr	r1, [pc, #724]	; (80068cc <OTM8009A_Init+0x368>)
 80065f8:	2000      	movs	r0, #0
 80065fa:	f7fa fe23 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80065fe:	49b4      	ldr	r1, [pc, #720]	; (80068d0 <OTM8009A_Init+0x36c>)
 8006600:	2000      	movs	r0, #0
 8006602:	f7fa fe1f 	bl	8001244 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8006606:	49b3      	ldr	r1, [pc, #716]	; (80068d4 <OTM8009A_Init+0x370>)
 8006608:	2000      	movs	r0, #0
 800660a:	f7fa fe1b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800660e:	49b2      	ldr	r1, [pc, #712]	; (80068d8 <OTM8009A_Init+0x374>)
 8006610:	2000      	movs	r0, #0
 8006612:	f7fa fe17 	bl	8001244 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8006616:	49b1      	ldr	r1, [pc, #708]	; (80068dc <OTM8009A_Init+0x378>)
 8006618:	2000      	movs	r0, #0
 800661a:	f7fa fe13 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800661e:	49b0      	ldr	r1, [pc, #704]	; (80068e0 <OTM8009A_Init+0x37c>)
 8006620:	2000      	movs	r0, #0
 8006622:	f7fa fe0f 	bl	8001244 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8006626:	49af      	ldr	r1, [pc, #700]	; (80068e4 <OTM8009A_Init+0x380>)
 8006628:	2000      	movs	r0, #0
 800662a:	f7fa fe0b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800662e:	49a3      	ldr	r1, [pc, #652]	; (80068bc <OTM8009A_Init+0x358>)
 8006630:	2000      	movs	r0, #0
 8006632:	f7fa fe07 	bl	8001244 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8006636:	4997      	ldr	r1, [pc, #604]	; (8006894 <OTM8009A_Init+0x330>)
 8006638:	2000      	movs	r0, #0
 800663a:	f7fa fe03 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800663e:	49aa      	ldr	r1, [pc, #680]	; (80068e8 <OTM8009A_Init+0x384>)
 8006640:	2002      	movs	r0, #2
 8006642:	f7fa fdff 	bl	8001244 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8006646:	49a9      	ldr	r1, [pc, #676]	; (80068ec <OTM8009A_Init+0x388>)
 8006648:	2000      	movs	r0, #0
 800664a:	f7fa fdfb 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800664e:	49a8      	ldr	r1, [pc, #672]	; (80068f0 <OTM8009A_Init+0x38c>)
 8006650:	2000      	movs	r0, #0
 8006652:	f7fa fdf7 	bl	8001244 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8006656:	49a7      	ldr	r1, [pc, #668]	; (80068f4 <OTM8009A_Init+0x390>)
 8006658:	2000      	movs	r0, #0
 800665a:	f7fa fdf3 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800665e:	49a6      	ldr	r1, [pc, #664]	; (80068f8 <OTM8009A_Init+0x394>)
 8006660:	2000      	movs	r0, #0
 8006662:	f7fa fdef 	bl	8001244 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8006666:	49a5      	ldr	r1, [pc, #660]	; (80068fc <OTM8009A_Init+0x398>)
 8006668:	2000      	movs	r0, #0
 800666a:	f7fa fdeb 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800666e:	49a4      	ldr	r1, [pc, #656]	; (8006900 <OTM8009A_Init+0x39c>)
 8006670:	2000      	movs	r0, #0
 8006672:	f7fa fde7 	bl	8001244 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8006676:	4995      	ldr	r1, [pc, #596]	; (80068cc <OTM8009A_Init+0x368>)
 8006678:	2000      	movs	r0, #0
 800667a:	f7fa fde3 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800667e:	49a1      	ldr	r1, [pc, #644]	; (8006904 <OTM8009A_Init+0x3a0>)
 8006680:	2000      	movs	r0, #0
 8006682:	f7fa fddf 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8006686:	4993      	ldr	r1, [pc, #588]	; (80068d4 <OTM8009A_Init+0x370>)
 8006688:	2000      	movs	r0, #0
 800668a:	f7fa fddb 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800668e:	499e      	ldr	r1, [pc, #632]	; (8006908 <OTM8009A_Init+0x3a4>)
 8006690:	2000      	movs	r0, #0
 8006692:	f7fa fdd7 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8006696:	499d      	ldr	r1, [pc, #628]	; (800690c <OTM8009A_Init+0x3a8>)
 8006698:	2000      	movs	r0, #0
 800669a:	f7fa fdd3 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800669e:	499c      	ldr	r1, [pc, #624]	; (8006910 <OTM8009A_Init+0x3ac>)
 80066a0:	2002      	movs	r0, #2
 80066a2:	f7fa fdcf 	bl	8001244 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80066a6:	497d      	ldr	r1, [pc, #500]	; (800689c <OTM8009A_Init+0x338>)
 80066a8:	2000      	movs	r0, #0
 80066aa:	f7fa fdcb 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80066ae:	4999      	ldr	r1, [pc, #612]	; (8006914 <OTM8009A_Init+0x3b0>)
 80066b0:	2006      	movs	r0, #6
 80066b2:	f7fa fdc7 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80066b6:	4998      	ldr	r1, [pc, #608]	; (8006918 <OTM8009A_Init+0x3b4>)
 80066b8:	2000      	movs	r0, #0
 80066ba:	f7fa fdc3 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80066be:	4997      	ldr	r1, [pc, #604]	; (800691c <OTM8009A_Init+0x3b8>)
 80066c0:	200e      	movs	r0, #14
 80066c2:	f7fa fdbf 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80066c6:	4996      	ldr	r1, [pc, #600]	; (8006920 <OTM8009A_Init+0x3bc>)
 80066c8:	2000      	movs	r0, #0
 80066ca:	f7fa fdbb 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80066ce:	4995      	ldr	r1, [pc, #596]	; (8006924 <OTM8009A_Init+0x3c0>)
 80066d0:	200e      	movs	r0, #14
 80066d2:	f7fa fdb7 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80066d6:	4994      	ldr	r1, [pc, #592]	; (8006928 <OTM8009A_Init+0x3c4>)
 80066d8:	2000      	movs	r0, #0
 80066da:	f7fa fdb3 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80066de:	4993      	ldr	r1, [pc, #588]	; (800692c <OTM8009A_Init+0x3c8>)
 80066e0:	200a      	movs	r0, #10
 80066e2:	f7fa fdaf 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80066e6:	4992      	ldr	r1, [pc, #584]	; (8006930 <OTM8009A_Init+0x3cc>)
 80066e8:	2000      	movs	r0, #0
 80066ea:	f7fa fdab 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80066ee:	4991      	ldr	r1, [pc, #580]	; (8006934 <OTM8009A_Init+0x3d0>)
 80066f0:	2000      	movs	r0, #0
 80066f2:	f7fa fda7 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80066f6:	4969      	ldr	r1, [pc, #420]	; (800689c <OTM8009A_Init+0x338>)
 80066f8:	2000      	movs	r0, #0
 80066fa:	f7fa fda3 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80066fe:	498e      	ldr	r1, [pc, #568]	; (8006938 <OTM8009A_Init+0x3d4>)
 8006700:	200a      	movs	r0, #10
 8006702:	f7fa fd9f 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8006706:	498d      	ldr	r1, [pc, #564]	; (800693c <OTM8009A_Init+0x3d8>)
 8006708:	2000      	movs	r0, #0
 800670a:	f7fa fd9b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800670e:	498c      	ldr	r1, [pc, #560]	; (8006940 <OTM8009A_Init+0x3dc>)
 8006710:	200f      	movs	r0, #15
 8006712:	f7fa fd97 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8006716:	4980      	ldr	r1, [pc, #512]	; (8006918 <OTM8009A_Init+0x3b4>)
 8006718:	2000      	movs	r0, #0
 800671a:	f7fa fd93 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800671e:	4989      	ldr	r1, [pc, #548]	; (8006944 <OTM8009A_Init+0x3e0>)
 8006720:	200f      	movs	r0, #15
 8006722:	f7fa fd8f 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8006726:	497e      	ldr	r1, [pc, #504]	; (8006920 <OTM8009A_Init+0x3bc>)
 8006728:	2000      	movs	r0, #0
 800672a:	f7fa fd8b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800672e:	4986      	ldr	r1, [pc, #536]	; (8006948 <OTM8009A_Init+0x3e4>)
 8006730:	200a      	movs	r0, #10
 8006732:	f7fa fd87 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8006736:	497c      	ldr	r1, [pc, #496]	; (8006928 <OTM8009A_Init+0x3c4>)
 8006738:	2000      	movs	r0, #0
 800673a:	f7fa fd83 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800673e:	4983      	ldr	r1, [pc, #524]	; (800694c <OTM8009A_Init+0x3e8>)
 8006740:	200f      	movs	r0, #15
 8006742:	f7fa fd7f 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8006746:	497a      	ldr	r1, [pc, #488]	; (8006930 <OTM8009A_Init+0x3cc>)
 8006748:	2000      	movs	r0, #0
 800674a:	f7fa fd7b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800674e:	4980      	ldr	r1, [pc, #512]	; (8006950 <OTM8009A_Init+0x3ec>)
 8006750:	200f      	movs	r0, #15
 8006752:	f7fa fd77 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8006756:	497f      	ldr	r1, [pc, #508]	; (8006954 <OTM8009A_Init+0x3f0>)
 8006758:	2000      	movs	r0, #0
 800675a:	f7fa fd73 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800675e:	497e      	ldr	r1, [pc, #504]	; (8006958 <OTM8009A_Init+0x3f4>)
 8006760:	200a      	movs	r0, #10
 8006762:	f7fa fd6f 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8006766:	497d      	ldr	r1, [pc, #500]	; (800695c <OTM8009A_Init+0x3f8>)
 8006768:	2000      	movs	r0, #0
 800676a:	f7fa fd6b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800676e:	497c      	ldr	r1, [pc, #496]	; (8006960 <OTM8009A_Init+0x3fc>)
 8006770:	200a      	movs	r0, #10
 8006772:	f7fa fd67 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8006776:	4949      	ldr	r1, [pc, #292]	; (800689c <OTM8009A_Init+0x338>)
 8006778:	2000      	movs	r0, #0
 800677a:	f7fa fd63 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800677e:	4979      	ldr	r1, [pc, #484]	; (8006964 <OTM8009A_Init+0x400>)
 8006780:	200a      	movs	r0, #10
 8006782:	f7fa fd5f 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8006786:	496d      	ldr	r1, [pc, #436]	; (800693c <OTM8009A_Init+0x3d8>)
 8006788:	2000      	movs	r0, #0
 800678a:	f7fa fd5b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800678e:	4976      	ldr	r1, [pc, #472]	; (8006968 <OTM8009A_Init+0x404>)
 8006790:	200f      	movs	r0, #15
 8006792:	f7fa fd57 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8006796:	4960      	ldr	r1, [pc, #384]	; (8006918 <OTM8009A_Init+0x3b4>)
 8006798:	2000      	movs	r0, #0
 800679a:	f7fa fd53 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800679e:	4973      	ldr	r1, [pc, #460]	; (800696c <OTM8009A_Init+0x408>)
 80067a0:	200f      	movs	r0, #15
 80067a2:	f7fa fd4f 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80067a6:	495e      	ldr	r1, [pc, #376]	; (8006920 <OTM8009A_Init+0x3bc>)
 80067a8:	2000      	movs	r0, #0
 80067aa:	f7fa fd4b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80067ae:	4970      	ldr	r1, [pc, #448]	; (8006970 <OTM8009A_Init+0x40c>)
 80067b0:	200a      	movs	r0, #10
 80067b2:	f7fa fd47 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80067b6:	495c      	ldr	r1, [pc, #368]	; (8006928 <OTM8009A_Init+0x3c4>)
 80067b8:	2000      	movs	r0, #0
 80067ba:	f7fa fd43 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80067be:	496d      	ldr	r1, [pc, #436]	; (8006974 <OTM8009A_Init+0x410>)
 80067c0:	200f      	movs	r0, #15
 80067c2:	f7fa fd3f 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80067c6:	495a      	ldr	r1, [pc, #360]	; (8006930 <OTM8009A_Init+0x3cc>)
 80067c8:	2000      	movs	r0, #0
 80067ca:	f7fa fd3b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80067ce:	496a      	ldr	r1, [pc, #424]	; (8006978 <OTM8009A_Init+0x414>)
 80067d0:	200f      	movs	r0, #15
 80067d2:	f7fa fd37 	bl	8001244 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80067d6:	493d      	ldr	r1, [pc, #244]	; (80068cc <OTM8009A_Init+0x368>)
 80067d8:	2000      	movs	r0, #0
 80067da:	f7fa fd33 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80067de:	4967      	ldr	r1, [pc, #412]	; (800697c <OTM8009A_Init+0x418>)
 80067e0:	2000      	movs	r0, #0
 80067e2:	f7fa fd2f 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80067e6:	4966      	ldr	r1, [pc, #408]	; (8006980 <OTM8009A_Init+0x41c>)
 80067e8:	2000      	movs	r0, #0
 80067ea:	f7fa fd2b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80067ee:	4965      	ldr	r1, [pc, #404]	; (8006984 <OTM8009A_Init+0x420>)
 80067f0:	2000      	movs	r0, #0
 80067f2:	f7fa fd27 	bl	8001244 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80067f6:	4964      	ldr	r1, [pc, #400]	; (8006988 <OTM8009A_Init+0x424>)
 80067f8:	2000      	movs	r0, #0
 80067fa:	f7fa fd23 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80067fe:	4963      	ldr	r1, [pc, #396]	; (800698c <OTM8009A_Init+0x428>)
 8006800:	2000      	movs	r0, #0
 8006802:	f7fa fd1f 	bl	8001244 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8006806:	4923      	ldr	r1, [pc, #140]	; (8006894 <OTM8009A_Init+0x330>)
 8006808:	2000      	movs	r0, #0
 800680a:	f7fa fd1b 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800680e:	4960      	ldr	r1, [pc, #384]	; (8006990 <OTM8009A_Init+0x42c>)
 8006810:	2003      	movs	r0, #3
 8006812:	f7fa fd17 	bl	8001244 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8006816:	491f      	ldr	r1, [pc, #124]	; (8006894 <OTM8009A_Init+0x330>)
 8006818:	2000      	movs	r0, #0
 800681a:	f7fa fd13 	bl	8001244 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800681e:	491d      	ldr	r1, [pc, #116]	; (8006894 <OTM8009A_Init+0x330>)
 8006820:	2000      	movs	r0, #0
 8006822:	f7fa fd0f 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8006826:	495b      	ldr	r1, [pc, #364]	; (8006994 <OTM8009A_Init+0x430>)
 8006828:	2010      	movs	r0, #16
 800682a:	f7fa fd0b 	bl	8001244 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800682e:	4919      	ldr	r1, [pc, #100]	; (8006894 <OTM8009A_Init+0x330>)
 8006830:	2000      	movs	r0, #0
 8006832:	f7fa fd07 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8006836:	4958      	ldr	r1, [pc, #352]	; (8006998 <OTM8009A_Init+0x434>)
 8006838:	2010      	movs	r0, #16
 800683a:	f7fa fd03 	bl	8001244 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800683e:	2000      	movs	r0, #0
 8006840:	4956      	ldr	r1, [pc, #344]	; (800699c <OTM8009A_Init+0x438>)
 8006842:	f7fa fcff 	bl	8001244 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8006846:	2078      	movs	r0, #120	; 0x78
 8006848:	f7fa fcfa 	bl	8001240 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 800684c:	2c00      	cmp	r4, #0
 800684e:	f000 80c7 	beq.w	80069e0 <OTM8009A_Init+0x47c>
 8006852:	2c02      	cmp	r4, #2
 8006854:	d103      	bne.n	800685e <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8006856:	4952      	ldr	r1, [pc, #328]	; (80069a0 <OTM8009A_Init+0x43c>)
 8006858:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800685a:	f7fa fcf3 	bl	8001244 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800685e:	2d01      	cmp	r5, #1
 8006860:	d10b      	bne.n	800687a <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8006862:	4950      	ldr	r1, [pc, #320]	; (80069a4 <OTM8009A_Init+0x440>)
 8006864:	2000      	movs	r0, #0
 8006866:	f7fa fced 	bl	8001244 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800686a:	494f      	ldr	r1, [pc, #316]	; (80069a8 <OTM8009A_Init+0x444>)
 800686c:	2004      	movs	r0, #4
 800686e:	f7fa fce9 	bl	8001244 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8006872:	494e      	ldr	r1, [pc, #312]	; (80069ac <OTM8009A_Init+0x448>)
 8006874:	2004      	movs	r0, #4
 8006876:	f7fa fce5 	bl	8001244 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800687a:	494d      	ldr	r1, [pc, #308]	; (80069b0 <OTM8009A_Init+0x44c>)
 800687c:	2000      	movs	r0, #0
 800687e:	f7fa fce1 	bl	8001244 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8006882:	494c      	ldr	r1, [pc, #304]	; (80069b4 <OTM8009A_Init+0x450>)
 8006884:	2000      	movs	r0, #0
 8006886:	f7fa fcdd 	bl	8001244 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800688a:	494b      	ldr	r1, [pc, #300]	; (80069b8 <OTM8009A_Init+0x454>)
 800688c:	2000      	movs	r0, #0
 800688e:	f7fa fcd9 	bl	8001244 <DSI_IO_WriteCmd>
 8006892:	e093      	b.n	80069bc <OTM8009A_Init+0x458>
 8006894:	08028db8 	.word	0x08028db8
 8006898:	08028e1e 	.word	0x08028e1e
 800689c:	08028dce 	.word	0x08028dce
 80068a0:	08028ea4 	.word	0x08028ea4
 80068a4:	08028de4 	.word	0x08028de4
 80068a8:	08028dfa 	.word	0x08028dfa
 80068ac:	08028e10 	.word	0x08028e10
 80068b0:	08028e16 	.word	0x08028e16
 80068b4:	08028e18 	.word	0x08028e18
 80068b8:	08028e1a 	.word	0x08028e1a
 80068bc:	08028e1c 	.word	0x08028e1c
 80068c0:	08028dba 	.word	0x08028dba
 80068c4:	08028dbc 	.word	0x08028dbc
 80068c8:	08028dbe 	.word	0x08028dbe
 80068cc:	08028dc0 	.word	0x08028dc0
 80068d0:	08028dc2 	.word	0x08028dc2
 80068d4:	08028dc4 	.word	0x08028dc4
 80068d8:	08028dc6 	.word	0x08028dc6
 80068dc:	08028dc8 	.word	0x08028dc8
 80068e0:	08028dca 	.word	0x08028dca
 80068e4:	08028dcc 	.word	0x08028dcc
 80068e8:	08028f22 	.word	0x08028f22
 80068ec:	08028dd0 	.word	0x08028dd0
 80068f0:	08028dd2 	.word	0x08028dd2
 80068f4:	08028dd4 	.word	0x08028dd4
 80068f8:	08028dd6 	.word	0x08028dd6
 80068fc:	08028dd8 	.word	0x08028dd8
 8006900:	08028dda 	.word	0x08028dda
 8006904:	08028ddc 	.word	0x08028ddc
 8006908:	08028dde 	.word	0x08028dde
 800690c:	08028de0 	.word	0x08028de0
 8006910:	08028f25 	.word	0x08028f25
 8006914:	08028f28 	.word	0x08028f28
 8006918:	08028de2 	.word	0x08028de2
 800691c:	08028f2f 	.word	0x08028f2f
 8006920:	08028de6 	.word	0x08028de6
 8006924:	08028f3e 	.word	0x08028f3e
 8006928:	08028de8 	.word	0x08028de8
 800692c:	08028e22 	.word	0x08028e22
 8006930:	08028dea 	.word	0x08028dea
 8006934:	08028e08 	.word	0x08028e08
 8006938:	08028e2d 	.word	0x08028e2d
 800693c:	08028dec 	.word	0x08028dec
 8006940:	08028e38 	.word	0x08028e38
 8006944:	08028e48 	.word	0x08028e48
 8006948:	08028e58 	.word	0x08028e58
 800694c:	08028e63 	.word	0x08028e63
 8006950:	08028e73 	.word	0x08028e73
 8006954:	08028dee 	.word	0x08028dee
 8006958:	08028e83 	.word	0x08028e83
 800695c:	08028df0 	.word	0x08028df0
 8006960:	08028e8e 	.word	0x08028e8e
 8006964:	08028e99 	.word	0x08028e99
 8006968:	08028ea7 	.word	0x08028ea7
 800696c:	08028eb7 	.word	0x08028eb7
 8006970:	08028ec7 	.word	0x08028ec7
 8006974:	08028ed2 	.word	0x08028ed2
 8006978:	08028ee2 	.word	0x08028ee2
 800697c:	08028e0a 	.word	0x08028e0a
 8006980:	08028e0c 	.word	0x08028e0c
 8006984:	08028e0e 	.word	0x08028e0e
 8006988:	08028e12 	.word	0x08028e12
 800698c:	08028e14 	.word	0x08028e14
 8006990:	08028ef2 	.word	0x08028ef2
 8006994:	08028f00 	.word	0x08028f00
 8006998:	08028f11 	.word	0x08028f11
 800699c:	08028df2 	.word	0x08028df2
 80069a0:	08028df4 	.word	0x08028df4
 80069a4:	08028df8 	.word	0x08028df8
 80069a8:	08028ef6 	.word	0x08028ef6
 80069ac:	08028efb 	.word	0x08028efb
 80069b0:	08028dfc 	.word	0x08028dfc
 80069b4:	08028dfe 	.word	0x08028dfe
 80069b8:	08028e00 	.word	0x08028e00

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80069bc:	490a      	ldr	r1, [pc, #40]	; (80069e8 <OTM8009A_Init+0x484>)
 80069be:	2000      	movs	r0, #0
 80069c0:	f7fa fc40 	bl	8001244 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80069c4:	4909      	ldr	r1, [pc, #36]	; (80069ec <OTM8009A_Init+0x488>)
 80069c6:	2000      	movs	r0, #0
 80069c8:	f7fa fc3c 	bl	8001244 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80069cc:	4908      	ldr	r1, [pc, #32]	; (80069f0 <OTM8009A_Init+0x48c>)
 80069ce:	2000      	movs	r0, #0
 80069d0:	f7fa fc38 	bl	8001244 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80069d4:	4907      	ldr	r1, [pc, #28]	; (80069f4 <OTM8009A_Init+0x490>)
 80069d6:	2000      	movs	r0, #0
 80069d8:	f7fa fc34 	bl	8001244 <DSI_IO_WriteCmd>

  return 0;
}
 80069dc:	2000      	movs	r0, #0
 80069de:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80069e0:	4905      	ldr	r1, [pc, #20]	; (80069f8 <OTM8009A_Init+0x494>)
 80069e2:	4620      	mov	r0, r4
 80069e4:	e739      	b.n	800685a <OTM8009A_Init+0x2f6>
 80069e6:	bf00      	nop
 80069e8:	08028e02 	.word	0x08028e02
 80069ec:	08028e04 	.word	0x08028e04
 80069f0:	08028db8 	.word	0x08028db8
 80069f4:	08028e06 	.word	0x08028e06
 80069f8:	08028df6 	.word	0x08028df6

080069fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069fc:	490f      	ldr	r1, [pc, #60]	; (8006a3c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80069fe:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a00:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <SystemInit+0x44>)
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006a16:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006a1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a22:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006a24:	4a07      	ldr	r2, [pc, #28]	; (8006a44 <SystemInit+0x48>)
 8006a26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a2e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006a30:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a36:	608b      	str	r3, [r1, #8]
#endif
}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	e000ed00 	.word	0xe000ed00
 8006a40:	40023800 	.word	0x40023800
 8006a44:	24003010 	.word	0x24003010

08006a48 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a48:	4a07      	ldr	r2, [pc, #28]	; (8006a68 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a4a:	2003      	movs	r0, #3
{
 8006a4c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a54:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a56:	f000 fcd7 	bl	8007408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f7fd fdfe 	bl	800465c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a60:	f7fd fac2 	bl	8003fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006a64:	2000      	movs	r0, #0
 8006a66:	bd08      	pop	{r3, pc}
 8006a68:	40023c00 	.word	0x40023c00

08006a6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006a6c:	4a03      	ldr	r2, [pc, #12]	; (8006a7c <HAL_IncTick+0x10>)
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <HAL_IncTick+0x14>)
 8006a70:	6811      	ldr	r1, [r2, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	440b      	add	r3, r1
 8006a76:	6013      	str	r3, [r2, #0]
}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	2001287c 	.word	0x2001287c
 8006a80:	20000064 	.word	0x20000064

08006a84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006a84:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <HAL_GetTick+0x8>)
 8006a86:	6818      	ldr	r0, [r3, #0]
}
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	2001287c 	.word	0x2001287c

08006a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006a94:	f7ff fff6 	bl	8006a84 <HAL_GetTick>
 8006a98:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a9a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006a9c:	bf1e      	ittt	ne
 8006a9e:	4b04      	ldrne	r3, [pc, #16]	; (8006ab0 <HAL_Delay+0x20>)
 8006aa0:	781b      	ldrbne	r3, [r3, #0]
 8006aa2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006aa4:	f7ff ffee 	bl	8006a84 <HAL_GetTick>
 8006aa8:	1b43      	subs	r3, r0, r5
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	d3fa      	bcc.n	8006aa4 <HAL_Delay+0x14>
  {
  }
}
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	20000064 	.word	0x20000064

08006ab4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ab4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	f000 809b 	beq.w	8006bf4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006abe:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006ac0:	b925      	cbnz	r5, 8006acc <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ac2:	f7fd faaf 	bl	8004024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ac6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006ac8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ace:	06db      	lsls	r3, r3, #27
 8006ad0:	f100 808e 	bmi.w	8006bf0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ad6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ada:	f023 0302 	bic.w	r3, r3, #2
 8006ade:	f043 0302 	orr.w	r3, r3, #2
 8006ae2:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006ae4:	4b44      	ldr	r3, [pc, #272]	; (8006bf8 <HAL_ADC_Init+0x144>)
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006aec:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	6861      	ldr	r1, [r4, #4]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006af6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006af8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b08:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b0a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b12:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b18:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b1a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b28:	4934      	ldr	r1, [pc, #208]	; (8006bfc <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b2a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006b2e:	428a      	cmp	r2, r1
 8006b30:	d052      	beq.n	8006bd8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b32:	6899      	ldr	r1, [r3, #8]
 8006b34:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8006b38:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b3a:	6899      	ldr	r1, [r3, #8]
 8006b3c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b4e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b50:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b52:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b54:	f022 0202 	bic.w	r2, r2, #2
 8006b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8006b60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b62:	f894 2020 	ldrb.w	r2, [r4, #32]
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d03e      	beq.n	8006be8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b6a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b72:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b74:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b7c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006b84:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8006b86:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006b8a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b8c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006b90:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8006baa:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006bae:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8006bc0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8006bc2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8006bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006be6:	e7b2      	b.n	8006b4e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bee:	e7c9      	b.n	8006b84 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	e7ed      	b.n	8006bd0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	e7ee      	b.n	8006bd6 <HAL_ADC_Init+0x122>
 8006bf8:	40012300 	.word	0x40012300
 8006bfc:	0f000001 	.word	0x0f000001

08006c00 <HAL_ADC_ConvCpltCallback>:
 8006c00:	4770      	bx	lr

08006c02 <HAL_ADC_LevelOutOfWindowCallback>:
 8006c02:	4770      	bx	lr

08006c04 <HAL_ADC_ErrorCallback>:
 8006c04:	4770      	bx	lr

08006c06 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8006c06:	6803      	ldr	r3, [r0, #0]
{
 8006c08:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8006c0a:	681e      	ldr	r6, [r3, #0]
{
 8006c0c:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006c0e:	685d      	ldr	r5, [r3, #4]
  if(tmp1 && tmp2)
 8006c10:	07b2      	lsls	r2, r6, #30
 8006c12:	d52b      	bpl.n	8006c6c <HAL_ADC_IRQHandler+0x66>
 8006c14:	06a8      	lsls	r0, r5, #26
 8006c16:	d529      	bpl.n	8006c6c <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006c1a:	06d1      	lsls	r1, r2, #27
 8006c1c:	d403      	bmi.n	8006c26 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006c1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c24:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8006c2c:	d117      	bne.n	8006c5e <HAL_ADC_IRQHandler+0x58>
 8006c2e:	69a2      	ldr	r2, [r4, #24]
 8006c30:	b9aa      	cbnz	r2, 8006c5e <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c34:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8006c38:	d002      	beq.n	8006c40 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006c3a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c3c:	0552      	lsls	r2, r2, #21
 8006c3e:	d40e      	bmi.n	8006c5e <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	f022 0220 	bic.w	r2, r2, #32
 8006c46:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c4e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c52:	04d8      	lsls	r0, r3, #19
 8006c54:	d403      	bmi.n	8006c5e <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7ff ffce 	bl	8006c00 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	f06f 0212 	mvn.w	r2, #18
 8006c6a:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8006c6c:	0771      	lsls	r1, r6, #29
 8006c6e:	d533      	bpl.n	8006cd8 <HAL_ADC_IRQHandler+0xd2>
 8006c70:	062a      	lsls	r2, r5, #24
 8006c72:	d531      	bpl.n	8006cd8 <HAL_ADC_IRQHandler+0xd2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c76:	06db      	lsls	r3, r3, #27
 8006c78:	d403      	bmi.n	8006c82 <HAL_ADC_IRQHandler+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c80:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8006c8a:	d11e      	bne.n	8006cca <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006c8e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8006c92:	d002      	beq.n	8006c9a <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006c94:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006c96:	0550      	lsls	r0, r2, #21
 8006c98:	d417      	bmi.n	8006cca <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006c9a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006c9c:	0551      	lsls	r1, r2, #21
 8006c9e:	d414      	bmi.n	8006cca <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8006ca0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006ca2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8006ca6:	d110      	bne.n	8006cca <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8006ca8:	69a2      	ldr	r2, [r4, #24]
 8006caa:	b972      	cbnz	r2, 8006cca <HAL_ADC_IRQHandler+0xc4>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cb2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cba:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cbe:	05da      	lsls	r2, r3, #23
 8006cc0:	d403      	bmi.n	8006cca <HAL_ADC_IRQHandler+0xc4>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f8d8 	bl	8006e80 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	f06f 020c 	mvn.w	r2, #12
 8006cd6:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8006cd8:	07f3      	lsls	r3, r6, #31
 8006cda:	d510      	bpl.n	8006cfe <HAL_ADC_IRQHandler+0xf8>
 8006cdc:	0668      	lsls	r0, r5, #25
 8006cde:	d50e      	bpl.n	8006cfe <HAL_ADC_IRQHandler+0xf8>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	07d9      	lsls	r1, r3, #31
 8006ce6:	d50a      	bpl.n	8006cfe <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006ce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006cea:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf0:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006cf2:	f7ff ff86 	bl	8006c02 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f06f 0201 	mvn.w	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8006cfe:	06b2      	lsls	r2, r6, #26
 8006d00:	d50e      	bpl.n	8006d20 <HAL_ADC_IRQHandler+0x11a>
 8006d02:	016b      	lsls	r3, r5, #5
 8006d04:	d50c      	bpl.n	8006d20 <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d08:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 8006d0c:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d0e:	f043 0302 	orr.w	r3, r3, #2
 8006d12:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8006d18:	f7ff ff74 	bl	8006c04 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	601d      	str	r5, [r3, #0]
}
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d24 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8006d24:	2300      	movs	r3, #0
{
 8006d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8006d28:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8006d2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d079      	beq.n	8006e26 <HAL_ADC_ConfigChannel+0x102>
 8006d32:	2301      	movs	r3, #1
 8006d34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006d38:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d3a:	6803      	ldr	r3, [r0, #0]
 8006d3c:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006d3e:	2d09      	cmp	r5, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006d40:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d42:	eb06 0446 	add.w	r4, r6, r6, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006d46:	d93a      	bls.n	8006dbe <HAL_ADC_ConfigChannel+0x9a>
 8006d48:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8006d4c:	d037      	beq.n	8006dbe <HAL_ADC_ConfigChannel+0x9a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d4e:	3c1e      	subs	r4, #30
 8006d50:	f04f 0c07 	mov.w	ip, #7
 8006d54:	68df      	ldr	r7, [r3, #12]
 8006d56:	fa0c fc04 	lsl.w	ip, ip, r4
 8006d5a:	ea27 070c 	bic.w	r7, r7, ip
 8006d5e:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d60:	4f42      	ldr	r7, [pc, #264]	; (8006e6c <HAL_ADC_ConfigChannel+0x148>)
 8006d62:	42bd      	cmp	r5, r7
 8006d64:	d126      	bne.n	8006db4 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006d66:	68dc      	ldr	r4, [r3, #12]
 8006d68:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d6c:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8006d6e:	6849      	ldr	r1, [r1, #4]
 8006d70:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d72:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 8006d76:	d830      	bhi.n	8006dda <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d78:	3a05      	subs	r2, #5
 8006d7a:	241f      	movs	r4, #31
 8006d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d7e:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006d80:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d84:	ea21 0104 	bic.w	r1, r1, r4
 8006d88:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006d90:	4a37      	ldr	r2, [pc, #220]	; (8006e70 <HAL_ADC_ConfigChannel+0x14c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d108      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x84>
 8006d96:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8006d9a:	d146      	bne.n	8006e2a <HAL_ADC_ConfigChannel+0x106>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006d9c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8006da0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006da4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8006da8:	2300      	movs	r3, #0
 8006daa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006dae:	4618      	mov	r0, r3
}
 8006db0:	b003      	add	sp, #12
 8006db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006db4:	68df      	ldr	r7, [r3, #12]
 8006db6:	fa02 f404 	lsl.w	r4, r2, r4
 8006dba:	433c      	orrs	r4, r7
 8006dbc:	e7d6      	b.n	8006d6c <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006dbe:	f04f 0c07 	mov.w	ip, #7
 8006dc2:	691f      	ldr	r7, [r3, #16]
 8006dc4:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006dc8:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006dcc:	ea27 070c 	bic.w	r7, r7, ip
 8006dd0:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006dd2:	691f      	ldr	r7, [r3, #16]
 8006dd4:	433c      	orrs	r4, r7
 8006dd6:	611c      	str	r4, [r3, #16]
 8006dd8:	e7c9      	b.n	8006d6e <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8006dda:	290c      	cmp	r1, #12
 8006ddc:	f04f 011f 	mov.w	r1, #31
 8006de0:	d80b      	bhi.n	8006dfa <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006de2:	3a23      	subs	r2, #35	; 0x23
 8006de4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006de6:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006de8:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006dec:	ea24 0101 	bic.w	r1, r4, r1
 8006df0:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006df4:	430a      	orrs	r2, r1
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
 8006df8:	e7ca      	b.n	8006d90 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006dfa:	3a41      	subs	r2, #65	; 0x41
 8006dfc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006dfe:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e00:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e04:	ea24 0101 	bic.w	r1, r4, r1
 8006e08:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e10:	e7be      	b.n	8006d90 <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006e12:	4b18      	ldr	r3, [pc, #96]	; (8006e74 <HAL_ADC_ConfigChannel+0x150>)
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006e1a:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006e22:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e24:	e7c0      	b.n	8006da8 <HAL_ADC_ConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8006e26:	2002      	movs	r0, #2
 8006e28:	e7c2      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e2a:	2d12      	cmp	r5, #18
 8006e2c:	d0f1      	beq.n	8006e12 <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <HAL_ADC_ConfigChannel+0x148>)
 8006e30:	429d      	cmp	r5, r3
 8006e32:	d001      	beq.n	8006e38 <HAL_ADC_ConfigChannel+0x114>
 8006e34:	2d11      	cmp	r5, #17
 8006e36:	d1b7      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x84>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <HAL_ADC_ConfigChannel+0x150>)
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8006e40:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006e48:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e4a:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <HAL_ADC_ConfigChannel+0x148>)
 8006e4c:	429d      	cmp	r5, r3
 8006e4e:	d1ab      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x84>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_ADC_ConfigChannel+0x154>)
 8006e52:	4a0a      	ldr	r2, [pc, #40]	; (8006e7c <HAL_ADC_ConfigChannel+0x158>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e5a:	220a      	movs	r2, #10
 8006e5c:	4353      	muls	r3, r2
        counter--;
 8006e5e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8006e60:	9b01      	ldr	r3, [sp, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0a0      	beq.n	8006da8 <HAL_ADC_ConfigChannel+0x84>
        counter--;
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	e7f8      	b.n	8006e5e <HAL_ADC_ConfigChannel+0x13a>
 8006e6c:	10000012 	.word	0x10000012
 8006e70:	40012000 	.word	0x40012000
 8006e74:	40012300 	.word	0x40012300
 8006e78:	20000060 	.word	0x20000060
 8006e7c:	000f4240 	.word	0x000f4240

08006e80 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006e80:	4770      	bx	lr

08006e82 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e82:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e84:	4604      	mov	r4, r0
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d06e      	beq.n	8006f68 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e8a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006e8e:	b90b      	cbnz	r3, 8006e94 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e90:	f7fd f8fe 	bl	8004090 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	6813      	ldr	r3, [r2, #0]
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e9e:	f7ff fdf1 	bl	8006a84 <HAL_GetTick>
 8006ea2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	07d1      	lsls	r1, r2, #31
 8006eaa:	d551      	bpl.n	8006f50 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f022 0202 	bic.w	r2, r2, #2
 8006eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006eb4:	f7ff fde6 	bl	8006a84 <HAL_GetTick>
 8006eb8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	0792      	lsls	r2, r2, #30
 8006ec0:	d454      	bmi.n	8006f6c <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ec2:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006ec4:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ec6:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	bf0c      	ite	eq
 8006ecc:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ed0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8006ed4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8006ed6:	7e62      	ldrb	r2, [r4, #25]
 8006ed8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	bf0c      	ite	eq
 8006ede:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006ee2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8006ee6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006ee8:	7ea2      	ldrb	r2, [r4, #26]
 8006eea:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	bf0c      	ite	eq
 8006ef0:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006ef4:	f022 0220 	bicne.w	r2, r2, #32
 8006ef8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006efa:	7ee2      	ldrb	r2, [r4, #27]
 8006efc:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	bf0c      	ite	eq
 8006f02:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f06:	f042 0210 	orrne.w	r2, r2, #16
 8006f0a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006f0c:	7f22      	ldrb	r2, [r4, #28]
 8006f0e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	bf0c      	ite	eq
 8006f14:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f18:	f022 0208 	bicne.w	r2, r2, #8
 8006f1c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006f1e:	7f62      	ldrb	r2, [r4, #29]
 8006f20:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	bf0c      	ite	eq
 8006f26:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006f2a:	f022 0204 	bicne.w	r2, r2, #4
 8006f2e:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006f30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	6921      	ldr	r1, [r4, #16]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	6961      	ldr	r1, [r4, #20]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	6861      	ldr	r1, [r4, #4]
 8006f40:	3901      	subs	r1, #1
 8006f42:	430a      	orrs	r2, r1
 8006f44:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006f46:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006f48:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8006f4a:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006f50:	f7ff fd98 	bl	8006a84 <HAL_GetTick>
 8006f54:	1b40      	subs	r0, r0, r5
 8006f56:	280a      	cmp	r0, #10
 8006f58:	d9a4      	bls.n	8006ea4 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f60:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8006f62:	2305      	movs	r3, #5
 8006f64:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8006f68:	2001      	movs	r0, #1
 8006f6a:	e7f0      	b.n	8006f4e <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006f6c:	f7ff fd8a 	bl	8006a84 <HAL_GetTick>
 8006f70:	1b40      	subs	r0, r0, r5
 8006f72:	280a      	cmp	r0, #10
 8006f74:	d9a1      	bls.n	8006eba <HAL_CAN_Init+0x38>
 8006f76:	e7f0      	b.n	8006f5a <HAL_CAN_Init+0xd8>

08006f78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006f78:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006f7a:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d877      	bhi.n	8007074 <HAL_CAN_ConfigFilter+0xfc>
  CAN_TypeDef *can_ip = hcan->Instance;
 8006f84:	6803      	ldr	r3, [r0, #0]
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8006f86:	4a3e      	ldr	r2, [pc, #248]	; (8007080 <HAL_CAN_ConfigFilter+0x108>)
 8006f88:	483e      	ldr	r0, [pc, #248]	; (8007084 <HAL_CAN_ConfigFilter+0x10c>)
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	bf0c      	ite	eq
 8006f8e:	4613      	moveq	r3, r2
 8006f90:	4603      	movne	r3, r0
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006f92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8006f96:	4283      	cmp	r3, r0
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006f98:	f042 0201 	orr.w	r2, r2, #1
 8006f9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    if (can_ip == CAN1)
 8006fa0:	d10c      	bne.n	8006fbc <HAL_CAN_ConfigFilter+0x44>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006fa2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006fa6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8006faa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006fae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006fb2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8006fb4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006fb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006fbc:	694a      	ldr	r2, [r1, #20]
 8006fbe:	2401      	movs	r4, #1

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006fc0:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006fc4:	f002 001f 	and.w	r0, r2, #31
 8006fc8:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006fcc:	ea25 0500 	bic.w	r5, r5, r0
 8006fd0:	43c4      	mvns	r4, r0
 8006fd2:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006fd6:	69cd      	ldr	r5, [r1, #28]
 8006fd8:	bb85      	cbnz	r5, 800703c <HAL_CAN_ConfigFilter+0xc4>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006fda:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8006fde:	eb03 02c2 	add.w	r2, r3, r2, lsl #3

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006fe2:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006fe4:	4025      	ands	r5, r4
 8006fe6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006fea:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006fec:	ea45 4506 	orr.w	r5, r5, r6, lsl #16

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006ff0:	688e      	ldr	r6, [r1, #8]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ff2:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006ff6:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006ff8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006ffc:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007000:	698a      	ldr	r2, [r1, #24]
 8007002:	bb6a      	cbnz	r2, 8007060 <HAL_CAN_ConfigFilter+0xe8>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007008:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800700a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800700e:	690a      	ldr	r2, [r1, #16]
 8007010:	bb52      	cbnz	r2, 8007068 <HAL_CAN_ConfigFilter+0xf0>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007012:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007016:	4014      	ands	r4, r2
 8007018:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800701c:	6a0a      	ldr	r2, [r1, #32]
 800701e:	2a01      	cmp	r2, #1
 8007020:	d104      	bne.n	800702c <HAL_CAN_ConfigFilter+0xb4>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007022:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007026:	4310      	orrs	r0, r2
 8007028:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800702c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007030:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007032:	f022 0201 	bic.w	r2, r2, #1
 8007036:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800703a:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800703c:	2d01      	cmp	r5, #1
 800703e:	d1df      	bne.n	8007000 <HAL_CAN_ConfigFilter+0x88>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007040:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8007044:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007048:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800704a:	4305      	orrs	r5, r0
 800704c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007050:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007052:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007056:	688e      	ldr	r6, [r1, #8]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007058:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800705c:	898d      	ldrh	r5, [r1, #12]
 800705e:	e7cb      	b.n	8006ff8 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007064:	4302      	orrs	r2, r0
 8007066:	e7d0      	b.n	800700a <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007068:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800706c:	4302      	orrs	r2, r0
 800706e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007072:	e7d3      	b.n	800701c <HAL_CAN_ConfigFilter+0xa4>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007074:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800707a:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800707c:	2001      	movs	r0, #1
 800707e:	e7dc      	b.n	800703a <HAL_CAN_ConfigFilter+0xc2>
 8007080:	40003400 	.word	0x40003400
 8007084:	40006400 	.word	0x40006400

08007088 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007088:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800708a:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800708e:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8007090:	2b01      	cmp	r3, #1
 8007092:	b2dd      	uxtb	r5, r3
 8007094:	d120      	bne.n	80070d8 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007096:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007098:	2302      	movs	r3, #2
 800709a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800709e:	6813      	ldr	r3, [r2, #0]
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070a6:	f7ff fced 	bl	8006a84 <HAL_GetTick>
 80070aa:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f013 0301 	ands.w	r3, r3, #1
 80070b4:	d102      	bne.n	80070bc <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 80070b6:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80070b8:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80070ba:	e00b      	b.n	80070d4 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80070bc:	f7ff fce2 	bl	8006a84 <HAL_GetTick>
 80070c0:	1b80      	subs	r0, r0, r6
 80070c2:	280a      	cmp	r0, #10
 80070c4:	d9f2      	bls.n	80070ac <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80070c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070cc:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80070ce:	2305      	movs	r3, #5
 80070d0:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80070d4:	4628      	mov	r0, r5
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80070d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80070da:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80070dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070e0:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80070e2:	e7f7      	b.n	80070d4 <HAL_CAN_Start+0x4c>

080070e4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80070e6:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80070ea:	3c01      	subs	r4, #1
 80070ec:	2c01      	cmp	r4, #1
 80070ee:	d86c      	bhi.n	80071ca <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80070f0:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80070f2:	b941      	cbnz	r1, 8007106 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80070f4:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80070f6:	07a4      	lsls	r4, r4, #30
 80070f8:	d107      	bne.n	800710a <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80070fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80070fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007100:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8007102:	2001      	movs	r0, #1
 8007104:	e056      	b.n	80071b4 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007106:	6934      	ldr	r4, [r6, #16]
 8007108:	e7f5      	b.n	80070f6 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800710a:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800710e:	010c      	lsls	r4, r1, #4
 8007110:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8007114:	f007 0704 	and.w	r7, r7, #4
 8007118:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800711a:	2f00      	cmp	r7, #0
 800711c:	d14b      	bne.n	80071b6 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800711e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8007122:	0d7f      	lsrs	r7, r7, #21
 8007124:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007126:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800712a:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800712c:	f007 0702 	and.w	r7, r7, #2
 8007130:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007132:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8007136:	f007 070f 	and.w	r7, r7, #15
 800713a:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800713c:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007140:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007144:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007148:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800714a:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800714c:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800714e:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8007152:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007154:	6802      	ldr	r2, [r0, #0]
 8007156:	4422      	add	r2, r4
 8007158:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800715c:	0a12      	lsrs	r2, r2, #8
 800715e:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007160:	6802      	ldr	r2, [r0, #0]
 8007162:	4422      	add	r2, r4
 8007164:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8007168:	0c12      	lsrs	r2, r2, #16
 800716a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800716c:	6802      	ldr	r2, [r0, #0]
 800716e:	4422      	add	r2, r4
 8007170:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8007174:	0e12      	lsrs	r2, r2, #24
 8007176:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007178:	6802      	ldr	r2, [r0, #0]
 800717a:	4422      	add	r2, r4
 800717c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8007180:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007182:	6802      	ldr	r2, [r0, #0]
 8007184:	4422      	add	r2, r4
 8007186:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800718a:	0a12      	lsrs	r2, r2, #8
 800718c:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800718e:	6802      	ldr	r2, [r0, #0]
 8007190:	4422      	add	r2, r4
 8007192:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8007196:	0c12      	lsrs	r2, r2, #16
 8007198:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800719a:	6802      	ldr	r2, [r0, #0]
 800719c:	4422      	add	r2, r4
 800719e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80071a2:	0e12      	lsrs	r2, r2, #24
 80071a4:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80071a6:	6803      	ldr	r3, [r0, #0]
 80071a8:	b951      	cbnz	r1, 80071c0 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	f042 0220 	orr.w	r2, r2, #32
 80071b0:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80071b2:	2000      	movs	r0, #0
  }
}
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80071b6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80071ba:	08ff      	lsrs	r7, r7, #3
 80071bc:	6057      	str	r7, [r2, #4]
 80071be:	e7b2      	b.n	8007126 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	f042 0220 	orr.w	r2, r2, #32
 80071c6:	611a      	str	r2, [r3, #16]
 80071c8:	e7f3      	b.n	80071b2 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80071cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071d0:	e796      	b.n	8007100 <HAL_CAN_GetRxMessage+0x1c>

080071d2 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80071d2:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80071d6:	3b01      	subs	r3, #1
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d805      	bhi.n	80071e8 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80071dc:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 80071de:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80071e0:	6953      	ldr	r3, [r2, #20]
 80071e2:	4319      	orrs	r1, r3
 80071e4:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80071e6:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80071ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071ee:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80071f0:	2001      	movs	r0, #1
  }
}
 80071f2:	4770      	bx	lr

080071f4 <HAL_CAN_TxMailbox0CompleteCallback>:
 80071f4:	4770      	bx	lr

080071f6 <HAL_CAN_TxMailbox1CompleteCallback>:
 80071f6:	4770      	bx	lr

080071f8 <HAL_CAN_TxMailbox2CompleteCallback>:
 80071f8:	4770      	bx	lr

080071fa <HAL_CAN_TxMailbox0AbortCallback>:
 80071fa:	4770      	bx	lr

080071fc <HAL_CAN_TxMailbox1AbortCallback>:
 80071fc:	4770      	bx	lr

080071fe <HAL_CAN_TxMailbox2AbortCallback>:
 80071fe:	4770      	bx	lr

08007200 <HAL_CAN_RxFifo0FullCallback>:
 8007200:	4770      	bx	lr

08007202 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8007202:	4770      	bx	lr

08007204 <HAL_CAN_RxFifo1FullCallback>:
 8007204:	4770      	bx	lr

08007206 <HAL_CAN_SleepCallback>:
 8007206:	4770      	bx	lr

08007208 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8007208:	4770      	bx	lr

0800720a <HAL_CAN_ErrorCallback>:
 800720a:	4770      	bx	lr

0800720c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800720c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007210:	6803      	ldr	r3, [r0, #0]
{
 8007212:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007214:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007216:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800721a:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800721e:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007220:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007224:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007228:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800722c:	d022      	beq.n	8007274 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800722e:	f017 0401 	ands.w	r4, r7, #1
 8007232:	d007      	beq.n	8007244 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007234:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007236:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007238:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800723a:	f140 80a5 	bpl.w	8007388 <HAL_CAN_IRQHandler+0x17c>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800723e:	2400      	movs	r4, #0
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007240:	f7ff ffd8 	bl	80071f4 <HAL_CAN_TxMailbox0CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007244:	05fb      	lsls	r3, r7, #23
 8007246:	d509      	bpl.n	800725c <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800724e:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007250:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007252:	f140 80a7 	bpl.w	80073a4 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007256:	4628      	mov	r0, r5
 8007258:	f7ff ffcd 	bl	80071f6 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800725c:	03fb      	lsls	r3, r7, #15
 800725e:	d509      	bpl.n	8007274 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007266:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007268:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800726a:	f140 80a9 	bpl.w	80073c0 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800726e:	4628      	mov	r0, r5
 8007270:	f7ff ffc2 	bl	80071f8 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007274:	0733      	lsls	r3, r6, #28
 8007276:	d507      	bpl.n	8007288 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007278:	f01b 0f10 	tst.w	fp, #16
 800727c:	d004      	beq.n	8007288 <HAL_CAN_IRQHandler+0x7c>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007282:	f444 7400 	orr.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007286:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007288:	0777      	lsls	r7, r6, #29
 800728a:	d508      	bpl.n	800729e <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800728c:	f01b 0f08 	tst.w	fp, #8
 8007290:	d005      	beq.n	800729e <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007292:	682b      	ldr	r3, [r5, #0]
 8007294:	2208      	movs	r2, #8
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007296:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007298:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800729a:	f7ff ffb1 	bl	8007200 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800729e:	07b0      	lsls	r0, r6, #30
 80072a0:	d506      	bpl.n	80072b0 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	0799      	lsls	r1, r3, #30
 80072a8:	d002      	beq.n	80072b0 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80072aa:	4628      	mov	r0, r5
 80072ac:	f7fc fe64 	bl	8003f78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80072b0:	0672      	lsls	r2, r6, #25
 80072b2:	d507      	bpl.n	80072c4 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80072b4:	f01a 0f10 	tst.w	sl, #16
 80072b8:	d004      	beq.n	80072c4 <HAL_CAN_IRQHandler+0xb8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80072ba:	682b      	ldr	r3, [r5, #0]
 80072bc:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80072be:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80072c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80072c4:	06b3      	lsls	r3, r6, #26
 80072c6:	d508      	bpl.n	80072da <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80072c8:	f01a 0f08 	tst.w	sl, #8
 80072cc:	d005      	beq.n	80072da <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80072ce:	682b      	ldr	r3, [r5, #0]
 80072d0:	2208      	movs	r2, #8
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80072d2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80072d4:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80072d6:	f7ff ff95 	bl	8007204 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80072da:	06f7      	lsls	r7, r6, #27
 80072dc:	d506      	bpl.n	80072ec <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	0798      	lsls	r0, r3, #30
 80072e4:	d002      	beq.n	80072ec <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80072e6:	4628      	mov	r0, r5
 80072e8:	f7ff ff8b 	bl	8007202 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80072ec:	03b1      	lsls	r1, r6, #14
 80072ee:	d508      	bpl.n	8007302 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80072f0:	f019 0f10 	tst.w	r9, #16
 80072f4:	d005      	beq.n	8007302 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80072f6:	682b      	ldr	r3, [r5, #0]
 80072f8:	2210      	movs	r2, #16
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80072fa:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80072fc:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80072fe:	f7ff ff82 	bl	8007206 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007302:	03f2      	lsls	r2, r6, #15
 8007304:	d508      	bpl.n	8007318 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007306:	f019 0f08 	tst.w	r9, #8
 800730a:	d005      	beq.n	8007318 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	2208      	movs	r2, #8
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007310:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007312:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007314:	f7ff ff78 	bl	8007208 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007318:	0433      	lsls	r3, r6, #16
 800731a:	d52c      	bpl.n	8007376 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800731c:	f019 0f04 	tst.w	r9, #4
 8007320:	682a      	ldr	r2, [r5, #0]
 8007322:	d026      	beq.n	8007372 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007324:	05f7      	lsls	r7, r6, #23
 8007326:	d504      	bpl.n	8007332 <HAL_CAN_IRQHandler+0x126>
 8007328:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800732c:	bf18      	it	ne
 800732e:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007332:	05b0      	lsls	r0, r6, #22
 8007334:	d504      	bpl.n	8007340 <HAL_CAN_IRQHandler+0x134>
 8007336:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800733a:	bf18      	it	ne
 800733c:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007340:	0571      	lsls	r1, r6, #21
 8007342:	d504      	bpl.n	800734e <HAL_CAN_IRQHandler+0x142>
 8007344:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007348:	bf18      	it	ne
 800734a:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800734e:	0533      	lsls	r3, r6, #20
 8007350:	d50f      	bpl.n	8007372 <HAL_CAN_IRQHandler+0x166>
 8007352:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8007356:	d00c      	beq.n	8007372 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d04f      	beq.n	80073fc <HAL_CAN_IRQHandler+0x1f0>
 800735c:	d83e      	bhi.n	80073dc <HAL_CAN_IRQHandler+0x1d0>
 800735e:	2b20      	cmp	r3, #32
 8007360:	d046      	beq.n	80073f0 <HAL_CAN_IRQHandler+0x1e4>
 8007362:	2b30      	cmp	r3, #48	; 0x30
 8007364:	d047      	beq.n	80073f6 <HAL_CAN_IRQHandler+0x1ea>
 8007366:	2b10      	cmp	r3, #16
 8007368:	d03f      	beq.n	80073ea <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800736a:	6993      	ldr	r3, [r2, #24]
 800736c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007370:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007372:	2304      	movs	r3, #4
 8007374:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007376:	b12c      	cbz	r4, 8007384 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007378:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800737a:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800737c:	431c      	orrs	r4, r3
 800737e:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8007380:	f7ff ff43 	bl	800720a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007388:	077a      	lsls	r2, r7, #29
 800738a:	d405      	bmi.n	8007398 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800738c:	f017 0408 	ands.w	r4, r7, #8
 8007390:	d105      	bne.n	800739e <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007392:	f7ff ff32 	bl	80071fa <HAL_CAN_TxMailbox0AbortCallback>
 8007396:	e755      	b.n	8007244 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007398:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800739c:	e752      	b.n	8007244 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800739e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80073a2:	e74f      	b.n	8007244 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80073a4:	0579      	lsls	r1, r7, #21
 80073a6:	d502      	bpl.n	80073ae <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80073a8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80073ac:	e756      	b.n	800725c <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80073ae:	053a      	lsls	r2, r7, #20
 80073b0:	d502      	bpl.n	80073b8 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80073b2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80073b6:	e751      	b.n	800725c <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7ff ff1f 	bl	80071fc <HAL_CAN_TxMailbox1AbortCallback>
 80073be:	e74d      	b.n	800725c <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80073c0:	0379      	lsls	r1, r7, #13
 80073c2:	d502      	bpl.n	80073ca <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80073c4:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80073c8:	e754      	b.n	8007274 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80073ca:	033a      	lsls	r2, r7, #12
 80073cc:	d502      	bpl.n	80073d4 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80073ce:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 80073d2:	e74f      	b.n	8007274 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80073d4:	4628      	mov	r0, r5
 80073d6:	f7ff ff12 	bl	80071fe <HAL_CAN_TxMailbox2AbortCallback>
 80073da:	e74b      	b.n	8007274 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 80073dc:	2b50      	cmp	r3, #80	; 0x50
 80073de:	d010      	beq.n	8007402 <HAL_CAN_IRQHandler+0x1f6>
 80073e0:	2b60      	cmp	r3, #96	; 0x60
 80073e2:	d1c2      	bne.n	800736a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80073e4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80073e8:	e7bf      	b.n	800736a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 80073ea:	f044 0408 	orr.w	r4, r4, #8
            break;
 80073ee:	e7bc      	b.n	800736a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80073f0:	f044 0410 	orr.w	r4, r4, #16
            break;
 80073f4:	e7b9      	b.n	800736a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80073f6:	f044 0420 	orr.w	r4, r4, #32
            break;
 80073fa:	e7b6      	b.n	800736a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 80073fc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8007400:	e7b3      	b.n	800736a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8007402:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8007406:	e7b0      	b.n	800736a <HAL_CAN_IRQHandler+0x15e>

08007408 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007408:	4907      	ldr	r1, [pc, #28]	; (8007428 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800740a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800740c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800740e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007412:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007416:	0412      	lsls	r2, r2, #16
 8007418:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800741a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800741c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007424:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007426:	4770      	bx	lr
 8007428:	e000ed00 	.word	0xe000ed00

0800742c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800742c:	4b16      	ldr	r3, [pc, #88]	; (8007488 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800742e:	b530      	push	{r4, r5, lr}
 8007430:	68dc      	ldr	r4, [r3, #12]
 8007432:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007436:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800743a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800743c:	2d04      	cmp	r5, #4
 800743e:	bf28      	it	cs
 8007440:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007442:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007444:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007448:	bf8c      	ite	hi
 800744a:	3c03      	subhi	r4, #3
 800744c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800744e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8007452:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007454:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007458:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800745c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007460:	fa01 f104 	lsl.w	r1, r1, r4
 8007464:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007468:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800746c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800746e:	db06      	blt.n	800747e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007470:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007474:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007478:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800747c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800747e:	f000 000f 	and.w	r0, r0, #15
 8007482:	4a02      	ldr	r2, [pc, #8]	; (800748c <HAL_NVIC_SetPriority+0x60>)
 8007484:	5413      	strb	r3, [r2, r0]
 8007486:	e7f9      	b.n	800747c <HAL_NVIC_SetPriority+0x50>
 8007488:	e000ed00 	.word	0xe000ed00
 800748c:	e000ed14 	.word	0xe000ed14

08007490 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007490:	2800      	cmp	r0, #0
 8007492:	db08      	blt.n	80074a6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007494:	0942      	lsrs	r2, r0, #5
 8007496:	2301      	movs	r3, #1
 8007498:	f000 001f 	and.w	r0, r0, #31
 800749c:	fa03 f000 	lsl.w	r0, r3, r0
 80074a0:	4b01      	ldr	r3, [pc, #4]	; (80074a8 <HAL_NVIC_EnableIRQ+0x18>)
 80074a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80074a6:	4770      	bx	lr
 80074a8:	e000e100 	.word	0xe000e100

080074ac <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80074ac:	2800      	cmp	r0, #0
 80074ae:	db0d      	blt.n	80074cc <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074b0:	0943      	lsrs	r3, r0, #5
 80074b2:	2201      	movs	r2, #1
 80074b4:	f000 001f 	and.w	r0, r0, #31
 80074b8:	3320      	adds	r3, #32
 80074ba:	fa02 f000 	lsl.w	r0, r2, r0
 80074be:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <HAL_NVIC_DisableIRQ+0x24>)
 80074c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80074c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80074c8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	e000e100 	.word	0xe000e100

080074d4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80074d4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80074d8:	4b04      	ldr	r3, [pc, #16]	; (80074ec <HAL_MPU_Disable+0x18>)
 80074da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80074e0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	e000ed00 	.word	0xe000ed00

080074f0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80074f0:	4b06      	ldr	r3, [pc, #24]	; (800750c <HAL_MPU_Enable+0x1c>)
 80074f2:	f040 0001 	orr.w	r0, r0, #1
 80074f6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80074fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007500:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007506:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800750a:	4770      	bx	lr
 800750c:	e000ed00 	.word	0xe000ed00

08007510 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007510:	7843      	ldrb	r3, [r0, #1]
 8007512:	4a14      	ldr	r2, [pc, #80]	; (8007564 <HAL_MPU_ConfigRegion+0x54>)
{
 8007514:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8007516:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 800751a:	7801      	ldrb	r1, [r0, #0]
 800751c:	b1e9      	cbz	r1, 800755a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800751e:	6843      	ldr	r3, [r0, #4]
 8007520:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007524:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007526:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007528:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800752a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800752e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007530:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007532:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007536:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007538:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800753c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800753e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007542:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007544:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007548:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800754a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800754e:	7a01      	ldrb	r1, [r0, #8]
 8007550:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007554:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8007558:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800755a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800755e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8007562:	e7f9      	b.n	8007558 <HAL_MPU_ConfigRegion+0x48>
 8007564:	e000ed00 	.word	0xe000ed00

08007568 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007568:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800756a:	4604      	mov	r4, r0
 800756c:	b908      	cbnz	r0, 8007572 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800756e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8007570:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007572:	7f43      	ldrb	r3, [r0, #29]
 8007574:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007578:	b913      	cbnz	r3, 8007580 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800757a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800757c:	f7fc fdc4 	bl	8004108 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007580:	2302      	movs	r3, #2
 8007582:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007584:	7923      	ldrb	r3, [r4, #4]
 8007586:	b9e3      	cbnz	r3, 80075c2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	4a13      	ldr	r2, [pc, #76]	; (80075d8 <HAL_CRC_Init+0x70>)
 800758c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	f022 0218 	bic.w	r2, r2, #24
 8007594:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007596:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007598:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800759a:	b9d2      	cbnz	r2, 80075d2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800759c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80075a0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80075a2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	6961      	ldr	r1, [r4, #20]
 80075a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075ac:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80075ae:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80075b0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075b8:	430a      	orrs	r2, r1
 80075ba:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80075bc:	2301      	movs	r3, #1
 80075be:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80075c0:	e7d6      	b.n	8007570 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80075c2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 f808 	bl	80075dc <HAL_CRCEx_Polynomial_Set>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d0e2      	beq.n	8007596 <HAL_CRC_Init+0x2e>
 80075d0:	e7cd      	b.n	800756e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80075d2:	6922      	ldr	r2, [r4, #16]
 80075d4:	e7e4      	b.n	80075a0 <HAL_CRC_Init+0x38>
 80075d6:	bf00      	nop
 80075d8:	04c11db7 	.word	0x04c11db7

080075dc <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80075dc:	231f      	movs	r3, #31
{
 80075de:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80075e0:	3b01      	subs	r3, #1
 80075e2:	d31c      	bcc.n	800761e <HAL_CRCEx_Polynomial_Set+0x42>
 80075e4:	fa21 f403 	lsr.w	r4, r1, r3
 80075e8:	07e4      	lsls	r4, r4, #31
 80075ea:	d5f9      	bpl.n	80075e0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80075ec:	2a10      	cmp	r2, #16
 80075ee:	d012      	beq.n	8007616 <HAL_CRCEx_Polynomial_Set+0x3a>
 80075f0:	d804      	bhi.n	80075fc <HAL_CRCEx_Polynomial_Set+0x20>
 80075f2:	b13a      	cbz	r2, 8007604 <HAL_CRCEx_Polynomial_Set+0x28>
 80075f4:	2a08      	cmp	r2, #8
 80075f6:	d010      	beq.n	800761a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80075f8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80075fa:	e00b      	b.n	8007614 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80075fc:	2a18      	cmp	r2, #24
 80075fe:	d1fb      	bne.n	80075f8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8007600:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8007602:	d8f9      	bhi.n	80075f8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007604:	6800      	ldr	r0, [r0, #0]
 8007606:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007608:	6883      	ldr	r3, [r0, #8]
 800760a:	f023 0318 	bic.w	r3, r3, #24
 800760e:	431a      	orrs	r2, r3
 8007610:	6082      	str	r2, [r0, #8]
 8007612:	2000      	movs	r0, #0
}
 8007614:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8007616:	2b07      	cmp	r3, #7
 8007618:	e7f3      	b.n	8007602 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800761a:	2b0f      	cmp	r3, #15
 800761c:	e7f1      	b.n	8007602 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800761e:	2a00      	cmp	r2, #0
 8007620:	d1ea      	bne.n	80075f8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8007622:	e7ef      	b.n	8007604 <HAL_CRCEx_Polynomial_Set+0x28>

08007624 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007624:	6803      	ldr	r3, [r0, #0]
{
 8007626:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007628:	2018      	movs	r0, #24
 800762a:	b2d9      	uxtb	r1, r3
 800762c:	3910      	subs	r1, #16
 800762e:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8007632:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007634:	4c05      	ldr	r4, [pc, #20]	; (800764c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8007636:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007638:	5c20      	ldrb	r0, [r4, r0]
 800763a:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800763c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8007640:	f020 0003 	bic.w	r0, r0, #3
 8007644:	bf88      	it	hi
 8007646:	3004      	addhi	r0, #4
 8007648:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800764a:	bd10      	pop	{r4, pc}
 800764c:	08028f65 	.word	0x08028f65

08007650 <HAL_DMA_Init>:
{
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007654:	f7ff fa16 	bl	8006a84 <HAL_GetTick>
 8007658:	4605      	mov	r5, r0
  if(hdma == NULL)
 800765a:	2c00      	cmp	r4, #0
 800765c:	d073      	beq.n	8007746 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 800765e:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8007660:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007662:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8007666:	2300      	movs	r3, #0
 8007668:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800766c:	6813      	ldr	r3, [r2, #0]
 800766e:	f023 0301 	bic.w	r3, r3, #1
 8007672:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007674:	6821      	ldr	r1, [r4, #0]
 8007676:	680b      	ldr	r3, [r1, #0]
 8007678:	07d8      	lsls	r0, r3, #31
 800767a:	d42f      	bmi.n	80076dc <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 800767c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800767e:	4d33      	ldr	r5, [pc, #204]	; (800774c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007680:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007682:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007684:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8007688:	4313      	orrs	r3, r2
 800768a:	68e2      	ldr	r2, [r4, #12]
 800768c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800768e:	6922      	ldr	r2, [r4, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	6962      	ldr	r2, [r4, #20]
 8007694:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007696:	69e2      	ldr	r2, [r4, #28]
 8007698:	4303      	orrs	r3, r0
 800769a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800769c:	6a22      	ldr	r2, [r4, #32]
 800769e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80076a2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076a4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076a8:	bf02      	ittt	eq
 80076aa:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80076ae:	4335      	orreq	r5, r6
 80076b0:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076b2:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80076b4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80076b6:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076b8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80076bc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076c0:	d133      	bne.n	800772a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80076c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076c4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80076c6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076c8:	b37d      	cbz	r5, 800772a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076ca:	b990      	cbnz	r0, 80076f2 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80076cc:	2a01      	cmp	r2, #1
 80076ce:	d021      	beq.n	8007714 <HAL_DMA_Init+0xc4>
 80076d0:	f032 0202 	bics.w	r2, r2, #2
 80076d4:	d129      	bne.n	800772a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076d6:	01ea      	lsls	r2, r5, #7
 80076d8:	d527      	bpl.n	800772a <HAL_DMA_Init+0xda>
 80076da:	e01e      	b.n	800771a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076dc:	f7ff f9d2 	bl	8006a84 <HAL_GetTick>
 80076e0:	1b40      	subs	r0, r0, r5
 80076e2:	2805      	cmp	r0, #5
 80076e4:	d9c6      	bls.n	8007674 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076e6:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076e8:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076ea:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80076ec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80076f0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076f2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80076f6:	d114      	bne.n	8007722 <HAL_DMA_Init+0xd2>
    switch (tmp)
 80076f8:	2a03      	cmp	r2, #3
 80076fa:	d816      	bhi.n	800772a <HAL_DMA_Init+0xda>
 80076fc:	a001      	add	r0, pc, #4	; (adr r0, 8007704 <HAL_DMA_Init+0xb4>)
 80076fe:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8007702:	bf00      	nop
 8007704:	0800771b 	.word	0x0800771b
 8007708:	080076d7 	.word	0x080076d7
 800770c:	0800771b 	.word	0x0800771b
 8007710:	08007715 	.word	0x08007715
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007714:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007718:	d107      	bne.n	800772a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800771a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800771c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800771e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8007720:	e7e4      	b.n	80076ec <HAL_DMA_Init+0x9c>
    switch (tmp)
 8007722:	2a02      	cmp	r2, #2
 8007724:	d9f9      	bls.n	800771a <HAL_DMA_Init+0xca>
 8007726:	2a03      	cmp	r2, #3
 8007728:	d0d5      	beq.n	80076d6 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800772a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800772c:	4620      	mov	r0, r4
 800772e:	f7ff ff79 	bl	8007624 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007732:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007734:	233f      	movs	r3, #63	; 0x3f
 8007736:	4093      	lsls	r3, r2
 8007738:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800773a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800773c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800773e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007740:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8007744:	e7d4      	b.n	80076f0 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8007746:	2001      	movs	r0, #1
 8007748:	e7d2      	b.n	80076f0 <HAL_DMA_Init+0xa0>
 800774a:	bf00      	nop
 800774c:	e010803f 	.word	0xe010803f

08007750 <HAL_DMA_Start_IT>:
{
 8007750:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8007752:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007756:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8007758:	2c01      	cmp	r4, #1
 800775a:	d034      	beq.n	80077c6 <HAL_DMA_Start_IT+0x76>
 800775c:	2401      	movs	r4, #1
 800775e:	2500      	movs	r5, #0
 8007760:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007764:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8007768:	2c01      	cmp	r4, #1
 800776a:	f04f 0402 	mov.w	r4, #2
 800776e:	d128      	bne.n	80077c2 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007770:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007774:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007776:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007778:	6825      	ldr	r5, [r4, #0]
 800777a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800777e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8007780:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007782:	6883      	ldr	r3, [r0, #8]
 8007784:	2b40      	cmp	r3, #64	; 0x40
 8007786:	d119      	bne.n	80077bc <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8007788:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800778a:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800778c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800778e:	233f      	movs	r3, #63	; 0x3f
 8007790:	4093      	lsls	r3, r2
 8007792:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	f043 0316 	orr.w	r3, r3, #22
 800779a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800779c:	6963      	ldr	r3, [r4, #20]
 800779e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80077a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80077a6:	b11b      	cbz	r3, 80077b0 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	f043 0308 	orr.w	r3, r3, #8
 80077ae:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80077b0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077b2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80077b4:	f043 0301 	orr.w	r3, r3, #1
 80077b8:	6023      	str	r3, [r4, #0]
}
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 80077bc:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80077be:	60e2      	str	r2, [r4, #12]
 80077c0:	e7e4      	b.n	800778c <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 80077c2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80077c6:	2002      	movs	r0, #2
 80077c8:	e7f7      	b.n	80077ba <HAL_DMA_Start_IT+0x6a>

080077ca <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077ca:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d003      	beq.n	80077da <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077d2:	2380      	movs	r3, #128	; 0x80
 80077d4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80077d6:	2001      	movs	r0, #1
 80077d8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80077da:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80077dc:	2305      	movs	r3, #5
 80077de:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80077e2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80077e4:	6813      	ldr	r3, [r2, #0]
 80077e6:	f023 0301 	bic.w	r3, r3, #1
 80077ea:	6013      	str	r3, [r2, #0]
}
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80077f0:	2300      	movs	r3, #0
{
 80077f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80077f4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80077f6:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80077f8:	4b5b      	ldr	r3, [pc, #364]	; (8007968 <HAL_DMA_IRQHandler+0x178>)
{
 80077fa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077fc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80077fe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007800:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8007802:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007804:	409a      	lsls	r2, r3
 8007806:	4232      	tst	r2, r6
 8007808:	d00c      	beq.n	8007824 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800780a:	6801      	ldr	r1, [r0, #0]
 800780c:	6808      	ldr	r0, [r1, #0]
 800780e:	0740      	lsls	r0, r0, #29
 8007810:	d508      	bpl.n	8007824 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007812:	6808      	ldr	r0, [r1, #0]
 8007814:	f020 0004 	bic.w	r0, r0, #4
 8007818:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800781a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800781c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800781e:	f042 0201 	orr.w	r2, r2, #1
 8007822:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007824:	2201      	movs	r2, #1
 8007826:	409a      	lsls	r2, r3
 8007828:	4232      	tst	r2, r6
 800782a:	d008      	beq.n	800783e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800782c:	6821      	ldr	r1, [r4, #0]
 800782e:	6949      	ldr	r1, [r1, #20]
 8007830:	0609      	lsls	r1, r1, #24
 8007832:	d504      	bpl.n	800783e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007834:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007836:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007838:	f042 0202 	orr.w	r2, r2, #2
 800783c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800783e:	2204      	movs	r2, #4
 8007840:	409a      	lsls	r2, r3
 8007842:	4232      	tst	r2, r6
 8007844:	d008      	beq.n	8007858 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007846:	6821      	ldr	r1, [r4, #0]
 8007848:	6809      	ldr	r1, [r1, #0]
 800784a:	0788      	lsls	r0, r1, #30
 800784c:	d504      	bpl.n	8007858 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800784e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007850:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007852:	f042 0204 	orr.w	r2, r2, #4
 8007856:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007858:	2210      	movs	r2, #16
 800785a:	409a      	lsls	r2, r3
 800785c:	4232      	tst	r2, r6
 800785e:	d010      	beq.n	8007882 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	0709      	lsls	r1, r1, #28
 8007866:	d50c      	bpl.n	8007882 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007868:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	0350      	lsls	r0, r2, #13
 800786e:	d537      	bpl.n	80078e0 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	0319      	lsls	r1, r3, #12
 8007874:	d401      	bmi.n	800787a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8007876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007878:	e000      	b.n	800787c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800787a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800787c:	b10b      	cbz	r3, 8007882 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800787e:	4620      	mov	r0, r4
 8007880:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007882:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007884:	2220      	movs	r2, #32
 8007886:	408a      	lsls	r2, r1
 8007888:	4232      	tst	r2, r6
 800788a:	d03a      	beq.n	8007902 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	06c6      	lsls	r6, r0, #27
 8007892:	d536      	bpl.n	8007902 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007894:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007896:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800789a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800789c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800789e:	d127      	bne.n	80078f0 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078a0:	f022 0216 	bic.w	r2, r2, #22
 80078a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078a6:	695a      	ldr	r2, [r3, #20]
 80078a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078ac:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80078b0:	b90a      	cbnz	r2, 80078b6 <HAL_DMA_IRQHandler+0xc6>
 80078b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80078b4:	b11a      	cbz	r2, 80078be <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	f022 0208 	bic.w	r2, r2, #8
 80078bc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078be:	233f      	movs	r3, #63	; 0x3f
 80078c0:	408b      	lsls	r3, r1
 80078c2:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80078ca:	2300      	movs	r3, #0
 80078cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80078d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d045      	beq.n	8007962 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80078d6:	4620      	mov	r0, r4
}
 80078d8:	b003      	add	sp, #12
 80078da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80078de:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	05d2      	lsls	r2, r2, #23
 80078e4:	d4c7      	bmi.n	8007876 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	f022 0208 	bic.w	r2, r2, #8
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e7c2      	b.n	8007876 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078f0:	0350      	lsls	r0, r2, #13
 80078f2:	d527      	bpl.n	8007944 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	0319      	lsls	r1, r3, #12
 80078f8:	d431      	bmi.n	800795e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80078fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80078fc:	b10b      	cbz	r3, 8007902 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80078fe:	4620      	mov	r0, r4
 8007900:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007902:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007904:	b36b      	cbz	r3, 8007962 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007906:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007908:	07da      	lsls	r2, r3, #31
 800790a:	d519      	bpl.n	8007940 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800790c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8007910:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8007912:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8007916:	2305      	movs	r3, #5
 8007918:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800791c:	6813      	ldr	r3, [r2, #0]
 800791e:	f023 0301 	bic.w	r3, r3, #1
 8007922:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	3301      	adds	r3, #1
 8007928:	42bb      	cmp	r3, r7
 800792a:	9301      	str	r3, [sp, #4]
 800792c:	d802      	bhi.n	8007934 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800792e:	6813      	ldr	r3, [r2, #0]
 8007930:	07db      	lsls	r3, r3, #31
 8007932:	d4f7      	bmi.n	8007924 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8007934:	2301      	movs	r3, #1
 8007936:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800793a:	2300      	movs	r3, #0
 800793c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8007940:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007942:	e7c6      	b.n	80078d2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800794a:	d108      	bne.n	800795e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800794c:	6819      	ldr	r1, [r3, #0]
 800794e:	f021 0110 	bic.w	r1, r1, #16
 8007952:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007954:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8007956:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800795a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800795e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007960:	e7cc      	b.n	80078fc <HAL_DMA_IRQHandler+0x10c>
}
 8007962:	b003      	add	sp, #12
 8007964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007966:	bf00      	nop
 8007968:	20000060 	.word	0x20000060

0800796c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800796c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800796e:	4770      	bx	lr

08007970 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007970:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007972:	4604      	mov	r4, r0
 8007974:	b380      	cbz	r0, 80079d8 <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007976:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800797a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800797e:	b91b      	cbnz	r3, 8007988 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007980:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007984:	f7fc fbd6 	bl	8004134 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007988:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800798a:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800798c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007998:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800799a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800799c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800799e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a0:	f022 0207 	bic.w	r2, r2, #7
 80079a4:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80079a6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80079a8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80079aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ac:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80079b0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80079b4:	430a      	orrs	r2, r1
 80079b6:	641a      	str	r2, [r3, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80079b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079ba:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80079be:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80079c2:	0552      	lsls	r2, r2, #21
 80079c4:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80079c8:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80079ca:	430a      	orrs	r2, r1
 80079cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80079ce:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80079d0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80079d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80079d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80079d8:	2001      	movs	r0, #1
 80079da:	e7fc      	b.n	80079d6 <HAL_DMA2D_Init+0x66>

080079dc <HAL_DMA2D_LineEventCallback>:
 80079dc:	4770      	bx	lr

080079de <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80079de:	4770      	bx	lr

080079e0 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80079e0:	6803      	ldr	r3, [r0, #0]
{
 80079e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80079e4:	685e      	ldr	r6, [r3, #4]
{
 80079e6:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80079e8:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80079ea:	07f2      	lsls	r2, r6, #31
 80079ec:	d514      	bpl.n	8007a18 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80079ee:	05e9      	lsls	r1, r5, #23
 80079f0:	d512      	bpl.n	8007a18 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079f8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80079fa:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80079fc:	f042 0201 	orr.w	r2, r2, #1
 8007a00:	6542      	str	r2, [r0, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007a02:	2201      	movs	r2, #1
 8007a04:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a06:	2304      	movs	r3, #4
 8007a08:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007a12:	69c3      	ldr	r3, [r0, #28]
 8007a14:	b103      	cbz	r3, 8007a18 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a16:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a18:	06b2      	lsls	r2, r6, #26
 8007a1a:	d516      	bpl.n	8007a4a <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007a1c:	04ab      	lsls	r3, r5, #18
 8007a1e:	d514      	bpl.n	8007a4a <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a28:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007a30:	f043 0302 	orr.w	r3, r3, #2
 8007a34:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a36:	2304      	movs	r3, #4
 8007a38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007a42:	69e3      	ldr	r3, [r4, #28]
 8007a44:	b10b      	cbz	r3, 8007a4a <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a46:	4620      	mov	r0, r4
 8007a48:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007a4a:	0730      	lsls	r0, r6, #28
 8007a4c:	d516      	bpl.n	8007a7c <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007a4e:	0529      	lsls	r1, r5, #20
 8007a50:	d514      	bpl.n	8007a7c <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a5a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007a60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007a62:	f043 0304 	orr.w	r3, r3, #4
 8007a66:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a68:	2304      	movs	r3, #4
 8007a6a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8007a74:	69e3      	ldr	r3, [r4, #28]
 8007a76:	b10b      	cbz	r3, 8007a7c <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a78:	4620      	mov	r0, r4
 8007a7a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007a7c:	0772      	lsls	r2, r6, #29
 8007a7e:	d50b      	bpl.n	8007a98 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007a80:	056b      	lsls	r3, r5, #21
 8007a82:	d509      	bpl.n	8007a98 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007a84:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007a86:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007a90:	2204      	movs	r2, #4
 8007a92:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007a94:	f7ff ffa2 	bl	80079dc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007a98:	07b0      	lsls	r0, r6, #30
 8007a9a:	d514      	bpl.n	8007ac6 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007a9c:	05a9      	lsls	r1, r5, #22
 8007a9e:	d512      	bpl.n	8007ac6 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007aa8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007aaa:	2202      	movs	r2, #2
 8007aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007aae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007ab0:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8007abe:	69a3      	ldr	r3, [r4, #24]
 8007ac0:	b10b      	cbz	r3, 8007ac6 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007ac6:	06f2      	lsls	r2, r6, #27
 8007ac8:	d513      	bpl.n	8007af2 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007aca:	04eb      	lsls	r3, r5, #19
 8007acc:	d511      	bpl.n	8007af2 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007ace:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007ad0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ad8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007ada:	2210      	movs	r2, #16
 8007adc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007ade:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007ae0:	6563      	str	r3, [r4, #84]	; 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hdma2d);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007aee:	f7ff ff76 	bl	80079de <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007af2:	bd70      	pop	{r4, r5, r6, pc}

08007af4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007af4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007af6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	f04f 0302 	mov.w	r3, #2
 8007b00:	d031      	beq.n	8007b66 <HAL_DMA2D_ConfigLayer+0x72>

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007b02:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 8007b04:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b06:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007b0a:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 8007b0e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007b12:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007b14:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007b18:	0513      	lsls	r3, r2, #20
 8007b1a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007b1c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007b20:	4e1b      	ldr	r6, [pc, #108]	; (8007b90 <HAL_DMA2D_ConfigLayer+0x9c>)
 8007b22:	432b      	orrs	r3, r5
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b24:	3d09      	subs	r5, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007b26:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b2a:	2d01      	cmp	r5, #1
 8007b2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007b2e:	bf96      	itet	ls
 8007b30:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007b34:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007b38:	4313      	orrls	r3, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007b3a:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007b3c:	b9a9      	cbnz	r1, 8007b6a <HAL_DMA2D_ConfigLayer+0x76>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007b3e:	6a54      	ldr	r4, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b40:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007b42:	ea04 0406 	and.w	r4, r4, r6
 8007b46:	ea43 0304 	orr.w	r3, r3, r4
 8007b4a:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007b4c:	6a03      	ldr	r3, [r0, #32]
 8007b4e:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b50:	d803      	bhi.n	8007b5a <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007b52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007b54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b58:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007b60:	2300      	movs	r3, #0
 8007b62:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 8007b66:	4618      	mov	r0, r3

  return HAL_OK;
}
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007b6a:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b6c:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007b6e:	ea04 0406 	and.w	r4, r4, r6
 8007b72:	ea43 0304 	orr.w	r3, r3, r4
 8007b76:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007b78:	f04f 0318 	mov.w	r3, #24
 8007b7c:	fb03 0101 	mla	r1, r3, r1, r0
 8007b80:	6a0b      	ldr	r3, [r1, #32]
 8007b82:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b84:	d8e9      	bhi.n	8007b5a <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007b86:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007b88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b8c:	6213      	str	r3, [r2, #32]
 8007b8e:	e7e4      	b.n	8007b5a <HAL_DMA2D_ConfigLayer+0x66>
 8007b90:	00ccfff0 	.word	0x00ccfff0

08007b94 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8007b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	4607      	mov	r7, r0
 8007b9a:	460d      	mov	r5, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ba0:	f7fe ff70 	bl	8006a84 <HAL_GetTick>
 8007ba4:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007baa:	07d2      	lsls	r2, r2, #31
 8007bac:	d50a      	bpl.n	8007bc4 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007bae:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007bb2:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8007bb4:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007bb6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8007bba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007bbe:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8007bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007bc4:	f7fe ff5e 	bl	8006a84 <HAL_GetTick>
 8007bc8:	eba0 0008 	sub.w	r0, r0, r8
 8007bcc:	2864      	cmp	r0, #100	; 0x64
 8007bce:	d9ea      	bls.n	8007ba6 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8007bd0:	2003      	movs	r0, #3
 8007bd2:	e7f5      	b.n	8007bc0 <DSI_ShortWrite+0x2c>

08007bd4 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007bd4:	7c03      	ldrb	r3, [r0, #16]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d05c      	beq.n	8007c94 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8007bda:	2200      	movs	r2, #0
 8007bdc:	6803      	ldr	r3, [r0, #0]
 8007bde:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007be2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007be6:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8007be8:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007bea:	d507      	bpl.n	8007bfc <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8007bec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007bf0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8007bf4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8007bf8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8007bfc:	078a      	lsls	r2, r1, #30
 8007bfe:	d505      	bpl.n	8007c0c <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8007c00:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007c04:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8007c08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8007c0c:	074a      	lsls	r2, r1, #29
 8007c0e:	d505      	bpl.n	8007c1c <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007c10:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007c14:	f042 0201 	orr.w	r2, r2, #1
 8007c18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8007c1c:	070a      	lsls	r2, r1, #28
 8007c1e:	d505      	bpl.n	8007c2c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8007c20:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007c24:	f042 0202 	orr.w	r2, r2, #2
 8007c28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8007c2c:	06ca      	lsls	r2, r1, #27
 8007c2e:	d505      	bpl.n	8007c3c <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8007c30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007c34:	f042 020c 	orr.w	r2, r2, #12
 8007c38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8007c3c:	068a      	lsls	r2, r1, #26
 8007c3e:	d505      	bpl.n	8007c4c <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007c40:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007c44:	f042 0210 	orr.w	r2, r2, #16
 8007c48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007c4c:	064a      	lsls	r2, r1, #25
 8007c4e:	d505      	bpl.n	8007c5c <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8007c50:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007c54:	f042 0220 	orr.w	r2, r2, #32
 8007c58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007c5c:	060a      	lsls	r2, r1, #24
 8007c5e:	d505      	bpl.n	8007c6c <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007c60:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8007c6c:	05ca      	lsls	r2, r1, #23
 8007c6e:	d505      	bpl.n	8007c7c <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8007c70:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007c74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007c7c:	058a      	lsls	r2, r1, #22
 8007c7e:	d505      	bpl.n	8007c8c <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007c80:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007c84:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8007c88:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007c90:	4618      	mov	r0, r3
 8007c92:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007c94:	2002      	movs	r0, #2
}
 8007c96:	4770      	bx	lr

08007c98 <HAL_DSI_Init>:
{
 8007c98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c9a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f000 80a7 	beq.w	8007df2 <HAL_DSI_Init+0x15a>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007ca4:	7c43      	ldrb	r3, [r0, #17]
 8007ca6:	b90b      	cbnz	r3, 8007cac <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8007ca8:	f7fc fa64 	bl	8004174 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007cac:	2303      	movs	r3, #3
 8007cae:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007cba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007cbe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007cc2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007cce:	f7fe fed9 	bl	8006a84 <HAL_GetTick>
 8007cd2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007cd4:	6822      	ldr	r2, [r4, #0]
 8007cd6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8007cda:	04d9      	lsls	r1, r3, #19
 8007cdc:	d57a      	bpl.n	8007dd4 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007cde:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8007ce2:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8007ce6:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8007cea:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007cee:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007cf2:	e9d5 0300 	ldrd	r0, r3, [r5]
 8007cf6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007cf8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8007cfc:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007cfe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8007d02:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007d04:	430b      	orrs	r3, r1
 8007d06:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8007d1a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8007d26:	f7fe feb3 	bl	8006a90 <HAL_Delay>
  tickstart = HAL_GetTick();
 8007d2a:	f7fe feab 	bl	8006a84 <HAL_GetTick>
 8007d2e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007d36:	05d2      	lsls	r2, r2, #23
 8007d38:	d555      	bpl.n	8007de6 <HAL_DSI_Init+0x14e>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007d3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007d3e:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007d42:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007d44:	f042 0206 	orr.w	r2, r2, #6
 8007d48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007d4c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007d50:	f022 0203 	bic.w	r2, r2, #3
 8007d54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007d58:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007d5c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007d5e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007d60:	f042 0201 	orr.w	r2, r2, #1
 8007d64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007d68:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007d6c:	f022 0203 	bic.w	r2, r2, #3
 8007d70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007d74:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007d78:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007d7a:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007d7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d86:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007d8c:	491a      	ldr	r1, [pc, #104]	; (8007df8 <HAL_DSI_Init+0x160>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007d8e:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007d90:	686a      	ldr	r2, [r5, #4]
 8007d92:	2a01      	cmp	r2, #1
 8007d94:	bf38      	it	cc
 8007d96:	2201      	movcc	r2, #1
 8007d98:	434a      	muls	r2, r1
 8007d9a:	68a9      	ldr	r1, [r5, #8]
 8007d9c:	f001 0103 	and.w	r1, r1, #3
 8007da0:	408a      	lsls	r2, r1
 8007da2:	6829      	ldr	r1, [r5, #0]
 8007da4:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8007da6:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007da8:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007dac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8007db0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007db4:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007db8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007dc2:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007dc6:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8007dca:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007dcc:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8007dce:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8007dd0:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8007dd2:	e006      	b.n	8007de2 <HAL_DSI_Init+0x14a>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007dd4:	f7fe fe56 	bl	8006a84 <HAL_GetTick>
 8007dd8:	1b80      	subs	r0, r0, r6
 8007dda:	2864      	cmp	r0, #100	; 0x64
 8007ddc:	f67f af7a 	bls.w	8007cd4 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007de0:	2003      	movs	r0, #3
}
 8007de2:	b002      	add	sp, #8
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007de6:	f7fe fe4d 	bl	8006a84 <HAL_GetTick>
 8007dea:	1b80      	subs	r0, r0, r6
 8007dec:	2864      	cmp	r0, #100	; 0x64
 8007dee:	d99f      	bls.n	8007d30 <HAL_DSI_Init+0x98>
 8007df0:	e7f6      	b.n	8007de0 <HAL_DSI_Init+0x148>
    return HAL_ERROR;
 8007df2:	2001      	movs	r0, #1
 8007df4:	e7f5      	b.n	8007de2 <HAL_DSI_Init+0x14a>
 8007df6:	bf00      	nop
 8007df8:	003d0900 	.word	0x003d0900

08007dfc <HAL_DSI_ErrorCallback>:
 8007dfc:	4770      	bx	lr

08007dfe <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007dfe:	6803      	ldr	r3, [r0, #0]
 8007e00:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007e04:	07d1      	lsls	r1, r2, #31
{
 8007e06:	b510      	push	{r4, lr}
 8007e08:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007e0a:	d508      	bpl.n	8007e1e <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007e0c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007e10:	07d2      	lsls	r2, r2, #31
 8007e12:	d504      	bpl.n	8007e1e <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007e14:	2201      	movs	r2, #1
 8007e16:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8007e1a:	f7f9 fa85 	bl	8001328 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007e24:	0791      	lsls	r1, r2, #30
 8007e26:	d509      	bpl.n	8007e3c <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007e28:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007e2c:	0792      	lsls	r2, r2, #30
 8007e2e:	d505      	bpl.n	8007e3c <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007e30:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007e32:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007e34:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007e38:	f7f9 faaa 	bl	8001390 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8007e3c:	69a3      	ldr	r3, [r4, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d04e      	beq.n	8007ee0 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007e42:	6821      	ldr	r1, [r4, #0]
 8007e44:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007e48:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007e4c:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007e50:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007e52:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007e56:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007e58:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007e5a:	b119      	cbz	r1, 8007e64 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007e5c:	6961      	ldr	r1, [r4, #20]
 8007e5e:	f041 0101 	orr.w	r1, r1, #1
 8007e62:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007e64:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8007e68:	d003      	beq.n	8007e72 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007e6a:	6962      	ldr	r2, [r4, #20]
 8007e6c:	f042 0202 	orr.w	r2, r2, #2
 8007e70:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007e72:	07d8      	lsls	r0, r3, #31
 8007e74:	d503      	bpl.n	8007e7e <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007e76:	6962      	ldr	r2, [r4, #20]
 8007e78:	f042 0204 	orr.w	r2, r2, #4
 8007e7c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007e7e:	0799      	lsls	r1, r3, #30
 8007e80:	d503      	bpl.n	8007e8a <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007e82:	6962      	ldr	r2, [r4, #20]
 8007e84:	f042 0208 	orr.w	r2, r2, #8
 8007e88:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007e8a:	f013 0f0c 	tst.w	r3, #12
 8007e8e:	d003      	beq.n	8007e98 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007e90:	6962      	ldr	r2, [r4, #20]
 8007e92:	f042 0210 	orr.w	r2, r2, #16
 8007e96:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007e98:	06da      	lsls	r2, r3, #27
 8007e9a:	d503      	bpl.n	8007ea4 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007e9c:	6962      	ldr	r2, [r4, #20]
 8007e9e:	f042 0220 	orr.w	r2, r2, #32
 8007ea2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007ea4:	0698      	lsls	r0, r3, #26
 8007ea6:	d503      	bpl.n	8007eb0 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007ea8:	6962      	ldr	r2, [r4, #20]
 8007eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eae:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007eb0:	0659      	lsls	r1, r3, #25
 8007eb2:	d503      	bpl.n	8007ebc <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007eb4:	6962      	ldr	r2, [r4, #20]
 8007eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007eba:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007ebc:	061a      	lsls	r2, r3, #24
 8007ebe:	d503      	bpl.n	8007ec8 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007ec0:	6962      	ldr	r2, [r4, #20]
 8007ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ec6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007ec8:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8007ecc:	d003      	beq.n	8007ed6 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007ece:	6963      	ldr	r3, [r4, #20]
 8007ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ed4:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007ed6:	6963      	ldr	r3, [r4, #20]
 8007ed8:	b113      	cbz	r3, 8007ee0 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7ff ff8e 	bl	8007dfc <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007ee0:	bd10      	pop	{r4, pc}

08007ee2 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007ee2:	7c03      	ldrb	r3, [r0, #16]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d00b      	beq.n	8007f00 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8007ee8:	6803      	ldr	r3, [r0, #0]
 8007eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eec:	f022 0203 	bic.w	r2, r2, #3
 8007ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef4:	4311      	orrs	r1, r2
 8007ef6:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007ef8:	2300      	movs	r3, #0
 8007efa:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007efc:	4618      	mov	r0, r3
 8007efe:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007f00:	2002      	movs	r0, #2
}
 8007f02:	4770      	bx	lr

08007f04 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007f04:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f06:	7c03      	ldrb	r3, [r0, #16]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d06a      	beq.n	8007fe2 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007f0c:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007f0e:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f12:	f042 0201 	orr.w	r2, r2, #1
 8007f16:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007f18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007f1c:	f022 0201 	bic.w	r2, r2, #1
 8007f20:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8007f24:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007f28:	f042 0201 	orr.w	r2, r2, #1
 8007f2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	f022 0203 	bic.w	r2, r2, #3
 8007f36:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	4322      	orrs	r2, r4
 8007f3c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007f3e:	695a      	ldr	r2, [r3, #20]
 8007f40:	f022 0207 	bic.w	r2, r2, #7
 8007f44:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007f46:	695c      	ldr	r4, [r3, #20]
 8007f48:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8007f4c:	432a      	orrs	r2, r5
 8007f4e:	694d      	ldr	r5, [r1, #20]
 8007f50:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007f52:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007f54:	4322      	orrs	r2, r4
 8007f56:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007f58:	691a      	ldr	r2, [r3, #16]
 8007f5a:	f022 020f 	bic.w	r2, r2, #15
 8007f5e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007f60:	691c      	ldr	r4, [r3, #16]
 8007f62:	432c      	orrs	r4, r5
 8007f64:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007f66:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8007f6a:	f024 040e 	bic.w	r4, r4, #14
 8007f6e:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007f72:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007f76:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007f78:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8007f7c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8007f80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f82:	0c12      	lsrs	r2, r2, #16
 8007f84:	0412      	lsls	r2, r2, #16
 8007f86:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007f88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f8a:	4322      	orrs	r2, r4
 8007f8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007f8e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007f92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007f96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007f9a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8007f9e:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8007fa2:	432a      	orrs	r2, r5
 8007fa4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8007fa6:	432a      	orrs	r2, r5
 8007fa8:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007faa:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007fac:	432a      	orrs	r2, r5
 8007fae:	4322      	orrs	r2, r4
 8007fb0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8007fb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007fb6:	f022 0201 	bic.w	r2, r2, #1
 8007fba:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007fbc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8007fc2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007fce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007fd2:	f042 0202 	orr.w	r2, r2, #2
 8007fd6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007fda:	2300      	movs	r3, #0
 8007fdc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007fde:	4618      	mov	r0, r3
}
 8007fe0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007fe2:	2002      	movs	r0, #2
 8007fe4:	e7fc      	b.n	8007fe0 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08007fe8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8007fe8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007fea:	7c03      	ldrb	r3, [r0, #16]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d02a      	beq.n	8008046 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8007ff0:	6802      	ldr	r2, [r0, #0]
 8007ff2:	4b16      	ldr	r3, [pc, #88]	; (800804c <HAL_DSI_ConfigCommand+0x64>)
 8007ff4:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8007ff6:	4023      	ands	r3, r4
 8007ff8:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007ffa:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8007ffc:	e9d1 3500 	ldrd	r3, r5, [r1]
 8008000:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008002:	688d      	ldr	r5, [r1, #8]
 8008004:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8008006:	68cd      	ldr	r5, [r1, #12]
 8008008:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800800a:	690d      	ldr	r5, [r1, #16]
 800800c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800800e:	694d      	ldr	r5, [r1, #20]
 8008010:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008012:	698d      	ldr	r5, [r1, #24]
 8008014:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8008016:	69cd      	ldr	r5, [r1, #28]
 8008018:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800801a:	6a0d      	ldr	r5, [r1, #32]
 800801c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800801e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8008020:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008022:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8008024:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8008026:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008028:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 800802a:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800802c:	4323      	orrs	r3, r4
 800802e:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8008030:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8008032:	f023 0302 	bic.w	r3, r3, #2
 8008036:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8008038:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800803a:	430b      	orrs	r3, r1
 800803c:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800803e:	2300      	movs	r3, #0
 8008040:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008042:	4618      	mov	r0, r3
}
 8008044:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008046:	2002      	movs	r0, #2
 8008048:	e7fc      	b.n	8008044 <HAL_DSI_ConfigCommand+0x5c>
 800804a:	bf00      	nop
 800804c:	fef080ff 	.word	0xfef080ff

08008050 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008050:	7c03      	ldrb	r3, [r0, #16]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d00b      	beq.n	800806e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008056:	6803      	ldr	r3, [r0, #0]
 8008058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805a:	f022 021f 	bic.w	r2, r2, #31
 800805e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008062:	4311      	orrs	r1, r2
 8008064:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008066:	2300      	movs	r3, #0
 8008068:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800806a:	4618      	mov	r0, r3
 800806c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800806e:	2002      	movs	r0, #2
}
 8008070:	4770      	bx	lr

08008072 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008072:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008074:	7c03      	ldrb	r3, [r0, #16]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d035      	beq.n	80080e6 <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800807a:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800807c:	e9d1 2400 	ldrd	r2, r4, [r1]
 8008080:	4294      	cmp	r4, r2
 8008082:	bf38      	it	cc
 8008084:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8008086:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800808a:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800808e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8008092:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008096:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800809a:	4322      	orrs	r2, r4
 800809c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80080a0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80080a4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80080a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80080ac:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80080b0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80080b4:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80080b6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80080ba:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80080bc:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80080be:	432a      	orrs	r2, r5
 80080c0:	4322      	orrs	r2, r4
 80080c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80080c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80080ca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80080ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80080d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80080d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80080da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80080de:	2300      	movs	r3, #0
 80080e0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80080e2:	4618      	mov	r0, r3
}
 80080e4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80080e6:	2002      	movs	r0, #2
 80080e8:	e7fc      	b.n	80080e4 <HAL_DSI_ConfigPhyTimer+0x72>
	...

080080ec <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80080ec:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80080ee:	7c03      	ldrb	r3, [r0, #16]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d05c      	beq.n	80081ae <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80080f4:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80080f6:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80080f8:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80080fa:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80080fc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008100:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008108:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800810a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800810c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800810e:	b292      	uxth	r2, r2
 8008110:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008112:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008114:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008118:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800811a:	4a26      	ldr	r2, [pc, #152]	; (80081b4 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800811c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800811e:	4014      	ands	r4, r2
 8008120:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008122:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8008124:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008126:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008128:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800812a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800812c:	4014      	ands	r4, r2
 800812e:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008130:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8008132:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008134:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008136:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8008138:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800813c:	4014      	ands	r4, r2
 800813e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008142:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008146:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8008148:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800814a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800814e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008152:	4014      	ands	r4, r2
 8008154:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8008158:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800815c:	432c      	orrs	r4, r5
 800815e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8008162:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008166:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800816a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800816e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008172:	698d      	ldr	r5, [r1, #24]
 8008174:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8008176:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8008178:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800817a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800817e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8008182:	4014      	ands	r4, r2
 8008184:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8008188:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800818c:	432c      	orrs	r4, r5
 800818e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8008192:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8008196:	4022      	ands	r2, r4
 8008198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800819c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80081a0:	430a      	orrs	r2, r1
 80081a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80081a6:	2300      	movs	r3, #0
 80081a8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80081aa:	4618      	mov	r0, r3
}
 80081ac:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80081ae:	2002      	movs	r0, #2
 80081b0:	e7fc      	b.n	80081ac <HAL_DSI_ConfigHostTimeouts+0xc0>
 80081b2:	bf00      	nop
 80081b4:	ffff0000 	.word	0xffff0000

080081b8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80081b8:	7c03      	ldrb	r3, [r0, #16]
{
 80081ba:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d01c      	beq.n	80081fa <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80081c0:	6802      	ldr	r2, [r0, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	6851      	ldr	r1, [r2, #4]
 80081c8:	f041 0101 	orr.w	r1, r1, #1
 80081cc:	6051      	str	r1, [r2, #4]
 80081ce:	6851      	ldr	r1, [r2, #4]
 80081d0:	f001 0101 	and.w	r1, r1, #1
 80081d4:	9100      	str	r1, [sp, #0]
 80081d6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 80081de:	f041 0108 	orr.w	r1, r1, #8
 80081e2:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80081e6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80081ea:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80081ec:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80081ee:	f002 0208 	and.w	r2, r2, #8
 80081f2:	9201      	str	r2, [sp, #4]
 80081f4:	9a01      	ldr	r2, [sp, #4]
}
 80081f6:	b002      	add	sp, #8
 80081f8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80081fa:	2002      	movs	r0, #2
 80081fc:	e7fb      	b.n	80081f6 <HAL_DSI_Start+0x3e>

080081fe <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80081fe:	7c03      	ldrb	r3, [r0, #16]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d00a      	beq.n	800821a <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8008204:	6802      	ldr	r2, [r0, #0]
 8008206:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800820a:	f043 0304 	orr.w	r3, r3, #4
 800820e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008212:	2300      	movs	r3, #0
 8008214:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008216:	4618      	mov	r0, r3
 8008218:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800821a:	2002      	movs	r0, #2
}
 800821c:	4770      	bx	lr

0800821e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800821e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008220:	7c05      	ldrb	r5, [r0, #16]
{
 8008222:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008224:	2d01      	cmp	r5, #1
 8008226:	d009      	beq.n	800823c <HAL_DSI_ShortWrite+0x1e>
 8008228:	2501      	movs	r5, #1
 800822a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800822c:	9d06      	ldr	r5, [sp, #24]
 800822e:	9500      	str	r5, [sp, #0]
 8008230:	f7ff fcb0 	bl	8007b94 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008234:	2300      	movs	r3, #0
 8008236:	7423      	strb	r3, [r4, #16]

  return status;
}
 8008238:	b003      	add	sp, #12
 800823a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800823c:	2002      	movs	r0, #2
 800823e:	e7fb      	b.n	8008238 <HAL_DSI_ShortWrite+0x1a>

08008240 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8008240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008246:	7c03      	ldrb	r3, [r0, #16]
{
 8008248:	4606      	mov	r6, r0
 800824a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800824c:	2b01      	cmp	r3, #1
{
 800824e:	4615      	mov	r5, r2
 8008250:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8008254:	d052      	beq.n	80082fc <HAL_DSI_LongWrite+0xbc>
 8008256:	2301      	movs	r3, #1
 8008258:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800825a:	f7fe fc13 	bl	8006a84 <HAL_GetTick>
 800825e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008260:	6831      	ldr	r1, [r6, #0]
 8008262:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8008264:	f013 0a01 	ands.w	sl, r3, #1
 8008268:	d01a      	beq.n	80082a0 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800826a:	2c03      	cmp	r4, #3
 800826c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800826e:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8008272:	bf28      	it	cs
 8008274:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8008276:	4282      	cmp	r2, r0
 8008278:	d11d      	bne.n	80082b6 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800827a:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 800827c:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800827e:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8008282:	bb13      	cbnz	r3, 80082ca <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8008284:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008286:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800828a:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800828c:	0222      	lsls	r2, r4, #8
 800828e:	0224      	lsls	r4, r4, #8
 8008290:	b292      	uxth	r2, r2
 8008292:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8008296:	4315      	orrs	r5, r2
 8008298:	432c      	orrs	r4, r5
 800829a:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800829c:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 800829e:	e008      	b.n	80082b2 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80082a0:	f7fe fbf0 	bl	8006a84 <HAL_GetTick>
 80082a4:	eba0 000b 	sub.w	r0, r0, fp
 80082a8:	2864      	cmp	r0, #100	; 0x64
 80082aa:	d9d9      	bls.n	8008260 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80082ac:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80082ae:	f886 a010 	strb.w	sl, [r6, #16]
}
 80082b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80082b6:	f818 3002 	ldrb.w	r3, [r8, r2]
 80082ba:	3201      	adds	r2, #1
 80082bc:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80082c0:	fa03 f30c 	lsl.w	r3, r3, ip
 80082c4:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 80082c8:	e7d5      	b.n	8008276 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80082ca:	2b04      	cmp	r3, #4
    fifoword = 0U;
 80082cc:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80082d0:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 80082d2:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80082d4:	bf28      	it	cs
 80082d6:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80082da:	f812 8000 	ldrb.w	r8, [r2, r0]
 80082de:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 80082e2:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80082e4:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80082e8:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80082ea:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80082ee:	d1f4      	bne.n	80082da <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 80082f0:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 80082f4:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 80082f6:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 80082fa:	e7c2      	b.n	8008282 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80082fc:	2002      	movs	r0, #2
 80082fe:	e7d8      	b.n	80082b2 <HAL_DSI_LongWrite+0x72>

08008300 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008300:	7c03      	ldrb	r3, [r0, #16]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d010      	beq.n	8008328 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8008306:	6803      	ldr	r3, [r0, #0]
 8008308:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800830c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8008310:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8008314:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8008318:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800831c:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008320:	2300      	movs	r3, #0
 8008322:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008324:	4618      	mov	r0, r3
 8008326:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008328:	2002      	movs	r0, #2
}
 800832a:	4770      	bx	lr

0800832c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800832c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008330:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008332:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80084f0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008336:	4a6c      	ldr	r2, [pc, #432]	; (80084e8 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8008338:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800833a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800833c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800833e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8008342:	43ac      	bics	r4, r5
 8008344:	f040 80b6 	bne.w	80084b4 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008348:	684d      	ldr	r5, [r1, #4]
 800834a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800834e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008350:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008354:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008358:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800835a:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800835c:	2f01      	cmp	r7, #1
 800835e:	d834      	bhi.n	80083ca <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8008360:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008362:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8008366:	68cf      	ldr	r7, [r1, #12]
 8008368:	fa07 f708 	lsl.w	r7, r7, r8
 800836c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8008370:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008372:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008374:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008378:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800837c:	409f      	lsls	r7, r3
 800837e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8008382:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8008384:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008386:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008388:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800838c:	688f      	ldr	r7, [r1, #8]
 800838e:	fa07 f708 	lsl.w	r7, r7, r8
 8008392:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8008396:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008398:	d119      	bne.n	80083ce <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800839a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800839e:	f003 0b07 	and.w	fp, r3, #7
 80083a2:	f04f 0e0f 	mov.w	lr, #15
 80083a6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80083aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80083ae:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80083b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80083b6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80083ba:	690f      	ldr	r7, [r1, #16]
 80083bc:	fa07 f70b 	lsl.w	r7, r7, fp
 80083c0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80083c4:	f8ca 7020 	str.w	r7, [sl, #32]
 80083c8:	e001      	b.n	80083ce <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083ca:	2c03      	cmp	r4, #3
 80083cc:	d1da      	bne.n	8008384 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80083ce:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80083d0:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083d4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80083d8:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80083dc:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80083e0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083e2:	d067      	beq.n	80084b4 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083e4:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80083e8:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80083ec:	f003 0703 	and.w	r7, r3, #3
 80083f0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083f4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80083f8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80083fc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083fe:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8008402:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8008406:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800840a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800840e:	9401      	str	r4, [sp, #4]
 8008410:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008412:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8008416:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800841a:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800841e:	4c33      	ldr	r4, [pc, #204]	; (80084ec <HAL_GPIO_Init+0x1c0>)
 8008420:	42a0      	cmp	r0, r4
 8008422:	d04e      	beq.n	80084c2 <HAL_GPIO_Init+0x196>
 8008424:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008428:	42a0      	cmp	r0, r4
 800842a:	d04c      	beq.n	80084c6 <HAL_GPIO_Init+0x19a>
 800842c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008430:	42a0      	cmp	r0, r4
 8008432:	d04a      	beq.n	80084ca <HAL_GPIO_Init+0x19e>
 8008434:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008438:	42a0      	cmp	r0, r4
 800843a:	d048      	beq.n	80084ce <HAL_GPIO_Init+0x1a2>
 800843c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008440:	42a0      	cmp	r0, r4
 8008442:	d046      	beq.n	80084d2 <HAL_GPIO_Init+0x1a6>
 8008444:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008448:	42a0      	cmp	r0, r4
 800844a:	d044      	beq.n	80084d6 <HAL_GPIO_Init+0x1aa>
 800844c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008450:	42a0      	cmp	r0, r4
 8008452:	d042      	beq.n	80084da <HAL_GPIO_Init+0x1ae>
 8008454:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008458:	42a0      	cmp	r0, r4
 800845a:	d040      	beq.n	80084de <HAL_GPIO_Init+0x1b2>
 800845c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008460:	42a0      	cmp	r0, r4
 8008462:	d03e      	beq.n	80084e2 <HAL_GPIO_Init+0x1b6>
 8008464:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008468:	42a0      	cmp	r0, r4
 800846a:	bf0c      	ite	eq
 800846c:	2409      	moveq	r4, #9
 800846e:	240a      	movne	r4, #10
 8008470:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008472:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008474:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8008478:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800847a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800847e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8008480:	bf54      	ite	pl
 8008482:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8008484:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008488:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800848a:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800848c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800848e:	bf54      	ite	pl
 8008490:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8008492:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008496:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8008498:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800849a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800849c:	bf54      	ite	pl
 800849e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80084a0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80084a4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80084a6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80084a8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80084aa:	bf54      	ite	pl
 80084ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80084ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80084b2:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80084b4:	3301      	adds	r3, #1
 80084b6:	2b10      	cmp	r3, #16
 80084b8:	f47f af3e 	bne.w	8008338 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80084bc:	b003      	add	sp, #12
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80084c2:	2400      	movs	r4, #0
 80084c4:	e7d4      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084c6:	2401      	movs	r4, #1
 80084c8:	e7d2      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084ca:	2402      	movs	r4, #2
 80084cc:	e7d0      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084ce:	2403      	movs	r4, #3
 80084d0:	e7ce      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084d2:	2404      	movs	r4, #4
 80084d4:	e7cc      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084d6:	2405      	movs	r4, #5
 80084d8:	e7ca      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084da:	2406      	movs	r4, #6
 80084dc:	e7c8      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084de:	2407      	movs	r4, #7
 80084e0:	e7c6      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084e2:	2408      	movs	r4, #8
 80084e4:	e7c4      	b.n	8008470 <HAL_GPIO_Init+0x144>
 80084e6:	bf00      	nop
 80084e8:	40013c00 	.word	0x40013c00
 80084ec:	40020000 	.word	0x40020000
 80084f0:	40023800 	.word	0x40023800

080084f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80084f8:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80084fa:	4c4a      	ldr	r4, [pc, #296]	; (8008624 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80084fc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800862c <HAL_GPIO_DeInit+0x138>
 8008500:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8008630 <HAL_GPIO_DeInit+0x13c>
 8008504:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008634 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8008508:	2301      	movs	r3, #1
 800850a:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800850e:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8008512:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8008516:	d16e      	bne.n	80085f6 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8008518:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800851c:	f002 0c03 	and.w	ip, r2, #3
 8008520:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008522:	4b41      	ldr	r3, [pc, #260]	; (8008628 <HAL_GPIO_DeInit+0x134>)
 8008524:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008528:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800852c:	4298      	cmp	r0, r3
 800852e:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008532:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8008536:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800853a:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800853e:	d05f      	beq.n	8008600 <HAL_GPIO_DeInit+0x10c>
 8008540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008544:	4298      	cmp	r0, r3
 8008546:	d05d      	beq.n	8008604 <HAL_GPIO_DeInit+0x110>
 8008548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800854c:	4298      	cmp	r0, r3
 800854e:	d05b      	beq.n	8008608 <HAL_GPIO_DeInit+0x114>
 8008550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008554:	4298      	cmp	r0, r3
 8008556:	d059      	beq.n	800860c <HAL_GPIO_DeInit+0x118>
 8008558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800855c:	4298      	cmp	r0, r3
 800855e:	d057      	beq.n	8008610 <HAL_GPIO_DeInit+0x11c>
 8008560:	4548      	cmp	r0, r9
 8008562:	d057      	beq.n	8008614 <HAL_GPIO_DeInit+0x120>
 8008564:	4550      	cmp	r0, sl
 8008566:	d057      	beq.n	8008618 <HAL_GPIO_DeInit+0x124>
 8008568:	4558      	cmp	r0, fp
 800856a:	d057      	beq.n	800861c <HAL_GPIO_DeInit+0x128>
 800856c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008570:	4298      	cmp	r0, r3
 8008572:	d055      	beq.n	8008620 <HAL_GPIO_DeInit+0x12c>
 8008574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008578:	4298      	cmp	r0, r3
 800857a:	bf0c      	ite	eq
 800857c:	2309      	moveq	r3, #9
 800857e:	230a      	movne	r3, #10
 8008580:	fa03 f30c 	lsl.w	r3, r3, ip
 8008584:	4543      	cmp	r3, r8
 8008586:	d113      	bne.n	80085b0 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	ea23 0307 	bic.w	r3, r3, r7
 800858e:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008590:	6863      	ldr	r3, [r4, #4]
 8008592:	ea23 0307 	bic.w	r3, r3, r7
 8008596:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008598:	68e3      	ldr	r3, [r4, #12]
 800859a:	ea23 0307 	bic.w	r3, r3, r7
 800859e:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80085a0:	68a3      	ldr	r3, [r4, #8]
 80085a2:	ea23 0307 	bic.w	r3, r3, r7
 80085a6:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80085a8:	68ab      	ldr	r3, [r5, #8]
 80085aa:	ea23 0306 	bic.w	r3, r3, r6
 80085ae:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085b0:	2603      	movs	r6, #3
 80085b2:	0053      	lsls	r3, r2, #1
 80085b4:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80085b6:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085ba:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80085be:	270f      	movs	r7, #15
 80085c0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085c4:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80085c8:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085cc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80085ce:	fa22 f506 	lsr.w	r5, r2, r6
 80085d2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80085d6:	6a2e      	ldr	r6, [r5, #32]
 80085d8:	ea26 0707 	bic.w	r7, r6, r7
 80085dc:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80085de:	68c5      	ldr	r5, [r0, #12]
 80085e0:	ea25 0503 	bic.w	r5, r5, r3
 80085e4:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80085e6:	6845      	ldr	r5, [r0, #4]
 80085e8:	ea25 050e 	bic.w	r5, r5, lr
 80085ec:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80085ee:	6885      	ldr	r5, [r0, #8]
 80085f0:	ea25 0303 	bic.w	r3, r5, r3
 80085f4:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80085f6:	3201      	adds	r2, #1
 80085f8:	2a10      	cmp	r2, #16
 80085fa:	d185      	bne.n	8008508 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80085fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008600:	2300      	movs	r3, #0
 8008602:	e7bd      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 8008604:	2301      	movs	r3, #1
 8008606:	e7bb      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 8008608:	2302      	movs	r3, #2
 800860a:	e7b9      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 800860c:	2303      	movs	r3, #3
 800860e:	e7b7      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 8008610:	2304      	movs	r3, #4
 8008612:	e7b5      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 8008614:	2305      	movs	r3, #5
 8008616:	e7b3      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 8008618:	2306      	movs	r3, #6
 800861a:	e7b1      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 800861c:	2307      	movs	r3, #7
 800861e:	e7af      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 8008620:	2308      	movs	r3, #8
 8008622:	e7ad      	b.n	8008580 <HAL_GPIO_DeInit+0x8c>
 8008624:	40013c00 	.word	0x40013c00
 8008628:	40020000 	.word	0x40020000
 800862c:	40021400 	.word	0x40021400
 8008630:	40021800 	.word	0x40021800
 8008634:	40021c00 	.word	0x40021c00

08008638 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008638:	6903      	ldr	r3, [r0, #16]
 800863a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800863c:	bf14      	ite	ne
 800863e:	2001      	movne	r0, #1
 8008640:	2000      	moveq	r0, #0
 8008642:	4770      	bx	lr

08008644 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008644:	b10a      	cbz	r2, 800864a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008646:	6181      	str	r1, [r0, #24]
  }
}
 8008648:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800864a:	0409      	lsls	r1, r1, #16
 800864c:	e7fb      	b.n	8008646 <HAL_GPIO_WritePin+0x2>

0800864e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800864e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008650:	ea01 0203 	and.w	r2, r1, r3
 8008654:	ea21 0103 	bic.w	r1, r1, r3
 8008658:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800865c:	6181      	str	r1, [r0, #24]
}
 800865e:	4770      	bx	lr

08008660 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008660:	6803      	ldr	r3, [r0, #0]
 8008662:	699a      	ldr	r2, [r3, #24]
 8008664:	0791      	lsls	r1, r2, #30
 8008666:	d501      	bpl.n	800866c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008668:	2200      	movs	r2, #0
 800866a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	07d2      	lsls	r2, r2, #31
 8008670:	d403      	bmi.n	800867a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008672:	699a      	ldr	r2, [r3, #24]
 8008674:	f042 0201 	orr.w	r2, r2, #1
 8008678:	619a      	str	r2, [r3, #24]
  }
}
 800867a:	4770      	bx	lr

0800867c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800867c:	b530      	push	{r4, r5, lr}
 800867e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008680:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008684:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008686:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8008688:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800868a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800868e:	4a05      	ldr	r2, [pc, #20]	; (80086a4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008690:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008692:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800869a:	ea20 0002 	bic.w	r0, r0, r2
 800869e:	4303      	orrs	r3, r0
 80086a0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80086a2:	bd30      	pop	{r4, r5, pc}
 80086a4:	03ff63ff 	.word	0x03ff63ff

080086a8 <I2C_IsErrorOccurred>:
{
 80086a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80086ac:	6803      	ldr	r3, [r0, #0]
{
 80086ae:	4605      	mov	r5, r0
 80086b0:	4688      	mov	r8, r1
 80086b2:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80086b4:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80086b6:	f014 0410 	ands.w	r4, r4, #16
 80086ba:	d079      	beq.n	80087b0 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086bc:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80086be:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 80086c0:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086c4:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	0694      	lsls	r4, r2, #26
 80086cc:	d436      	bmi.n	800873c <I2C_IsErrorOccurred+0x94>
 80086ce:	b10e      	cbz	r6, 80086d4 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 80086d0:	2404      	movs	r4, #4
 80086d2:	e039      	b.n	8008748 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80086d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80086d8:	d0f6      	beq.n	80086c8 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80086da:	f7fe f9d3 	bl	8006a84 <HAL_GetTick>
 80086de:	1bc0      	subs	r0, r0, r7
 80086e0:	4540      	cmp	r0, r8
 80086e2:	d802      	bhi.n	80086ea <I2C_IsErrorOccurred+0x42>
 80086e4:	f1b8 0f00 	cmp.w	r8, #0
 80086e8:	d1ed      	bne.n	80086c6 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80086ea:	682b      	ldr	r3, [r5, #0]
 80086ec:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80086ee:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80086f2:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80086f4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80086f6:	0400      	lsls	r0, r0, #16
 80086f8:	d50a      	bpl.n	8008710 <I2C_IsErrorOccurred+0x68>
 80086fa:	0449      	lsls	r1, r1, #17
 80086fc:	d408      	bmi.n	8008710 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 80086fe:	2a20      	cmp	r2, #32
 8008700:	d006      	beq.n	8008710 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008708:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800870a:	f7fe f9bb 	bl	8006a84 <HAL_GetTick>
 800870e:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	699c      	ldr	r4, [r3, #24]
 8008714:	f014 0420 	ands.w	r4, r4, #32
 8008718:	d1d5      	bne.n	80086c6 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800871a:	f7fe f9b3 	bl	8006a84 <HAL_GetTick>
 800871e:	1bc0      	subs	r0, r0, r7
 8008720:	2819      	cmp	r0, #25
 8008722:	d9f5      	bls.n	8008710 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008724:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8008726:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8008728:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800872c:	f043 0320 	orr.w	r3, r3, #32
 8008730:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008732:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008736:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 800873a:	e7e9      	b.n	8008710 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 800873c:	2e00      	cmp	r6, #0
 800873e:	d1c7      	bne.n	80086d0 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008740:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8008742:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8008744:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008746:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800874c:	05d0      	lsls	r0, r2, #23
 800874e:	d505      	bpl.n	800875c <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008750:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008754:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8008758:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800875a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800875c:	0551      	lsls	r1, r2, #21
 800875e:	d505      	bpl.n	800876c <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008760:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008764:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8008768:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800876a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800876c:	0592      	lsls	r2, r2, #22
 800876e:	d521      	bpl.n	80087b4 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008770:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008774:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008778:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800877a:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 800877c:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 800877e:	f7ff ff6f 	bl	8008660 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008782:	682a      	ldr	r2, [r5, #0]
 8008784:	6853      	ldr	r3, [r2, #4]
 8008786:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800878a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800878e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8008792:	f023 0301 	bic.w	r3, r3, #1
 8008796:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8008798:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800879a:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800879c:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800879e:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80087a0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80087aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80087ae:	e003      	b.n	80087b8 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 80087b0:	4626      	mov	r6, r4
 80087b2:	e7c9      	b.n	8008748 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 80087b4:	2e00      	cmp	r6, #0
 80087b6:	d1e0      	bne.n	800877a <I2C_IsErrorOccurred+0xd2>
}
 80087b8:	4630      	mov	r0, r6
 80087ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080087be <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80087be:	b570      	push	{r4, r5, r6, lr}
 80087c0:	4604      	mov	r4, r0
 80087c2:	460d      	mov	r5, r1
 80087c4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	079b      	lsls	r3, r3, #30
 80087cc:	d501      	bpl.n	80087d2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80087ce:	2000      	movs	r0, #0
}
 80087d0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087d2:	4632      	mov	r2, r6
 80087d4:	4629      	mov	r1, r5
 80087d6:	4620      	mov	r0, r4
 80087d8:	f7ff ff66 	bl	80086a8 <I2C_IsErrorOccurred>
 80087dc:	b9a0      	cbnz	r0, 8008808 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80087de:	1c6a      	adds	r2, r5, #1
 80087e0:	d0f1      	beq.n	80087c6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e2:	f7fe f94f 	bl	8006a84 <HAL_GetTick>
 80087e6:	1b80      	subs	r0, r0, r6
 80087e8:	42a8      	cmp	r0, r5
 80087ea:	d801      	bhi.n	80087f0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80087ec:	2d00      	cmp	r5, #0
 80087ee:	d1ea      	bne.n	80087c6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80087f2:	f043 0320 	orr.w	r3, r3, #32
 80087f6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087f8:	2320      	movs	r3, #32
 80087fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087fe:	2300      	movs	r3, #0
 8008800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8008804:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008808:	2001      	movs	r0, #1
 800880a:	e7e1      	b.n	80087d0 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800880c <I2C_WaitOnFlagUntilTimeout>:
{
 800880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008810:	9f06      	ldr	r7, [sp, #24]
 8008812:	4604      	mov	r4, r0
 8008814:	4688      	mov	r8, r1
 8008816:	4616      	mov	r6, r2
 8008818:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	6993      	ldr	r3, [r2, #24]
 800881e:	ea38 0303 	bics.w	r3, r8, r3
 8008822:	bf0c      	ite	eq
 8008824:	2301      	moveq	r3, #1
 8008826:	2300      	movne	r3, #0
 8008828:	42b3      	cmp	r3, r6
 800882a:	d001      	beq.n	8008830 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800882c:	2000      	movs	r0, #0
 800882e:	e015      	b.n	800885c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8008830:	1c6b      	adds	r3, r5, #1
 8008832:	d0f3      	beq.n	800881c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008834:	f7fe f926 	bl	8006a84 <HAL_GetTick>
 8008838:	1bc0      	subs	r0, r0, r7
 800883a:	42a8      	cmp	r0, r5
 800883c:	d801      	bhi.n	8008842 <I2C_WaitOnFlagUntilTimeout+0x36>
 800883e:	2d00      	cmp	r5, #0
 8008840:	d1eb      	bne.n	800881a <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008842:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008844:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008846:	f043 0320 	orr.w	r3, r3, #32
 800884a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800884c:	2320      	movs	r3, #32
 800884e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008852:	2300      	movs	r3, #0
 8008854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8008858:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008860 <I2C_RequestMemoryWrite>:
{
 8008860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008864:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008866:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <I2C_RequestMemoryWrite+0x68>)
{
 8008868:	4605      	mov	r5, r0
 800886a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	b2f2      	uxtb	r2, r6
 8008870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8008874:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008878:	f7ff ff00 	bl	800867c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800887c:	4628      	mov	r0, r5
 800887e:	4642      	mov	r2, r8
 8008880:	4639      	mov	r1, r7
 8008882:	f7ff ff9c 	bl	80087be <I2C_WaitOnTXISFlagUntilTimeout>
 8008886:	b118      	cbz	r0, 8008890 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8008888:	2001      	movs	r0, #1
}
 800888a:	b002      	add	sp, #8
 800888c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008890:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008892:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008894:	d10d      	bne.n	80088b2 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008896:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008898:	2200      	movs	r2, #0
 800889a:	2180      	movs	r1, #128	; 0x80
 800889c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800889e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80088a0:	463b      	mov	r3, r7
 80088a2:	f8cd 8000 	str.w	r8, [sp]
 80088a6:	f7ff ffb1 	bl	800880c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80088aa:	3800      	subs	r0, #0
 80088ac:	bf18      	it	ne
 80088ae:	2001      	movne	r0, #1
 80088b0:	e7eb      	b.n	800888a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80088b2:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088b4:	4639      	mov	r1, r7
 80088b6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80088b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088ba:	4642      	mov	r2, r8
 80088bc:	f7ff ff7f 	bl	80087be <I2C_WaitOnTXISFlagUntilTimeout>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d1e1      	bne.n	8008888 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	e7e6      	b.n	8008896 <I2C_RequestMemoryWrite+0x36>
 80088c8:	80002000 	.word	0x80002000

080088cc <I2C_RequestMemoryRead>:
{
 80088cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80088d0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80088d2:	4b18      	ldr	r3, [pc, #96]	; (8008934 <I2C_RequestMemoryRead+0x68>)
{
 80088d4:	4605      	mov	r5, r0
 80088d6:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	b2f2      	uxtb	r2, r6
 80088dc:	2300      	movs	r3, #0
{
 80088de:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80088e2:	f7ff fecb 	bl	800867c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088e6:	4628      	mov	r0, r5
 80088e8:	4642      	mov	r2, r8
 80088ea:	4639      	mov	r1, r7
 80088ec:	f7ff ff67 	bl	80087be <I2C_WaitOnTXISFlagUntilTimeout>
 80088f0:	b118      	cbz	r0, 80088fa <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 80088f2:	2001      	movs	r0, #1
}
 80088f4:	b002      	add	sp, #8
 80088f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80088fa:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088fc:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80088fe:	d10d      	bne.n	800891c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008900:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008902:	2200      	movs	r2, #0
 8008904:	2140      	movs	r1, #64	; 0x40
 8008906:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008908:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800890a:	463b      	mov	r3, r7
 800890c:	f8cd 8000 	str.w	r8, [sp]
 8008910:	f7ff ff7c 	bl	800880c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8008914:	3800      	subs	r0, #0
 8008916:	bf18      	it	ne
 8008918:	2001      	movne	r0, #1
 800891a:	e7eb      	b.n	80088f4 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800891c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800891e:	4639      	mov	r1, r7
 8008920:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008922:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008924:	4642      	mov	r2, r8
 8008926:	f7ff ff4a 	bl	80087be <I2C_WaitOnTXISFlagUntilTimeout>
 800892a:	2800      	cmp	r0, #0
 800892c:	d1e1      	bne.n	80088f2 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800892e:	682b      	ldr	r3, [r5, #0]
 8008930:	e7e6      	b.n	8008900 <I2C_RequestMemoryRead+0x34>
 8008932:	bf00      	nop
 8008934:	80002000 	.word	0x80002000

08008938 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	4604      	mov	r4, r0
 800893c:	460d      	mov	r5, r1
 800893e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	069b      	lsls	r3, r3, #26
 8008946:	d501      	bpl.n	800894c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8008948:	2000      	movs	r0, #0
}
 800894a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800894c:	4632      	mov	r2, r6
 800894e:	4629      	mov	r1, r5
 8008950:	4620      	mov	r0, r4
 8008952:	f7ff fea9 	bl	80086a8 <I2C_IsErrorOccurred>
 8008956:	b990      	cbnz	r0, 800897e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008958:	f7fe f894 	bl	8006a84 <HAL_GetTick>
 800895c:	1b80      	subs	r0, r0, r6
 800895e:	42a8      	cmp	r0, r5
 8008960:	d801      	bhi.n	8008966 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8008962:	2d00      	cmp	r5, #0
 8008964:	d1ec      	bne.n	8008940 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008966:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008968:	f043 0320 	orr.w	r3, r3, #32
 800896c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800896e:	2320      	movs	r3, #32
 8008970:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008974:	2300      	movs	r3, #0
 8008976:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800897a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800897e:	2001      	movs	r0, #1
 8008980:	e7e3      	b.n	800894a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08008982 <HAL_I2C_Init>:
{
 8008982:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008984:	4604      	mov	r4, r0
 8008986:	2800      	cmp	r0, #0
 8008988:	d04a      	beq.n	8008a20 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800898a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800898e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008992:	b91b      	cbnz	r3, 800899c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8008994:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8008998:	f7fb fc24 	bl	80041e4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800899c:	2324      	movs	r3, #36	; 0x24
 800899e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	f022 0201 	bic.w	r2, r2, #1
 80089aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80089ac:	6862      	ldr	r2, [r4, #4]
 80089ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80089b2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089ba:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80089bc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089c0:	2901      	cmp	r1, #1
 80089c2:	d124      	bne.n	8008a0e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80089c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089c8:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089ca:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089cc:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089ce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80089d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089d6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089de:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089e0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80089e4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089e6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80089ec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089ee:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	f042 0201 	orr.w	r2, r2, #1
 80089fc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80089fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a00:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008a02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a06:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8008a0c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a12:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a14:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a16:	d1d8      	bne.n	80089ca <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a1c:	605a      	str	r2, [r3, #4]
 8008a1e:	e7d4      	b.n	80089ca <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8008a20:	2001      	movs	r0, #1
 8008a22:	e7f3      	b.n	8008a0c <HAL_I2C_Init+0x8a>

08008a24 <HAL_I2C_DeInit>:
{
 8008a24:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008a26:	4604      	mov	r4, r0
 8008a28:	b198      	cbz	r0, 8008a52 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8008a2a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a2c:	2324      	movs	r3, #36	; 0x24
 8008a2e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008a3a:	f7fb fc35 	bl	80042a8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a3e:	2000      	movs	r0, #0
 8008a40:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8008a42:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008a46:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a4a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a4c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8008a50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008a52:	2001      	movs	r0, #1
 8008a54:	e7fc      	b.n	8008a50 <HAL_I2C_DeInit+0x2c>

08008a56 <HAL_I2C_Mem_Write>:
{
 8008a56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	469b      	mov	fp, r3
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460f      	mov	r7, r1
 8008a62:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8008a66:	4692      	mov	sl, r2
 8008a68:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8008a6c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	f040 80a3 	bne.w	8008bbe <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8008a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a7a:	b10b      	cbz	r3, 8008a80 <HAL_I2C_Mem_Write+0x2a>
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	b933      	cbnz	r3, 8008a8e <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a84:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8008a86:	2001      	movs	r0, #1
}
 8008a88:	b005      	add	sp, #20
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008a8e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	f000 8093 	beq.w	8008bbe <HAL_I2C_Mem_Write+0x168>
 8008a98:	2501      	movs	r5, #1
 8008a9a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8008a9e:	f7fd fff1 	bl	8006a84 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008aa2:	2319      	movs	r3, #25
 8008aa4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008aa6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008aa8:	462a      	mov	r2, r5
 8008aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f7ff feac 	bl	800880c <I2C_WaitOnFlagUntilTimeout>
 8008ab4:	4680      	mov	r8, r0
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1e5      	bne.n	8008a86 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008aba:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8008abc:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008abe:	4652      	mov	r2, sl
 8008ac0:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ac2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ac6:	2340      	movs	r3, #64	; 0x40
 8008ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8008acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ace:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ad0:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008ad2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ad4:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ad6:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8008ada:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008adc:	465b      	mov	r3, fp
 8008ade:	f7ff febf 	bl	8008860 <I2C_RequestMemoryWrite>
 8008ae2:	b110      	cbz	r0, 8008aea <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8008ae4:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008ae8:	e7cd      	b.n	8008a86 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008aea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2bff      	cmp	r3, #255	; 0xff
 8008af0:	d955      	bls.n	8008b9e <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008af2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008af8:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008afa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008afc:	4639      	mov	r1, r7
 8008afe:	4620      	mov	r0, r4
 8008b00:	f7ff fdbc 	bl	800867c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b04:	4632      	mov	r2, r6
 8008b06:	4649      	mov	r1, r9
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7ff fe58 	bl	80087be <I2C_WaitOnTXISFlagUntilTimeout>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d1b9      	bne.n	8008a86 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008b1a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008b1c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008b1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008b20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008b22:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008b24:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8008b26:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8008b28:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008b2a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008b2e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	b1ab      	cbz	r3, 8008b60 <HAL_I2C_Mem_Write+0x10a>
 8008b34:	b9a2      	cbnz	r2, 8008b60 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b36:	464b      	mov	r3, r9
 8008b38:	2180      	movs	r1, #128	; 0x80
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	9600      	str	r6, [sp, #0]
 8008b3e:	f7ff fe65 	bl	800880c <I2C_WaitOnFlagUntilTimeout>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d19f      	bne.n	8008a86 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2bff      	cmp	r3, #255	; 0xff
 8008b4c:	d92f      	bls.n	8008bae <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b4e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b54:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b56:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b58:	4639      	mov	r1, r7
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f7ff fd8e 	bl	800867c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008b60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1cd      	bne.n	8008b04 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b68:	4632      	mov	r2, r6
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f7ff fee3 	bl	8008938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d187      	bne.n	8008a86 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	2120      	movs	r1, #32
 8008b7a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8008b82:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8008b86:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008b90:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008b94:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b98:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8008b9c:	e774      	b.n	8008a88 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8008b9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ba4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8008ba6:	b292      	uxth	r2, r2
 8008ba8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008baa:	b2d2      	uxtb	r2, r2
 8008bac:	e7a6      	b.n	8008afc <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8008bae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bb4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8008bb6:	b292      	uxth	r2, r2
 8008bb8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	e7cc      	b.n	8008b58 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8008bbe:	2002      	movs	r0, #2
 8008bc0:	e762      	b.n	8008a88 <HAL_I2C_Mem_Write+0x32>
	...

08008bc4 <HAL_I2C_Mem_Read>:
{
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	469b      	mov	fp, r3
 8008bcc:	4604      	mov	r4, r0
 8008bce:	460f      	mov	r7, r1
 8008bd0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8008bd4:	4692      	mov	sl, r2
 8008bd6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8008bda:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bdc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	f040 80a7 	bne.w	8008d34 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8008be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008be8:	b10b      	cbz	r3, 8008bee <HAL_I2C_Mem_Read+0x2a>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	b933      	cbnz	r3, 8008bfc <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bf2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8008bf4:	2001      	movs	r0, #1
}
 8008bf6:	b005      	add	sp, #20
 8008bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008bfc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	f000 8097 	beq.w	8008d34 <HAL_I2C_Mem_Read+0x170>
 8008c06:	2501      	movs	r5, #1
 8008c08:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8008c0c:	f7fd ff3a 	bl	8006a84 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c10:	2319      	movs	r3, #25
 8008c12:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008c14:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c16:	462a      	mov	r2, r5
 8008c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f7ff fdf5 	bl	800880c <I2C_WaitOnFlagUntilTimeout>
 8008c22:	4680      	mov	r8, r0
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d1e5      	bne.n	8008bf4 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c28:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8008c2a:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8008c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c3c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c3e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008c40:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8008c42:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c44:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8008c48:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c4a:	465b      	mov	r3, fp
 8008c4c:	f7ff fe3e 	bl	80088cc <I2C_RequestMemoryRead>
 8008c50:	b110      	cbz	r0, 8008c58 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8008c52:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008c56:	e7cd      	b.n	8008bf4 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2bff      	cmp	r3, #255	; 0xff
 8008c5e:	4b36      	ldr	r3, [pc, #216]	; (8008d38 <HAL_I2C_Mem_Read+0x174>)
 8008c60:	d958      	bls.n	8008d14 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c62:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c6a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7ff fd04 	bl	800867c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c74:	464b      	mov	r3, r9
 8008c76:	2200      	movs	r2, #0
 8008c78:	2104      	movs	r1, #4
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	9600      	str	r6, [sp, #0]
 8008c7e:	f7ff fdc5 	bl	800880c <I2C_WaitOnFlagUntilTimeout>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d1b6      	bne.n	8008bf4 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c8c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8008c90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008c92:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8008c94:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008c96:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008c98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008c9a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008c9c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008c9e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ca4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	b1ab      	cbz	r3, 8008cd6 <HAL_I2C_Mem_Read+0x112>
 8008caa:	b9a2      	cbnz	r2, 8008cd6 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008cac:	464b      	mov	r3, r9
 8008cae:	2180      	movs	r1, #128	; 0x80
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	9600      	str	r6, [sp, #0]
 8008cb4:	f7ff fdaa 	bl	800880c <I2C_WaitOnFlagUntilTimeout>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d19b      	bne.n	8008bf4 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	2bff      	cmp	r3, #255	; 0xff
 8008cc2:	d92f      	bls.n	8008d24 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cc4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008cc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cca:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ccc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cce:	4639      	mov	r1, r7
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f7ff fcd3 	bl	800867c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008cd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1ca      	bne.n	8008c74 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cde:	4632      	mov	r2, r6
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7ff fe28 	bl	8008938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d183      	bne.n	8008bf4 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	2120      	movs	r1, #32
 8008cf0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8008cf8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8008cfc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8008d00:	f022 0201 	bic.w	r2, r2, #1
 8008d04:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008d06:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008d0a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d0e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8008d12:	e770      	b.n	8008bf6 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8008d14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8008d1c:	b292      	uxth	r2, r2
 8008d1e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	e7a3      	b.n	8008c6c <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8008d24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d2a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8008d2c:	b292      	uxth	r2, r2
 8008d2e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d30:	b2d2      	uxtb	r2, r2
 8008d32:	e7cc      	b.n	8008cce <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8008d34:	2002      	movs	r0, #2
 8008d36:	e75e      	b.n	8008bf6 <HAL_I2C_Mem_Read+0x32>
 8008d38:	80002400 	.word	0x80002400

08008d3c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d3c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8008d3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d40:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d42:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8008d44:	b103      	cbz	r3, 8008d48 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8008d46:	4718      	bx	r3
}
 8008d48:	4770      	bx	lr

08008d4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d4a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008d50:	2b20      	cmp	r3, #32
 8008d52:	b2dc      	uxtb	r4, r3
 8008d54:	d11d      	bne.n	8008d92 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d56:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d019      	beq.n	8008d92 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d5e:	2324      	movs	r3, #36	; 0x24
 8008d60:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d64:	6803      	ldr	r3, [r0, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	f022 0201 	bic.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	4311      	orrs	r1, r2
 8008d7a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	f042 0201 	orr.w	r2, r2, #1
 8008d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d84:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008d86:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008d8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8008d8e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008d90:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008d92:	2002      	movs	r0, #2
 8008d94:	e7fc      	b.n	8008d90 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08008d96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d96:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	b2dc      	uxtb	r4, r3
 8008da0:	d11c      	bne.n	8008ddc <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008da2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d018      	beq.n	8008ddc <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008daa:	2324      	movs	r3, #36	; 0x24
 8008dac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008db0:	6803      	ldr	r3, [r0, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	f022 0201 	bic.w	r2, r2, #1
 8008db8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008dba:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008dbc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008dc0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008dc4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	f042 0201 	orr.w	r2, r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dce:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008dd0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008dd4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8008dd8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008dda:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008ddc:	2002      	movs	r0, #2
 8008dde:	e7fc      	b.n	8008dda <HAL_I2CEx_ConfigDigitalFilter+0x44>

08008de0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008de2:	3801      	subs	r0, #1
 8008de4:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8008de6:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8008de8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 8008dec:	462f      	mov	r7, r5
 8008dee:	4425      	add	r5, r4
 8008df0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008df4:	d822      	bhi.n	8008e3c <JPEG_Bits_To_SizeCodes+0x5c>
 8008df6:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8008df8:	b954      	cbnz	r4, 8008e10 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 8008dfa:	3601      	adds	r6, #1
 8008dfc:	2e11      	cmp	r6, #17
 8008dfe:	d1f3      	bne.n	8008de8 <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8008e00:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008e02:	2601      	movs	r6, #1
  *LastK = p;
 8008e04:	601d      	str	r5, [r3, #0]
  code = 0;
 8008e06:	4623      	mov	r3, r4
  si = Huffsize[0];
 8008e08:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8008e0a:	5d08      	ldrb	r0, [r1, r4]
 8008e0c:	b9a0      	cbnz	r0, 8008e38 <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8008e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 8008e10:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 8008e12:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 8008e16:	e7ef      	b.n	8008df8 <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 8008e18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 8008e1c:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 8008e1e:	5d08      	ldrb	r0, [r1, r4]
 8008e20:	193b      	adds	r3, r7, r4
 8008e22:	42a8      	cmp	r0, r5
 8008e24:	d0f8      	beq.n	8008e18 <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 8008e26:	2d1f      	cmp	r5, #31
 8008e28:	d808      	bhi.n	8008e3c <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008e2a:	fa06 f005 	lsl.w	r0, r6, r5
 8008e2e:	4298      	cmp	r0, r3
 8008e30:	d904      	bls.n	8008e3c <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 8008e32:	005b      	lsls	r3, r3, #1
    si++;
 8008e34:	3501      	adds	r5, #1
 8008e36:	e7e8      	b.n	8008e0a <JPEG_Bits_To_SizeCodes+0x2a>
 8008e38:	1b1f      	subs	r7, r3, r4
 8008e3a:	e7f0      	b.n	8008e1e <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	e7e6      	b.n	8008e0e <JPEG_Bits_To_SizeCodes+0x2e>

08008e40 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e42:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8008e46:	460d      	mov	r5, r1
 8008e48:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008e4a:	ab01      	add	r3, sp, #4
 8008e4c:	aa43      	add	r2, sp, #268	; 0x10c
 8008e4e:	a902      	add	r1, sp, #8
 8008e50:	f7ff ffc6 	bl	8008de0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008e54:	b938      	cbnz	r0, 8008e66 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8008e56:	9e01      	ldr	r6, [sp, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	f104 0110 	add.w	r1, r4, #16
 8008e5e:	3610      	adds	r6, #16
 8008e60:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8008e62:	42a1      	cmp	r1, r4
 8008e64:	d102      	bne.n	8008e6c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008e66:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 8008e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8008e6c:	f811 6b01 	ldrb.w	r6, [r1], #1
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008e70:	2e0b      	cmp	r6, #11
 8008e72:	d80a      	bhi.n	8008e8a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008e74:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8008e78:	f852 cb04 	ldr.w	ip, [r2], #4
 8008e7c:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008e80:	f813 7b01 	ldrb.w	r7, [r3], #1
 8008e84:	3f01      	subs	r7, #1
 8008e86:	55af      	strb	r7, [r5, r6]
      k++;
 8008e88:	e7eb      	b.n	8008e62 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	e7eb      	b.n	8008e66 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08008e8e <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008e94:	681c      	ldr	r4, [r3, #0]
{
 8008e96:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008e98:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d125      	bne.n	8008eec <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008ea0:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8008ea4:	a901      	add	r1, sp, #4
 8008ea6:	f7ff ffcb 	bl	8008e40 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8008eaa:	b9e8      	cbnz	r0, 8008ee8 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8008eac:	aa01      	add	r2, sp, #4
 8008eae:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8008eb2:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8008eb6:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8008eb8:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8008eba:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008ebc:	7ad3      	ldrb	r3, [r2, #11]
    while (i > 1UL)
 8008ebe:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008ec0:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    while (i > 1UL)
 8008ec4:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008ec6:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008ec8:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008ecc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ed0:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008ed2:	7b13      	ldrb	r3, [r2, #12]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008eda:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008ee0:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008ee4:	42b4      	cmp	r4, r6
 8008ee6:	d1e9      	bne.n	8008ebc <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008ee8:	b011      	add	sp, #68	; 0x44
 8008eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8008eec:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d102      	bne.n	8008efa <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008ef4:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 8008ef8:	e7d4      	b.n	8008ea4 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8008efa:	2001      	movs	r0, #1
 8008efc:	e7f4      	b.n	8008ee8 <JPEG_Set_HuffDC_Mem+0x5a>

08008efe <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8008efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008f02:	6804      	ldr	r4, [r0, #0]
{
 8008f04:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 8008f08:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008f0a:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d115      	bne.n	8008f3e <JPEG_Set_HuffAC_Mem+0x40>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008f12:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008f16:	466b      	mov	r3, sp
 8008f18:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 8008f1c:	a901      	add	r1, sp, #4
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f7ff ff5e 	bl	8008de0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d15d      	bne.n	8008fe4 <JPEG_Set_HuffAC_Mem+0xe6>
 8008f28:	9b00      	ldr	r3, [sp, #0]
 8008f2a:	460e      	mov	r6, r1
 8008f2c:	f105 0c10 	add.w	ip, r5, #16
 8008f30:	4617      	mov	r7, r2
 8008f32:	3310      	adds	r3, #16
      l = (msb * 10UL) + lsb - 1UL;
 8008f34:	f04f 0e0a 	mov.w	lr, #10
 8008f38:	18e9      	adds	r1, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008f3a:	ad42      	add	r5, sp, #264	; 0x108
 8008f3c:	e021      	b.n	8008f82 <JPEG_Set_HuffAC_Mem+0x84>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8008f3e:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d110      	bne.n	8008f68 <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008f46:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 8008f4a:	e7e4      	b.n	8008f16 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8008f4c:	f81c 3b01 	ldrb.w	r3, [ip], #1
    if (l == 0UL)
 8008f50:	b163      	cbz	r3, 8008f6c <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8008f52:	2bf0      	cmp	r3, #240	; 0xf0
 8008f54:	d04a      	beq.n	8008fec <JPEG_Set_HuffAC_Mem+0xee>
      msb = (l & 0xF0UL) >> 4;
 8008f56:	ea4f 1813 	mov.w	r8, r3, lsr #4
      lsb = (l & 0x0FUL);
 8008f5a:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	fb0e 3308 	mla	r3, lr, r8, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008f64:	2ba1      	cmp	r3, #161	; 0xa1
 8008f66:	d902      	bls.n	8008f6e <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008f68:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 8008f6a:	e03b      	b.n	8008fe4 <JPEG_Set_HuffAC_Mem+0xe6>
      l = 160; /*l = 0x00 EOB code*/
 8008f6c:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008f6e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8008f72:	f857 8b04 	ldr.w	r8, [r7], #4
 8008f76:	f8c2 80a4 	str.w	r8, [r2, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008f7a:	f816 2b01 	ldrb.w	r2, [r6], #1
 8008f7e:	3a01      	subs	r2, #1
 8008f80:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 8008f82:	4561      	cmp	r1, ip
 8008f84:	d1e2      	bne.n	8008f4c <JPEG_Set_HuffAC_Mem+0x4e>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8008f86:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8008f8a:	a942      	add	r1, sp, #264	; 0x108
 8008f8c:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 8008f90:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8008f92:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8008f98:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 8008f9c:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 8008fa0:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8008fa2:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8008fa6:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8008fa8:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8008fac:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8008fae:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8008fb2:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008fb4:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
    while (i > 1UL)
 8008fb8:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008fba:	f895 2330 	ldrb.w	r2, [r5, #816]	; 0x330
    while (i > 1UL)
 8008fbe:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008fc0:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008fc2:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008fc6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008fca:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008fcc:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8008fd0:	021b      	lsls	r3, r3, #8
 8008fd2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008fd6:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008fd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fdc:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008fe0:	42b4      	cmp	r4, r6
 8008fe2:	d1e7      	bne.n	8008fb4 <JPEG_Set_HuffAC_Mem+0xb6>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008fe4:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 8008fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 8008fec:	23a1      	movs	r3, #161	; 0xa1
 8008fee:	e7be      	b.n	8008f6e <JPEG_Set_HuffAC_Mem+0x70>

08008ff0 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8008ff0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008ff2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008ff6:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008ff8:	6d42      	ldr	r2, [r0, #84]	; 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008ffa:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008ffc:	f002 0203 	and.w	r2, r2, #3
 8009000:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	bf0c      	ite	eq
 8009006:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800900a:	f022 0208 	bicne.w	r2, r2, #8
 800900e:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	f022 0201 	bic.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800901a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800901e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8009020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009022:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8009026:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800902a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800902e:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009036:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800903e:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	f042 0201 	orr.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009048:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800904a:	f002 020c 	and.w	r2, r2, #12
 800904e:	2a08      	cmp	r2, #8
 8009050:	d104      	bne.n	800905c <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8009052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009054:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009058:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800905a:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800905c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800905e:	f002 020c 	and.w	r2, r2, #12
 8009062:	2a0c      	cmp	r2, #12
 8009064:	d1f9      	bne.n	800905a <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009068:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800906c:	e7f4      	b.n	8009058 <JPEG_Init_Process+0x68>
	...

08009070 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8009072:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8009074:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8009076:	2b03      	cmp	r3, #3
 8009078:	d927      	bls.n	80090ca <JPEG_DMA_StartProcess+0x5a>
 800907a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800907c:	2903      	cmp	r1, #3
 800907e:	d924      	bls.n	80090ca <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8009080:	6d42      	ldr	r2, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009082:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8009086:	4d1a      	ldr	r5, [pc, #104]	; (80090f0 <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8009088:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800908c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8009090:	4e18      	ldr	r6, [pc, #96]	; (80090f4 <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8009092:	4f19      	ldr	r7, [pc, #100]	; (80090f8 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8009094:	6542      	str	r2, [r0, #84]	; 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8009096:	6802      	ldr	r2, [r0, #0]
 8009098:	6b10      	ldr	r0, [r2, #48]	; 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800909a:	3240      	adds	r2, #64	; 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800909c:	f420 50c0 	bic.w	r0, r0, #6144	; 0x1800
 80090a0:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 80090a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80090a6:	63c5      	str	r5, [r0, #60]	; 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 80090a8:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 80090aa:	64c6      	str	r6, [r0, #76]	; 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 80090ac:	64ee      	str	r6, [r5, #76]	; 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 80090ae:	4e13      	ldr	r6, [pc, #76]	; (80090fc <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 80090b0:	63ef      	str	r7, [r5, #60]	; 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 80090b2:	652e      	str	r6, [r5, #80]	; 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80090b4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80090b6:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 80090b8:	62e1      	str	r1, [r4, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80090ba:	69a1      	ldr	r1, [r4, #24]
 80090bc:	f7fe fb48 	bl	8007750 <HAL_DMA_Start_IT>
 80090c0:	b128      	cbz	r0, 80090ce <JPEG_DMA_StartProcess+0x5e>

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80090c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80090c4:	f043 0304 	orr.w	r3, r3, #4
 80090c8:	6523      	str	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 80090ca:	2001      	movs	r0, #1
 80090cc:	e00e      	b.n	80090ec <JPEG_DMA_StartProcess+0x7c>
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80090ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090d0:	6821      	ldr	r1, [r4, #0]
 80090d2:	089b      	lsrs	r3, r3, #2
 80090d4:	69e2      	ldr	r2, [r4, #28]
 80090d6:	3144      	adds	r1, #68	; 0x44
 80090d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80090da:	f7fe fb39 	bl	8007750 <HAL_DMA_Start_IT>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d1ef      	bne.n	80090c2 <JPEG_DMA_StartProcess+0x52>
    return HAL_ERROR;
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 80090e2:	6822      	ldr	r2, [r4, #0]
 80090e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80090e6:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80090ea:	6313      	str	r3, [r2, #48]	; 0x30

  return HAL_OK;
}
 80090ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ee:	bf00      	nop
 80090f0:	0800965d 	.word	0x0800965d
 80090f4:	08009541 	.word	0x08009541
 80090f8:	08009b11 	.word	0x08009b11
 80090fc:	08009b01 	.word	0x08009b01

08009100 <HAL_JPEG_Init>:
{
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8009102:	4604      	mov	r4, r0
 8009104:	2800      	cmp	r0, #0
 8009106:	f000 811f 	beq.w	8009348 <HAL_JPEG_Init+0x248>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800910a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800910e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009112:	b91b      	cbnz	r3, 800911c <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8009114:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8009118:	f7fb f8e8 	bl	80042ec <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800911c:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800911e:	2302      	movs	r3, #2
 8009120:	498a      	ldr	r1, [pc, #552]	; (800934c <HAL_JPEG_Init+0x24c>)
 8009122:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8009126:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800912a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800912c:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009136:	6813      	ldr	r3, [r2, #0]
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800913e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009140:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8009144:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8009146:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009148:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800914c:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800914e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009150:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009154:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009156:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800915c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800915e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009160:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009164:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009166:	4b7a      	ldr	r3, [pc, #488]	; (8009350 <HAL_JPEG_Init+0x250>)
 8009168:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800916a:	4b7a      	ldr	r3, [pc, #488]	; (8009354 <HAL_JPEG_Init+0x254>)
 800916c:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800916e:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8009170:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009174:	7b8b      	ldrb	r3, [r1, #14]
  while (index > 3UL)
 8009176:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009178:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800917a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800917c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8009180:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009182:	4333      	orrs	r3, r6
 8009184:	7c4e      	ldrb	r6, [r1, #17]
 8009186:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800918a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800918e:	42a8      	cmp	r0, r5
 8009190:	d1f0      	bne.n	8009174 <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009192:	4b71      	ldr	r3, [pc, #452]	; (8009358 <HAL_JPEG_Init+0x258>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8009194:	f502 7662 	add.w	r6, r2, #904	; 0x388
 8009198:	4970      	ldr	r1, [pc, #448]	; (800935c <HAL_JPEG_Init+0x25c>)
 800919a:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800919e:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 80091a2:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80091a6:	460d      	mov	r5, r1
 80091a8:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80091aa:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 80091ae:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 80091b2:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80091b6:	7bab      	ldrb	r3, [r5, #14]
  while (index > 3UL)
 80091b8:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80091ba:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80091be:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80091c0:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80091c4:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80091c8:	ea43 030c 	orr.w	r3, r3, ip
 80091cc:	f895 c011 	ldrb.w	ip, [r5, #17]
 80091d0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80091d4:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 80091d8:	42be      	cmp	r6, r7
 80091da:	d1ec      	bne.n	80091b6 <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 80091dc:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80091e0:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 80091e4:	0c1b      	lsrs	r3, r3, #16
 80091e6:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80091e8:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 80091ec:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 80091f0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80091f4:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
 80091f8:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80091fa:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80091fe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009200:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8009204:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009208:	4333      	orrs	r3, r6
 800920a:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 800920e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009212:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 8009216:	4285      	cmp	r5, r0
 8009218:	d1ec      	bne.n	80091f4 <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 800921a:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800921e:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  value = *address & 0xFFFF0000U;
 8009222:	484f      	ldr	r0, [pc, #316]	; (8009360 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFU;
 8009224:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8009226:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 800922a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 800922e:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 8009232:	4003      	ands	r3, r0
  *address = value;
 8009234:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009238:	2301      	movs	r3, #1
 800923a:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 800923e:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8009242:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8009246:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  value = *address & 0x0000FFFFUL;
 800924a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800924e:	4b45      	ldr	r3, [pc, #276]	; (8009364 <HAL_JPEG_Init+0x264>)
  value = *address & 0x0000FFFFUL;
 8009250:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8009252:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  *address = value;
 8009256:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 800925a:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 800925e:	4001      	ands	r1, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8009260:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 8009264:	f041 010a 	orr.w	r1, r1, #10
  *address = value;
 8009268:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800926c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 8009270:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8009274:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
 8009278:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 800927c:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800927e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  *address = value;
 8009282:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
 8009286:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800928a:	4937      	ldr	r1, [pc, #220]	; (8009368 <HAL_JPEG_Init+0x268>)
 800928c:	4003      	ands	r3, r0
  address = (hjpeg->Instance->DHTMEM + 102);
 800928e:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8009292:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8009296:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800929a:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800929e:	4b33      	ldr	r3, [pc, #204]	; (800936c <HAL_JPEG_Init+0x26c>)
 80092a0:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 80092a4:	4b32      	ldr	r3, [pc, #200]	; (8009370 <HAL_JPEG_Init+0x270>)
 80092a6:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 80092aa:	4b32      	ldr	r3, [pc, #200]	; (8009374 <HAL_JPEG_Init+0x274>)
 80092ac:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 80092b0:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 80092b4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80092b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 80092ba:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80092be:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
 80092c2:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80092c4:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80092c8:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80092ca:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80092ce:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80092d2:	4333      	orrs	r3, r6
 80092d4:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 80092d8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80092dc:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 80092e0:	42a8      	cmp	r0, r5
 80092e2:	d1ec      	bne.n	80092be <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80092e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092e8:	491c      	ldr	r1, [pc, #112]	; (800935c <HAL_JPEG_Init+0x25c>)
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7ff fe07 	bl	8008efe <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 80092f0:	b110      	cbz	r0, 80092f8 <HAL_JPEG_Init+0x1f8>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80092f2:	2001      	movs	r0, #1
 80092f4:	6520      	str	r0, [r4, #80]	; 0x50
}
 80092f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 80092f8:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80092fa:	4620      	mov	r0, r4
 80092fc:	491a      	ldr	r1, [pc, #104]	; (8009368 <HAL_JPEG_Init+0x268>)
 80092fe:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 8009302:	f7ff fdfc 	bl	8008efe <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8009306:	2800      	cmp	r0, #0
 8009308:	d1f3      	bne.n	80092f2 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC0);
 800930a:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800930c:	4620      	mov	r0, r4
 800930e:	490f      	ldr	r1, [pc, #60]	; (800934c <HAL_JPEG_Init+0x24c>)
 8009310:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8009314:	f7ff fdbb 	bl	8008e8e <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8009318:	2800      	cmp	r0, #0
 800931a:	d1ea      	bne.n	80092f2 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC1);
 800931c:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800931e:	4620      	mov	r0, r4
 8009320:	4915      	ldr	r1, [pc, #84]	; (8009378 <HAL_JPEG_Init+0x278>)
 8009322:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8009326:	f7ff fdb2 	bl	8008e8e <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800932a:	2800      	cmp	r0, #0
 800932c:	d1e1      	bne.n	80092f2 <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800932e:	6822      	ldr	r2, [r4, #0]
 8009330:	6853      	ldr	r3, [r2, #4]
 8009332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009336:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009338:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800933a:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 800933c:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800933e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009342:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 8009344:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 8009346:	e7d6      	b.n	80092f6 <HAL_JPEG_Init+0x1f6>
    return HAL_ERROR;
 8009348:	2001      	movs	r0, #1
 800934a:	e7d4      	b.n	80092f6 <HAL_JPEG_Init+0x1f6>
 800934c:	0802912d 	.word	0x0802912d
 8009350:	08029149 	.word	0x08029149
 8009354:	080290d1 	.word	0x080290d1
 8009358:	0b0a0908 	.word	0x0b0a0908
 800935c:	0802901f 	.word	0x0802901f
 8009360:	ffff0000 	.word	0xffff0000
 8009364:	09080706 	.word	0x09080706
 8009368:	08028f6d 	.word	0x08028f6d
 800936c:	01000404 	.word	0x01000404
 8009370:	05070403 	.word	0x05070403
 8009374:	04040201 	.word	0x04040201
 8009378:	08029111 	.word	0x08029111

0800937c <HAL_JPEG_GetInfo>:
{
 800937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009380:	2800      	cmp	r0, #0
 8009382:	d06a      	beq.n	800945a <HAL_JPEG_GetInfo+0xde>
 8009384:	2900      	cmp	r1, #0
 8009386:	d068      	beq.n	800945a <HAL_JPEG_GetInfo+0xde>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8009388:	6804      	ldr	r4, [r0, #0]
 800938a:	6863      	ldr	r3, [r4, #4]
 800938c:	f003 0303 	and.w	r3, r3, #3
 8009390:	2b02      	cmp	r3, #2
 8009392:	d13b      	bne.n	800940c <HAL_JPEG_GetInfo+0x90>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009394:	2310      	movs	r3, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8009396:	600b      	str	r3, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009398:	6863      	ldr	r3, [r4, #4]
 800939a:	0c1b      	lsrs	r3, r3, #16
 800939c:	608b      	str	r3, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800939e:	68e3      	ldr	r3, [r4, #12]
 80093a0:	0c1b      	lsrs	r3, r3, #16
 80093a2:	60cb      	str	r3, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80093a4:	680b      	ldr	r3, [r1, #0]
 80093a6:	f023 0320 	bic.w	r3, r3, #32
 80093aa:	2b10      	cmp	r3, #16
 80093ac:	d13b      	bne.n	8009426 <HAL_JPEG_GetInfo+0xaa>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80093ae:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80093b0:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80093b2:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80093b6:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80093b8:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80093ba:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80093bc:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80093c0:	d12f      	bne.n	8009422 <HAL_JPEG_GetInfo+0xa6>
 80093c2:	4313      	orrs	r3, r2
 80093c4:	071a      	lsls	r2, r3, #28
 80093c6:	d12e      	bne.n	8009426 <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80093c8:	2302      	movs	r3, #2
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80093ca:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	3450      	adds	r4, #80	; 0x50
 80093d0:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8009460 <HAL_JPEG_GetInfo+0xe4>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 80093d4:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80093d6:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 80093da:	f241 3888 	movw	r8, #5000	; 0x1388
    quantRow = *tableAddress;
 80093de:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 80093e2:	eb0c 0705 	add.w	r7, ip, r5
    quantRow = *tableAddress;
 80093e6:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80093e8:	fa29 f206 	lsr.w	r2, r9, r6
 80093ec:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 80093ee:	2a01      	cmp	r2, #1
 80093f0:	d120      	bne.n	8009434 <HAL_JPEG_GetInfo+0xb8>
        quality += 100UL;
 80093f2:	3364      	adds	r3, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 80093f4:	3608      	adds	r6, #8
 80093f6:	3701      	adds	r7, #1
 80093f8:	2e20      	cmp	r6, #32
 80093fa:	d1f5      	bne.n	80093e8 <HAL_JPEG_GetInfo+0x6c>
        }
      }
    }

    i += 4UL;
 80093fc:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80093fe:	2d40      	cmp	r5, #64	; 0x40
 8009400:	d1ed      	bne.n	80093de <HAL_JPEG_GetInfo+0x62>
    tableAddress ++;
  }

  return (quality / 64UL);
 8009402:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8009404:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009406:	610b      	str	r3, [r1, #16]
}
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800940c:	6863      	ldr	r3, [r4, #4]
 800940e:	f013 0303 	ands.w	r3, r3, #3
 8009412:	d0c0      	beq.n	8009396 <HAL_JPEG_GetInfo+0x1a>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8009414:	6863      	ldr	r3, [r4, #4]
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	2b03      	cmp	r3, #3
 800941c:	d11d      	bne.n	800945a <HAL_JPEG_GetInfo+0xde>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800941e:	2330      	movs	r3, #48	; 0x30
 8009420:	e7b9      	b.n	8009396 <HAL_JPEG_GetInfo+0x1a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009422:	2d03      	cmp	r5, #3
 8009424:	d001      	beq.n	800942a <HAL_JPEG_GetInfo+0xae>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009426:	2300      	movs	r3, #0
 8009428:	e7cf      	b.n	80093ca <HAL_JPEG_GetInfo+0x4e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800942a:	4313      	orrs	r3, r2
 800942c:	071b      	lsls	r3, r3, #28
 800942e:	d1fa      	bne.n	8009426 <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8009430:	2301      	movs	r3, #1
 8009432:	e7ca      	b.n	80093ca <HAL_JPEG_GetInfo+0x4e>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8009434:	fb0e fb02 	mul.w	fp, lr, r2
 8009438:	f897 a000 	ldrb.w	sl, [r7]
 800943c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800943e:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8009442:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8009446:	2a64      	cmp	r2, #100	; 0x64
          quality += 5000UL / scale;
 8009448:	bf8b      	itete	hi
 800944a:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800944e:	f1c2 02c8 	rsbls	r2, r2, #200	; 0xc8
          quality += 5000UL / scale;
 8009452:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8009454:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8009458:	e7cc      	b.n	80093f4 <HAL_JPEG_GetInfo+0x78>
    return HAL_ERROR;
 800945a:	2001      	movs	r0, #1
 800945c:	e7d4      	b.n	8009408 <HAL_JPEG_GetInfo+0x8c>
 800945e:	bf00      	nop
 8009460:	08029189 	.word	0x08029189

08009464 <HAL_JPEG_Decode_DMA>:
{
 8009464:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8009466:	4604      	mov	r4, r0
 8009468:	b348      	cbz	r0, 80094be <HAL_JPEG_Decode_DMA+0x5a>
 800946a:	b341      	cbz	r1, 80094be <HAL_JPEG_Decode_DMA+0x5a>
 800946c:	b33b      	cbz	r3, 80094be <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800946e:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 8009472:	2d01      	cmp	r5, #1
 8009474:	d028      	beq.n	80094c8 <HAL_JPEG_Decode_DMA+0x64>
 8009476:	2501      	movs	r5, #1
 8009478:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800947c:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
 8009480:	2d01      	cmp	r5, #1
 8009482:	d11e      	bne.n	80094c2 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009484:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8009486:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009488:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800948c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800948e:	f025 050f 	bic.w	r5, r5, #15
 8009492:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8009494:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8009496:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800949a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800949e:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
 80094a0:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 80094a2:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 80094a4:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 80094a6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegOutCount = 0;
 80094a8:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 80094aa:	f7ff fda1 	bl	8008ff0 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80094ae:	f7ff fddf 	bl	8009070 <JPEG_DMA_StartProcess>
 80094b2:	b128      	cbz	r0, 80094c0 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80094b4:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 80094b6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80094ba:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 80094be:	2001      	movs	r0, #1
}
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hjpeg);
 80094c2:	2300      	movs	r3, #0
 80094c4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  __HAL_LOCK(hjpeg);
 80094c8:	2002      	movs	r0, #2
 80094ca:	e7f9      	b.n	80094c0 <HAL_JPEG_Decode_DMA+0x5c>

080094cc <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80094cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80094ce:	f003 030c 	and.w	r3, r3, #12
 80094d2:	2b0c      	cmp	r3, #12
 80094d4:	d117      	bne.n	8009506 <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80094d6:	f011 0301 	ands.w	r3, r1, #1
 80094da:	d005      	beq.n	80094e8 <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80094dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80094de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094e2:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 80094e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80094e8:	0789      	lsls	r1, r1, #30
 80094ea:	d505      	bpl.n	80094f8 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80094ec:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 80094ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80094f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094f6:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80094f8:	6801      	ldr	r1, [r0, #0]
 80094fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80094fc:	ea22 0303 	bic.w	r3, r2, r3
 8009500:	630b      	str	r3, [r1, #48]	; 0x30
}
 8009502:	2000      	movs	r0, #0
 8009504:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009506:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009508:	f003 030c 	and.w	r3, r3, #12
 800950c:	2b08      	cmp	r3, #8
 800950e:	d1f8      	bne.n	8009502 <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009510:	f011 0301 	ands.w	r3, r1, #1
 8009514:	d004      	beq.n	8009520 <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009516:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800951c:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800951e:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009520:	078a      	lsls	r2, r1, #30
 8009522:	d5e9      	bpl.n	80094f8 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009524:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009526:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800952a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800952e:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009530:	e7e2      	b.n	80094f8 <HAL_JPEG_Pause+0x2c>

08009532 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8009532:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8009534:	6282      	str	r2, [r0, #40]	; 0x28
}
 8009536:	4770      	bx	lr

08009538 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009538:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800953a:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800953c:	4770      	bx	lr

0800953e <HAL_JPEG_EncodeCpltCallback>:
 800953e:	4770      	bx	lr

08009540 <JPEG_DMAErrorCallback>:
{
 8009540:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009542:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009544:	f7fe fa12 	bl	800796c <HAL_DMA_GetError>
 8009548:	2802      	cmp	r0, #2
 800954a:	d016      	beq.n	800957a <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800954c:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 800954e:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	f022 0201 	bic.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800955a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800955e:	631a      	str	r2, [r3, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8009560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009562:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8009566:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009568:	2301      	movs	r3, #1
 800956a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800956e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009570:	f043 0304 	orr.w	r3, r3, #4
 8009574:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 8009576:	f7f8 fab9 	bl	8001aec <HAL_JPEG_ErrorCallback>
}
 800957a:	bd10      	pop	{r4, pc}

0800957c <JPEG_ReadInputData>:
{
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800957e:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8009580:	4604      	mov	r4, r0
 8009582:	460e      	mov	r6, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009584:	bb35      	cbnz	r5, 80095d4 <JPEG_ReadInputData+0x58>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009586:	2101      	movs	r1, #1
 8009588:	f7ff ffa0 	bl	80094cc <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800958c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800958e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8009592:	d11e      	bne.n	80095d2 <JPEG_ReadInputData+0x56>
 8009594:	b1ed      	cbz	r5, 80095d2 <JPEG_ReadInputData+0x56>
    if (nb_words >= nbRequestWords)
 8009596:	ebb6 0f95 	cmp.w	r6, r5, lsr #2
    nb_words = nb_bytes / 4UL;
 800959a:	ea4f 0795 	mov.w	r7, r5, lsr #2
    if (nb_words >= nbRequestWords)
 800959e:	d830      	bhi.n	8009602 <JPEG_ReadInputData+0x86>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80095a0:	69a5      	ldr	r5, [r4, #24]
 80095a2:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 80095a4:	6a20      	ldr	r0, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80095a6:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80095a8:	1829      	adds	r1, r5, r0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80095aa:	5c28      	ldrb	r0, [r5, r0]
      for (index = 0; index < nbRequestWords; index++)
 80095ac:	429e      	cmp	r6, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80095ae:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80095b0:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80095b4:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80095b8:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80095ba:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80095be:	ea42 0200 	orr.w	r2, r2, r0
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80095c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80095c6:	643a      	str	r2, [r7, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 80095c8:	6a22      	ldr	r2, [r4, #32]
 80095ca:	f102 0204 	add.w	r2, r2, #4
 80095ce:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80095d0:	d1e8      	bne.n	80095a4 <JPEG_ReadInputData+0x28>
}
 80095d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80095d4:	6a03      	ldr	r3, [r0, #32]
 80095d6:	429d      	cmp	r5, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80095d8:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80095da:	d901      	bls.n	80095e0 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80095dc:	1aed      	subs	r5, r5, r3
 80095de:	e7d5      	b.n	800958c <JPEG_ReadInputData+0x10>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80095e0:	429d      	cmp	r5, r3
 80095e2:	d10c      	bne.n	80095fe <JPEG_ReadInputData+0x82>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80095e4:	6a01      	ldr	r1, [r0, #32]
 80095e6:	f7f8 fa29 	bl	8001a3c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80095ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80095ec:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80095ee:	bf84      	itt	hi
 80095f0:	f023 0303 	bichi.w	r3, r3, #3
 80095f4:	62a3      	strhi	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 80095f6:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 80095f8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 80095fa:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80095fc:	e7c6      	b.n	800958c <JPEG_ReadInputData+0x10>
  uint32_t nb_bytes = 0;
 80095fe:	2500      	movs	r5, #0
 8009600:	e7c4      	b.n	800958c <JPEG_ReadInputData+0x10>
      if (nb_words > 0UL)
 8009602:	2d03      	cmp	r5, #3
 8009604:	d826      	bhi.n	8009654 <JPEG_ReadInputData+0xd8>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009606:	69a6      	ldr	r6, [r4, #24]
        for (index = 0; index < nb_bytes; index++)
 8009608:	461a      	mov	r2, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800960a:	6a21      	ldr	r1, [r4, #32]
 800960c:	00d0      	lsls	r0, r2, #3
        for (index = 0; index < nb_bytes; index++)
 800960e:	3201      	adds	r2, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009610:	5c71      	ldrb	r1, [r6, r1]
        for (index = 0; index < nb_bytes; index++)
 8009612:	4295      	cmp	r5, r2
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009614:	fa01 f100 	lsl.w	r1, r1, r0
 8009618:	ea43 0301 	orr.w	r3, r3, r1
          hjpeg->JpegInCount++;
 800961c:	6a21      	ldr	r1, [r4, #32]
 800961e:	f101 0101 	add.w	r1, r1, #1
 8009622:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8009624:	d1f1      	bne.n	800960a <JPEG_ReadInputData+0x8e>
        hjpeg->Instance->DIR = dataword;
 8009626:	6822      	ldr	r2, [r4, #0]
 8009628:	6413      	str	r3, [r2, #64]	; 0x40
}
 800962a:	e7d2      	b.n	80095d2 <JPEG_ReadInputData+0x56>
          input_count = hjpeg->JpegInCount;
 800962c:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800962e:	3301      	adds	r3, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009630:	69a6      	ldr	r6, [r4, #24]
 8009632:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009634:	1970      	adds	r0, r6, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009636:	5d75      	ldrb	r5, [r6, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009638:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800963a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800963e:	0412      	lsls	r2, r2, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009640:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009642:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8009646:	432a      	orrs	r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009648:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800964c:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800964e:	6a22      	ldr	r2, [r4, #32]
 8009650:	3204      	adds	r2, #4
 8009652:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8009654:	42bb      	cmp	r3, r7
 8009656:	d1e9      	bne.n	800962c <JPEG_ReadInputData+0xb0>
 8009658:	e7bb      	b.n	80095d2 <JPEG_ReadInputData+0x56>
	...

0800965c <JPEG_DMAInCpltCallback>:
{
 800965c:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800965e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009664:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8009668:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800966a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800966c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8009670:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009674:	0412      	lsls	r2, r2, #16
 8009676:	0c12      	lsrs	r2, r2, #16
 8009678:	2a0c      	cmp	r2, #12
 800967a:	d12c      	bne.n	80096d6 <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800967c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800967e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8009684:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009686:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8009688:	685a      	ldr	r2, [r3, #4]
 800968a:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <JPEG_DMAInCpltCallback+0x9c>)
 800968c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 8009690:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009692:	1a9b      	subs	r3, r3, r2
 8009694:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009696:	6a21      	ldr	r1, [r4, #32]
 8009698:	f7f8 f9d0 	bl	8001a3c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 800969c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d91a      	bls.n	80096d8 <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80096a2:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 80096a6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80096a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80096aa:	04db      	lsls	r3, r3, #19
 80096ac:	d41d      	bmi.n	80096ea <JPEG_DMAInCpltCallback+0x8e>
 80096ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096b0:	b1db      	cbz	r3, 80096ea <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80096b2:	6822      	ldr	r2, [r4, #0]
 80096b4:	089b      	lsrs	r3, r3, #2
 80096b6:	69a1      	ldr	r1, [r4, #24]
 80096b8:	3240      	adds	r2, #64	; 0x40
 80096ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80096bc:	f7fe f848 	bl	8007750 <HAL_DMA_Start_IT>
 80096c0:	b170      	cbz	r0, 80096e0 <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80096c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 80096c4:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80096c6:	f043 0304 	orr.w	r3, r3, #4
 80096ca:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80096cc:	2306      	movs	r3, #6
 80096ce:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 80096d2:	f7f8 fa0b 	bl	8001aec <HAL_JPEG_ErrorCallback>
}
 80096d6:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0e5      	beq.n	80096a8 <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 80096dc:	2304      	movs	r3, #4
 80096de:	e7e2      	b.n	80096a6 <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80096e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80096e8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80096ea:	6822      	ldr	r2, [r4, #0]
 80096ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80096ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80096f2:	6313      	str	r3, [r2, #48]	; 0x30
 80096f4:	e7ef      	b.n	80096d6 <JPEG_DMAInCpltCallback+0x7a>
 80096f6:	bf00      	nop
 80096f8:	0003fffc 	.word	0x0003fffc

080096fc <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80096fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 80096fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009700:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009704:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8009706:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009708:	4293      	cmp	r3, r2
 800970a:	d32a      	bcc.n	8009762 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800970c:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800970e:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8009710:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009712:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8009714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nbOutputWords; index++)
 8009716:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009718:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800971a:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800971c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800971e:	69e0      	ldr	r0, [r4, #28]
 8009720:	4428      	add	r0, r5
 8009722:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8009726:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009728:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800972a:	69e0      	ldr	r0, [r4, #28]
 800972c:	4428      	add	r0, r5
 800972e:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009732:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009736:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009738:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800973a:	69e0      	ldr	r0, [r4, #28]
 800973c:	4428      	add	r0, r5
 800973e:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8009740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009742:	f103 0304 	add.w	r3, r3, #4
 8009746:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8009748:	d1e1      	bne.n	800970e <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800974a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800974c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800974e:	429a      	cmp	r2, r3
 8009750:	d106      	bne.n	8009760 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009752:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009754:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009756:	4620      	mov	r0, r4
 8009758:	f7f8 f98e 	bl	8001a78 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009762:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009764:	4293      	cmp	r3, r2
 8009766:	d9fb      	bls.n	8009760 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009768:	6a42      	ldr	r2, [r0, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800976a:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8009770:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009772:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8009774:	d105      	bne.n	8009782 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009776:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800977a:	429f      	cmp	r7, r3
 800977c:	d119      	bne.n	80097b2 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800977e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009780:	e7e9      	b.n	8009756 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8009782:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8009784:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8009786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009788:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800978a:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800978c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800978e:	69e1      	ldr	r1, [r4, #28]
 8009790:	4429      	add	r1, r5
 8009792:	0a1d      	lsrs	r5, r3, #8
 8009794:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009796:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009798:	69e1      	ldr	r1, [r4, #28]
 800979a:	4429      	add	r1, r5
 800979c:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800979e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80097a0:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80097a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097a4:	69e1      	ldr	r1, [r4, #28]
 80097a6:	4429      	add	r1, r5
 80097a8:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 80097aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ac:	3304      	adds	r3, #4
 80097ae:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 80097b0:	e7de      	b.n	8009770 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80097b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 80097b4:	2000      	movs	r0, #0
      dataword = hjpeg->Instance->DOR;
 80097b6:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80097b8:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 80097bc:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
 80097be:	4560      	cmp	r0, ip
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80097c0:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80097c2:	d114      	bne.n	80097ee <JPEG_StoreOutputData+0xf2>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80097c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7f8 f956 	bl	8001a78 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	6263      	str	r3, [r4, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 80097d0:	1d2b      	adds	r3, r5, #4
 80097d2:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d8c3      	bhi.n	8009760 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80097d8:	00da      	lsls	r2, r3, #3
 80097da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80097dc:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80097de:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80097e0:	fa26 f202 	lsr.w	r2, r6, r2
 80097e4:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80097e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80097e8:	3201      	adds	r2, #1
 80097ea:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80097ec:	e7f2      	b.n	80097d4 <JPEG_StoreOutputData+0xd8>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80097ee:	f000 0203 	and.w	r2, r0, #3
 80097f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 80097f4:	3001      	adds	r0, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80097f6:	00d2      	lsls	r2, r2, #3
 80097f8:	fa26 f202 	lsr.w	r2, r6, r2
 80097fc:	54ca      	strb	r2, [r1, r3]
        hjpeg->JpegOutCount++;
 80097fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009800:	3301      	adds	r3, #1
 8009802:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8009804:	e7db      	b.n	80097be <JPEG_StoreOutputData+0xc2>

08009806 <JPEG_Process>:
{
 8009806:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009808:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 800980a:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800980c:	f003 0303 	and.w	r3, r3, #3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d114      	bne.n	800983e <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009814:	6803      	ldr	r3, [r0, #0]
 8009816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009818:	065a      	lsls	r2, r3, #25
 800981a:	d510      	bpl.n	800983e <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800981c:	1d01      	adds	r1, r0, #4
 800981e:	f7ff fdad 	bl	800937c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009822:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009824:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009826:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009828:	f7f8 f8ba 	bl	80019a0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009834:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800983c:	639a      	str	r2, [r3, #56]	; 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800983e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009840:	04db      	lsls	r3, r3, #19
 8009842:	d407      	bmi.n	8009854 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009848:	0795      	lsls	r5, r2, #30
 800984a:	d543      	bpl.n	80098d4 <JPEG_Process+0xce>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800984c:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 800984e:	4620      	mov	r0, r4
 8009850:	f7ff fe94 	bl	800957c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009854:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009856:	0499      	lsls	r1, r3, #18
 8009858:	d407      	bmi.n	800986a <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800985e:	0712      	lsls	r2, r2, #28
 8009860:	d53d      	bpl.n	80098de <JPEG_Process+0xd8>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009862:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff ff49 	bl	80096fc <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800986e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8009872:	2a20      	cmp	r2, #32
 8009874:	d13b      	bne.n	80098ee <JPEG_Process+0xe8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	f022 0201 	bic.w	r2, r2, #1
 800987c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800987e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009880:	f002 020c 	and.w	r2, r2, #12
 8009884:	2a08      	cmp	r2, #8
 8009886:	d103      	bne.n	8009890 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800988a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800988e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009892:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009896:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8009898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800989a:	b133      	cbz	r3, 80098aa <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800989c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800989e:	4620      	mov	r0, r4
 80098a0:	69e1      	ldr	r1, [r4, #28]
 80098a2:	f7f8 f8e9 	bl	8001a78 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 80098aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80098ac:	2501      	movs	r5, #1
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80098ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80098b0:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80098b2:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80098b6:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80098ba:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80098bc:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 80098be:	f04f 0200 	mov.w	r2, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 80098c2:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);
 80098c6:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80098ca:	d10d      	bne.n	80098e8 <JPEG_Process+0xe2>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80098cc:	f7f8 f916 	bl	8001afc <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80098d0:	4628      	mov	r0, r5
}
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80098d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d6:	0758      	lsls	r0, r3, #29
 80098d8:	d5bc      	bpl.n	8009854 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80098da:	2101      	movs	r1, #1
 80098dc:	e7b7      	b.n	800984e <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80098de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e0:	06db      	lsls	r3, r3, #27
 80098e2:	d5c2      	bpl.n	800986a <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80098e4:	2101      	movs	r1, #1
 80098e6:	e7bd      	b.n	8009864 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80098e8:	f7ff fe29 	bl	800953e <HAL_JPEG_EncodeCpltCallback>
 80098ec:	e7f0      	b.n	80098d0 <JPEG_Process+0xca>
  return JPEG_PROCESS_ONGOING;
 80098ee:	2000      	movs	r0, #0
 80098f0:	e7ef      	b.n	80098d2 <JPEG_Process+0xcc>

080098f2 <JPEG_DMA_PollResidualData>:
{
 80098f2:	b570      	push	{r4, r5, r6, lr}
 80098f4:	4604      	mov	r4, r0
 80098f6:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80098f8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80098fa:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 80098fe:	d123      	bne.n	8009948 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009904:	06d0      	lsls	r0, r2, #27
 8009906:	d51f      	bpl.n	8009948 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8009908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800990a:	69e1      	ldr	r1, [r4, #28]
 800990c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800990e:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8009910:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009912:	69e2      	ldr	r2, [r4, #28]
 8009914:	440a      	add	r2, r1
 8009916:	0a19      	lsrs	r1, r3, #8
 8009918:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800991a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800991c:	69e2      	ldr	r2, [r4, #28]
 800991e:	440a      	add	r2, r1
 8009920:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009922:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009924:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009926:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009928:	69e2      	ldr	r2, [r4, #28]
 800992a:	440a      	add	r2, r1
 800992c:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800992e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009930:	3304      	adds	r3, #4
 8009932:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009934:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009936:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009938:	429a      	cmp	r2, r3
 800993a:	d105      	bne.n	8009948 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800993c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800993e:	4620      	mov	r0, r4
 8009940:	69e1      	ldr	r1, [r4, #28]
 8009942:	f7f8 f899 	bl	8001a78 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8009946:	6265      	str	r5, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009948:	3e01      	subs	r6, #1
 800994a:	d1d5      	bne.n	80098f8 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800994c:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800994e:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009950:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009952:	06c9      	lsls	r1, r1, #27
 8009954:	d501      	bpl.n	800995a <JPEG_DMA_PollResidualData+0x68>
 8009956:	0492      	lsls	r2, r2, #18
 8009958:	d420      	bmi.n	800999c <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	f022 0201 	bic.w	r2, r2, #1
 8009960:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8009962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009964:	b133      	cbz	r3, 8009974 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009966:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009968:	4620      	mov	r0, r4
 800996a:	69e1      	ldr	r1, [r4, #28]
 800996c:	f7f8 f884 	bl	8001a78 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 8009974:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009976:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009978:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800997a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800997e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009982:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009984:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800998e:	f04f 0201 	mov.w	r2, #1
 8009992:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009996:	d102      	bne.n	800999e <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009998:	f7f8 f8b0 	bl	8001afc <HAL_JPEG_DecodeCpltCallback>
}
 800999c:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800999e:	f7ff fdce 	bl	800953e <HAL_JPEG_EncodeCpltCallback>
}
 80099a2:	e7fb      	b.n	800999c <JPEG_DMA_PollResidualData+0xaa>

080099a4 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80099a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80099a6:	f413 5f40 	tst.w	r3, #12288	; 0x3000
{
 80099aa:	b570      	push	{r4, r5, r6, lr}
 80099ac:	4604      	mov	r4, r0
 80099ae:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80099b0:	d034      	beq.n	8009a1c <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80099b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80099b4:	f003 030c 	and.w	r3, r3, #12
 80099b8:	2b0c      	cmp	r3, #12
 80099ba:	d13e      	bne.n	8009a3a <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80099bc:	f011 0601 	ands.w	r6, r1, #1
 80099c0:	d00a      	beq.n	80099d8 <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80099c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80099c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099c8:	6543      	str	r3, [r0, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80099ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80099cc:	f023 0303 	bic.w	r3, r3, #3
 80099d0:	6283      	str	r3, [r0, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
 80099d2:	b99b      	cbnz	r3, 80099fc <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 80099d4:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80099d8:	07a8      	lsls	r0, r5, #30
 80099da:	d509      	bpl.n	80099f0 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80099dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80099de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099e2:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80099e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80099e6:	0419      	lsls	r1, r3, #16
 80099e8:	d51a      	bpl.n	8009a20 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 80099ea:	4620      	mov	r0, r4
 80099ec:	f7ff ff81 	bl	80098f2 <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 80099f0:	6822      	ldr	r2, [r4, #0]
 80099f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80099f4:	431e      	orrs	r6, r3
 80099f6:	6316      	str	r6, [r2, #48]	; 0x30
  return HAL_OK;
 80099f8:	2000      	movs	r0, #0
 80099fa:	e010      	b.n	8009a1e <HAL_JPEG_Resume+0x7a>
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80099fc:	6802      	ldr	r2, [r0, #0]
 80099fe:	089b      	lsrs	r3, r3, #2
 8009a00:	6981      	ldr	r1, [r0, #24]
 8009a02:	3240      	adds	r2, #64	; 0x40
 8009a04:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009a06:	f7fd fea3 	bl	8007750 <HAL_DMA_Start_IT>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d0e2      	beq.n	80099d4 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009a0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a10:	f043 0304 	orr.w	r3, r3, #4
 8009a14:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009a16:	2306      	movs	r3, #6
 8009a18:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 8009a1c:	2001      	movs	r0, #1
}
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009a20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a22:	6821      	ldr	r1, [r4, #0]
 8009a24:	089b      	lsrs	r3, r3, #2
 8009a26:	69e2      	ldr	r2, [r4, #28]
 8009a28:	3144      	adds	r1, #68	; 0x44
 8009a2a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009a2c:	f7fd fe90 	bl	8007750 <HAL_DMA_Start_IT>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d1ec      	bne.n	8009a0e <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 8009a34:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8009a38:	e7da      	b.n	80099f0 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009a3a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009a3c:	f003 030c 	and.w	r3, r3, #12
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d1d9      	bne.n	80099f8 <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009a44:	f011 0301 	ands.w	r3, r1, #1
 8009a48:	d004      	beq.n	8009a54 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009a4a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a50:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009a52:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009a54:	07aa      	lsls	r2, r5, #30
 8009a56:	d505      	bpl.n	8009a64 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009a58:	6d62      	ldr	r2, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009a5a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a62:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8009a64:	6821      	ldr	r1, [r4, #0]
 8009a66:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	630b      	str	r3, [r1, #48]	; 0x30
 8009a6c:	e7c4      	b.n	80099f8 <HAL_JPEG_Resume+0x54>
	...

08009a70 <JPEG_DMA_EndProcess>:
{
 8009a70:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8009a72:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8009a74:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8009a76:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6859      	ldr	r1, [r3, #4]
 8009a7c:	4b1f      	ldr	r3, [pc, #124]	; (8009afc <JPEG_DMA_EndProcess+0x8c>)
 8009a7e:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009a86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d105      	bne.n	8009a98 <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a8c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009a8e:	69c1      	ldr	r1, [r0, #28]
 8009a90:	f7f7 fff2 	bl	8001a78 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	6263      	str	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009a9c:	f015 0510 	ands.w	r5, r5, #16
 8009aa0:	d124      	bne.n	8009aec <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 8009aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa4:	b12b      	cbz	r3, 8009ab2 <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009aa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	69e1      	ldr	r1, [r4, #28]
 8009aac:	f7f7 ffe4 	bl	8001a78 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009ab0:	6265      	str	r5, [r4, #36]	; 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009ab2:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009ab4:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	f023 0301 	bic.w	r3, r3, #1
 8009abc:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8009abe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009ac0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ac2:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009ac6:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009aca:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009acc:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8009ace:	f04f 0200 	mov.w	r2, #0
 8009ad2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009ad6:	f04f 0201 	mov.w	r2, #1
 8009ada:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ade:	d102      	bne.n	8009ae6 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009ae0:	f7f8 f80c 	bl	8001afc <HAL_JPEG_DecodeCpltCallback>
}
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009ae6:	f7ff fd2a 	bl	800953e <HAL_JPEG_EncodeCpltCallback>
 8009aea:	e7fb      	b.n	8009ae4 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009aec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009aee:	049b      	lsls	r3, r3, #18
 8009af0:	d4f8      	bmi.n	8009ae4 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 8009af2:	4620      	mov	r0, r4
}
 8009af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8009af8:	f7ff befb 	b.w	80098f2 <JPEG_DMA_PollResidualData>
 8009afc:	0003fffc 	.word	0x0003fffc

08009b00 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b00:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009b02:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009b04:	041b      	lsls	r3, r3, #16
 8009b06:	d501      	bpl.n	8009b0c <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8009b08:	f7ff bfb2 	b.w	8009a70 <JPEG_DMA_EndProcess>
}
 8009b0c:	4770      	bx	lr
	...

08009b10 <JPEG_DMAOutCpltCallback>:
{
 8009b10:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b12:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b18:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8009b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8009b1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009b20:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8009b24:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009b28:	0412      	lsls	r2, r2, #16
 8009b2a:	0c12      	lsrs	r2, r2, #16
 8009b2c:	2a0c      	cmp	r2, #12
 8009b2e:	d129      	bne.n	8009b84 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8009b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b32:	0692      	lsls	r2, r2, #26
 8009b34:	d42c      	bmi.n	8009b90 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8009b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b38:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8009b3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8009b40:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b42:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	4b15      	ldr	r3, [pc, #84]	; (8009b9c <JPEG_DMAOutCpltCallback+0x8c>)
 8009b48:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 8009b4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b4e:	1a9b      	subs	r3, r3, r2
 8009b50:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009b54:	f7f7 ff90 	bl	8001a78 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009b58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b5a:	049b      	lsls	r3, r3, #18
 8009b5c:	d418      	bmi.n	8009b90 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009b5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b60:	6821      	ldr	r1, [r4, #0]
 8009b62:	089b      	lsrs	r3, r3, #2
 8009b64:	69e2      	ldr	r2, [r4, #28]
 8009b66:	3144      	adds	r1, #68	; 0x44
 8009b68:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009b6a:	f7fd fdf1 	bl	8007750 <HAL_DMA_Start_IT>
 8009b6e:	b150      	cbz	r0, 8009b86 <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009b70:	6d23      	ldr	r3, [r4, #80]	; 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8009b72:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009b74:	f043 0304 	orr.w	r3, r3, #4
 8009b78:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009b7a:	2306      	movs	r3, #6
 8009b7c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009b80:	f7f7 ffb4 	bl	8001aec <HAL_JPEG_ErrorCallback>
}
 8009b84:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8009b86:	6822      	ldr	r2, [r4, #0]
 8009b88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b8e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009b90:	6822      	ldr	r2, [r4, #0]
 8009b92:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009b98:	6313      	str	r3, [r2, #48]	; 0x30
 8009b9a:	e7f3      	b.n	8009b84 <JPEG_DMAOutCpltCallback+0x74>
 8009b9c:	0003fffc 	.word	0x0003fffc

08009ba0 <HAL_JPEG_IRQHandler>:
{
 8009ba0:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8009ba2:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
{
 8009ba6:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8009ba8:	3b03      	subs	r3, #3
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d854      	bhi.n	8009c58 <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009bae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009bb0:	f003 030c 	and.w	r3, r3, #12
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	d103      	bne.n	8009bc0 <HAL_JPEG_IRQHandler+0x20>
}
 8009bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8009bbc:	f7ff be23 	b.w	8009806 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009bc0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009bc2:	f003 030c 	and.w	r3, r3, #12
 8009bc6:	2b0c      	cmp	r3, #12
 8009bc8:	d146      	bne.n	8009c58 <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009bca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d114      	bne.n	8009bfe <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009bd4:	6803      	ldr	r3, [r0, #0]
 8009bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd8:	0659      	lsls	r1, r3, #25
 8009bda:	d510      	bpl.n	8009bfe <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009bdc:	1d01      	adds	r1, r0, #4
 8009bde:	f7ff fbcd 	bl	800937c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009be2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009be4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009be6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009be8:	f7f7 feda 	bl	80019a0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf4:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bfc:	639a      	str	r2, [r3, #56]	; 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c02:	0692      	lsls	r2, r2, #26
 8009c04:	d528      	bpl.n	8009c58 <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8009c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 8009c08:	6b20      	ldr	r0, [r4, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8009c0a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8009c0e:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009c10:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c16:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	f022 0201 	bic.w	r2, r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c22:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8009c26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c2a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009c2e:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 8009c30:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d101      	bne.n	8009c3c <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 8009c38:	f7fd fdc7 	bl	80077ca <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 8009c3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009c3e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d103      	bne.n	8009c4e <HAL_JPEG_IRQHandler+0xae>
}
 8009c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 8009c4a:	f7fd bdbe 	b.w	80077ca <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8009c4e:	4620      	mov	r0, r4
}
 8009c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8009c54:	f7ff bf0c 	b.w	8009a70 <JPEG_DMA_EndProcess>
}
 8009c58:	bd10      	pop	{r4, pc}

08009c5a <HAL_JPEG_GetState>:
  return hjpeg->State;
 8009c5a:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
}
 8009c5e:	4770      	bx	lr

08009c60 <HAL_JPEG_GetError>:
  return hjpeg->ErrorCode;
 8009c60:	6d00      	ldr	r0, [r0, #80]	; 0x50
}
 8009c62:	4770      	bx	lr

08009c64 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c64:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c66:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c68:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c6c:	3284      	adds	r2, #132	; 0x84
 8009c6e:	1883      	adds	r3, r0, r2
{
 8009c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c74:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c76:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c7a:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009c7c:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c80:	684c      	ldr	r4, [r1, #4]
 8009c82:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c86:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009c8a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c8e:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c90:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c92:	68c5      	ldr	r5, [r0, #12]
 8009c94:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8009c98:	443d      	add	r5, r7
 8009c9a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009c9e:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009ca0:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009ca2:	68c5      	ldr	r5, [r0, #12]
 8009ca4:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8009ca8:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009caa:	689d      	ldr	r5, [r3, #8]
 8009cac:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8009cb0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009cb2:	688d      	ldr	r5, [r1, #8]
 8009cb4:	68c7      	ldr	r7, [r0, #12]
 8009cb6:	3501      	adds	r5, #1
 8009cb8:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8009cbc:	443d      	add	r5, r7
 8009cbe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009cc2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009cc4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009cc6:	691d      	ldr	r5, [r3, #16]
 8009cc8:	f025 0507 	bic.w	r5, r5, #7
 8009ccc:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009cce:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009cd0:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009cd2:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009cd6:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009cda:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009cde:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8009ce2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8009ce6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8009cea:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8009cee:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009cf0:	695d      	ldr	r5, [r3, #20]
 8009cf2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8009cf6:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009cf8:	694d      	ldr	r5, [r1, #20]
 8009cfa:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009cfc:	69dd      	ldr	r5, [r3, #28]
 8009cfe:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8009d02:	f025 0507 	bic.w	r5, r5, #7
 8009d06:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009d08:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8009d0c:	433d      	orrs	r5, r7
 8009d0e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009d10:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009d12:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009d14:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009d18:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009d1a:	b31e      	cbz	r6, 8009d64 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009d1c:	2e01      	cmp	r6, #1
 8009d1e:	d023      	beq.n	8009d68 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009d20:	1eb5      	subs	r5, r6, #2
 8009d22:	2d02      	cmp	r5, #2
 8009d24:	d922      	bls.n	8009d6c <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8009d26:	2e07      	cmp	r6, #7
 8009d28:	bf0c      	ite	eq
 8009d2a:	2502      	moveq	r5, #2
 8009d2c:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009d2e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009d30:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009d34:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009d38:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009d3a:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009d3c:	3403      	adds	r4, #3
 8009d3e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009d40:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009d42:	436e      	muls	r6, r5
 8009d44:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8009d48:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009d4a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009d4c:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8009d50:	f024 0407 	bic.w	r4, r4, #7
 8009d54:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009d56:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009d58:	5883      	ldr	r3, [r0, r2]
 8009d5a:	f043 0301 	orr.w	r3, r3, #1
 8009d5e:	5083      	str	r3, [r0, r2]
}
 8009d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8009d64:	2504      	movs	r5, #4
 8009d66:	e7e2      	b.n	8009d2e <LTDC_SetConfig+0xca>
    tmp = 3U;
 8009d68:	2503      	movs	r5, #3
 8009d6a:	e7e0      	b.n	8009d2e <LTDC_SetConfig+0xca>
    tmp = 2U;
 8009d6c:	2502      	movs	r5, #2
 8009d6e:	e7de      	b.n	8009d2e <LTDC_SetConfig+0xca>

08009d70 <HAL_LTDC_Init>:
{
 8009d70:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8009d72:	4604      	mov	r4, r0
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d063      	beq.n	8009e40 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009d78:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8009d7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d80:	b91b      	cbnz	r3, 8009d8a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8009d82:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009d86:	f7fa fb29 	bl	80043dc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	699a      	ldr	r2, [r3, #24]
 8009d94:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009d98:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d9a:	6999      	ldr	r1, [r3, #24]
 8009d9c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009da0:	4302      	orrs	r2, r0
 8009da2:	68e0      	ldr	r0, [r4, #12]
 8009da4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009da6:	6920      	ldr	r0, [r4, #16]
 8009da8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009daa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009dac:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009dae:	4925      	ldr	r1, [pc, #148]	; (8009e44 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009db0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	400a      	ands	r2, r1
 8009db6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009dbe:	69a0      	ldr	r0, [r4, #24]
 8009dc0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009dc2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009dc4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	400a      	ands	r2, r1
 8009dca:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009dcc:	68da      	ldr	r2, [r3, #12]
 8009dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009dd2:	6a20      	ldr	r0, [r4, #32]
 8009dd4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009dd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009dd8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	400a      	ands	r2, r1
 8009dde:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009de0:	691a      	ldr	r2, [r3, #16]
 8009de2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009de6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009de8:	4302      	orrs	r2, r0
 8009dea:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009dec:	695a      	ldr	r2, [r3, #20]
 8009dee:	4011      	ands	r1, r2
 8009df0:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009df2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009df4:	695a      	ldr	r2, [r3, #20]
 8009df6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009dfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009e02:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e06:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009e0a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e0e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e12:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8009e16:	430a      	orrs	r2, r1
 8009e18:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8009e1c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009e20:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e22:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e26:	f042 0206 	orr.w	r2, r2, #6
 8009e2a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8009e2c:	699a      	ldr	r2, [r3, #24]
 8009e2e:	f042 0201 	orr.w	r2, r2, #1
 8009e32:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e34:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009e36:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e3a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009e40:	2001      	movs	r0, #1
 8009e42:	e7fc      	b.n	8009e3e <HAL_LTDC_Init+0xce>
 8009e44:	f000f800 	.word	0xf000f800

08009e48 <HAL_LTDC_ErrorCallback>:
 8009e48:	4770      	bx	lr

08009e4a <HAL_LTDC_LineEventCallback>:
 8009e4a:	4770      	bx	lr

08009e4c <HAL_LTDC_ReloadEventCallback>:
 8009e4c:	4770      	bx	lr

08009e4e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009e4e:	6803      	ldr	r3, [r0, #0]
{
 8009e50:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009e52:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8009e54:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009e56:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009e58:	0772      	lsls	r2, r6, #29
 8009e5a:	d514      	bpl.n	8009e86 <HAL_LTDC_IRQHandler+0x38>
 8009e5c:	0769      	lsls	r1, r5, #29
 8009e5e:	d512      	bpl.n	8009e86 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e62:	f022 0204 	bic.w	r2, r2, #4
 8009e66:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009e68:	2204      	movs	r2, #4
 8009e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009e6c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8009e70:	f043 0301 	orr.w	r3, r3, #1
 8009e74:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8009e78:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009e7a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8009e7e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009e82:	f7ff ffe1 	bl	8009e48 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009e86:	07b2      	lsls	r2, r6, #30
 8009e88:	d516      	bpl.n	8009eb8 <HAL_LTDC_IRQHandler+0x6a>
 8009e8a:	07ab      	lsls	r3, r5, #30
 8009e8c:	d514      	bpl.n	8009eb8 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009e8e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8009e90:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e94:	f022 0202 	bic.w	r2, r2, #2
 8009e98:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009e9e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009eb4:	f7ff ffc8 	bl	8009e48 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009eb8:	07f0      	lsls	r0, r6, #31
 8009eba:	d510      	bpl.n	8009ede <HAL_LTDC_IRQHandler+0x90>
 8009ebc:	07e9      	lsls	r1, r5, #31
 8009ebe:	d50e      	bpl.n	8009ede <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009ec0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009ec2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec6:	f022 0201 	bic.w	r2, r2, #1
 8009eca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009ecc:	2201      	movs	r2, #1
 8009ece:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8009ed0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8009ed2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8009ed6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8009eda:	f7ff ffb6 	bl	8009e4a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009ede:	0732      	lsls	r2, r6, #28
 8009ee0:	d511      	bpl.n	8009f06 <HAL_LTDC_IRQHandler+0xb8>
 8009ee2:	072b      	lsls	r3, r5, #28
 8009ee4:	d50f      	bpl.n	8009f06 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009ee6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009ee8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eec:	f022 0208 	bic.w	r2, r2, #8
 8009ef0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009ef2:	2208      	movs	r2, #8
 8009ef4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8009efc:	2300      	movs	r3, #0
 8009efe:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009f02:	f7ff ffa3 	bl	8009e4c <HAL_LTDC_ReloadEventCallback>
}
 8009f06:	bd70      	pop	{r4, r5, r6, pc}

08009f08 <HAL_LTDC_ConfigLayer>:
{
 8009f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8009f0c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8009f10:	4606      	mov	r6, r0
 8009f12:	460f      	mov	r7, r1
 8009f14:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	f04f 0002 	mov.w	r0, #2
 8009f1c:	d01f      	beq.n	8009f5e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009f1e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8009f20:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009f24:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009f26:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009f2a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8009f2e:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009f32:	3438      	adds	r4, #56	; 0x38
 8009f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f40:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009f42:	4630      	mov	r0, r6
 8009f44:	4662      	mov	r2, ip
 8009f46:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009f48:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009f4a:	f7ff fe8b 	bl	8009c64 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009f4e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8009f50:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009f52:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009f56:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8009f5a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8009f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009f64 <HAL_LTDC_SetPitch>:
{
 8009f64:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8009f66:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	f04f 0302 	mov.w	r3, #2
 8009f70:	d02c      	beq.n	8009fcc <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009f72:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009f74:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009f78:	fb04 0402 	mla	r4, r4, r2, r0
 8009f7c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009f7e:	b33c      	cbz	r4, 8009fd0 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009f80:	2c01      	cmp	r4, #1
 8009f82:	d027      	beq.n	8009fd4 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009f84:	1ea5      	subs	r5, r4, #2
 8009f86:	429d      	cmp	r5, r3
 8009f88:	d902      	bls.n	8009f90 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 8009f8a:	2c07      	cmp	r4, #7
 8009f8c:	bf18      	it	ne
 8009f8e:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009f90:	01d2      	lsls	r2, r2, #7
 8009f92:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8009f94:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009f96:	3284      	adds	r2, #132	; 0x84
 8009f98:	4422      	add	r2, r4
 8009f9a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8009f9c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8009fa0:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8009fa4:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009fa6:	4c0c      	ldr	r4, [pc, #48]	; (8009fd8 <HAL_LTDC_SetPitch+0x74>)
 8009fa8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009faa:	f045 0501 	orr.w	r5, r5, #1
 8009fae:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8009fb0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8009fb2:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8009fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fba:	f043 0301 	orr.w	r3, r3, #1
 8009fbe:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	e7dd      	b.n	8009f90 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e7db      	b.n	8009f90 <HAL_LTDC_SetPitch+0x2c>
 8009fd8:	40016800 	.word	0x40016800

08009fdc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8009fdc:	4b19      	ldr	r3, [pc, #100]	; (800a044 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8009fde:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8009fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009fe2:	4c19      	ldr	r4, [pc, #100]	; (800a048 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8009fe4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ffa:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ffc:	f7fc fd42 	bl	8006a84 <HAL_GetTick>
 800a000:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a002:	6863      	ldr	r3, [r4, #4]
 800a004:	03da      	lsls	r2, r3, #15
 800a006:	d50c      	bpl.n	800a022 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a008:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a00a:	4d0f      	ldr	r5, [pc, #60]	; (800a048 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a00c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a010:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a012:	f7fc fd37 	bl	8006a84 <HAL_GetTick>
 800a016:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a018:	686b      	ldr	r3, [r5, #4]
 800a01a:	039b      	lsls	r3, r3, #14
 800a01c:	d50a      	bpl.n	800a034 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800a01e:	2000      	movs	r0, #0
 800a020:	e006      	b.n	800a030 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a022:	f7fc fd2f 	bl	8006a84 <HAL_GetTick>
 800a026:	1b40      	subs	r0, r0, r5
 800a028:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a02c:	d9e9      	bls.n	800a002 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800a02e:	2003      	movs	r0, #3
}
 800a030:	b003      	add	sp, #12
 800a032:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a034:	f7fc fd26 	bl	8006a84 <HAL_GetTick>
 800a038:	1b00      	subs	r0, r0, r4
 800a03a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a03e:	d9eb      	bls.n	800a018 <HAL_PWREx_EnableOverDrive+0x3c>
 800a040:	e7f5      	b.n	800a02e <HAL_PWREx_EnableOverDrive+0x52>
 800a042:	bf00      	nop
 800a044:	40023800 	.word	0x40023800
 800a048:	40007000 	.word	0x40007000

0800a04c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800a04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800a050:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800a052:	b136      	cbz	r6, 800a062 <QSPI_Config+0x16>
 800a054:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800a058:	d003      	beq.n	800a062 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a05a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a05c:	6804      	ldr	r4, [r0, #0]
 800a05e:	3b01      	subs	r3, #1
 800a060:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a062:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a066:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a06a:	f1b9 0f00 	cmp.w	r9, #0
 800a06e:	d04f      	beq.n	800a110 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a070:	694b      	ldr	r3, [r1, #20]
 800a072:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a076:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a078:	f8d1 a000 	ldr.w	sl, [r1]
 800a07c:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 800a080:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800a084:	ea49 0902 	orr.w	r9, r9, r2
 800a088:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a08c:	b335      	cbz	r5, 800a0dc <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a08e:	688b      	ldr	r3, [r1, #8]
 800a090:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a094:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a096:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a098:	b19f      	cbz	r7, 800a0c2 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a09a:	ea4a 0307 	orr.w	r3, sl, r7
 800a09e:	4323      	orrs	r3, r4
 800a0a0:	68cc      	ldr	r4, [r1, #12]
 800a0a2:	ea43 0308 	orr.w	r3, r3, r8
 800a0a6:	ea43 030e 	orr.w	r3, r3, lr
 800a0aa:	4333      	orrs	r3, r6
 800a0ac:	4323      	orrs	r3, r4
 800a0ae:	ea43 030c 	orr.w	r3, r3, ip
 800a0b2:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a0b4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a0b8:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a0ba:	d00d      	beq.n	800a0d8 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a0bc:	684b      	ldr	r3, [r1, #4]
 800a0be:	6183      	str	r3, [r0, #24]
 800a0c0:	e00a      	b.n	800a0d8 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a0c2:	ea4a 0304 	orr.w	r3, sl, r4
 800a0c6:	ea43 0308 	orr.w	r3, r3, r8
 800a0ca:	ea43 030e 	orr.w	r3, r3, lr
 800a0ce:	4333      	orrs	r3, r6
 800a0d0:	ea43 030c 	orr.w	r3, r3, ip
 800a0d4:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a0d6:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800a0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a0dc:	b16f      	cbz	r7, 800a0fa <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a0de:	ea4a 0307 	orr.w	r3, sl, r7
 800a0e2:	4323      	orrs	r3, r4
 800a0e4:	68cc      	ldr	r4, [r1, #12]
 800a0e6:	ea43 0308 	orr.w	r3, r3, r8
 800a0ea:	ea43 030e 	orr.w	r3, r3, lr
 800a0ee:	4323      	orrs	r3, r4
 800a0f0:	ea43 030c 	orr.w	r3, r3, ip
 800a0f4:	ea43 0309 	orr.w	r3, r3, r9
 800a0f8:	e7dc      	b.n	800a0b4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a0fa:	ea4a 0304 	orr.w	r3, sl, r4
 800a0fe:	ea43 0308 	orr.w	r3, r3, r8
 800a102:	ea43 030e 	orr.w	r3, r3, lr
 800a106:	ea43 030c 	orr.w	r3, r3, ip
 800a10a:	ea43 0309 	orr.w	r3, r3, r9
 800a10e:	e7e2      	b.n	800a0d6 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a110:	b365      	cbz	r5, 800a16c <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a112:	6804      	ldr	r4, [r0, #0]
 800a114:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a116:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a118:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a11a:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a11e:	694e      	ldr	r6, [r1, #20]
 800a120:	ea43 0502 	orr.w	r5, r3, r2
 800a124:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800a128:	04b6      	lsls	r6, r6, #18
 800a12a:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a12e:	b1a7      	cbz	r7, 800a15a <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a130:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a132:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a136:	ea40 0008 	orr.w	r0, r0, r8
 800a13a:	ea43 0300 	orr.w	r3, r3, r0
 800a13e:	68c8      	ldr	r0, [r1, #12]
 800a140:	ea43 030c 	orr.w	r3, r3, ip
 800a144:	ea43 0300 	orr.w	r3, r3, r0
 800a148:	ea43 0306 	orr.w	r3, r3, r6
 800a14c:	ea43 0305 	orr.w	r3, r3, r5
 800a150:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a152:	d0c1      	beq.n	800a0d8 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a154:	684b      	ldr	r3, [r1, #4]
 800a156:	61a3      	str	r3, [r4, #24]
 800a158:	e7be      	b.n	800a0d8 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a15a:	ea40 0008 	orr.w	r0, r0, r8
 800a15e:	4303      	orrs	r3, r0
 800a160:	ea43 030c 	orr.w	r3, r3, ip
 800a164:	4333      	orrs	r3, r6
 800a166:	432b      	orrs	r3, r5
 800a168:	6163      	str	r3, [r4, #20]
 800a16a:	e7b5      	b.n	800a0d8 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a16c:	b17f      	cbz	r7, 800a18e <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a16e:	ea46 0307 	orr.w	r3, r6, r7
 800a172:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800a174:	6800      	ldr	r0, [r0, #0]
 800a176:	4313      	orrs	r3, r2
 800a178:	4323      	orrs	r3, r4
 800a17a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800a17c:	4323      	orrs	r3, r4
 800a17e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800a180:	4323      	orrs	r3, r4
 800a182:	68cc      	ldr	r4, [r1, #12]
 800a184:	4323      	orrs	r3, r4
 800a186:	694c      	ldr	r4, [r1, #20]
 800a188:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800a18c:	e792      	b.n	800a0b4 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800a18e:	2e00      	cmp	r6, #0
 800a190:	d0a2      	beq.n	800a0d8 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a192:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800a194:	6800      	ldr	r0, [r0, #0]
 800a196:	4333      	orrs	r3, r6
 800a198:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800a19a:	431a      	orrs	r2, r3
 800a19c:	694b      	ldr	r3, [r1, #20]
 800a19e:	4332      	orrs	r2, r6
 800a1a0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800a1a2:	4332      	orrs	r2, r6
 800a1a4:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800a1a8:	6142      	str	r2, [r0, #20]
}
 800a1aa:	e795      	b.n	800a0d8 <QSPI_Config+0x8c>

0800a1ac <QSPI_WaitFlagStateUntilTimeout>:
{
 800a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	460e      	mov	r6, r1
 800a1b8:	4615      	mov	r5, r2
 800a1ba:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a1bc:	6822      	ldr	r2, [r4, #0]
 800a1be:	6893      	ldr	r3, [r2, #8]
 800a1c0:	4233      	tst	r3, r6
 800a1c2:	bf14      	ite	ne
 800a1c4:	2301      	movne	r3, #1
 800a1c6:	2300      	moveq	r3, #0
 800a1c8:	42ab      	cmp	r3, r5
 800a1ca:	d101      	bne.n	800a1d0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	e012      	b.n	800a1f6 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800a1d0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a1d4:	d0f3      	beq.n	800a1be <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1d6:	f7fc fc55 	bl	8006a84 <HAL_GetTick>
 800a1da:	1bc0      	subs	r0, r0, r7
 800a1dc:	4540      	cmp	r0, r8
 800a1de:	d802      	bhi.n	800a1e6 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800a1e0:	f1b8 0f00 	cmp.w	r8, #0
 800a1e4:	d1ea      	bne.n	800a1bc <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a1e6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a1e8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a1ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a1ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a1f0:	f043 0301 	orr.w	r3, r3, #1
 800a1f4:	6463      	str	r3, [r4, #68]	; 0x44
}
 800a1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a1fc <HAL_QSPI_Init>:
{
 800a1fc:	b530      	push	{r4, r5, lr}
 800a1fe:	4604      	mov	r4, r0
 800a200:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800a202:	f7fc fc3f 	bl	8006a84 <HAL_GetTick>
 800a206:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800a208:	2c00      	cmp	r4, #0
 800a20a:	d047      	beq.n	800a29c <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a20c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800a210:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800a214:	b94a      	cbnz	r2, 800a22a <HAL_QSPI_Init+0x2e>
 800a216:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800a218:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800a21a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800a21e:	f7fa f913 	bl	8004448 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800a222:	f241 3288 	movw	r2, #5000	; 0x1388
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a22a:	6820      	ldr	r0, [r4, #0]
 800a22c:	68a1      	ldr	r1, [r4, #8]
 800a22e:	6802      	ldr	r2, [r0, #0]
 800a230:	3901      	subs	r1, #1
 800a232:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800a236:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a23a:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a23c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a23e:	4620      	mov	r0, r4
 800a240:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a242:	9200      	str	r2, [sp, #0]
 800a244:	2200      	movs	r2, #0
 800a246:	f7ff ffb1 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800a24a:	bb10      	cbnz	r0, 800a292 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	69e5      	ldr	r5, [r4, #28]
 800a250:	68e3      	ldr	r3, [r4, #12]
 800a252:	6811      	ldr	r1, [r2, #0]
 800a254:	432b      	orrs	r3, r5
 800a256:	6a25      	ldr	r5, [r4, #32]
 800a258:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a25c:	432b      	orrs	r3, r5
 800a25e:	6865      	ldr	r5, [r4, #4]
 800a260:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800a264:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800a268:	430b      	orrs	r3, r1
 800a26a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a26c:	6855      	ldr	r5, [r2, #4]
 800a26e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800a272:	430b      	orrs	r3, r1
 800a274:	6921      	ldr	r1, [r4, #16]
 800a276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a27a:	4909      	ldr	r1, [pc, #36]	; (800a2a0 <HAL_QSPI_Init+0xa4>)
 800a27c:	4029      	ands	r1, r5
 800a27e:	430b      	orrs	r3, r1
 800a280:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800a282:	6813      	ldr	r3, [r2, #0]
 800a284:	f043 0301 	orr.w	r3, r3, #1
 800a288:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800a28a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a28c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800a28e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800a292:	2300      	movs	r3, #0
 800a294:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800a298:	b005      	add	sp, #20
 800a29a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800a29c:	2001      	movs	r0, #1
 800a29e:	e7fb      	b.n	800a298 <HAL_QSPI_Init+0x9c>
 800a2a0:	ffe0f8fe 	.word	0xffe0f8fe

0800a2a4 <HAL_QSPI_Command>:
{
 800a2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	4617      	mov	r7, r2
 800a2ae:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800a2b0:	f7fc fbe8 	bl	8006a84 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a2b4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800a2b8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800a2ba:	2a01      	cmp	r2, #1
 800a2bc:	d033      	beq.n	800a326 <HAL_QSPI_Command+0x82>
 800a2be:	2201      	movs	r2, #1
 800a2c0:	2602      	movs	r6, #2
 800a2c2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a2c6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800a2ca:	2a01      	cmp	r2, #1
 800a2cc:	fa5f f882 	uxtb.w	r8, r2
 800a2d0:	d127      	bne.n	800a322 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a2d2:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a2d4:	9003      	str	r0, [sp, #12]
 800a2d6:	2120      	movs	r1, #32
 800a2d8:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a2da:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a2dc:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a2de:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a2e2:	f7ff ff63 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	b9a0      	cbnz	r0, 800a314 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f7ff feac 	bl	800a04c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800a2f4:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	b94a      	cbnz	r2, 800a310 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a2fc:	4642      	mov	r2, r8
 800a2fe:	4631      	mov	r1, r6
 800a300:	4620      	mov	r0, r4
 800a302:	9700      	str	r7, [sp, #0]
 800a304:	f7ff ff52 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a308:	4605      	mov	r5, r0
 800a30a:	b918      	cbnz	r0, 800a314 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a310:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800a314:	2300      	movs	r3, #0
 800a316:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800a31a:	4628      	mov	r0, r5
 800a31c:	b005      	add	sp, #20
 800a31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800a322:	4635      	mov	r5, r6
 800a324:	e7f6      	b.n	800a314 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800a326:	2502      	movs	r5, #2
 800a328:	e7f7      	b.n	800a31a <HAL_QSPI_Command+0x76>

0800a32a <HAL_QSPI_Transmit>:
{
 800a32a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32c:	4604      	mov	r4, r0
 800a32e:	b085      	sub	sp, #20
 800a330:	4616      	mov	r6, r2
 800a332:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800a334:	f7fc fba6 	bl	8006a84 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a338:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800a33c:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a33e:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800a340:	2a01      	cmp	r2, #1
 800a342:	d049      	beq.n	800a3d8 <HAL_QSPI_Transmit+0xae>
 800a344:	2201      	movs	r2, #1
 800a346:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a34a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800a34e:	2a01      	cmp	r2, #1
 800a350:	b2d0      	uxtb	r0, r2
 800a352:	d13f      	bne.n	800a3d4 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a354:	2200      	movs	r2, #0
 800a356:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800a358:	2f00      	cmp	r7, #0
 800a35a:	d036      	beq.n	800a3ca <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a35c:	2212      	movs	r2, #18
 800a35e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a362:	692a      	ldr	r2, [r5, #16]
 800a364:	3201      	adds	r2, #1
 800a366:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a368:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800a36a:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a36c:	3201      	adds	r2, #1
 800a36e:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a370:	696a      	ldr	r2, [r5, #20]
 800a372:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a376:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800a378:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a37a:	b98a      	cbnz	r2, 800a3a0 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a37c:	2201      	movs	r2, #1
 800a37e:	2102      	movs	r1, #2
 800a380:	4620      	mov	r0, r4
 800a382:	9600      	str	r6, [sp, #0]
 800a384:	f7ff ff12 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a388:	b910      	cbnz	r0, 800a390 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	2202      	movs	r2, #2
 800a38e:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a390:	2301      	movs	r3, #1
 800a392:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800a396:	2300      	movs	r3, #0
 800a398:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800a39c:	b005      	add	sp, #20
 800a39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	2104      	movs	r1, #4
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	9600      	str	r6, [sp, #0]
 800a3a8:	9303      	str	r3, [sp, #12]
 800a3aa:	f7ff feff 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d1ee      	bne.n	800a390 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a3b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800a3b4:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a3b6:	7812      	ldrb	r2, [r2, #0]
 800a3b8:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800a3bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a3be:	3201      	adds	r2, #1
 800a3c0:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800a3c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a3c4:	3a01      	subs	r2, #1
 800a3c6:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a3c8:	e7d6      	b.n	800a378 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a3ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a3cc:	f043 0308 	orr.w	r3, r3, #8
 800a3d0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800a3d2:	e7e0      	b.n	800a396 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800a3d4:	2002      	movs	r0, #2
 800a3d6:	e7de      	b.n	800a396 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800a3d8:	2002      	movs	r0, #2
 800a3da:	e7df      	b.n	800a39c <HAL_QSPI_Transmit+0x72>

0800a3dc <HAL_QSPI_Receive>:
{
 800a3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3de:	4604      	mov	r4, r0
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	4616      	mov	r6, r2
 800a3e4:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800a3e6:	f7fc fb4d 	bl	8006a84 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a3ea:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800a3ec:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a3ee:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800a3f2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800a3f6:	2a01      	cmp	r2, #1
 800a3f8:	d04d      	beq.n	800a496 <HAL_QSPI_Receive+0xba>
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a400:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800a404:	2a01      	cmp	r2, #1
 800a406:	b2d0      	uxtb	r0, r2
 800a408:	d143      	bne.n	800a492 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a40a:	2200      	movs	r2, #0
 800a40c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800a40e:	2f00      	cmp	r7, #0
 800a410:	d03a      	beq.n	800a488 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a412:	2222      	movs	r2, #34	; 0x22
 800a414:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a418:	692a      	ldr	r2, [r5, #16]
 800a41a:	3201      	adds	r2, #1
 800a41c:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a41e:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800a420:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a422:	3201      	adds	r2, #1
 800a424:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a426:	6969      	ldr	r1, [r5, #20]
 800a428:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800a42c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800a430:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a432:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800a436:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a438:	b98a      	cbnz	r2, 800a45e <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a43a:	2201      	movs	r2, #1
 800a43c:	2102      	movs	r1, #2
 800a43e:	4620      	mov	r0, r4
 800a440:	9600      	str	r6, [sp, #0]
 800a442:	f7ff feb3 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800a446:	b910      	cbnz	r0, 800a44e <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	2202      	movs	r2, #2
 800a44c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a44e:	2301      	movs	r3, #1
 800a450:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800a454:	2300      	movs	r3, #0
 800a456:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800a45a:	b005      	add	sp, #20
 800a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a45e:	2201      	movs	r2, #1
 800a460:	2106      	movs	r1, #6
 800a462:	4620      	mov	r0, r4
 800a464:	9600      	str	r6, [sp, #0]
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	f7ff fea0 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d1ee      	bne.n	800a44e <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a470:	f895 1020 	ldrb.w	r1, [r5, #32]
 800a474:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800a476:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a478:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800a47a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a47c:	3201      	adds	r2, #1
 800a47e:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800a480:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a482:	3a01      	subs	r2, #1
 800a484:	63a2      	str	r2, [r4, #56]	; 0x38
 800a486:	e7d6      	b.n	800a436 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a488:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a48a:	f043 0308 	orr.w	r3, r3, #8
 800a48e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800a490:	e7e0      	b.n	800a454 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800a492:	2002      	movs	r0, #2
 800a494:	e7de      	b.n	800a454 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800a496:	2002      	movs	r0, #2
 800a498:	e7df      	b.n	800a45a <HAL_QSPI_Receive+0x7e>

0800a49a <HAL_QSPI_AutoPolling>:
{
 800a49a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4615      	mov	r5, r2
 800a4a2:	461e      	mov	r6, r3
 800a4a4:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800a4a6:	f7fc faed 	bl	8006a84 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a4aa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800a4ae:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800a4b0:	2a01      	cmp	r2, #1
 800a4b2:	d040      	beq.n	800a536 <HAL_QSPI_AutoPolling+0x9c>
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a4ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800a4be:	2a01      	cmp	r2, #1
 800a4c0:	b2d7      	uxtb	r7, r2
 800a4c2:	d136      	bne.n	800a532 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a4c4:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a4c6:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a4c8:	9003      	str	r0, [sp, #12]
 800a4ca:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a4cc:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a4ce:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a4d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a4d4:	2120      	movs	r1, #32
 800a4d6:	f7ff fe69 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a4da:	bb20      	cbnz	r0, 800a526 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a4dc:	6821      	ldr	r1, [r4, #0]
 800a4de:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a4e0:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a4e2:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a4e4:	686a      	ldr	r2, [r5, #4]
 800a4e6:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a4e8:	68aa      	ldr	r2, [r5, #8]
 800a4ea:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a4ec:	680a      	ldr	r2, [r1, #0]
 800a4ee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a4f2:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a4f4:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a4f6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a4fa:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a4fc:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800a4fe:	68ea      	ldr	r2, [r5, #12]
 800a500:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a504:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a508:	f7ff fda0 	bl	800a04c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a50c:	9b03      	ldr	r3, [sp, #12]
 800a50e:	463a      	mov	r2, r7
 800a510:	2108      	movs	r1, #8
 800a512:	4620      	mov	r0, r4
 800a514:	9600      	str	r6, [sp, #0]
 800a516:	f7ff fe49 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800a51a:	b920      	cbnz	r0, 800a526 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	2208      	movs	r2, #8
 800a520:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a522:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800a526:	2300      	movs	r3, #0
 800a528:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800a52c:	b004      	add	sp, #16
 800a52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800a532:	2002      	movs	r0, #2
 800a534:	e7f7      	b.n	800a526 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800a536:	2002      	movs	r0, #2
 800a538:	e7f8      	b.n	800a52c <HAL_QSPI_AutoPolling+0x92>

0800a53a <HAL_QSPI_MemoryMapped>:
{
 800a53a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a53c:	4604      	mov	r4, r0
 800a53e:	4616      	mov	r6, r2
 800a540:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800a542:	f7fc fa9f 	bl	8006a84 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a546:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800a54a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800a54c:	2a01      	cmp	r2, #1
 800a54e:	d033      	beq.n	800a5b8 <HAL_QSPI_MemoryMapped+0x7e>
 800a550:	2201      	movs	r2, #1
 800a552:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a556:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800a55a:	2a01      	cmp	r2, #1
 800a55c:	d12a      	bne.n	800a5b4 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a55e:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a560:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a562:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a564:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a566:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a56a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a56c:	9100      	str	r1, [sp, #0]
 800a56e:	2120      	movs	r1, #32
 800a570:	f7ff fe1c 	bl	800a1ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a574:	4605      	mov	r5, r0
 800a576:	b9b8      	cbnz	r0, 800a5a8 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	6872      	ldr	r2, [r6, #4]
 800a57c:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a57e:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a580:	f020 0008 	bic.w	r0, r0, #8
 800a584:	ea40 0002 	orr.w	r0, r0, r2
 800a588:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a58a:	d107      	bne.n	800a59c <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a58c:	6832      	ldr	r2, [r6, #0]
 800a58e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a590:	2210      	movs	r2, #16
 800a592:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a59a:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a59c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7ff fd52 	bl	800a04c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	b003      	add	sp, #12
 800a5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800a5b4:	2502      	movs	r5, #2
 800a5b6:	e7f7      	b.n	800a5a8 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800a5b8:	2502      	movs	r5, #2
 800a5ba:	e7f8      	b.n	800a5ae <HAL_QSPI_MemoryMapped+0x74>

0800a5bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	b340      	cbz	r0, 800a616 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5c4:	6803      	ldr	r3, [r0, #0]
 800a5c6:	07db      	lsls	r3, r3, #31
 800a5c8:	d410      	bmi.n	800a5ec <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	079f      	lsls	r7, r3, #30
 800a5ce:	d464      	bmi.n	800a69a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	0719      	lsls	r1, r3, #28
 800a5d4:	f100 80aa 	bmi.w	800a72c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	075a      	lsls	r2, r3, #29
 800a5dc:	f100 80cb 	bmi.w	800a776 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5e0:	69a2      	ldr	r2, [r4, #24]
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	f040 8134 	bne.w	800a850 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e02b      	b.n	800a644 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5ec:	4b96      	ldr	r3, [pc, #600]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	f002 020c 	and.w	r2, r2, #12
 800a5f4:	2a04      	cmp	r2, #4
 800a5f6:	d007      	beq.n	800a608 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	f002 020c 	and.w	r2, r2, #12
 800a5fe:	2a08      	cmp	r2, #8
 800a600:	d10b      	bne.n	800a61a <HAL_RCC_OscConfig+0x5e>
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	0256      	lsls	r6, r2, #9
 800a606:	d508      	bpl.n	800a61a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a608:	4b8f      	ldr	r3, [pc, #572]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	039d      	lsls	r5, r3, #14
 800a60e:	d5dc      	bpl.n	800a5ca <HAL_RCC_OscConfig+0xe>
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1d9      	bne.n	800a5ca <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800a616:	2001      	movs	r0, #1
 800a618:	e014      	b.n	800a644 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a61a:	6862      	ldr	r2, [r4, #4]
 800a61c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a620:	d113      	bne.n	800a64a <HAL_RCC_OscConfig+0x8e>
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a628:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a62a:	f7fc fa2b 	bl	8006a84 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a62e:	4e86      	ldr	r6, [pc, #536]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800a630:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a632:	6833      	ldr	r3, [r6, #0]
 800a634:	0398      	lsls	r0, r3, #14
 800a636:	d4c8      	bmi.n	800a5ca <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a638:	f7fc fa24 	bl	8006a84 <HAL_GetTick>
 800a63c:	1b40      	subs	r0, r0, r5
 800a63e:	2864      	cmp	r0, #100	; 0x64
 800a640:	d9f7      	bls.n	800a632 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800a642:	2003      	movs	r0, #3
}
 800a644:	b002      	add	sp, #8
 800a646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a64a:	4d7f      	ldr	r5, [pc, #508]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b992      	cbnz	r2, 800a676 <HAL_RCC_OscConfig+0xba>
 800a650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a65c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a65e:	f7fc fa11 	bl	8006a84 <HAL_GetTick>
 800a662:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	0399      	lsls	r1, r3, #14
 800a668:	d5af      	bpl.n	800a5ca <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a66a:	f7fc fa0b 	bl	8006a84 <HAL_GetTick>
 800a66e:	1b80      	subs	r0, r0, r6
 800a670:	2864      	cmp	r0, #100	; 0x64
 800a672:	d9f7      	bls.n	800a664 <HAL_RCC_OscConfig+0xa8>
 800a674:	e7e5      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a676:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800a67a:	d107      	bne.n	800a68c <HAL_RCC_OscConfig+0xd0>
 800a67c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	682b      	ldr	r3, [r5, #0]
 800a684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a688:	602b      	str	r3, [r5, #0]
 800a68a:	e7ce      	b.n	800a62a <HAL_RCC_OscConfig+0x6e>
 800a68c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	682b      	ldr	r3, [r5, #0]
 800a694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a698:	e7f6      	b.n	800a688 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a69a:	4b6b      	ldr	r3, [pc, #428]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	f012 0f0c 	tst.w	r2, #12
 800a6a2:	d007      	beq.n	800a6b4 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	f002 020c 	and.w	r2, r2, #12
 800a6aa:	2a08      	cmp	r2, #8
 800a6ac:	d111      	bne.n	800a6d2 <HAL_RCC_OscConfig+0x116>
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	0252      	lsls	r2, r2, #9
 800a6b2:	d40e      	bmi.n	800a6d2 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6b4:	4a64      	ldr	r2, [pc, #400]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a6b6:	6813      	ldr	r3, [r2, #0]
 800a6b8:	079b      	lsls	r3, r3, #30
 800a6ba:	d502      	bpl.n	800a6c2 <HAL_RCC_OscConfig+0x106>
 800a6bc:	68e3      	ldr	r3, [r4, #12]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d1a9      	bne.n	800a616 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6c2:	6813      	ldr	r3, [r2, #0]
 800a6c4:	6921      	ldr	r1, [r4, #16]
 800a6c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a6ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a6ce:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6d0:	e77e      	b.n	800a5d0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a6d2:	68e2      	ldr	r2, [r4, #12]
 800a6d4:	b1c2      	cbz	r2, 800a708 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800a6d6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6d8:	4d5b      	ldr	r5, [pc, #364]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800a6da:	f042 0201 	orr.w	r2, r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a6e0:	f7fc f9d0 	bl	8006a84 <HAL_GetTick>
 800a6e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6e6:	682b      	ldr	r3, [r5, #0]
 800a6e8:	079f      	lsls	r7, r3, #30
 800a6ea:	d507      	bpl.n	800a6fc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	6922      	ldr	r2, [r4, #16]
 800a6f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a6f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a6f8:	602b      	str	r3, [r5, #0]
 800a6fa:	e769      	b.n	800a5d0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6fc:	f7fc f9c2 	bl	8006a84 <HAL_GetTick>
 800a700:	1b80      	subs	r0, r0, r6
 800a702:	2802      	cmp	r0, #2
 800a704:	d9ef      	bls.n	800a6e6 <HAL_RCC_OscConfig+0x12a>
 800a706:	e79c      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800a708:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a70a:	4e4f      	ldr	r6, [pc, #316]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 800a70c:	f022 0201 	bic.w	r2, r2, #1
 800a710:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a712:	f7fc f9b7 	bl	8006a84 <HAL_GetTick>
 800a716:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a718:	6833      	ldr	r3, [r6, #0]
 800a71a:	0798      	lsls	r0, r3, #30
 800a71c:	f57f af58 	bpl.w	800a5d0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a720:	f7fc f9b0 	bl	8006a84 <HAL_GetTick>
 800a724:	1b40      	subs	r0, r0, r5
 800a726:	2802      	cmp	r0, #2
 800a728:	d9f6      	bls.n	800a718 <HAL_RCC_OscConfig+0x15c>
 800a72a:	e78a      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a72c:	6963      	ldr	r3, [r4, #20]
 800a72e:	4d46      	ldr	r5, [pc, #280]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a730:	b183      	cbz	r3, 800a754 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800a732:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a734:	f043 0301 	orr.w	r3, r3, #1
 800a738:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a73a:	f7fc f9a3 	bl	8006a84 <HAL_GetTick>
 800a73e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a740:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a742:	079b      	lsls	r3, r3, #30
 800a744:	f53f af48 	bmi.w	800a5d8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a748:	f7fc f99c 	bl	8006a84 <HAL_GetTick>
 800a74c:	1b80      	subs	r0, r0, r6
 800a74e:	2802      	cmp	r0, #2
 800a750:	d9f6      	bls.n	800a740 <HAL_RCC_OscConfig+0x184>
 800a752:	e776      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800a754:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a75c:	f7fc f992 	bl	8006a84 <HAL_GetTick>
 800a760:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a762:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a764:	079f      	lsls	r7, r3, #30
 800a766:	f57f af37 	bpl.w	800a5d8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a76a:	f7fc f98b 	bl	8006a84 <HAL_GetTick>
 800a76e:	1b80      	subs	r0, r0, r6
 800a770:	2802      	cmp	r0, #2
 800a772:	d9f6      	bls.n	800a762 <HAL_RCC_OscConfig+0x1a6>
 800a774:	e765      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a776:	4b34      	ldr	r3, [pc, #208]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a77a:	00d0      	lsls	r0, r2, #3
 800a77c:	d427      	bmi.n	800a7ce <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a77e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800a780:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a782:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a786:	641a      	str	r2, [r3, #64]	; 0x40
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a792:	4d2e      	ldr	r5, [pc, #184]	; (800a84c <HAL_RCC_OscConfig+0x290>)
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	05d9      	lsls	r1, r3, #23
 800a798:	d51b      	bpl.n	800a7d2 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a79a:	68a3      	ldr	r3, [r4, #8]
 800a79c:	4d2a      	ldr	r5, [pc, #168]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d127      	bne.n	800a7f2 <HAL_RCC_OscConfig+0x236>
 800a7a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a7a4:	f043 0301 	orr.w	r3, r3, #1
 800a7a8:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7aa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a7ae:	f7fc f969 	bl	8006a84 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7b2:	4e25      	ldr	r6, [pc, #148]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800a7b4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7b6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a7b8:	079b      	lsls	r3, r3, #30
 800a7ba:	d53f      	bpl.n	800a83c <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 800a7bc:	2f00      	cmp	r7, #0
 800a7be:	f43f af0f 	beq.w	800a5e0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7c2:	4a21      	ldr	r2, [pc, #132]	; (800a848 <HAL_RCC_OscConfig+0x28c>)
 800a7c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a7c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7ca:	6413      	str	r3, [r2, #64]	; 0x40
 800a7cc:	e708      	b.n	800a5e0 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800a7ce:	2700      	movs	r7, #0
 800a7d0:	e7df      	b.n	800a792 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800a7d2:	682b      	ldr	r3, [r5, #0]
 800a7d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7d8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a7da:	f7fc f953 	bl	8006a84 <HAL_GetTick>
 800a7de:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	05da      	lsls	r2, r3, #23
 800a7e4:	d4d9      	bmi.n	800a79a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7e6:	f7fc f94d 	bl	8006a84 <HAL_GetTick>
 800a7ea:	1b80      	subs	r0, r0, r6
 800a7ec:	2864      	cmp	r0, #100	; 0x64
 800a7ee:	d9f7      	bls.n	800a7e0 <HAL_RCC_OscConfig+0x224>
 800a7f0:	e727      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7f2:	b9ab      	cbnz	r3, 800a820 <HAL_RCC_OscConfig+0x264>
 800a7f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7f6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7fa:	f023 0301 	bic.w	r3, r3, #1
 800a7fe:	672b      	str	r3, [r5, #112]	; 0x70
 800a800:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a802:	f023 0304 	bic.w	r3, r3, #4
 800a806:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a808:	f7fc f93c 	bl	8006a84 <HAL_GetTick>
 800a80c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a80e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a810:	0798      	lsls	r0, r3, #30
 800a812:	d5d3      	bpl.n	800a7bc <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a814:	f7fc f936 	bl	8006a84 <HAL_GetTick>
 800a818:	1b80      	subs	r0, r0, r6
 800a81a:	4540      	cmp	r0, r8
 800a81c:	d9f7      	bls.n	800a80e <HAL_RCC_OscConfig+0x252>
 800a81e:	e710      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a820:	2b05      	cmp	r3, #5
 800a822:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a824:	d103      	bne.n	800a82e <HAL_RCC_OscConfig+0x272>
 800a826:	f043 0304 	orr.w	r3, r3, #4
 800a82a:	672b      	str	r3, [r5, #112]	; 0x70
 800a82c:	e7b9      	b.n	800a7a2 <HAL_RCC_OscConfig+0x1e6>
 800a82e:	f023 0301 	bic.w	r3, r3, #1
 800a832:	672b      	str	r3, [r5, #112]	; 0x70
 800a834:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a836:	f023 0304 	bic.w	r3, r3, #4
 800a83a:	e7b5      	b.n	800a7a8 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a83c:	f7fc f922 	bl	8006a84 <HAL_GetTick>
 800a840:	1b40      	subs	r0, r0, r5
 800a842:	4540      	cmp	r0, r8
 800a844:	d9b7      	bls.n	800a7b6 <HAL_RCC_OscConfig+0x1fa>
 800a846:	e6fc      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
 800a848:	40023800 	.word	0x40023800
 800a84c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a850:	4d3c      	ldr	r5, [pc, #240]	; (800a944 <HAL_RCC_OscConfig+0x388>)
 800a852:	68ab      	ldr	r3, [r5, #8]
 800a854:	f003 030c 	and.w	r3, r3, #12
 800a858:	2b08      	cmp	r3, #8
 800a85a:	d042      	beq.n	800a8e2 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800a85c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a85e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800a860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a864:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a866:	d12f      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 800a868:	f7fc f90c 	bl	8006a84 <HAL_GetTick>
 800a86c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	0199      	lsls	r1, r3, #6
 800a872:	d423      	bmi.n	800a8bc <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a874:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800a878:	4313      	orrs	r3, r2
 800a87a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a87c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800a880:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a882:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a886:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a888:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800a88c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a88e:	0852      	lsrs	r2, r2, #1
 800a890:	3a01      	subs	r2, #1
 800a892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a896:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a89e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a8a0:	f7fc f8f0 	bl	8006a84 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8a4:	4d27      	ldr	r5, [pc, #156]	; (800a944 <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 800a8a6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	019a      	lsls	r2, r3, #6
 800a8ac:	f53f ae9c 	bmi.w	800a5e8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8b0:	f7fc f8e8 	bl	8006a84 <HAL_GetTick>
 800a8b4:	1b00      	subs	r0, r0, r4
 800a8b6:	2802      	cmp	r0, #2
 800a8b8:	d9f6      	bls.n	800a8a8 <HAL_RCC_OscConfig+0x2ec>
 800a8ba:	e6c2      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8bc:	f7fc f8e2 	bl	8006a84 <HAL_GetTick>
 800a8c0:	1b80      	subs	r0, r0, r6
 800a8c2:	2802      	cmp	r0, #2
 800a8c4:	d9d3      	bls.n	800a86e <HAL_RCC_OscConfig+0x2b2>
 800a8c6:	e6bc      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800a8c8:	f7fc f8dc 	bl	8006a84 <HAL_GetTick>
 800a8cc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8ce:	682b      	ldr	r3, [r5, #0]
 800a8d0:	019b      	lsls	r3, r3, #6
 800a8d2:	f57f ae89 	bpl.w	800a5e8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8d6:	f7fc f8d5 	bl	8006a84 <HAL_GetTick>
 800a8da:	1b00      	subs	r0, r0, r4
 800a8dc:	2802      	cmp	r0, #2
 800a8de:	d9f6      	bls.n	800a8ce <HAL_RCC_OscConfig+0x312>
 800a8e0:	e6af      	b.n	800a642 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8e2:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800a8e4:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8e6:	f43f ae96 	beq.w	800a616 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8ee:	69e1      	ldr	r1, [r4, #28]
 800a8f0:	428a      	cmp	r2, r1
 800a8f2:	f47f ae90 	bne.w	800a616 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8fa:	6a21      	ldr	r1, [r4, #32]
 800a8fc:	428a      	cmp	r2, r1
 800a8fe:	f47f ae8a 	bne.w	800a616 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a902:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a906:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a908:	401a      	ands	r2, r3
 800a90a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800a90e:	f47f ae82 	bne.w	800a616 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a912:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a914:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800a918:	0852      	lsrs	r2, r2, #1
 800a91a:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a91c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800a920:	f47f ae79 	bne.w	800a616 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a924:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a928:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a92a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800a92e:	f47f ae72 	bne.w	800a616 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a932:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a936:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a938:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800a93c:	f43f ae54 	beq.w	800a5e8 <HAL_RCC_OscConfig+0x2c>
 800a940:	e669      	b.n	800a616 <HAL_RCC_OscConfig+0x5a>
 800a942:	bf00      	nop
 800a944:	40023800 	.word	0x40023800

0800a948 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a948:	4913      	ldr	r1, [pc, #76]	; (800a998 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800a94a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a94c:	688b      	ldr	r3, [r1, #8]
 800a94e:	f003 030c 	and.w	r3, r3, #12
 800a952:	2b04      	cmp	r3, #4
 800a954:	d01b      	beq.n	800a98e <HAL_RCC_GetSysClockFreq+0x46>
 800a956:	2b08      	cmp	r3, #8
 800a958:	d11b      	bne.n	800a992 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a95a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a95c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a95e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a960:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a964:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a968:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800a96c:	bf1a      	itte	ne
 800a96e:	480b      	ldrne	r0, [pc, #44]	; (800a99c <HAL_RCC_GetSysClockFreq+0x54>)
 800a970:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a972:	480b      	ldreq	r0, [pc, #44]	; (800a9a0 <HAL_RCC_GetSysClockFreq+0x58>)
 800a974:	fba1 0100 	umull	r0, r1, r1, r0
 800a978:	f7f5 fe6e 	bl	8000658 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <HAL_RCC_GetSysClockFreq+0x50>)
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800a984:	3301      	adds	r3, #1
 800a986:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800a988:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800a98c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a98e:	4803      	ldr	r0, [pc, #12]	; (800a99c <HAL_RCC_GetSysClockFreq+0x54>)
 800a990:	e7fc      	b.n	800a98c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800a992:	4803      	ldr	r0, [pc, #12]	; (800a9a0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800a994:	e7fa      	b.n	800a98c <HAL_RCC_GetSysClockFreq+0x44>
 800a996:	bf00      	nop
 800a998:	40023800 	.word	0x40023800
 800a99c:	017d7840 	.word	0x017d7840
 800a9a0:	00f42400 	.word	0x00f42400

0800a9a4 <HAL_RCC_ClockConfig>:
{
 800a9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	b910      	cbnz	r0, 800a9b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a9ae:	2001      	movs	r0, #1
}
 800a9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a9b4:	4a46      	ldr	r2, [pc, #280]	; (800aad0 <HAL_RCC_ClockConfig+0x12c>)
 800a9b6:	6813      	ldr	r3, [r2, #0]
 800a9b8:	f003 030f 	and.w	r3, r3, #15
 800a9bc:	428b      	cmp	r3, r1
 800a9be:	d328      	bcc.n	800aa12 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9c0:	6822      	ldr	r2, [r4, #0]
 800a9c2:	0797      	lsls	r7, r2, #30
 800a9c4:	d430      	bmi.n	800aa28 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9c6:	07d0      	lsls	r0, r2, #31
 800a9c8:	d444      	bmi.n	800aa54 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9ca:	4a41      	ldr	r2, [pc, #260]	; (800aad0 <HAL_RCC_ClockConfig+0x12c>)
 800a9cc:	6813      	ldr	r3, [r2, #0]
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	42ab      	cmp	r3, r5
 800a9d4:	d867      	bhi.n	800aaa6 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	0751      	lsls	r1, r2, #29
 800a9da:	d470      	bmi.n	800aabe <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9dc:	0713      	lsls	r3, r2, #28
 800a9de:	d507      	bpl.n	800a9f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a9e0:	4a3c      	ldr	r2, [pc, #240]	; (800aad4 <HAL_RCC_ClockConfig+0x130>)
 800a9e2:	6921      	ldr	r1, [r4, #16]
 800a9e4:	6893      	ldr	r3, [r2, #8]
 800a9e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a9ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a9ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a9f0:	f7ff ffaa 	bl	800a948 <HAL_RCC_GetSysClockFreq>
 800a9f4:	4b37      	ldr	r3, [pc, #220]	; (800aad4 <HAL_RCC_ClockConfig+0x130>)
 800a9f6:	4a38      	ldr	r2, [pc, #224]	; (800aad8 <HAL_RCC_ClockConfig+0x134>)
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a9fe:	5cd3      	ldrb	r3, [r2, r3]
 800aa00:	40d8      	lsrs	r0, r3
 800aa02:	4b36      	ldr	r3, [pc, #216]	; (800aadc <HAL_RCC_ClockConfig+0x138>)
 800aa04:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800aa06:	4b36      	ldr	r3, [pc, #216]	; (800aae0 <HAL_RCC_ClockConfig+0x13c>)
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	f7f9 fe27 	bl	800465c <HAL_InitTick>
  return HAL_OK;
 800aa0e:	2000      	movs	r0, #0
 800aa10:	e7ce      	b.n	800a9b0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa12:	6813      	ldr	r3, [r2, #0]
 800aa14:	f023 030f 	bic.w	r3, r3, #15
 800aa18:	430b      	orrs	r3, r1
 800aa1a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa1c:	6813      	ldr	r3, [r2, #0]
 800aa1e:	f003 030f 	and.w	r3, r3, #15
 800aa22:	428b      	cmp	r3, r1
 800aa24:	d1c3      	bne.n	800a9ae <HAL_RCC_ClockConfig+0xa>
 800aa26:	e7cb      	b.n	800a9c0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa28:	f012 0f04 	tst.w	r2, #4
 800aa2c:	4b29      	ldr	r3, [pc, #164]	; (800aad4 <HAL_RCC_ClockConfig+0x130>)
 800aa2e:	d003      	beq.n	800aa38 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa30:	6899      	ldr	r1, [r3, #8]
 800aa32:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800aa36:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa38:	0716      	lsls	r6, r2, #28
 800aa3a:	d503      	bpl.n	800aa44 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa3c:	6899      	ldr	r1, [r3, #8]
 800aa3e:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800aa42:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa44:	4923      	ldr	r1, [pc, #140]	; (800aad4 <HAL_RCC_ClockConfig+0x130>)
 800aa46:	68a0      	ldr	r0, [r4, #8]
 800aa48:	688b      	ldr	r3, [r1, #8]
 800aa4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa4e:	4303      	orrs	r3, r0
 800aa50:	608b      	str	r3, [r1, #8]
 800aa52:	e7b8      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa54:	6861      	ldr	r1, [r4, #4]
 800aa56:	4b1f      	ldr	r3, [pc, #124]	; (800aad4 <HAL_RCC_ClockConfig+0x130>)
 800aa58:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa5a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa5c:	d11b      	bne.n	800aa96 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa5e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa62:	d0a4      	beq.n	800a9ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa64:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa66:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa6a:	4f1a      	ldr	r7, [pc, #104]	; (800aad4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa6c:	f022 0203 	bic.w	r2, r2, #3
 800aa70:	430a      	orrs	r2, r1
 800aa72:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800aa74:	f7fc f806 	bl	8006a84 <HAL_GetTick>
 800aa78:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	6862      	ldr	r2, [r4, #4]
 800aa7e:	f003 030c 	and.w	r3, r3, #12
 800aa82:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800aa86:	d0a0      	beq.n	800a9ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa88:	f7fb fffc 	bl	8006a84 <HAL_GetTick>
 800aa8c:	1b80      	subs	r0, r0, r6
 800aa8e:	4540      	cmp	r0, r8
 800aa90:	d9f3      	bls.n	800aa7a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800aa92:	2003      	movs	r0, #3
 800aa94:	e78c      	b.n	800a9b0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa96:	2902      	cmp	r1, #2
 800aa98:	d102      	bne.n	800aaa0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa9a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800aa9e:	e7e0      	b.n	800aa62 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aaa0:	f012 0f02 	tst.w	r2, #2
 800aaa4:	e7dd      	b.n	800aa62 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaa6:	6813      	ldr	r3, [r2, #0]
 800aaa8:	f023 030f 	bic.w	r3, r3, #15
 800aaac:	432b      	orrs	r3, r5
 800aaae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aab0:	6813      	ldr	r3, [r2, #0]
 800aab2:	f003 030f 	and.w	r3, r3, #15
 800aab6:	42ab      	cmp	r3, r5
 800aab8:	f47f af79 	bne.w	800a9ae <HAL_RCC_ClockConfig+0xa>
 800aabc:	e78b      	b.n	800a9d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aabe:	4905      	ldr	r1, [pc, #20]	; (800aad4 <HAL_RCC_ClockConfig+0x130>)
 800aac0:	68e0      	ldr	r0, [r4, #12]
 800aac2:	688b      	ldr	r3, [r1, #8]
 800aac4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800aac8:	4303      	orrs	r3, r0
 800aaca:	608b      	str	r3, [r1, #8]
 800aacc:	e786      	b.n	800a9dc <HAL_RCC_ClockConfig+0x38>
 800aace:	bf00      	nop
 800aad0:	40023c00 	.word	0x40023c00
 800aad4:	40023800 	.word	0x40023800
 800aad8:	08028f4d 	.word	0x08028f4d
 800aadc:	20000060 	.word	0x20000060
 800aae0:	20000068 	.word	0x20000068

0800aae4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aae4:	4b04      	ldr	r3, [pc, #16]	; (800aaf8 <HAL_RCC_GetPCLK1Freq+0x14>)
 800aae6:	4a05      	ldr	r2, [pc, #20]	; (800aafc <HAL_RCC_GetPCLK1Freq+0x18>)
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800aaee:	5cd3      	ldrb	r3, [r2, r3]
 800aaf0:	4a03      	ldr	r2, [pc, #12]	; (800ab00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800aaf2:	6810      	ldr	r0, [r2, #0]
}
 800aaf4:	40d8      	lsrs	r0, r3
 800aaf6:	4770      	bx	lr
 800aaf8:	40023800 	.word	0x40023800
 800aafc:	08028f5d 	.word	0x08028f5d
 800ab00:	20000060 	.word	0x20000060

0800ab04 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ab04:	230f      	movs	r3, #15
 800ab06:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ab08:	4b0b      	ldr	r3, [pc, #44]	; (800ab38 <HAL_RCC_GetClockConfig+0x34>)
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	f002 0203 	and.w	r2, r2, #3
 800ab10:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ab12:	689a      	ldr	r2, [r3, #8]
 800ab14:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ab18:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800ab20:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	08db      	lsrs	r3, r3, #3
 800ab26:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800ab2a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ab2c:	4b03      	ldr	r3, [pc, #12]	; (800ab3c <HAL_RCC_GetClockConfig+0x38>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 030f 	and.w	r3, r3, #15
 800ab34:	600b      	str	r3, [r1, #0]
}
 800ab36:	4770      	bx	lr
 800ab38:	40023800 	.word	0x40023800
 800ab3c:	40023c00 	.word	0x40023c00

0800ab40 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ab40:	6803      	ldr	r3, [r0, #0]
{
 800ab42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ab46:	f013 0601 	ands.w	r6, r3, #1
{
 800ab4a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ab4c:	d00b      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ab4e:	4ab0      	ldr	r2, [pc, #704]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ab50:	6891      	ldr	r1, [r2, #8]
 800ab52:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800ab56:	6091      	str	r1, [r2, #8]
 800ab58:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800ab5a:	6891      	ldr	r1, [r2, #8]
 800ab5c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ab5e:	fab6 f686 	clz	r6, r6
 800ab62:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ab64:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ab66:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800ab6a:	d012      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab6c:	49a8      	ldr	r1, [pc, #672]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ab6e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800ab70:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ab74:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab78:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800ab7c:	bf08      	it	eq
 800ab7e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab80:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ab84:	bf16      	itet	ne
 800ab86:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800ab8a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ab8c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab8e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ab92:	02d9      	lsls	r1, r3, #11
 800ab94:	d510      	bpl.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ab96:	489e      	ldr	r0, [pc, #632]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ab98:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab9a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ab9e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aba2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800aba6:	ea42 0201 	orr.w	r2, r2, r1
 800abaa:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800abae:	f000 81a7 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800abb2:	2900      	cmp	r1, #0
 800abb4:	bf08      	it	eq
 800abb6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800abb8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800abbc:	bf18      	it	ne
 800abbe:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800abc0:	069a      	lsls	r2, r3, #26
 800abc2:	d531      	bpl.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800abc4:	4b92      	ldr	r3, [pc, #584]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800abc6:	4f93      	ldr	r7, [pc, #588]	; (800ae14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800abc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800abce:	641a      	str	r2, [r3, #64]	; 0x40
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abe0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abe2:	f7fb ff4f 	bl	8006a84 <HAL_GetTick>
 800abe6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	05db      	lsls	r3, r3, #23
 800abec:	f140 818a 	bpl.w	800af04 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800abf0:	4f87      	ldr	r7, [pc, #540]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800abf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800abf4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800abf8:	f040 818f 	bne.w	800af1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800abfe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800ac02:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800ac06:	4a82      	ldr	r2, [pc, #520]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ac08:	f040 81ad 	bne.w	800af66 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ac0c:	6891      	ldr	r1, [r2, #8]
 800ac0e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800ac12:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800ac16:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800ac1a:	4301      	orrs	r1, r0
 800ac1c:	6091      	str	r1, [r2, #8]
 800ac1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac22:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ac24:	430b      	orrs	r3, r1
 800ac26:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	06da      	lsls	r2, r3, #27
 800ac2c:	d50c      	bpl.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac2e:	4a78      	ldr	r2, [pc, #480]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ac30:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800ac34:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800ac38:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800ac3c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800ac40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ac42:	4301      	orrs	r1, r0
 800ac44:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac48:	045f      	lsls	r7, r3, #17
 800ac4a:	d508      	bpl.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac4c:	4970      	ldr	r1, [pc, #448]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ac4e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800ac50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac54:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ac58:	4302      	orrs	r2, r0
 800ac5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac5e:	0418      	lsls	r0, r3, #16
 800ac60:	d508      	bpl.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac62:	496b      	ldr	r1, [pc, #428]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ac64:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800ac66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac6a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800ac6e:	4302      	orrs	r2, r0
 800ac70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac74:	03d9      	lsls	r1, r3, #15
 800ac76:	d508      	bpl.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac78:	4965      	ldr	r1, [pc, #404]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ac7a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ac7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac80:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800ac84:	4302      	orrs	r2, r0
 800ac86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac8a:	039a      	lsls	r2, r3, #14
 800ac8c:	d508      	bpl.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac8e:	4960      	ldr	r1, [pc, #384]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ac90:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ac92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ac96:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800ac9a:	4302      	orrs	r2, r0
 800ac9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aca0:	065f      	lsls	r7, r3, #25
 800aca2:	d508      	bpl.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aca4:	495a      	ldr	r1, [pc, #360]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800aca6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800aca8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800acac:	f022 0203 	bic.w	r2, r2, #3
 800acb0:	4302      	orrs	r2, r0
 800acb2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800acb6:	0618      	lsls	r0, r3, #24
 800acb8:	d508      	bpl.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800acba:	4955      	ldr	r1, [pc, #340]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800acbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800acbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800acc2:	f022 020c 	bic.w	r2, r2, #12
 800acc6:	4302      	orrs	r2, r0
 800acc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800accc:	05d9      	lsls	r1, r3, #23
 800acce:	d508      	bpl.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800acd0:	494f      	ldr	r1, [pc, #316]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800acd2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800acd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800acd8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800acdc:	4302      	orrs	r2, r0
 800acde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ace2:	059a      	lsls	r2, r3, #22
 800ace4:	d508      	bpl.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ace6:	494a      	ldr	r1, [pc, #296]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ace8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800acea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800acee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800acf2:	4302      	orrs	r2, r0
 800acf4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800acf8:	055f      	lsls	r7, r3, #21
 800acfa:	d508      	bpl.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800acfc:	4944      	ldr	r1, [pc, #272]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800acfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ad08:	4302      	orrs	r2, r0
 800ad0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ad0e:	0518      	lsls	r0, r3, #20
 800ad10:	d508      	bpl.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ad12:	493f      	ldr	r1, [pc, #252]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ad14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ad1e:	4302      	orrs	r2, r0
 800ad20:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ad24:	04d9      	lsls	r1, r3, #19
 800ad26:	d508      	bpl.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ad28:	4939      	ldr	r1, [pc, #228]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ad2a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800ad2c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad30:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ad34:	4302      	orrs	r2, r0
 800ad36:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ad3a:	049a      	lsls	r2, r3, #18
 800ad3c:	d508      	bpl.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ad3e:	4934      	ldr	r1, [pc, #208]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ad40:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ad42:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ad4a:	4302      	orrs	r2, r0
 800ad4c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad50:	025f      	lsls	r7, r3, #9
 800ad52:	d508      	bpl.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad54:	492e      	ldr	r1, [pc, #184]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ad56:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ad58:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad5c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ad60:	4302      	orrs	r2, r0
 800ad62:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ad66:	0298      	lsls	r0, r3, #10
 800ad68:	d50c      	bpl.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ad6a:	4829      	ldr	r0, [pc, #164]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ad6c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800ad6e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800ad72:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ad76:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800ad7a:	bf08      	it	eq
 800ad7c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800ad84:	f013 0f08 	tst.w	r3, #8
 800ad88:	bf18      	it	ne
 800ad8a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad8c:	0359      	lsls	r1, r3, #13
 800ad8e:	d508      	bpl.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad90:	491f      	ldr	r1, [pc, #124]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ad92:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ad94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800ad98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ad9c:	4302      	orrs	r2, r0
 800ad9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ada2:	021a      	lsls	r2, r3, #8
 800ada4:	d509      	bpl.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ada6:	491a      	ldr	r1, [pc, #104]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800ada8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800adac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800adb0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800adb4:	4302      	orrs	r2, r0
 800adb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800adba:	015f      	lsls	r7, r3, #5
 800adbc:	d509      	bpl.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800adbe:	4914      	ldr	r1, [pc, #80]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800adc0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800adc4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800adc8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800adcc:	4302      	orrs	r2, r0
 800adce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800add2:	0118      	lsls	r0, r3, #4
 800add4:	d509      	bpl.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800add6:	490e      	ldr	r1, [pc, #56]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800add8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800addc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800ade0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800ade4:	4302      	orrs	r2, r0
 800ade6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800adea:	00d9      	lsls	r1, r3, #3
 800adec:	d509      	bpl.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800adee:	4908      	ldr	r1, [pc, #32]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800adf0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800adf4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800adf8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800adfc:	4302      	orrs	r2, r0
 800adfe:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ae02:	2e01      	cmp	r6, #1
 800ae04:	f000 80b3 	beq.w	800af6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ae08:	019a      	lsls	r2, r3, #6
 800ae0a:	f100 80b0 	bmi.w	800af6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ae0e:	e003      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800ae10:	40023800 	.word	0x40023800
 800ae14:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ae18:	2d01      	cmp	r5, #1
 800ae1a:	d16f      	bne.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ae1c:	4d9d      	ldr	r5, [pc, #628]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800ae1e:	682b      	ldr	r3, [r5, #0]
 800ae20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae24:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae26:	f7fb fe2d 	bl	8006a84 <HAL_GetTick>
 800ae2a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	009f      	lsls	r7, r3, #2
 800ae30:	f100 8121 	bmi.w	800b076 <HAL_RCCEx_PeriphCLKConfig+0x536>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ae34:	6822      	ldr	r2, [r4, #0]
 800ae36:	0316      	lsls	r6, r2, #12
 800ae38:	d501      	bpl.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800ae3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae3c:	b11b      	cbz	r3, 800ae46 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800ae3e:	02d0      	lsls	r0, r2, #11
 800ae40:	d51c      	bpl.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ae42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae44:	b9d3      	cbnz	r3, 800ae7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ae46:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ae4a:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ae4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae52:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800ae56:	430b      	orrs	r3, r1
 800ae58:	6961      	ldr	r1, [r4, #20]
 800ae5a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800ae5e:	69a1      	ldr	r1, [r4, #24]
 800ae60:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ae64:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ae68:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800ae6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ae6e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800ae72:	3901      	subs	r1, #1
 800ae74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ae78:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ae7c:	0291      	lsls	r1, r2, #10
 800ae7e:	d515      	bpl.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800ae80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ae82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae86:	d111      	bne.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ae88:	4982      	ldr	r1, [pc, #520]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800ae8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ae8e:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ae92:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800ae96:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800ae9a:	4303      	orrs	r3, r0
 800ae9c:	6960      	ldr	r0, [r4, #20]
 800ae9e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800aea2:	6a20      	ldr	r0, [r4, #32]
 800aea4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800aeac:	0712      	lsls	r2, r2, #28
 800aeae:	d519      	bpl.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aeb0:	4a78      	ldr	r2, [pc, #480]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800aeb2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aeb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800aeba:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800aebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aec2:	430b      	orrs	r3, r1
 800aec4:	6961      	ldr	r1, [r4, #20]
 800aec6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800aeca:	69e1      	ldr	r1, [r4, #28]
 800aecc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800aed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800aed4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800aed8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aeda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800aede:	430b      	orrs	r3, r1
 800aee0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aee4:	4c6b      	ldr	r4, [pc, #428]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeee:	f7fb fdc9 	bl	8006a84 <HAL_GetTick>
 800aef2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	f140 80c4 	bpl.w	800b084 <HAL_RCCEx_PeriphCLKConfig+0x544>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800aefc:	2000      	movs	r0, #0
 800aefe:	e009      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 800af00:	2601      	movs	r6, #1
 800af02:	e659      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af04:	f7fb fdbe 	bl	8006a84 <HAL_GetTick>
 800af08:	eba0 0008 	sub.w	r0, r0, r8
 800af0c:	2864      	cmp	r0, #100	; 0x64
 800af0e:	f67f ae6b 	bls.w	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800af12:	2003      	movs	r0, #3
}
 800af14:	b003      	add	sp, #12
 800af16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800af1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800af1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800af20:	4293      	cmp	r3, r2
 800af22:	f43f ae6b 	beq.w	800abfc <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800af28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800af2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800af32:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800af34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800af36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800af3a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800af3c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800af3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af40:	07d8      	lsls	r0, r3, #31
 800af42:	f57f ae5b 	bpl.w	800abfc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800af46:	f7fb fd9d 	bl	8006a84 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af4a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800af4e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af52:	0799      	lsls	r1, r3, #30
 800af54:	f53f ae52 	bmi.w	800abfc <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af58:	f7fb fd94 	bl	8006a84 <HAL_GetTick>
 800af5c:	eba0 0008 	sub.w	r0, r0, r8
 800af60:	4548      	cmp	r0, r9
 800af62:	d9f5      	bls.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800af64:	e7d5      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af66:	6891      	ldr	r1, [r2, #8]
 800af68:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800af6c:	e656      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800af6e:	4e49      	ldr	r6, [pc, #292]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800af70:	6833      	ldr	r3, [r6, #0]
 800af72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af76:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800af78:	f7fb fd84 	bl	8006a84 <HAL_GetTick>
 800af7c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af7e:	6833      	ldr	r3, [r6, #0]
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	d472      	bmi.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800af84:	6822      	ldr	r2, [r4, #0]
 800af86:	07d7      	lsls	r7, r2, #31
 800af88:	d512      	bpl.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800af8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af8c:	b983      	cbnz	r3, 800afb0 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af8e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800af92:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800af96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800af9a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800af9e:	430b      	orrs	r3, r1
 800afa0:	6861      	ldr	r1, [r4, #4]
 800afa2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800afa6:	68a1      	ldr	r1, [r4, #8]
 800afa8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800afac:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800afb0:	0316      	lsls	r6, r2, #12
 800afb2:	d503      	bpl.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800afb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afba:	d005      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800afbc:	02d0      	lsls	r0, r2, #11
 800afbe:	d51e      	bpl.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800afc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afc6:	d11a      	bne.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800afc8:	4932      	ldr	r1, [pc, #200]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800afca:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800afce:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800afd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afd6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800afda:	4303      	orrs	r3, r0
 800afdc:	6860      	ldr	r0, [r4, #4]
 800afde:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800afe2:	68e0      	ldr	r0, [r4, #12]
 800afe4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800afe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800afec:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800aff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aff2:	f020 001f 	bic.w	r0, r0, #31
 800aff6:	3b01      	subs	r3, #1
 800aff8:	4303      	orrs	r3, r0
 800affa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800affe:	01d1      	lsls	r1, r2, #7
 800b000:	d511      	bpl.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b002:	4924      	ldr	r1, [pc, #144]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800b004:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b008:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b00c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800b010:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800b014:	4303      	orrs	r3, r0
 800b016:	6860      	ldr	r0, [r4, #4]
 800b018:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800b01c:	6920      	ldr	r0, [r4, #16]
 800b01e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b026:	0192      	lsls	r2, r2, #6
 800b028:	d50d      	bpl.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b02a:	6923      	ldr	r3, [r4, #16]
 800b02c:	6862      	ldr	r2, [r4, #4]
 800b02e:	041b      	lsls	r3, r3, #16
 800b030:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800b034:	68e2      	ldr	r2, [r4, #12]
 800b036:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b03a:	68a2      	ldr	r2, [r4, #8]
 800b03c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800b040:	4a14      	ldr	r2, [pc, #80]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800b042:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800b046:	4e13      	ldr	r6, [pc, #76]	; (800b094 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800b048:	6833      	ldr	r3, [r6, #0]
 800b04a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b04e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800b050:	f7fb fd18 	bl	8006a84 <HAL_GetTick>
 800b054:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b056:	6833      	ldr	r3, [r6, #0]
 800b058:	011b      	lsls	r3, r3, #4
 800b05a:	f53f aedd 	bmi.w	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b05e:	f7fb fd11 	bl	8006a84 <HAL_GetTick>
 800b062:	1bc0      	subs	r0, r0, r7
 800b064:	2864      	cmp	r0, #100	; 0x64
 800b066:	d9f6      	bls.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b068:	e753      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b06a:	f7fb fd0b 	bl	8006a84 <HAL_GetTick>
 800b06e:	1bc0      	subs	r0, r0, r7
 800b070:	2864      	cmp	r0, #100	; 0x64
 800b072:	d984      	bls.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b074:	e74d      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b076:	f7fb fd05 	bl	8006a84 <HAL_GetTick>
 800b07a:	1b80      	subs	r0, r0, r6
 800b07c:	2864      	cmp	r0, #100	; 0x64
 800b07e:	f67f aed5 	bls.w	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 800b082:	e746      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b084:	f7fb fcfe 	bl	8006a84 <HAL_GetTick>
 800b088:	1b40      	subs	r0, r0, r5
 800b08a:	2864      	cmp	r0, #100	; 0x64
 800b08c:	f67f af32 	bls.w	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800b090:	e73f      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b092:	bf00      	nop
 800b094:	40023800 	.word	0x40023800

0800b098 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b09c:	4604      	mov	r4, r0
 800b09e:	b1c8      	cbz	r0, 800b0d4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b0a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b0a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b0a8:	b91b      	cbnz	r3, 800b0b2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b0aa:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b0ae:	f7f9 fa6b 	bl	8004588 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0b2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b0b4:	1d21      	adds	r1, r4, #4
 800b0b6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b0bc:	f000 fabf 	bl	800b63e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b0c0:	6862      	ldr	r2, [r4, #4]
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	6820      	ldr	r0, [r4, #0]
 800b0c6:	f000 faf5 	bl	800b6b4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b0ca:	2301      	movs	r3, #1

  return HAL_OK;
 800b0cc:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b0ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	e7fc      	b.n	800b0d2 <HAL_SDRAM_Init+0x3a>

0800b0d8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b0d8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b0da:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800b0de:	4605      	mov	r5, r0
 800b0e0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b0e2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b0e4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800b0e6:	d010      	beq.n	800b10a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b0e8:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800b0ec:	2c01      	cmp	r4, #1
 800b0ee:	d110      	bne.n	800b112 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0f0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b0f2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0f4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b0f8:	f000 fb12 	bl	800b720 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b0fc:	6833      	ldr	r3, [r6, #0]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d104      	bne.n	800b10c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b102:	2305      	movs	r3, #5
 800b104:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b108:	2000      	movs	r0, #0
}
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b10c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800b110:	e7fa      	b.n	800b108 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800b112:	2001      	movs	r0, #1
 800b114:	e7f9      	b.n	800b10a <HAL_SDRAM_SendCommand+0x32>

0800b116 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b116:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b118:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800b11c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b11e:	2b02      	cmp	r3, #2
 800b120:	b2d8      	uxtb	r0, r3
 800b122:	d00d      	beq.n	800b140 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b124:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b128:	2b01      	cmp	r3, #1
 800b12a:	b2dd      	uxtb	r5, r3
 800b12c:	d109      	bne.n	800b142 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b12e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b130:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b132:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b136:	f000 fb05 	bl	800b744 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b13a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b13c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800b140:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b142:	2001      	movs	r0, #1
 800b144:	e7fc      	b.n	800b140 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

0800b148 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b148:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d133      	bne.n	800b1b8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b150:	2302      	movs	r3, #2
 800b152:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b156:	6803      	ldr	r3, [r0, #0]
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	f042 0201 	orr.w	r2, r2, #1
 800b15e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b160:	4a16      	ldr	r2, [pc, #88]	; (800b1bc <HAL_TIM_Base_Start_IT+0x74>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d01a      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x54>
 800b166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b16a:	d017      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x54>
 800b16c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b170:	4293      	cmp	r3, r2
 800b172:	d013      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x54>
 800b174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b178:	4293      	cmp	r3, r2
 800b17a:	d00f      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x54>
 800b17c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b180:	4293      	cmp	r3, r2
 800b182:	d00b      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x54>
 800b184:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b188:	4293      	cmp	r3, r2
 800b18a:	d007      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x54>
 800b18c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b190:	4293      	cmp	r3, r2
 800b192:	d003      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x54>
 800b194:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b198:	4293      	cmp	r3, r2
 800b19a:	d107      	bne.n	800b1ac <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b19c:	6899      	ldr	r1, [r3, #8]
 800b19e:	4a08      	ldr	r2, [pc, #32]	; (800b1c0 <HAL_TIM_Base_Start_IT+0x78>)
 800b1a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1a2:	2a06      	cmp	r2, #6
 800b1a4:	d006      	beq.n	800b1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800b1a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b1aa:	d003      	beq.n	800b1b4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	f042 0201 	orr.w	r2, r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1b4:	2000      	movs	r0, #0
}
 800b1b6:	4770      	bx	lr
    return HAL_ERROR;
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	4770      	bx	lr
 800b1bc:	40010000 	.word	0x40010000
 800b1c0:	00010007 	.word	0x00010007

0800b1c4 <HAL_TIM_OC_DelayElapsedCallback>:
 800b1c4:	4770      	bx	lr

0800b1c6 <HAL_TIM_IC_CaptureCallback>:
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b1c8:	4770      	bx	lr

0800b1ca <HAL_TIM_TriggerCallback>:
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1cc:	6803      	ldr	r3, [r0, #0]
 800b1ce:	691a      	ldr	r2, [r3, #16]
 800b1d0:	0791      	lsls	r1, r2, #30
{
 800b1d2:	b510      	push	{r4, lr}
 800b1d4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1d6:	d50f      	bpl.n	800b1f8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1d8:	68da      	ldr	r2, [r3, #12]
 800b1da:	0792      	lsls	r2, r2, #30
 800b1dc:	d50c      	bpl.n	800b1f8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1de:	f06f 0202 	mvn.w	r2, #2
 800b1e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	0799      	lsls	r1, r3, #30
 800b1ec:	f000 8085 	beq.w	800b2fa <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1f0:	f7ff ffe9 	bl	800b1c6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	0752      	lsls	r2, r2, #29
 800b1fe:	d510      	bpl.n	800b222 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b200:	68da      	ldr	r2, [r3, #12]
 800b202:	0750      	lsls	r0, r2, #29
 800b204:	d50d      	bpl.n	800b222 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b206:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b20a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b20c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b20e:	2202      	movs	r2, #2
 800b210:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b218:	d075      	beq.n	800b306 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b21a:	f7ff ffd4 	bl	800b1c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b21e:	2300      	movs	r3, #0
 800b220:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	0711      	lsls	r1, r2, #28
 800b228:	d50f      	bpl.n	800b24a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b22a:	68da      	ldr	r2, [r3, #12]
 800b22c:	0712      	lsls	r2, r2, #28
 800b22e:	d50c      	bpl.n	800b24a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b230:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b234:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b238:	2204      	movs	r2, #4
 800b23a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	079b      	lsls	r3, r3, #30
 800b240:	d067      	beq.n	800b312 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b242:	f7ff ffc0 	bl	800b1c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b246:	2300      	movs	r3, #0
 800b248:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	691a      	ldr	r2, [r3, #16]
 800b24e:	06d0      	lsls	r0, r2, #27
 800b250:	d510      	bpl.n	800b274 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b252:	68da      	ldr	r2, [r3, #12]
 800b254:	06d1      	lsls	r1, r2, #27
 800b256:	d50d      	bpl.n	800b274 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b258:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b25c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b25e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b260:	2208      	movs	r2, #8
 800b262:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b26a:	d058      	beq.n	800b31e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800b26c:	f7ff ffab 	bl	800b1c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b270:	2300      	movs	r3, #0
 800b272:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	691a      	ldr	r2, [r3, #16]
 800b278:	07d2      	lsls	r2, r2, #31
 800b27a:	d508      	bpl.n	800b28e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b27c:	68da      	ldr	r2, [r3, #12]
 800b27e:	07d0      	lsls	r0, r2, #31
 800b280:	d505      	bpl.n	800b28e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b282:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b286:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b288:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b28a:	f7f8 fea1 	bl	8003fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	691a      	ldr	r2, [r3, #16]
 800b292:	0611      	lsls	r1, r2, #24
 800b294:	d508      	bpl.n	800b2a8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b296:	68da      	ldr	r2, [r3, #12]
 800b298:	0612      	lsls	r2, r2, #24
 800b29a:	d505      	bpl.n	800b2a8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b29c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b2a4:	f000 f9c9 	bl	800b63a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	691a      	ldr	r2, [r3, #16]
 800b2ac:	05d0      	lsls	r0, r2, #23
 800b2ae:	d508      	bpl.n	800b2c2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	0611      	lsls	r1, r2, #24
 800b2b4:	d505      	bpl.n	800b2c2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b2be:	f000 f9bd 	bl	800b63c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	691a      	ldr	r2, [r3, #16]
 800b2c6:	0652      	lsls	r2, r2, #25
 800b2c8:	d508      	bpl.n	800b2dc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	0650      	lsls	r0, r2, #25
 800b2ce:	d505      	bpl.n	800b2dc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b2d8:	f7ff ff77 	bl	800b1ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	0691      	lsls	r1, r2, #26
 800b2e2:	d522      	bpl.n	800b32a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	0692      	lsls	r2, r2, #26
 800b2e8:	d51f      	bpl.n	800b32a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2ea:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2f0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b2f6:	f000 b99f 	b.w	800b638 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2fa:	f7ff ff63 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7ff ff62 	bl	800b1c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800b304:	e776      	b.n	800b1f4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b306:	f7ff ff5d 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b30a:	4620      	mov	r0, r4
 800b30c:	f7ff ff5c 	bl	800b1c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800b310:	e785      	b.n	800b21e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b312:	f7ff ff57 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b316:	4620      	mov	r0, r4
 800b318:	f7ff ff56 	bl	800b1c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800b31c:	e793      	b.n	800b246 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b31e:	f7ff ff51 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b322:	4620      	mov	r0, r4
 800b324:	f7ff ff50 	bl	800b1c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800b328:	e7a2      	b.n	800b270 <HAL_TIM_IRQHandler+0xa4>
}
 800b32a:	bd10      	pop	{r4, pc}

0800b32c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b32c:	4a30      	ldr	r2, [pc, #192]	; (800b3f0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800b32e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b330:	4290      	cmp	r0, r2
 800b332:	d012      	beq.n	800b35a <TIM_Base_SetConfig+0x2e>
 800b334:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b338:	d00f      	beq.n	800b35a <TIM_Base_SetConfig+0x2e>
 800b33a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b33e:	4290      	cmp	r0, r2
 800b340:	d00b      	beq.n	800b35a <TIM_Base_SetConfig+0x2e>
 800b342:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b346:	4290      	cmp	r0, r2
 800b348:	d007      	beq.n	800b35a <TIM_Base_SetConfig+0x2e>
 800b34a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b34e:	4290      	cmp	r0, r2
 800b350:	d003      	beq.n	800b35a <TIM_Base_SetConfig+0x2e>
 800b352:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b356:	4290      	cmp	r0, r2
 800b358:	d119      	bne.n	800b38e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800b35a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b35c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b360:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b362:	4a23      	ldr	r2, [pc, #140]	; (800b3f0 <TIM_Base_SetConfig+0xc4>)
 800b364:	4290      	cmp	r0, r2
 800b366:	d029      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b368:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b36c:	d026      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b36e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b372:	4290      	cmp	r0, r2
 800b374:	d022      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b37a:	4290      	cmp	r0, r2
 800b37c:	d01e      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b37e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b382:	4290      	cmp	r0, r2
 800b384:	d01a      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b386:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b38a:	4290      	cmp	r0, r2
 800b38c:	d016      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b38e:	4a19      	ldr	r2, [pc, #100]	; (800b3f4 <TIM_Base_SetConfig+0xc8>)
 800b390:	4290      	cmp	r0, r2
 800b392:	d013      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b394:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b398:	4290      	cmp	r0, r2
 800b39a:	d00f      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b39c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3a0:	4290      	cmp	r0, r2
 800b3a2:	d00b      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b3a4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b3a8:	4290      	cmp	r0, r2
 800b3aa:	d007      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b3ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3b0:	4290      	cmp	r0, r2
 800b3b2:	d003      	beq.n	800b3bc <TIM_Base_SetConfig+0x90>
 800b3b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3b8:	4290      	cmp	r0, r2
 800b3ba:	d103      	bne.n	800b3c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3c0:	68ca      	ldr	r2, [r1, #12]
 800b3c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3c4:	694a      	ldr	r2, [r1, #20]
 800b3c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800b3cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3ce:	688b      	ldr	r3, [r1, #8]
 800b3d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3d2:	680b      	ldr	r3, [r1, #0]
 800b3d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <TIM_Base_SetConfig+0xc4>)
 800b3d8:	4298      	cmp	r0, r3
 800b3da:	d003      	beq.n	800b3e4 <TIM_Base_SetConfig+0xb8>
 800b3dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3e0:	4298      	cmp	r0, r3
 800b3e2:	d101      	bne.n	800b3e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3e4:	690b      	ldr	r3, [r1, #16]
 800b3e6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	6143      	str	r3, [r0, #20]
}
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	40010000 	.word	0x40010000
 800b3f4:	40014000 	.word	0x40014000

0800b3f8 <HAL_TIM_Base_Init>:
{
 800b3f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	b350      	cbz	r0, 800b454 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800b3fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b402:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b406:	b91b      	cbnz	r3, 800b410 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800b408:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b40c:	f7f9 f8a8 	bl	8004560 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800b410:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b412:	6820      	ldr	r0, [r4, #0]
 800b414:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800b416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b41a:	f7ff ff87 	bl	800b32c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b41e:	2301      	movs	r3, #1
  return HAL_OK;
 800b420:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b422:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b426:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b42a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b42e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b432:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b436:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b43a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b43e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b446:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b44a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b44e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b452:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b454:	2001      	movs	r0, #1
 800b456:	e7fc      	b.n	800b452 <HAL_TIM_Base_Init+0x5a>

0800b458 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b458:	4311      	orrs	r1, r2
{
 800b45a:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 800b45c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b45e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b462:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b466:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b468:	6083      	str	r3, [r0, #8]
}
 800b46a:	bd10      	pop	{r4, pc}

0800b46c <HAL_TIM_ConfigClockSource>:
{
 800b46c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800b46e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800b472:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800b474:	2b01      	cmp	r3, #1
 800b476:	f04f 0302 	mov.w	r3, #2
 800b47a:	f000 808f 	beq.w	800b59c <HAL_TIM_ConfigClockSource+0x130>
 800b47e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b480:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b484:	4b46      	ldr	r3, [pc, #280]	; (800b5a0 <HAL_TIM_ConfigClockSource+0x134>)
  __HAL_LOCK(htim);
 800b486:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800b48a:	6800      	ldr	r0, [r0, #0]
 800b48c:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b48e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800b490:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800b492:	680b      	ldr	r3, [r1, #0]
 800b494:	2b60      	cmp	r3, #96	; 0x60
 800b496:	d052      	beq.n	800b53e <HAL_TIM_ConfigClockSource+0xd2>
 800b498:	d833      	bhi.n	800b502 <HAL_TIM_ConfigClockSource+0x96>
 800b49a:	2b40      	cmp	r3, #64	; 0x40
 800b49c:	d067      	beq.n	800b56e <HAL_TIM_ConfigClockSource+0x102>
 800b49e:	d816      	bhi.n	800b4ce <HAL_TIM_ConfigClockSource+0x62>
 800b4a0:	2b20      	cmp	r3, #32
 800b4a2:	d00d      	beq.n	800b4c0 <HAL_TIM_ConfigClockSource+0x54>
 800b4a4:	d80a      	bhi.n	800b4bc <HAL_TIM_ConfigClockSource+0x50>
 800b4a6:	f033 0110 	bics.w	r1, r3, #16
 800b4aa:	d009      	beq.n	800b4c0 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800b4bc:	2b30      	cmp	r3, #48	; 0x30
 800b4be:	d1f5      	bne.n	800b4ac <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 800b4c0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	f043 0307 	orr.w	r3, r3, #7
 800b4cc:	e017      	b.n	800b4fe <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800b4ce:	2b50      	cmp	r3, #80	; 0x50
 800b4d0:	d1ec      	bne.n	800b4ac <HAL_TIM_ConfigClockSource+0x40>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d2:	684a      	ldr	r2, [r1, #4]
 800b4d4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800b4d6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4d8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4da:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4de:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800b4e2:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4e4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4e6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4ec:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b4f0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800b4f2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800b4f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4fa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800b4fe:	6083      	str	r3, [r0, #8]
 800b500:	e011      	b.n	800b526 <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b506:	d00e      	beq.n	800b526 <HAL_TIM_ConfigClockSource+0xba>
 800b508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b50c:	d00d      	beq.n	800b52a <HAL_TIM_ConfigClockSource+0xbe>
 800b50e:	2b70      	cmp	r3, #112	; 0x70
 800b510:	d1cc      	bne.n	800b4ac <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 800b512:	68cb      	ldr	r3, [r1, #12]
 800b514:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800b518:	f7ff ff9e 	bl	800b458 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b51c:	6822      	ldr	r2, [r4, #0]
 800b51e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b520:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b524:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b526:	2200      	movs	r2, #0
 800b528:	e7c0      	b.n	800b4ac <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 800b52a:	68cb      	ldr	r3, [r1, #12]
 800b52c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800b530:	f7ff ff92 	bl	800b458 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b534:	6822      	ldr	r2, [r4, #0]
 800b536:	6893      	ldr	r3, [r2, #8]
 800b538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b53c:	e7f2      	b.n	800b524 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b53e:	684d      	ldr	r5, [r1, #4]
 800b540:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b542:	6a01      	ldr	r1, [r0, #32]
 800b544:	f021 0110 	bic.w	r1, r1, #16
 800b548:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b54a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800b54c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b54e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b556:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800b55a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800b55e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800b560:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800b562:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b568:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800b56c:	e7c7      	b.n	800b4fe <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b56e:	684a      	ldr	r2, [r1, #4]
 800b570:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800b572:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b574:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b576:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b57a:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800b57e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b580:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b582:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b588:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b58c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800b58e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800b590:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b596:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800b59a:	e7b0      	b.n	800b4fe <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 800b59c:	461a      	mov	r2, r3
 800b59e:	e78b      	b.n	800b4b8 <HAL_TIM_ConfigClockSource+0x4c>
 800b5a0:	fffe0088 	.word	0xfffe0088

0800b5a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5a4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	f04f 0302 	mov.w	r3, #2
 800b5b0:	d03d      	beq.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5b6:	4d1f      	ldr	r5, [pc, #124]	; (800b634 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 800b5b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5ba:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800b5bc:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800b5be:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5c0:	d003      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800b5c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b5c6:	42ab      	cmp	r3, r5
 800b5c8:	d103      	bne.n	800b5d2 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5ce:	684d      	ldr	r5, [r1, #4]
 800b5d0:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5d2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5d8:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5dc:	4a15      	ldr	r2, [pc, #84]	; (800b634 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d01a      	beq.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e6:	d017      	beq.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b5e8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d013      	beq.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b5f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00f      	beq.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b5f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00b      	beq.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b600:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b604:	4293      	cmp	r3, r2
 800b606:	d007      	beq.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b608:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d003      	beq.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800b610:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b614:	4293      	cmp	r3, r2
 800b616:	d104      	bne.n	800b622 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b618:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b61a:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b61e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b620:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b622:	2301      	movs	r3, #1
 800b624:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b628:	2300      	movs	r3, #0
 800b62a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800b62e:	4618      	mov	r0, r3

  return HAL_OK;
}
 800b630:	bd30      	pop	{r4, r5, pc}
 800b632:	bf00      	nop
 800b634:	40010000 	.word	0x40010000

0800b638 <HAL_TIMEx_CommutCallback>:
 800b638:	4770      	bx	lr

0800b63a <HAL_TIMEx_BreakCallback>:
 800b63a:	4770      	bx	lr

0800b63c <HAL_TIMEx_Break2Callback>:
 800b63c:	4770      	bx	lr

0800b63e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b63e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b642:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b644:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800b648:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800b64c:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800b650:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800b654:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800b658:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b65a:	b9a2      	cbnz	r2, 800b686 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b65c:	ea43 0209 	orr.w	r2, r3, r9
 800b660:	6801      	ldr	r1, [r0, #0]
 800b662:	432a      	orrs	r2, r5
 800b664:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800b668:	ea42 0308 	orr.w	r3, r2, r8
 800b66c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800b670:	ea43 030e 	orr.w	r3, r3, lr
 800b674:	ea43 030c 	orr.w	r3, r3, ip
 800b678:	433b      	orrs	r3, r7
 800b67a:	4333      	orrs	r3, r6
 800b67c:	430b      	orrs	r3, r1
 800b67e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b680:	2000      	movs	r0, #0
 800b682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b686:	6802      	ldr	r2, [r0, #0]
 800b688:	ea43 0309 	orr.w	r3, r3, r9
 800b68c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b690:	4313      	orrs	r3, r2
 800b692:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b694:	ea45 0308 	orr.w	r3, r5, r8
 800b698:	6842      	ldr	r2, [r0, #4]
 800b69a:	ea43 030e 	orr.w	r3, r3, lr
 800b69e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800b6a2:	ea43 030c 	orr.w	r3, r3, ip
 800b6a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800b6aa:	433b      	orrs	r3, r7
 800b6ac:	4333      	orrs	r3, r6
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	6043      	str	r3, [r0, #4]
 800b6b2:	e7e5      	b.n	800b680 <FMC_SDRAM_Init+0x42>

0800b6b4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b6b4:	68cb      	ldr	r3, [r1, #12]
 800b6b6:	f103 3cff 	add.w	ip, r3, #4294967295
 800b6ba:	694b      	ldr	r3, [r1, #20]
{
 800b6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	680f      	ldr	r7, [r1, #0]
 800b6c2:	684c      	ldr	r4, [r1, #4]
 800b6c4:	688e      	ldr	r6, [r1, #8]
 800b6c6:	051b      	lsls	r3, r3, #20
 800b6c8:	690d      	ldr	r5, [r1, #16]
 800b6ca:	3c01      	subs	r4, #1
 800b6cc:	6989      	ldr	r1, [r1, #24]
 800b6ce:	3e01      	subs	r6, #1
 800b6d0:	3d01      	subs	r5, #1
 800b6d2:	3f01      	subs	r7, #1
 800b6d4:	3901      	subs	r1, #1
 800b6d6:	0124      	lsls	r4, r4, #4
 800b6d8:	0236      	lsls	r6, r6, #8
 800b6da:	042d      	lsls	r5, r5, #16
 800b6dc:	0609      	lsls	r1, r1, #24
 800b6de:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800b6e2:	b95a      	cbnz	r2, 800b6fc <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b6e4:	433b      	orrs	r3, r7
 800b6e6:	6882      	ldr	r2, [r0, #8]
 800b6e8:	4323      	orrs	r3, r4
 800b6ea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b6ee:	4333      	orrs	r3, r6
 800b6f0:	432b      	orrs	r3, r5
 800b6f2:	430b      	orrs	r3, r1
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b6fc:	6882      	ldr	r2, [r0, #8]
 800b6fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b702:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800b706:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b708:	ea44 0306 	orr.w	r3, r4, r6
 800b70c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b70e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b710:	68c2      	ldr	r2, [r0, #12]
 800b712:	432b      	orrs	r3, r5
 800b714:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b718:	430b      	orrs	r3, r1
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60c3      	str	r3, [r0, #12]
 800b71e:	e7eb      	b.n	800b6f8 <FMC_SDRAM_Timing_Init+0x44>

0800b720 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b720:	6902      	ldr	r2, [r0, #16]
{
 800b722:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b724:	e9d1 3400 	ldrd	r3, r4, [r1]
 800b728:	0d92      	lsrs	r2, r2, #22
 800b72a:	4323      	orrs	r3, r4
 800b72c:	68cc      	ldr	r4, [r1, #12]
 800b72e:	0592      	lsls	r2, r2, #22
 800b730:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b734:	4313      	orrs	r3, r2
 800b736:	688a      	ldr	r2, [r1, #8]
 800b738:	3a01      	subs	r2, #1
 800b73a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b73e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b740:	2000      	movs	r0, #0
 800b742:	bd10      	pop	{r4, pc}

0800b744 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b744:	6943      	ldr	r3, [r0, #20]
 800b746:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b74a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800b74e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800b752:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800b754:	2000      	movs	r0, #0
 800b756:	4770      	bx	lr

0800b758 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b758:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b75c:	b113      	cbz	r3, 800b764 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800b75e:	f06f 0005 	mvn.w	r0, #5
 800b762:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b764:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800b768:	4b07      	ldr	r3, [pc, #28]	; (800b788 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800b76a:	b912      	cbnz	r2, 800b772 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b76c:	f3ef 8211 	mrs	r2, BASEPRI
 800b770:	b112      	cbz	r2, 800b778 <osKernelInitialize+0x20>
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	2a02      	cmp	r2, #2
 800b776:	d0f2      	beq.n	800b75e <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b778:	6818      	ldr	r0, [r3, #0]
 800b77a:	b910      	cbnz	r0, 800b782 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b77c:	2201      	movs	r2, #1
 800b77e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b780:	4770      	bx	lr
    } else {
      stat = osError;
 800b782:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800b786:	4770      	bx	lr
 800b788:	20012ae0 	.word	0x20012ae0

0800b78c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b78c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b78e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b792:	b113      	cbz	r3, 800b79a <osKernelStart+0xe>
    stat = osErrorISR;
 800b794:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800b798:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b79a:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800b79e:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800b7a0:	b912      	cbnz	r2, 800b7a8 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b7a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b7a6:	b112      	cbz	r2, 800b7ae <osKernelStart+0x22>
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	2a02      	cmp	r2, #2
 800b7ac:	d0f2      	beq.n	800b794 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	2a01      	cmp	r2, #1
 800b7b2:	d105      	bne.n	800b7c0 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b7b8:	f001 fe3c 	bl	800d434 <vTaskStartScheduler>
      stat = osOK;
 800b7bc:	2000      	movs	r0, #0
 800b7be:	e7eb      	b.n	800b798 <osKernelStart+0xc>
      stat = osError;
 800b7c0:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800b7c4:	e7e8      	b.n	800b798 <osKernelStart+0xc>
 800b7c6:	bf00      	nop
 800b7c8:	20012ae0 	.word	0x20012ae0

0800b7cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ce:	4614      	mov	r4, r2
 800b7d0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b7d2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b7d4:	460b      	mov	r3, r1
  hTask = NULL;
 800b7d6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7d8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b7dc:	bb22      	cbnz	r2, 800b828 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7de:	f3ef 8210 	mrs	r2, PRIMASK
 800b7e2:	b912      	cbnz	r2, 800b7ea <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b7e4:	f3ef 8211 	mrs	r2, BASEPRI
 800b7e8:	b11a      	cbz	r2, 800b7f2 <osThreadNew+0x26>
 800b7ea:	4a22      	ldr	r2, [pc, #136]	; (800b874 <osThreadNew+0xa8>)
 800b7ec:	6812      	ldr	r2, [r2, #0]
 800b7ee:	2a02      	cmp	r2, #2
 800b7f0:	d01a      	beq.n	800b828 <osThreadNew+0x5c>
 800b7f2:	b1c8      	cbz	r0, 800b828 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b7f4:	2c00      	cmp	r4, #0
 800b7f6:	d02f      	beq.n	800b858 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b7f8:	69a5      	ldr	r5, [r4, #24]
 800b7fa:	2d00      	cmp	r5, #0
 800b7fc:	bf08      	it	eq
 800b7fe:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b800:	1e6a      	subs	r2, r5, #1
 800b802:	46ac      	mov	ip, r5
 800b804:	2a37      	cmp	r2, #55	; 0x37
 800b806:	d82b      	bhi.n	800b860 <osThreadNew+0x94>
 800b808:	6862      	ldr	r2, [r4, #4]
 800b80a:	07d2      	lsls	r2, r2, #31
 800b80c:	d428      	bmi.n	800b860 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b80e:	6966      	ldr	r6, [r4, #20]
 800b810:	b16e      	cbz	r6, 800b82e <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b812:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b814:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b816:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800b81a:	b157      	cbz	r7, 800b832 <osThreadNew+0x66>
 800b81c:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800b820:	d902      	bls.n	800b828 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b822:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b824:	b104      	cbz	r4, 800b828 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b826:	b9ee      	cbnz	r6, 800b864 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b828:	9805      	ldr	r0, [sp, #20]
}
 800b82a:	b007      	add	sp, #28
 800b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b82e:	2280      	movs	r2, #128	; 0x80
 800b830:	e7f0      	b.n	800b814 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b832:	f1be 0f00 	cmp.w	lr, #0
 800b836:	d1f7      	bne.n	800b828 <osThreadNew+0x5c>
      if (mem == 0) {
 800b838:	6924      	ldr	r4, [r4, #16]
 800b83a:	2c00      	cmp	r4, #0
 800b83c:	d1f4      	bne.n	800b828 <osThreadNew+0x5c>
 800b83e:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b840:	a905      	add	r1, sp, #20
 800b842:	b292      	uxth	r2, r2
 800b844:	e9cd c100 	strd	ip, r1, [sp]
 800b848:	4621      	mov	r1, r4
 800b84a:	f001 fc8e 	bl	800d16a <xTaskCreate>
 800b84e:	2801      	cmp	r0, #1
          hTask = NULL;
 800b850:	bf1c      	itt	ne
 800b852:	2300      	movne	r3, #0
 800b854:	9305      	strne	r3, [sp, #20]
 800b856:	e7e7      	b.n	800b828 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800b858:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800b85c:	2280      	movs	r2, #128	; 0x80
 800b85e:	e7ef      	b.n	800b840 <osThreadNew+0x74>
        return (NULL);
 800b860:	2000      	movs	r0, #0
 800b862:	e7e2      	b.n	800b82a <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b864:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b868:	9500      	str	r5, [sp, #0]
 800b86a:	f001 fc40 	bl	800d0ee <xTaskCreateStatic>
 800b86e:	9005      	str	r0, [sp, #20]
 800b870:	e7da      	b.n	800b828 <osThreadNew+0x5c>
 800b872:	bf00      	nop
 800b874:	20012ae0 	.word	0x20012ae0

0800b878 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b87c:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800b880:	b116      	cbz	r6, 800b888 <osMutexNew+0x10>
  hMutex = NULL;
 800b882:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800b884:	4620      	mov	r0, r4
 800b886:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b888:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800b88c:	b912      	cbnz	r2, 800b894 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b88e:	f3ef 8211 	mrs	r2, BASEPRI
 800b892:	b11a      	cbz	r2, 800b89c <osMutexNew+0x24>
 800b894:	4a18      	ldr	r2, [pc, #96]	; (800b8f8 <osMutexNew+0x80>)
 800b896:	6812      	ldr	r2, [r2, #0]
 800b898:	2a02      	cmp	r2, #2
 800b89a:	d0f2      	beq.n	800b882 <osMutexNew+0xa>
    if (attr != NULL) {
 800b89c:	b115      	cbz	r5, 800b8a4 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800b89e:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800b8a0:	0733      	lsls	r3, r6, #28
 800b8a2:	d4ee      	bmi.n	800b882 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b8a4:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800b8a8:	b17d      	cbz	r5, 800b8ca <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b8aa:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800b8ae:	b151      	cbz	r1, 800b8c6 <osMutexNew+0x4e>
 800b8b0:	2b4f      	cmp	r3, #79	; 0x4f
 800b8b2:	d9e6      	bls.n	800b882 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800b8b4:	b1de      	cbz	r6, 800b8ee <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b8b6:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b8b8:	f000 ff50 	bl	800c75c <xQueueCreateMutexStatic>
 800b8bc:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d0df      	beq.n	800b882 <osMutexNew+0xa>
          name = attr->name;
 800b8c2:	682d      	ldr	r5, [r5, #0]
 800b8c4:	e00a      	b.n	800b8dc <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1db      	bne.n	800b882 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800b8ca:	b196      	cbz	r6, 800b8f2 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b8cc:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800b8ce:	f000 ff7a 	bl	800c7c6 <xQueueCreateMutex>
 800b8d2:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d0d4      	beq.n	800b882 <osMutexNew+0xa>
        if (attr != NULL) {
 800b8d8:	2d00      	cmp	r5, #0
 800b8da:	d1f2      	bne.n	800b8c2 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f001 fa3c 	bl	800cd5c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b8e4:	2e00      	cmp	r6, #0
 800b8e6:	d0cd      	beq.n	800b884 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b8e8:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800b8ec:	e7ca      	b.n	800b884 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	e7e2      	b.n	800b8b8 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	e7eb      	b.n	800b8ce <osMutexNew+0x56>
 800b8f6:	bf00      	nop
 800b8f8:	20012ae0 	.word	0x20012ae0

0800b8fc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b8fc:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b8fe:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b902:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800b904:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b908:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b90a:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b90e:	b112      	cbz	r2, 800b916 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800b910:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800b914:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b916:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800b91a:	b912      	cbnz	r2, 800b922 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b91c:	f3ef 8211 	mrs	r2, BASEPRI
 800b920:	b11a      	cbz	r2, 800b92a <osMutexAcquire+0x2e>
 800b922:	4a0d      	ldr	r2, [pc, #52]	; (800b958 <osMutexAcquire+0x5c>)
 800b924:	6812      	ldr	r2, [r2, #0]
 800b926:	2a02      	cmp	r2, #2
 800b928:	d0f2      	beq.n	800b910 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800b92a:	b188      	cbz	r0, 800b950 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b92c:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800b92e:	b163      	cbz	r3, 800b94a <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b930:	f001 f99b 	bl	800cc6a <xQueueTakeMutexRecursive>
 800b934:	2801      	cmp	r0, #1
 800b936:	d101      	bne.n	800b93c <osMutexAcquire+0x40>
  stat = osOK;
 800b938:	2000      	movs	r0, #0
 800b93a:	e7eb      	b.n	800b914 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800b93c:	2c00      	cmp	r4, #0
 800b93e:	bf14      	ite	ne
 800b940:	f06f 0001 	mvnne.w	r0, #1
 800b944:	f06f 0002 	mvneq.w	r0, #2
 800b948:	e7e4      	b.n	800b914 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b94a:	f001 f8c3 	bl	800cad4 <xQueueSemaphoreTake>
 800b94e:	e7f1      	b.n	800b934 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800b950:	f06f 0003 	mvn.w	r0, #3
 800b954:	e7de      	b.n	800b914 <osMutexAcquire+0x18>
 800b956:	bf00      	nop
 800b958:	20012ae0 	.word	0x20012ae0

0800b95c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b95c:	b508      	push	{r3, lr}
 800b95e:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b960:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800b964:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b968:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b96c:	b112      	cbz	r2, 800b974 <osMutexRelease+0x18>
    stat = osErrorISR;
 800b96e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800b972:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b974:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800b978:	b912      	cbnz	r2, 800b980 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b97a:	f3ef 8211 	mrs	r2, BASEPRI
 800b97e:	b11a      	cbz	r2, 800b988 <osMutexRelease+0x2c>
 800b980:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <osMutexRelease+0x50>)
 800b982:	6812      	ldr	r2, [r2, #0]
 800b984:	2a02      	cmp	r2, #2
 800b986:	d0f2      	beq.n	800b96e <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800b988:	b168      	cbz	r0, 800b9a6 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800b98a:	b13b      	cbz	r3, 800b99c <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b98c:	f000 fefb 	bl	800c786 <xQueueGiveMutexRecursive>
 800b990:	2801      	cmp	r0, #1
  stat = osOK;
 800b992:	bf0c      	ite	eq
 800b994:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b996:	f06f 0002 	mvnne.w	r0, #2
 800b99a:	e7ea      	b.n	800b972 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b99c:	461a      	mov	r2, r3
 800b99e:	4619      	mov	r1, r3
 800b9a0:	f000 fe21 	bl	800c5e6 <xQueueGenericSend>
 800b9a4:	e7f4      	b.n	800b990 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800b9a6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b9aa:	e7e2      	b.n	800b972 <osMutexRelease+0x16>
 800b9ac:	20012ae0 	.word	0x20012ae0

0800b9b0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b9b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9b2:	460e      	mov	r6, r1
 800b9b4:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9b6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b9ba:	b11b      	cbz	r3, 800b9c4 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800b9bc:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b9be:	4620      	mov	r0, r4
 800b9c0:	b002      	add	sp, #8
 800b9c2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9c4:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b9c8:	b913      	cbnz	r3, 800b9d0 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b9ca:	f3ef 8311 	mrs	r3, BASEPRI
 800b9ce:	b11b      	cbz	r3, 800b9d8 <osSemaphoreNew+0x28>
 800b9d0:	4b21      	ldr	r3, [pc, #132]	; (800ba58 <osSemaphoreNew+0xa8>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d0f1      	beq.n	800b9bc <osSemaphoreNew+0xc>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d0ef      	beq.n	800b9bc <osSemaphoreNew+0xc>
 800b9dc:	42b0      	cmp	r0, r6
 800b9de:	d3ed      	bcc.n	800b9bc <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800b9e0:	b1ed      	cbz	r5, 800ba1e <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b9e2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800b9e6:	b1c3      	cbz	r3, 800ba1a <osSemaphoreNew+0x6a>
 800b9e8:	2a4f      	cmp	r2, #79	; 0x4f
 800b9ea:	d9e7      	bls.n	800b9bc <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800b9ec:	2801      	cmp	r0, #1
 800b9ee:	d129      	bne.n	800ba44 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b9f0:	2203      	movs	r2, #3
 800b9f2:	9200      	str	r2, [sp, #0]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	f000 fd70 	bl	800c4dc <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800b9fc:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d0dc      	beq.n	800b9bc <osSemaphoreNew+0xc>
 800ba02:	b1ce      	cbz	r6, 800ba38 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba04:	2300      	movs	r3, #0
 800ba06:	461a      	mov	r2, r3
 800ba08:	4619      	mov	r1, r3
 800ba0a:	f000 fdec 	bl	800c5e6 <xQueueGenericSend>
 800ba0e:	2801      	cmp	r0, #1
 800ba10:	d012      	beq.n	800ba38 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800ba12:	4620      	mov	r0, r4
 800ba14:	f001 f9c8 	bl	800cda8 <vQueueDelete>
 800ba18:	e7d0      	b.n	800b9bc <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	d1ce      	bne.n	800b9bc <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800ba1e:	2801      	cmp	r0, #1
 800ba20:	d104      	bne.n	800ba2c <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800ba22:	2203      	movs	r2, #3
 800ba24:	2100      	movs	r1, #0
 800ba26:	f000 fd6d 	bl	800c504 <xQueueGenericCreate>
 800ba2a:	e7e7      	b.n	800b9fc <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	f000 fdb8 	bl	800c5a2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800ba32:	4604      	mov	r4, r0
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d0c1      	beq.n	800b9bc <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800ba38:	b95d      	cbnz	r5, 800ba52 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f001 f98d 	bl	800cd5c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800ba42:	e7bc      	b.n	800b9be <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ba44:	461a      	mov	r2, r3
 800ba46:	4631      	mov	r1, r6
 800ba48:	f000 fd85 	bl	800c556 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d0b4      	beq.n	800b9bc <osSemaphoreNew+0xc>
          name = attr->name;
 800ba52:	682d      	ldr	r5, [r5, #0]
 800ba54:	e7f1      	b.n	800ba3a <osSemaphoreNew+0x8a>
 800ba56:	bf00      	nop
 800ba58:	20012ae0 	.word	0x20012ae0

0800ba5c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ba5c:	b513      	push	{r0, r1, r4, lr}
 800ba5e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ba60:	b918      	cbnz	r0, 800ba6a <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800ba62:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800ba66:	b002      	add	sp, #8
 800ba68:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba6a:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800ba6e:	b163      	cbz	r3, 800ba8a <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800ba70:	2c00      	cmp	r4, #0
 800ba72:	d1f6      	bne.n	800ba62 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ba74:	aa01      	add	r2, sp, #4
 800ba76:	4621      	mov	r1, r4
      yield = pdFALSE;
 800ba78:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ba7a:	f001 f91a 	bl	800ccb2 <xQueueReceiveFromISR>
 800ba7e:	2801      	cmp	r0, #1
 800ba80:	d113      	bne.n	800baaa <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800ba82:	9b01      	ldr	r3, [sp, #4]
 800ba84:	b9a3      	cbnz	r3, 800bab0 <osSemaphoreAcquire+0x54>
  stat = osOK;
 800ba86:	2000      	movs	r0, #0
 800ba88:	e7ed      	b.n	800ba66 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba8a:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800ba8e:	b913      	cbnz	r3, 800ba96 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba90:	f3ef 8311 	mrs	r3, BASEPRI
 800ba94:	b11b      	cbz	r3, 800ba9e <osSemaphoreAcquire+0x42>
 800ba96:	4b0d      	ldr	r3, [pc, #52]	; (800bacc <osSemaphoreAcquire+0x70>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d0e8      	beq.n	800ba70 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ba9e:	4621      	mov	r1, r4
 800baa0:	f001 f818 	bl	800cad4 <xQueueSemaphoreTake>
 800baa4:	2801      	cmp	r0, #1
 800baa6:	d0ee      	beq.n	800ba86 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 800baa8:	b96c      	cbnz	r4, 800bac6 <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 800baaa:	f06f 0002 	mvn.w	r0, #2
 800baae:	e7da      	b.n	800ba66 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800bab0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	e7df      	b.n	800ba86 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800bac6:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800baca:	e7cc      	b.n	800ba66 <osSemaphoreAcquire+0xa>
 800bacc:	20012ae0 	.word	0x20012ae0

0800bad0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bad0:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800bad2:	b370      	cbz	r0, 800bb32 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bad4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800bad8:	b14b      	cbz	r3, 800baee <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800bada:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800badc:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800bade:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bae0:	f000 fef7 	bl	800c8d2 <xQueueGiveFromISR>
 800bae4:	2801      	cmp	r0, #1
 800bae6:	d014      	beq.n	800bb12 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800bae8:	f06f 0002 	mvn.w	r0, #2
 800baec:	e014      	b.n	800bb18 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baee:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800baf2:	b913      	cbnz	r3, 800bafa <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800baf4:	f3ef 8311 	mrs	r3, BASEPRI
 800baf8:	b11b      	cbz	r3, 800bb02 <osSemaphoreRelease+0x32>
 800bafa:	4b0f      	ldr	r3, [pc, #60]	; (800bb38 <osSemaphoreRelease+0x68>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d0eb      	beq.n	800bada <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bb02:	2300      	movs	r3, #0
 800bb04:	461a      	mov	r2, r3
 800bb06:	4619      	mov	r1, r3
 800bb08:	f000 fd6d 	bl	800c5e6 <xQueueGenericSend>
 800bb0c:	2801      	cmp	r0, #1
 800bb0e:	d002      	beq.n	800bb16 <osSemaphoreRelease+0x46>
 800bb10:	e7ea      	b.n	800bae8 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	b913      	cbnz	r3, 800bb1c <osSemaphoreRelease+0x4c>
  stat = osOK;
 800bb16:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800bb18:	b002      	add	sp, #8
 800bb1a:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800bb1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	e7f1      	b.n	800bb16 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800bb32:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800bb36:	e7ef      	b.n	800bb18 <osSemaphoreRelease+0x48>
 800bb38:	20012ae0 	.word	0x20012ae0

0800bb3c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bb3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb3e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb40:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bb44:	b11b      	cbz	r3, 800bb4e <osMessageQueueNew+0x12>
  hQueue = NULL;
 800bb46:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800bb48:	4628      	mov	r0, r5
 800bb4a:	b002      	add	sp, #8
 800bb4c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb4e:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bb52:	b913      	cbnz	r3, 800bb5a <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb54:	f3ef 8311 	mrs	r3, BASEPRI
 800bb58:	b11b      	cbz	r3, 800bb62 <osMessageQueueNew+0x26>
 800bb5a:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <osMessageQueueNew+0x88>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d0f1      	beq.n	800bb46 <osMessageQueueNew+0xa>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d0ef      	beq.n	800bb46 <osMessageQueueNew+0xa>
 800bb66:	2900      	cmp	r1, #0
 800bb68:	d0ed      	beq.n	800bb46 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800bb6a:	b1ec      	cbz	r4, 800bba8 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb6c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800bb70:	b193      	cbz	r3, 800bb98 <osMessageQueueNew+0x5c>
 800bb72:	2a4f      	cmp	r2, #79	; 0x4f
 800bb74:	d9e7      	bls.n	800bb46 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb76:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb78:	2a00      	cmp	r2, #0
 800bb7a:	d0e4      	beq.n	800bb46 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb7c:	fb01 f500 	mul.w	r5, r1, r0
 800bb80:	6966      	ldr	r6, [r4, #20]
 800bb82:	42ae      	cmp	r6, r5
 800bb84:	d3df      	bcc.n	800bb46 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bb86:	2500      	movs	r5, #0
 800bb88:	9500      	str	r5, [sp, #0]
 800bb8a:	f000 fca7 	bl	800c4dc <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800bb8e:	4605      	mov	r5, r0
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d0d8      	beq.n	800bb46 <osMessageQueueNew+0xa>
        name = attr->name;
 800bb94:	6824      	ldr	r4, [r4, #0]
 800bb96:	e00f      	b.n	800bbb8 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb98:	2a00      	cmp	r2, #0
 800bb9a:	d1d4      	bne.n	800bb46 <osMessageQueueNew+0xa>
 800bb9c:	6923      	ldr	r3, [r4, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1d1      	bne.n	800bb46 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bba2:	6963      	ldr	r3, [r4, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1ce      	bne.n	800bb46 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f000 fcab 	bl	800c504 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800bbae:	4605      	mov	r5, r0
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d0c8      	beq.n	800bb46 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800bbb4:	2c00      	cmp	r4, #0
 800bbb6:	d1ed      	bne.n	800bb94 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800bbb8:	4621      	mov	r1, r4
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f001 f8ce 	bl	800cd5c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800bbc0:	e7c2      	b.n	800bb48 <osMessageQueueNew+0xc>
 800bbc2:	bf00      	nop
 800bbc4:	20012ae0 	.word	0x20012ae0

0800bbc8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bbc8:	b513      	push	{r0, r1, r4, lr}
 800bbca:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbcc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800bbd0:	b123      	cbz	r3, 800bbdc <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bbd2:	b9d8      	cbnz	r0, 800bc0c <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800bbd4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800bbd8:	b002      	add	sp, #8
 800bbda:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbdc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800bbe0:	b913      	cbnz	r3, 800bbe8 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bbe2:	f3ef 8311 	mrs	r3, BASEPRI
 800bbe6:	b11b      	cbz	r3, 800bbf0 <osMessageQueuePut+0x28>
 800bbe8:	4b17      	ldr	r3, [pc, #92]	; (800bc48 <osMessageQueuePut+0x80>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d0f0      	beq.n	800bbd2 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d0ef      	beq.n	800bbd4 <osMessageQueuePut+0xc>
 800bbf4:	2900      	cmp	r1, #0
 800bbf6:	d0ed      	beq.n	800bbd4 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4622      	mov	r2, r4
 800bbfc:	f000 fcf3 	bl	800c5e6 <xQueueGenericSend>
 800bc00:	2801      	cmp	r0, #1
 800bc02:	d010      	beq.n	800bc26 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800bc04:	b9e4      	cbnz	r4, 800bc40 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800bc06:	f06f 0002 	mvn.w	r0, #2
 800bc0a:	e7e5      	b.n	800bbd8 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d0e1      	beq.n	800bbd4 <osMessageQueuePut+0xc>
 800bc10:	2c00      	cmp	r4, #0
 800bc12:	d1df      	bne.n	800bbd4 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bc14:	4623      	mov	r3, r4
 800bc16:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800bc18:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bc1a:	f000 fdf1 	bl	800c800 <xQueueGenericSendFromISR>
 800bc1e:	2801      	cmp	r0, #1
 800bc20:	d1f1      	bne.n	800bc06 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800bc22:	9b01      	ldr	r3, [sp, #4]
 800bc24:	b90b      	cbnz	r3, 800bc2a <osMessageQueuePut+0x62>
  stat = osOK;
 800bc26:	2000      	movs	r0, #0
 800bc28:	e7d6      	b.n	800bbd8 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800bc2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc32:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	e7f2      	b.n	800bc26 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 800bc40:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800bc44:	e7c8      	b.n	800bbd8 <osMessageQueuePut+0x10>
 800bc46:	bf00      	nop
 800bc48:	20012ae0 	.word	0x20012ae0

0800bc4c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bc4c:	b513      	push	{r0, r1, r4, lr}
 800bc4e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc50:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800bc54:	b123      	cbz	r3, 800bc60 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc56:	b9d0      	cbnz	r0, 800bc8e <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800bc58:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800bc5c:	b002      	add	sp, #8
 800bc5e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc60:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800bc64:	b913      	cbnz	r3, 800bc6c <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc66:	f3ef 8311 	mrs	r3, BASEPRI
 800bc6a:	b11b      	cbz	r3, 800bc74 <osMessageQueueGet+0x28>
 800bc6c:	4b16      	ldr	r3, [pc, #88]	; (800bcc8 <osMessageQueueGet+0x7c>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d0f0      	beq.n	800bc56 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d0ef      	beq.n	800bc58 <osMessageQueueGet+0xc>
 800bc78:	2900      	cmp	r1, #0
 800bc7a:	d0ed      	beq.n	800bc58 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	f000 fe84 	bl	800c98a <xQueueReceive>
 800bc82:	2801      	cmp	r0, #1
 800bc84:	d00f      	beq.n	800bca6 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800bc86:	b9dc      	cbnz	r4, 800bcc0 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 800bc88:	f06f 0002 	mvn.w	r0, #2
 800bc8c:	e7e6      	b.n	800bc5c <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc8e:	2900      	cmp	r1, #0
 800bc90:	d0e2      	beq.n	800bc58 <osMessageQueueGet+0xc>
 800bc92:	2c00      	cmp	r4, #0
 800bc94:	d1e0      	bne.n	800bc58 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bc96:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800bc98:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bc9a:	f001 f80a 	bl	800ccb2 <xQueueReceiveFromISR>
 800bc9e:	2801      	cmp	r0, #1
 800bca0:	d1f2      	bne.n	800bc88 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800bca2:	9b01      	ldr	r3, [sp, #4]
 800bca4:	b90b      	cbnz	r3, 800bcaa <osMessageQueueGet+0x5e>
  stat = osOK;
 800bca6:	2000      	movs	r0, #0
 800bca8:	e7d8      	b.n	800bc5c <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800bcaa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	e7f2      	b.n	800bca6 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 800bcc0:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800bcc4:	e7ca      	b.n	800bc5c <osMessageQueueGet+0x10>
 800bcc6:	bf00      	nop
 800bcc8:	20012ae0 	.word	0x20012ae0

0800bccc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bccc:	4b03      	ldr	r3, [pc, #12]	; (800bcdc <vApplicationGetIdleTaskMemory+0x10>)
 800bcce:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bcd0:	4b03      	ldr	r3, [pc, #12]	; (800bce0 <vApplicationGetIdleTaskMemory+0x14>)
 800bcd2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bcd4:	2380      	movs	r3, #128	; 0x80
 800bcd6:	6013      	str	r3, [r2, #0]
}
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20012a80 	.word	0x20012a80
 800bce0:	20012880 	.word	0x20012880

0800bce4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bce4:	4b03      	ldr	r3, [pc, #12]	; (800bcf4 <vApplicationGetTimerTaskMemory+0x10>)
 800bce6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bce8:	4b03      	ldr	r3, [pc, #12]	; (800bcf8 <vApplicationGetTimerTaskMemory+0x14>)
 800bcea:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bcec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcf0:	6013      	str	r3, [r2, #0]
}
 800bcf2:	4770      	bx	lr
 800bcf4:	20012ee4 	.word	0x20012ee4
 800bcf8:	20012ae4 	.word	0x20012ae4

0800bcfc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcfc:	4b0f      	ldr	r3, [pc, #60]	; (800bd3c <prvInsertBlockIntoFreeList+0x40>)
{
 800bcfe:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd00:	461a      	mov	r2, r3
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4283      	cmp	r3, r0
 800bd06:	d3fb      	bcc.n	800bd00 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd08:	6854      	ldr	r4, [r2, #4]
 800bd0a:	1911      	adds	r1, r2, r4
 800bd0c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd0e:	bf01      	itttt	eq
 800bd10:	6841      	ldreq	r1, [r0, #4]
 800bd12:	4610      	moveq	r0, r2
 800bd14:	1909      	addeq	r1, r1, r4
 800bd16:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd18:	6844      	ldr	r4, [r0, #4]
 800bd1a:	1901      	adds	r1, r0, r4
 800bd1c:	428b      	cmp	r3, r1
 800bd1e:	d107      	bne.n	800bd30 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd20:	4907      	ldr	r1, [pc, #28]	; (800bd40 <prvInsertBlockIntoFreeList+0x44>)
 800bd22:	6809      	ldr	r1, [r1, #0]
 800bd24:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd26:	bf1f      	itttt	ne
 800bd28:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd2a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd2c:	1909      	addne	r1, r1, r4
 800bd2e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd30:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd32:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd34:	bf18      	it	ne
 800bd36:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd38:	bd10      	pop	{r4, pc}
 800bd3a:	bf00      	nop
 800bd3c:	200267d4 	.word	0x200267d4
 800bd40:	20012f44 	.word	0x20012f44

0800bd44 <pvPortMalloc>:
{
 800bd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800bd48:	4f41      	ldr	r7, [pc, #260]	; (800be50 <pvPortMalloc+0x10c>)
{
 800bd4a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800bd4c:	f001 fa3a 	bl	800d1c4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800bd50:	4840      	ldr	r0, [pc, #256]	; (800be54 <pvPortMalloc+0x110>)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	b9f3      	cbnz	r3, 800bd94 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800bd56:	4940      	ldr	r1, [pc, #256]	; (800be58 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800bd58:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd5a:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd5c:	4d3f      	ldr	r5, [pc, #252]	; (800be5c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd5e:	bf1b      	ittet	ne
 800bd60:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd62:	4a3f      	ldrne	r2, [pc, #252]	; (800be60 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd64:	4a3f      	ldreq	r2, [pc, #252]	; (800be64 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd66:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 800bd6a:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd6c:	bf18      	it	ne
 800bd6e:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd70:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd72:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 800bd74:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd76:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800bd7a:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd7e:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800bd80:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd82:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd86:	4a38      	ldr	r2, [pc, #224]	; (800be68 <pvPortMalloc+0x124>)
 800bd88:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd8a:	4a38      	ldr	r2, [pc, #224]	; (800be6c <pvPortMalloc+0x128>)
 800bd8c:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd92:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd94:	f8d0 8000 	ldr.w	r8, [r0]
 800bd98:	ea18 0f04 	tst.w	r8, r4
 800bd9c:	d152      	bne.n	800be44 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800bd9e:	2c00      	cmp	r4, #0
 800bda0:	d041      	beq.n	800be26 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800bda2:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bda6:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bda8:	bf1c      	itt	ne
 800bdaa:	f023 0307 	bicne.w	r3, r3, #7
 800bdae:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d047      	beq.n	800be44 <pvPortMalloc+0x100>
 800bdb4:	4c2d      	ldr	r4, [pc, #180]	; (800be6c <pvPortMalloc+0x128>)
 800bdb6:	6826      	ldr	r6, [r4, #0]
 800bdb8:	429e      	cmp	r6, r3
 800bdba:	d343      	bcc.n	800be44 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800bdbc:	4a27      	ldr	r2, [pc, #156]	; (800be5c <pvPortMalloc+0x118>)
 800bdbe:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdc0:	6869      	ldr	r1, [r5, #4]
 800bdc2:	4299      	cmp	r1, r3
 800bdc4:	d201      	bcs.n	800bdca <pvPortMalloc+0x86>
 800bdc6:	6828      	ldr	r0, [r5, #0]
 800bdc8:	b9b0      	cbnz	r0, 800bdf8 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800bdca:	6838      	ldr	r0, [r7, #0]
 800bdcc:	42a8      	cmp	r0, r5
 800bdce:	d039      	beq.n	800be44 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bdd0:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bdd2:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bdd4:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bdd6:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bdd8:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bdda:	d914      	bls.n	800be06 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bddc:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdde:	0742      	lsls	r2, r0, #29
 800bde0:	d00d      	beq.n	800bdfe <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	b672      	cpsid	i
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	b662      	cpsie	i
 800bdf6:	e7fe      	b.n	800bdf6 <pvPortMalloc+0xb2>
 800bdf8:	462a      	mov	r2, r5
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	e7e0      	b.n	800bdc0 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdfe:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be00:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be02:	f7ff ff7b 	bl	800bcfc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be06:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be08:	4917      	ldr	r1, [pc, #92]	; (800be68 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be0a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be0c:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be10:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be12:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be14:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be18:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be1a:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be1c:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be20:	bf38      	it	cc
 800be22:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800be24:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800be26:	f001 fa73 	bl	800d310 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be2a:	0763      	lsls	r3, r4, #29
 800be2c:	d00c      	beq.n	800be48 <pvPortMalloc+0x104>
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	b672      	cpsid	i
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	b662      	cpsie	i
 800be42:	e7fe      	b.n	800be42 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800be44:	2400      	movs	r4, #0
 800be46:	e7ee      	b.n	800be26 <pvPortMalloc+0xe2>
}
 800be48:	4620      	mov	r0, r4
 800be4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be4e:	bf00      	nop
 800be50:	20012f44 	.word	0x20012f44
 800be54:	200267c8 	.word	0x200267c8
 800be58:	20012f48 	.word	0x20012f48
 800be5c:	200267d4 	.word	0x200267d4
 800be60:	200267c8 	.word	0x200267c8
 800be64:	00013880 	.word	0x00013880
 800be68:	200267d0 	.word	0x200267d0
 800be6c:	200267cc 	.word	0x200267cc

0800be70 <vPortFree>:
{
 800be70:	b510      	push	{r4, lr}
	if( pv != NULL )
 800be72:	4604      	mov	r4, r0
 800be74:	2800      	cmp	r0, #0
 800be76:	d032      	beq.n	800bede <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be78:	4a19      	ldr	r2, [pc, #100]	; (800bee0 <vPortFree+0x70>)
 800be7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800be7e:	6812      	ldr	r2, [r2, #0]
 800be80:	4213      	tst	r3, r2
 800be82:	d10a      	bne.n	800be9a <vPortFree+0x2a>
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	b672      	cpsid	i
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	b662      	cpsie	i
 800be98:	e7fe      	b.n	800be98 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be9a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800be9e:	b151      	cbz	r1, 800beb6 <vPortFree+0x46>
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	b672      	cpsid	i
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	b662      	cpsie	i
 800beb4:	e7fe      	b.n	800beb4 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800beb6:	ea23 0302 	bic.w	r3, r3, r2
 800beba:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800bebe:	f001 f981 	bl	800d1c4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bec2:	4a08      	ldr	r2, [pc, #32]	; (800bee4 <vPortFree+0x74>)
 800bec4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bec8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800becc:	6811      	ldr	r1, [r2, #0]
 800bece:	440b      	add	r3, r1
 800bed0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bed2:	f7ff ff13 	bl	800bcfc <prvInsertBlockIntoFreeList>
}
 800bed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800beda:	f001 ba19 	b.w	800d310 <xTaskResumeAll>
}
 800bede:	bd10      	pop	{r4, pc}
 800bee0:	200267c8 	.word	0x200267c8
 800bee4:	200267cc 	.word	0x200267cc

0800bee8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bee8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800beec:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bef0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bef2:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bef4:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800befc:	4770      	bx	lr

0800befe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800befe:	2300      	movs	r3, #0
 800bf00:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf02:	4770      	bx	lr

0800bf04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf04:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf06:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800bf08:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf0a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf0c:	689a      	ldr	r2, [r3, #8]
 800bf0e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf10:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800bf12:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800bf14:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800bf16:	3301      	adds	r3, #1
 800bf18:	6003      	str	r3, [r0, #0]
}
 800bf1a:	4770      	bx	lr

0800bf1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf1c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf1e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf20:	1c63      	adds	r3, r4, #1
 800bf22:	d10a      	bne.n	800bf3a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf24:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf26:	685a      	ldr	r2, [r3, #4]
 800bf28:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf2a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf2c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf2e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800bf30:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800bf32:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800bf34:	3301      	adds	r3, #1
 800bf36:	6003      	str	r3, [r0, #0]
}
 800bf38:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf3a:	f100 0208 	add.w	r2, r0, #8
 800bf3e:	4613      	mov	r3, r2
 800bf40:	6852      	ldr	r2, [r2, #4]
 800bf42:	6815      	ldr	r5, [r2, #0]
 800bf44:	42a5      	cmp	r5, r4
 800bf46:	d9fa      	bls.n	800bf3e <vListInsert+0x22>
 800bf48:	e7ed      	b.n	800bf26 <vListInsert+0xa>

0800bf4a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf4a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf4c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800bf50:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf52:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf54:	6859      	ldr	r1, [r3, #4]
 800bf56:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf58:	bf08      	it	eq
 800bf5a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	3a01      	subs	r2, #1
 800bf64:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf66:	6818      	ldr	r0, [r3, #0]
}
 800bf68:	4770      	bx	lr
	...

0800bf6c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf6c:	4808      	ldr	r0, [pc, #32]	; (800bf90 <prvPortStartFirstTask+0x24>)
 800bf6e:	6800      	ldr	r0, [r0, #0]
 800bf70:	6800      	ldr	r0, [r0, #0]
 800bf72:	f380 8808 	msr	MSP, r0
 800bf76:	f04f 0000 	mov.w	r0, #0
 800bf7a:	f380 8814 	msr	CONTROL, r0
 800bf7e:	b662      	cpsie	i
 800bf80:	b661      	cpsie	f
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	df00      	svc	0
 800bf8c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf8e:	0000      	.short	0x0000
 800bf90:	e000ed08 	.word	0xe000ed08

0800bf94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfa4 <vPortEnableVFP+0x10>
 800bf98:	6801      	ldr	r1, [r0, #0]
 800bf9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf9e:	6001      	str	r1, [r0, #0]
 800bfa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfa2:	0000      	.short	0x0000
 800bfa4:	e000ed88 	.word	0xe000ed88

0800bfa8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800bfa8:	2300      	movs	r3, #0
{
 800bfaa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800bfac:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800bfae:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <prvTaskExitError+0x44>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	d00a      	beq.n	800bfcc <prvTaskExitError+0x24>
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	b672      	cpsid	i
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	b662      	cpsie	i
 800bfca:	e7fe      	b.n	800bfca <prvTaskExitError+0x22>
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	b672      	cpsid	i
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	b662      	cpsie	i
	while( ulDummy == 0 )
 800bfe0:	9b01      	ldr	r3, [sp, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d0fc      	beq.n	800bfe0 <prvTaskExitError+0x38>
}
 800bfe6:	b002      	add	sp, #8
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	2000006c 	.word	0x2000006c

0800bff0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bff4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bff8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800bffc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bffe:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c000:	4b03      	ldr	r3, [pc, #12]	; (800c010 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c002:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c004:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c006:	f06f 0302 	mvn.w	r3, #2
 800c00a:	6203      	str	r3, [r0, #32]
}
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	0800bfa9 	.word	0x0800bfa9
	...

0800c020 <SVC_Handler>:
	__asm volatile (
 800c020:	4b07      	ldr	r3, [pc, #28]	; (800c040 <pxCurrentTCBConst2>)
 800c022:	6819      	ldr	r1, [r3, #0]
 800c024:	6808      	ldr	r0, [r1, #0]
 800c026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02a:	f380 8809 	msr	PSP, r0
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f04f 0000 	mov.w	r0, #0
 800c036:	f380 8811 	msr	BASEPRI, r0
 800c03a:	4770      	bx	lr
 800c03c:	f3af 8000 	nop.w

0800c040 <pxCurrentTCBConst2>:
 800c040:	20026824 	.word	0x20026824

0800c044 <vPortEnterCritical>:
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	b672      	cpsid	i
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f3bf 8f4f 	dsb	sy
 800c056:	b662      	cpsie	i
	uxCriticalNesting++;
 800c058:	4a0b      	ldr	r2, [pc, #44]	; (800c088 <vPortEnterCritical+0x44>)
 800c05a:	6813      	ldr	r3, [r2, #0]
 800c05c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800c05e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800c060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800c062:	d110      	bne.n	800c086 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c064:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c068:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	b153      	cbz	r3, 800c086 <vPortEnterCritical+0x42>
 800c070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c074:	b672      	cpsid	i
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	b662      	cpsie	i
 800c084:	e7fe      	b.n	800c084 <vPortEnterCritical+0x40>
}
 800c086:	4770      	bx	lr
 800c088:	2000006c 	.word	0x2000006c

0800c08c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800c08c:	4a09      	ldr	r2, [pc, #36]	; (800c0b4 <vPortExitCritical+0x28>)
 800c08e:	6813      	ldr	r3, [r2, #0]
 800c090:	b953      	cbnz	r3, 800c0a8 <vPortExitCritical+0x1c>
 800c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c096:	b672      	cpsid	i
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	b662      	cpsie	i
 800c0a6:	e7fe      	b.n	800c0a6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0ac:	b90b      	cbnz	r3, 800c0b2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c0ae:	f383 8811 	msr	BASEPRI, r3
}
 800c0b2:	4770      	bx	lr
 800c0b4:	2000006c 	.word	0x2000006c
	...

0800c0c0 <PendSV_Handler>:
	__asm volatile
 800c0c0:	f3ef 8009 	mrs	r0, PSP
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	4b15      	ldr	r3, [pc, #84]	; (800c120 <pxCurrentTCBConst>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	f01e 0f10 	tst.w	lr, #16
 800c0d0:	bf08      	it	eq
 800c0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0da:	6010      	str	r0, [r2, #0]
 800c0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c0e4:	b672      	cpsid	i
 800c0e6:	f380 8811 	msr	BASEPRI, r0
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	b662      	cpsie	i
 800c0f4:	f001 f9f0 	bl	800d4d8 <vTaskSwitchContext>
 800c0f8:	f04f 0000 	mov.w	r0, #0
 800c0fc:	f380 8811 	msr	BASEPRI, r0
 800c100:	bc09      	pop	{r0, r3}
 800c102:	6819      	ldr	r1, [r3, #0]
 800c104:	6808      	ldr	r0, [r1, #0]
 800c106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10a:	f01e 0f10 	tst.w	lr, #16
 800c10e:	bf08      	it	eq
 800c110:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c114:	f380 8809 	msr	PSP, r0
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop

0800c120 <pxCurrentTCBConst>:
 800c120:	20026824 	.word	0x20026824

0800c124 <SysTick_Handler>:
{
 800c124:	b508      	push	{r3, lr}
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12a:	b672      	cpsid	i
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800c13a:	f001 f851 	bl	800d1e0 <xTaskIncrementTick>
 800c13e:	b128      	cbz	r0, 800c14c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c140:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c148:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800c14c:	2300      	movs	r3, #0
 800c14e:	f383 8811 	msr	BASEPRI, r3
}
 800c152:	bd08      	pop	{r3, pc}

0800c154 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c154:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800c158:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c15a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c15e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c160:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c162:	4b04      	ldr	r3, [pc, #16]	; (800c174 <vPortSetupTimerInterrupt+0x20>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	fbb3 f3f1 	udiv	r3, r3, r1
 800c16a:	3b01      	subs	r3, #1
 800c16c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c16e:	2307      	movs	r3, #7
 800c170:	6113      	str	r3, [r2, #16]
}
 800c172:	4770      	bx	lr
 800c174:	20000060 	.word	0x20000060

0800c178 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c178:	4b2e      	ldr	r3, [pc, #184]	; (800c234 <xPortStartScheduler+0xbc>)
{
 800c17a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c17c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c17e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c184:	22ff      	movs	r2, #255	; 0xff
 800c186:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c188:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c18a:	4a2b      	ldr	r2, [pc, #172]	; (800c238 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c192:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c196:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c19a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c19c:	2307      	movs	r3, #7
 800c19e:	4a27      	ldr	r2, [pc, #156]	; (800c23c <xPortStartScheduler+0xc4>)
 800c1a0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800c1a6:	1e5c      	subs	r4, r3, #1
 800c1a8:	0600      	lsls	r0, r0, #24
 800c1aa:	d40e      	bmi.n	800c1ca <xPortStartScheduler+0x52>
 800c1ac:	b111      	cbz	r1, 800c1b4 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	6013      	str	r3, [r2, #0]
 800c1b2:	d013      	beq.n	800c1dc <xPortStartScheduler+0x64>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	b672      	cpsid	i
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	b662      	cpsie	i
 800c1c8:	e7fe      	b.n	800c1c8 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c1ce:	2101      	movs	r1, #1
 800c1d0:	005b      	lsls	r3, r3, #1
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	f88d 3003 	strb.w	r3, [sp, #3]
 800c1d8:	4623      	mov	r3, r4
 800c1da:	e7e2      	b.n	800c1a2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1dc:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1e0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800c1e4:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1e6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1e8:	9b01      	ldr	r3, [sp, #4]
 800c1ea:	4a12      	ldr	r2, [pc, #72]	; (800c234 <xPortStartScheduler+0xbc>)
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1f0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800c1f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1f8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1fc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800c200:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c204:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800c208:	f7ff ffa4 	bl	800c154 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c20c:	4b0c      	ldr	r3, [pc, #48]	; (800c240 <xPortStartScheduler+0xc8>)
 800c20e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800c210:	f7ff fec0 	bl	800bf94 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c214:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800c218:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c21c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800c220:	f7ff fea4 	bl	800bf6c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c224:	f001 f958 	bl	800d4d8 <vTaskSwitchContext>
}
 800c228:	4628      	mov	r0, r5
	prvTaskExitError();
 800c22a:	f7ff febd 	bl	800bfa8 <prvTaskExitError>
}
 800c22e:	b003      	add	sp, #12
 800c230:	bd30      	pop	{r4, r5, pc}
 800c232:	bf00      	nop
 800c234:	e000e400 	.word	0xe000e400
 800c238:	200267dc 	.word	0x200267dc
 800c23c:	200267e0 	.word	0x200267e0
 800c240:	2000006c 	.word	0x2000006c

0800c244 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c244:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c248:	2b0f      	cmp	r3, #15
 800c24a:	d910      	bls.n	800c26e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c24c:	4a13      	ldr	r2, [pc, #76]	; (800c29c <vPortValidateInterruptPriority+0x58>)
 800c24e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c250:	4a13      	ldr	r2, [pc, #76]	; (800c2a0 <vPortValidateInterruptPriority+0x5c>)
 800c252:	7812      	ldrb	r2, [r2, #0]
 800c254:	429a      	cmp	r2, r3
 800c256:	d90a      	bls.n	800c26e <vPortValidateInterruptPriority+0x2a>
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	b672      	cpsid	i
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	b662      	cpsie	i
 800c26c:	e7fe      	b.n	800c26c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c26e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c272:	4a0c      	ldr	r2, [pc, #48]	; (800c2a4 <vPortValidateInterruptPriority+0x60>)
 800c274:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c278:	6812      	ldr	r2, [r2, #0]
 800c27a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c27e:	4293      	cmp	r3, r2
 800c280:	d90a      	bls.n	800c298 <vPortValidateInterruptPriority+0x54>
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	b672      	cpsid	i
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	b662      	cpsie	i
 800c296:	e7fe      	b.n	800c296 <vPortValidateInterruptPriority+0x52>
	}
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	e000e3f0 	.word	0xe000e3f0
 800c2a0:	200267dc 	.word	0x200267dc
 800c2a4:	200267e0 	.word	0x200267e0

0800c2a8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2ac:	f7ff feca 	bl	800c044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c2b0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c2b2:	f7ff feeb 	bl	800c08c <vPortExitCritical>

	return xReturn;
}
 800c2b6:	fab4 f084 	clz	r0, r4
 800c2ba:	0940      	lsrs	r0, r0, #5
 800c2bc:	bd10      	pop	{r4, pc}

0800c2be <prvCopyDataToQueue>:
{
 800c2be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800c2c4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2c6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2c8:	b952      	cbnz	r2, 800c2e0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2ca:	6807      	ldr	r7, [r0, #0]
 800c2cc:	bb47      	cbnz	r7, 800c320 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2ce:	6880      	ldr	r0, [r0, #8]
 800c2d0:	f001 fa72 	bl	800d7b8 <xTaskPriorityDisinherit>
 800c2d4:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2d6:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2d8:	3601      	adds	r6, #1
}
 800c2da:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2dc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800c2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800c2e0:	b965      	cbnz	r5, 800c2fc <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2e2:	6840      	ldr	r0, [r0, #4]
 800c2e4:	f018 ffa2 	bl	802522c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2e8:	6863      	ldr	r3, [r4, #4]
 800c2ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c2ec:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2ee:	68a2      	ldr	r2, [r4, #8]
 800c2f0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2f2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2f4:	d3f0      	bcc.n	800c2d8 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	6063      	str	r3, [r4, #4]
 800c2fa:	e7ed      	b.n	800c2d8 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c2fc:	68c0      	ldr	r0, [r0, #12]
 800c2fe:	f018 ff95 	bl	802522c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c302:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c304:	68e3      	ldr	r3, [r4, #12]
 800c306:	4251      	negs	r1, r2
 800c308:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c30a:	6822      	ldr	r2, [r4, #0]
 800c30c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c30e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c310:	bf3e      	ittt	cc
 800c312:	68a3      	ldrcc	r3, [r4, #8]
 800c314:	185b      	addcc	r3, r3, r1
 800c316:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c318:	2d02      	cmp	r5, #2
 800c31a:	d101      	bne.n	800c320 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c31c:	b116      	cbz	r6, 800c324 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800c31e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c320:	2500      	movs	r5, #0
 800c322:	e7d9      	b.n	800c2d8 <prvCopyDataToQueue+0x1a>
 800c324:	4635      	mov	r5, r6
 800c326:	e7d7      	b.n	800c2d8 <prvCopyDataToQueue+0x1a>

0800c328 <prvCopyDataFromQueue>:
{
 800c328:	4603      	mov	r3, r0
 800c32a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c32c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800c32e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c330:	b162      	cbz	r2, 800c34c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c332:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c334:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c336:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c338:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c33a:	60dc      	str	r4, [r3, #12]
}
 800c33c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c340:	bf24      	itt	cs
 800c342:	6819      	ldrcs	r1, [r3, #0]
 800c344:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c346:	68d9      	ldr	r1, [r3, #12]
 800c348:	f018 bf70 	b.w	802522c <memcpy>
}
 800c34c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <prvUnlockQueue>:
{
 800c352:	b570      	push	{r4, r5, r6, lr}
 800c354:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c356:	f7ff fe75 	bl	800c044 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c35a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c35e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800c362:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c364:	2d00      	cmp	r5, #0
 800c366:	dc14      	bgt.n	800c392 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800c368:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c36a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800c36e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c372:	f7ff fe8b 	bl	800c08c <vPortExitCritical>
	taskENTER_CRITICAL();
 800c376:	f7ff fe65 	bl	800c044 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c37a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c37e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c380:	2d00      	cmp	r5, #0
 800c382:	dc12      	bgt.n	800c3aa <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800c384:	23ff      	movs	r3, #255	; 0xff
 800c386:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800c38a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800c38e:	f7ff be7d 	b.w	800c08c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0e7      	beq.n	800c368 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c398:	4630      	mov	r0, r6
 800c39a:	f001 f91f 	bl	800d5dc <xTaskRemoveFromEventList>
 800c39e:	b108      	cbz	r0, 800c3a4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800c3a0:	f001 f9ae 	bl	800d700 <vTaskMissedYield>
			--cTxLock;
 800c3a4:	3d01      	subs	r5, #1
 800c3a6:	b26d      	sxtb	r5, r5
 800c3a8:	e7dc      	b.n	800c364 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d0e9      	beq.n	800c384 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	f001 f913 	bl	800d5dc <xTaskRemoveFromEventList>
 800c3b6:	b108      	cbz	r0, 800c3bc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800c3b8:	f001 f9a2 	bl	800d700 <vTaskMissedYield>
				--cRxLock;
 800c3bc:	3d01      	subs	r5, #1
 800c3be:	b26d      	sxtb	r5, r5
 800c3c0:	e7de      	b.n	800c380 <prvUnlockQueue+0x2e>

0800c3c2 <xQueueGenericReset>:
{
 800c3c2:	b538      	push	{r3, r4, r5, lr}
 800c3c4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	b950      	cbnz	r0, 800c3e0 <xQueueGenericReset+0x1e>
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	b672      	cpsid	i
 800c3d0:	f383 8811 	msr	BASEPRI, r3
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	b662      	cpsie	i
 800c3de:	e7fe      	b.n	800c3de <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800c3e0:	f7ff fe30 	bl	800c044 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3e4:	6822      	ldr	r2, [r4, #0]
 800c3e6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3ea:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3ec:	434b      	muls	r3, r1
 800c3ee:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3f0:	1a5b      	subs	r3, r3, r1
 800c3f2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3f4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3f6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3f8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3fa:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3fc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800c3fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800c406:	b9a5      	cbnz	r5, 800c432 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c408:	6923      	ldr	r3, [r4, #16]
 800c40a:	b173      	cbz	r3, 800c42a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c40c:	f104 0010 	add.w	r0, r4, #16
 800c410:	f001 f8e4 	bl	800d5dc <xTaskRemoveFromEventList>
 800c414:	b148      	cbz	r0, 800c42a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800c416:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c41a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c41e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800c42a:	f7ff fe2f 	bl	800c08c <vPortExitCritical>
}
 800c42e:	2001      	movs	r0, #1
 800c430:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c432:	f104 0010 	add.w	r0, r4, #16
 800c436:	f7ff fd57 	bl	800bee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c43a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c43e:	f7ff fd53 	bl	800bee8 <vListInitialise>
 800c442:	e7f2      	b.n	800c42a <xQueueGenericReset+0x68>

0800c444 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800c444:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 800c446:	461c      	mov	r4, r3
 800c448:	b953      	cbnz	r3, 800c460 <xQueueGenericCreateStatic.part.0+0x1c>
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	b672      	cpsid	i
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	b662      	cpsie	i
 800c45e:	e7fe      	b.n	800c45e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c460:	b15a      	cbz	r2, 800c47a <xQueueGenericCreateStatic.part.0+0x36>
 800c462:	b9b1      	cbnz	r1, 800c492 <xQueueGenericCreateStatic.part.0+0x4e>
 800c464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c468:	b672      	cpsid	i
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	b662      	cpsie	i
 800c478:	e7fe      	b.n	800c478 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c47a:	b151      	cbz	r1, 800c492 <xQueueGenericCreateStatic.part.0+0x4e>
 800c47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c480:	b672      	cpsid	i
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	b662      	cpsie	i
 800c490:	e7fe      	b.n	800c490 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c492:	2350      	movs	r3, #80	; 0x50
 800c494:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c496:	9b01      	ldr	r3, [sp, #4]
 800c498:	2b50      	cmp	r3, #80	; 0x50
 800c49a:	d00a      	beq.n	800c4b2 <xQueueGenericCreateStatic.part.0+0x6e>
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	b672      	cpsid	i
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	b662      	cpsie	i
 800c4b0:	e7fe      	b.n	800c4b0 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4b2:	2900      	cmp	r1, #0
 800c4b4:	bf08      	it	eq
 800c4b6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4b8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	6022      	str	r2, [r4, #0]
 800c4be:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800c4c2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f7ff ff7a 	bl	800c3c2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c4ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800c4d2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c4d4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800c4d8:	b002      	add	sp, #8
 800c4da:	bd10      	pop	{r4, pc}

0800c4dc <xQueueGenericCreateStatic>:
	{
 800c4dc:	b410      	push	{r4}
 800c4de:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c4e2:	b950      	cbnz	r0, 800c4fa <xQueueGenericCreateStatic+0x1e>
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	b672      	cpsid	i
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	b662      	cpsie	i
 800c4f8:	e7fe      	b.n	800c4f8 <xQueueGenericCreateStatic+0x1c>
 800c4fa:	9401      	str	r4, [sp, #4]
	}
 800c4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c500:	f7ff bfa0 	b.w	800c444 <xQueueGenericCreateStatic.part.0>

0800c504 <xQueueGenericCreate>:
	{
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	460d      	mov	r5, r1
 800c508:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c50a:	4606      	mov	r6, r0
 800c50c:	b950      	cbnz	r0, 800c524 <xQueueGenericCreate+0x20>
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	b672      	cpsid	i
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	b662      	cpsie	i
 800c522:	e7fe      	b.n	800c522 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c524:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c526:	3050      	adds	r0, #80	; 0x50
 800c528:	f7ff fc0c 	bl	800bd44 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c52c:	4604      	mov	r4, r0
 800c52e:	b170      	cbz	r0, 800c54e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c530:	2300      	movs	r3, #0
 800c532:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c536:	b165      	cbz	r5, 800c552 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c538:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c53c:	2101      	movs	r1, #1
 800c53e:	4620      	mov	r0, r4
 800c540:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800c542:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c546:	f7ff ff3c 	bl	800c3c2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c54a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800c54e:	4620      	mov	r0, r4
 800c550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c552:	4603      	mov	r3, r0
 800c554:	e7f2      	b.n	800c53c <xQueueGenericCreate+0x38>

0800c556 <xQueueCreateCountingSemaphoreStatic>:
	{
 800c556:	b513      	push	{r0, r1, r4, lr}
 800c558:	4613      	mov	r3, r2
 800c55a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800c55c:	b950      	cbnz	r0, 800c574 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	b672      	cpsid	i
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	b662      	cpsie	i
 800c572:	e7fe      	b.n	800c572 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c574:	4288      	cmp	r0, r1
 800c576:	d20a      	bcs.n	800c58e <xQueueCreateCountingSemaphoreStatic+0x38>
 800c578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57c:	b672      	cpsid	i
 800c57e:	f383 8811 	msr	BASEPRI, r3
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	b662      	cpsie	i
 800c58c:	e7fe      	b.n	800c58c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c58e:	2202      	movs	r2, #2
 800c590:	9200      	str	r2, [sp, #0]
 800c592:	2200      	movs	r2, #0
 800c594:	4611      	mov	r1, r2
 800c596:	f7ff ffa1 	bl	800c4dc <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c59a:	b100      	cbz	r0, 800c59e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c59c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c59e:	b002      	add	sp, #8
 800c5a0:	bd10      	pop	{r4, pc}

0800c5a2 <xQueueCreateCountingSemaphore>:
	{
 800c5a2:	b510      	push	{r4, lr}
 800c5a4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800c5a6:	b950      	cbnz	r0, 800c5be <xQueueCreateCountingSemaphore+0x1c>
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	b672      	cpsid	i
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	b662      	cpsie	i
 800c5bc:	e7fe      	b.n	800c5bc <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c5be:	4288      	cmp	r0, r1
 800c5c0:	d20a      	bcs.n	800c5d8 <xQueueCreateCountingSemaphore+0x36>
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	b672      	cpsid	i
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	b662      	cpsie	i
 800c5d6:	e7fe      	b.n	800c5d6 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c5d8:	2202      	movs	r2, #2
 800c5da:	2100      	movs	r1, #0
 800c5dc:	f7ff ff92 	bl	800c504 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c5e0:	b100      	cbz	r0, 800c5e4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c5e2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c5e4:	bd10      	pop	{r4, pc}

0800c5e6 <xQueueGenericSend>:
{
 800c5e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	4688      	mov	r8, r1
 800c5ee:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800c5f0:	4604      	mov	r4, r0
{
 800c5f2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c5f4:	b950      	cbnz	r0, 800c60c <xQueueGenericSend+0x26>
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	b672      	cpsid	i
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	b662      	cpsie	i
 800c60a:	e7fe      	b.n	800c60a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c60c:	b961      	cbnz	r1, 800c628 <xQueueGenericSend+0x42>
 800c60e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c610:	b153      	cbz	r3, 800c628 <xQueueGenericSend+0x42>
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	b672      	cpsid	i
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	b662      	cpsie	i
 800c626:	e7fe      	b.n	800c626 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c628:	2f02      	cmp	r7, #2
 800c62a:	d10d      	bne.n	800c648 <xQueueGenericSend+0x62>
 800c62c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d00a      	beq.n	800c648 <xQueueGenericSend+0x62>
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	b672      	cpsid	i
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	b662      	cpsie	i
 800c646:	e7fe      	b.n	800c646 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c648:	f001 f866 	bl	800d718 <xTaskGetSchedulerState>
 800c64c:	4606      	mov	r6, r0
 800c64e:	b960      	cbnz	r0, 800c66a <xQueueGenericSend+0x84>
 800c650:	9b01      	ldr	r3, [sp, #4]
 800c652:	b15b      	cbz	r3, 800c66c <xQueueGenericSend+0x86>
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	b672      	cpsid	i
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	b662      	cpsie	i
 800c668:	e7fe      	b.n	800c668 <xQueueGenericSend+0x82>
 800c66a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800c66c:	f04f 0900 	mov.w	r9, #0
 800c670:	e037      	b.n	800c6e2 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c672:	9d01      	ldr	r5, [sp, #4]
 800c674:	b91d      	cbnz	r5, 800c67e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800c676:	f7ff fd09 	bl	800c08c <vPortExitCritical>
			return errQUEUE_FULL;
 800c67a:	2000      	movs	r0, #0
 800c67c:	e052      	b.n	800c724 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800c67e:	b916      	cbnz	r6, 800c686 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c680:	a802      	add	r0, sp, #8
 800c682:	f000 fff1 	bl	800d668 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c686:	f7ff fd01 	bl	800c08c <vPortExitCritical>
		vTaskSuspendAll();
 800c68a:	f000 fd9b 	bl	800d1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c68e:	f7ff fcd9 	bl	800c044 <vPortEnterCritical>
 800c692:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c696:	2bff      	cmp	r3, #255	; 0xff
 800c698:	d101      	bne.n	800c69e <xQueueGenericSend+0xb8>
 800c69a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800c69e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c6a2:	2bff      	cmp	r3, #255	; 0xff
 800c6a4:	d101      	bne.n	800c6aa <xQueueGenericSend+0xc4>
 800c6a6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800c6aa:	f7ff fcef 	bl	800c08c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6ae:	a901      	add	r1, sp, #4
 800c6b0:	a802      	add	r0, sp, #8
 800c6b2:	f000 ffe5 	bl	800d680 <xTaskCheckForTimeOut>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d14a      	bne.n	800c750 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6ba:	f7ff fcc3 	bl	800c044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c6be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c6c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d131      	bne.n	800c72a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c6c6:	f7ff fce1 	bl	800c08c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6ca:	9901      	ldr	r1, [sp, #4]
 800c6cc:	f104 0010 	add.w	r0, r4, #16
 800c6d0:	f000 ff48 	bl	800d564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f7ff fe3c 	bl	800c352 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6da:	f000 fe19 	bl	800d310 <xTaskResumeAll>
 800c6de:	b360      	cbz	r0, 800c73a <xQueueGenericSend+0x154>
 800c6e0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800c6e2:	f7ff fcaf 	bl	800c044 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c6e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d301      	bcc.n	800c6f2 <xQueueGenericSend+0x10c>
 800c6ee:	2f02      	cmp	r7, #2
 800c6f0:	d1bf      	bne.n	800c672 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6f2:	463a      	mov	r2, r7
 800c6f4:	4641      	mov	r1, r8
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f7ff fde1 	bl	800c2be <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6fe:	b11b      	cbz	r3, 800c708 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c700:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c704:	f000 ff6a 	bl	800d5dc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800c708:	b148      	cbz	r0, 800c71e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800c70a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c712:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c71e:	f7ff fcb5 	bl	800c08c <vPortExitCritical>
				return pdPASS;
 800c722:	2001      	movs	r0, #1
}
 800c724:	b005      	add	sp, #20
 800c726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800c72a:	f7ff fcaf 	bl	800c08c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800c72e:	4620      	mov	r0, r4
 800c730:	f7ff fe0f 	bl	800c352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c734:	f000 fdec 	bl	800d310 <xTaskResumeAll>
 800c738:	e7d2      	b.n	800c6e0 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800c73a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c742:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	e7c7      	b.n	800c6e0 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800c750:	4620      	mov	r0, r4
 800c752:	f7ff fdfe 	bl	800c352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c756:	f000 fddb 	bl	800d310 <xTaskResumeAll>
 800c75a:	e78e      	b.n	800c67a <xQueueGenericSend+0x94>

0800c75c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c75c:	2200      	movs	r2, #0
	{
 800c75e:	460b      	mov	r3, r1
 800c760:	b513      	push	{r0, r1, r4, lr}
 800c762:	4611      	mov	r1, r2
 800c764:	9000      	str	r0, [sp, #0]
 800c766:	2001      	movs	r0, #1
 800c768:	f7ff fe6c 	bl	800c444 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800c76c:	4604      	mov	r4, r0
 800c76e:	b138      	cbz	r0, 800c780 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c770:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c772:	461a      	mov	r2, r3
 800c774:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c776:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c778:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c77a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c77c:	f7ff ff33 	bl	800c5e6 <xQueueGenericSend>
	}
 800c780:	4620      	mov	r0, r4
 800c782:	b002      	add	sp, #8
 800c784:	bd10      	pop	{r4, pc}

0800c786 <xQueueGiveMutexRecursive>:
	{
 800c786:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800c788:	4604      	mov	r4, r0
 800c78a:	b950      	cbnz	r0, 800c7a2 <xQueueGiveMutexRecursive+0x1c>
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	b672      	cpsid	i
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	b662      	cpsie	i
 800c7a0:	e7fe      	b.n	800c7a0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c7a2:	6885      	ldr	r5, [r0, #8]
 800c7a4:	f000 ffb2 	bl	800d70c <xTaskGetCurrentTaskHandle>
 800c7a8:	4285      	cmp	r5, r0
 800c7aa:	d10a      	bne.n	800c7c2 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c7ac:	68e3      	ldr	r3, [r4, #12]
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c7b2:	b923      	cbnz	r3, 800c7be <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f7ff ff14 	bl	800c5e6 <xQueueGenericSend>
			xReturn = pdPASS;
 800c7be:	2001      	movs	r0, #1
		return xReturn;
 800c7c0:	e000      	b.n	800c7c4 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800c7c2:	2000      	movs	r0, #0
	}
 800c7c4:	bd38      	pop	{r3, r4, r5, pc}

0800c7c6 <xQueueCreateMutex>:
	{
 800c7c6:	b570      	push	{r4, r5, r6, lr}
 800c7c8:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c7ca:	2050      	movs	r0, #80	; 0x50
 800c7cc:	f7ff faba 	bl	800bd44 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	b198      	cbz	r0, 800c7fc <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c7d4:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c7d6:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c7d8:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c7da:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800c7de:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c7e2:	f7ff fdee 	bl	800c3c2 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c7e6:	462b      	mov	r3, r5
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c7ee:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c7f2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c7f4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c7f6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c7f8:	f7ff fef5 	bl	800c5e6 <xQueueGenericSend>
	}
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}

0800c800 <xQueueGenericSendFromISR>:
{
 800c800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c804:	4689      	mov	r9, r1
 800c806:	4690      	mov	r8, r2
 800c808:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800c80a:	4604      	mov	r4, r0
 800c80c:	b950      	cbnz	r0, 800c824 <xQueueGenericSendFromISR+0x24>
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	b672      	cpsid	i
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	b662      	cpsie	i
 800c822:	e7fe      	b.n	800c822 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c824:	b961      	cbnz	r1, 800c840 <xQueueGenericSendFromISR+0x40>
 800c826:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c828:	b153      	cbz	r3, 800c840 <xQueueGenericSendFromISR+0x40>
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	b672      	cpsid	i
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	b662      	cpsie	i
 800c83e:	e7fe      	b.n	800c83e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c840:	2f02      	cmp	r7, #2
 800c842:	d10d      	bne.n	800c860 <xQueueGenericSendFromISR+0x60>
 800c844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c846:	2b01      	cmp	r3, #1
 800c848:	d00a      	beq.n	800c860 <xQueueGenericSendFromISR+0x60>
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	b672      	cpsid	i
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	b662      	cpsie	i
 800c85e:	e7fe      	b.n	800c85e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c860:	f7ff fcf0 	bl	800c244 <vPortValidateInterruptPriority>
	__asm volatile
 800c864:	f3ef 8611 	mrs	r6, BASEPRI
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	b672      	cpsid	i
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c87c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c87e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c880:	429a      	cmp	r2, r3
 800c882:	d301      	bcc.n	800c888 <xQueueGenericSendFromISR+0x88>
 800c884:	2f02      	cmp	r7, #2
 800c886:	d122      	bne.n	800c8ce <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c888:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c88c:	463a      	mov	r2, r7
 800c88e:	4649      	mov	r1, r9
 800c890:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800c892:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c894:	f7ff fd13 	bl	800c2be <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c898:	1c6b      	adds	r3, r5, #1
 800c89a:	d113      	bne.n	800c8c4 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c89c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c89e:	b90b      	cbnz	r3, 800c8a4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800c8a0:	2001      	movs	r0, #1
 800c8a2:	e00b      	b.n	800c8bc <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c8a8:	f000 fe98 	bl	800d5dc <xTaskRemoveFromEventList>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d0f7      	beq.n	800c8a0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800c8b0:	f1b8 0f00 	cmp.w	r8, #0
 800c8b4:	d0f4      	beq.n	800c8a0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8b6:	2001      	movs	r0, #1
 800c8b8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800c8bc:	f386 8811 	msr	BASEPRI, r6
}
 800c8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8c4:	3501      	adds	r5, #1
 800c8c6:	b26d      	sxtb	r5, r5
 800c8c8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800c8cc:	e7e8      	b.n	800c8a0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	e7f4      	b.n	800c8bc <xQueueGenericSendFromISR+0xbc>

0800c8d2 <xQueueGiveFromISR>:
{
 800c8d2:	b570      	push	{r4, r5, r6, lr}
 800c8d4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	b950      	cbnz	r0, 800c8f0 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8de:	b672      	cpsid	i
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	b662      	cpsie	i
 800c8ee:	e7fe      	b.n	800c8ee <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c8f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c8f2:	b153      	cbz	r3, 800c90a <xQueueGiveFromISR+0x38>
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	b672      	cpsid	i
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	b662      	cpsie	i
 800c908:	e7fe      	b.n	800c908 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c90a:	6803      	ldr	r3, [r0, #0]
 800c90c:	b963      	cbnz	r3, 800c928 <xQueueGiveFromISR+0x56>
 800c90e:	6883      	ldr	r3, [r0, #8]
 800c910:	b153      	cbz	r3, 800c928 <xQueueGiveFromISR+0x56>
 800c912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c916:	b672      	cpsid	i
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	b662      	cpsie	i
 800c926:	e7fe      	b.n	800c926 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c928:	f7ff fc8c 	bl	800c244 <vPortValidateInterruptPriority>
	__asm volatile
 800c92c:	f3ef 8611 	mrs	r6, BASEPRI
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	b672      	cpsid	i
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c944:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c946:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c948:	4293      	cmp	r3, r2
 800c94a:	d91c      	bls.n	800c986 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c94c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c950:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800c952:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800c954:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c956:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c958:	d110      	bne.n	800c97c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c95a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c95c:	b90b      	cbnz	r3, 800c962 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800c95e:	2001      	movs	r0, #1
 800c960:	e009      	b.n	800c976 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c962:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c966:	f000 fe39 	bl	800d5dc <xTaskRemoveFromEventList>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d0f7      	beq.n	800c95e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800c96e:	2d00      	cmp	r5, #0
 800c970:	d0f5      	beq.n	800c95e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c972:	2001      	movs	r0, #1
 800c974:	6028      	str	r0, [r5, #0]
	__asm volatile
 800c976:	f386 8811 	msr	BASEPRI, r6
}
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c97c:	3301      	adds	r3, #1
 800c97e:	b25b      	sxtb	r3, r3
 800c980:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c984:	e7eb      	b.n	800c95e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800c986:	2000      	movs	r0, #0
 800c988:	e7f5      	b.n	800c976 <xQueueGiveFromISR+0xa4>

0800c98a <xQueueReceive>:
{
 800c98a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c98e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800c990:	4604      	mov	r4, r0
{
 800c992:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c994:	b950      	cbnz	r0, 800c9ac <xQueueReceive+0x22>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	b672      	cpsid	i
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	b662      	cpsie	i
 800c9aa:	e7fe      	b.n	800c9aa <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9ac:	b961      	cbnz	r1, 800c9c8 <xQueueReceive+0x3e>
 800c9ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c9b0:	b153      	cbz	r3, 800c9c8 <xQueueReceive+0x3e>
 800c9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b6:	b672      	cpsid	i
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	b662      	cpsie	i
 800c9c6:	e7fe      	b.n	800c9c6 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9c8:	f000 fea6 	bl	800d718 <xTaskGetSchedulerState>
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	b960      	cbnz	r0, 800c9ea <xQueueReceive+0x60>
 800c9d0:	9b01      	ldr	r3, [sp, #4]
 800c9d2:	b15b      	cbz	r3, 800c9ec <xQueueReceive+0x62>
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	b672      	cpsid	i
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	b662      	cpsie	i
 800c9e8:	e7fe      	b.n	800c9e8 <xQueueReceive+0x5e>
 800c9ea:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800c9ec:	f04f 0800 	mov.w	r8, #0
 800c9f0:	e03d      	b.n	800ca6e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9f2:	9d01      	ldr	r5, [sp, #4]
 800c9f4:	b91d      	cbnz	r5, 800c9fe <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800c9f6:	f7ff fb49 	bl	800c08c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	e056      	b.n	800caac <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800c9fe:	b916      	cbnz	r6, 800ca06 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca00:	a802      	add	r0, sp, #8
 800ca02:	f000 fe31 	bl	800d668 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ca06:	f7ff fb41 	bl	800c08c <vPortExitCritical>
		vTaskSuspendAll();
 800ca0a:	f000 fbdb 	bl	800d1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca0e:	f7ff fb19 	bl	800c044 <vPortEnterCritical>
 800ca12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca16:	2bff      	cmp	r3, #255	; 0xff
 800ca18:	d101      	bne.n	800ca1e <xQueueReceive+0x94>
 800ca1a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800ca1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca22:	2bff      	cmp	r3, #255	; 0xff
 800ca24:	d101      	bne.n	800ca2a <xQueueReceive+0xa0>
 800ca26:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800ca2a:	f7ff fb2f 	bl	800c08c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca2e:	a901      	add	r1, sp, #4
 800ca30:	a802      	add	r0, sp, #8
 800ca32:	f000 fe25 	bl	800d680 <xTaskCheckForTimeOut>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d141      	bne.n	800cabe <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f7ff fc34 	bl	800c2a8 <prvIsQueueEmpty>
 800ca40:	b3b8      	cbz	r0, 800cab2 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca42:	9901      	ldr	r1, [sp, #4]
 800ca44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ca48:	f000 fd8c 	bl	800d564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f7ff fc80 	bl	800c352 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca52:	f000 fc5d 	bl	800d310 <xTaskResumeAll>
 800ca56:	b948      	cbnz	r0, 800ca6c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800ca58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ca5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca60:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800ca6e:	f7ff fae9 	bl	800c044 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca72:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca74:	2d00      	cmp	r5, #0
 800ca76:	d0bc      	beq.n	800c9f2 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca78:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f7ff fc53 	bl	800c328 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca82:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	b173      	cbz	r3, 800caa6 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca88:	f104 0010 	add.w	r0, r4, #16
 800ca8c:	f000 fda6 	bl	800d5dc <xTaskRemoveFromEventList>
 800ca90:	b148      	cbz	r0, 800caa6 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800ca92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ca96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800caa6:	f7ff faf1 	bl	800c08c <vPortExitCritical>
				return pdPASS;
 800caaa:	2001      	movs	r0, #1
}
 800caac:	b004      	add	sp, #16
 800caae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800cab2:	4620      	mov	r0, r4
 800cab4:	f7ff fc4d 	bl	800c352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cab8:	f000 fc2a 	bl	800d310 <xTaskResumeAll>
 800cabc:	e7d6      	b.n	800ca6c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800cabe:	4620      	mov	r0, r4
 800cac0:	f7ff fc47 	bl	800c352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cac4:	f000 fc24 	bl	800d310 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cac8:	4620      	mov	r0, r4
 800caca:	f7ff fbed 	bl	800c2a8 <prvIsQueueEmpty>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d0cc      	beq.n	800ca6c <xQueueReceive+0xe2>
 800cad2:	e792      	b.n	800c9fa <xQueueReceive+0x70>

0800cad4 <xQueueSemaphoreTake>:
{
 800cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad6:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800cad8:	4604      	mov	r4, r0
{
 800cada:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cadc:	b950      	cbnz	r0, 800caf4 <xQueueSemaphoreTake+0x20>
 800cade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae2:	b672      	cpsid	i
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	b662      	cpsie	i
 800caf2:	e7fe      	b.n	800caf2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800caf4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800caf6:	b155      	cbz	r5, 800cb0e <xQueueSemaphoreTake+0x3a>
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	b672      	cpsid	i
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	b662      	cpsie	i
 800cb0c:	e7fe      	b.n	800cb0c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb0e:	f000 fe03 	bl	800d718 <xTaskGetSchedulerState>
 800cb12:	4606      	mov	r6, r0
 800cb14:	b960      	cbnz	r0, 800cb30 <xQueueSemaphoreTake+0x5c>
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	b16b      	cbz	r3, 800cb36 <xQueueSemaphoreTake+0x62>
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	b672      	cpsid	i
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	b662      	cpsie	i
 800cb2e:	e7fe      	b.n	800cb2e <xQueueSemaphoreTake+0x5a>
 800cb30:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800cb32:	2700      	movs	r7, #0
 800cb34:	e055      	b.n	800cbe2 <xQueueSemaphoreTake+0x10e>
 800cb36:	4605      	mov	r5, r0
 800cb38:	e7fb      	b.n	800cb32 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb3a:	9b01      	ldr	r3, [sp, #4]
 800cb3c:	b973      	cbnz	r3, 800cb5c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cb3e:	b155      	cbz	r5, 800cb56 <xQueueSemaphoreTake+0x82>
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	b672      	cpsid	i
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	b662      	cpsie	i
 800cb54:	e7fe      	b.n	800cb54 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 800cb56:	f7ff fa99 	bl	800c08c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cb5a:	e062      	b.n	800cc22 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800cb5c:	b916      	cbnz	r6, 800cb64 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb5e:	a802      	add	r0, sp, #8
 800cb60:	f000 fd82 	bl	800d668 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800cb64:	f7ff fa92 	bl	800c08c <vPortExitCritical>
		vTaskSuspendAll();
 800cb68:	f000 fb2c 	bl	800d1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb6c:	f7ff fa6a 	bl	800c044 <vPortEnterCritical>
 800cb70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cb74:	2bff      	cmp	r3, #255	; 0xff
 800cb76:	d101      	bne.n	800cb7c <xQueueSemaphoreTake+0xa8>
 800cb78:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800cb7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cb80:	2bff      	cmp	r3, #255	; 0xff
 800cb82:	d101      	bne.n	800cb88 <xQueueSemaphoreTake+0xb4>
 800cb84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb88:	f7ff fa80 	bl	800c08c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb8c:	a901      	add	r1, sp, #4
 800cb8e:	a802      	add	r0, sp, #8
 800cb90:	f000 fd76 	bl	800d680 <xTaskCheckForTimeOut>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d14d      	bne.n	800cc34 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f7ff fb85 	bl	800c2a8 <prvIsQueueEmpty>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d042      	beq.n	800cc28 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	b93b      	cbnz	r3, 800cbb6 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 800cba6:	f7ff fa4d 	bl	800c044 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbaa:	68a0      	ldr	r0, [r4, #8]
 800cbac:	f000 fdc4 	bl	800d738 <xTaskPriorityInherit>
 800cbb0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800cbb2:	f7ff fa6b 	bl	800c08c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cbb6:	9901      	ldr	r1, [sp, #4]
 800cbb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cbbc:	f000 fcd2 	bl	800d564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f7ff fbc6 	bl	800c352 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbc6:	f000 fba3 	bl	800d310 <xTaskResumeAll>
 800cbca:	b948      	cbnz	r0, 800cbe0 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800cbcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800cbe2:	f7ff fa2f 	bl	800c044 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cbe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d0a6      	beq.n	800cb3a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cbec:	3b01      	subs	r3, #1
 800cbee:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	b913      	cbnz	r3, 800cbfa <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbf4:	f000 fe7e 	bl	800d8f4 <pvTaskIncrementMutexHeldCount>
 800cbf8:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbfa:	6923      	ldr	r3, [r4, #16]
 800cbfc:	b173      	cbz	r3, 800cc1c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbfe:	f104 0010 	add.w	r0, r4, #16
 800cc02:	f000 fceb 	bl	800d5dc <xTaskRemoveFromEventList>
 800cc06:	b148      	cbz	r0, 800cc1c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 800cc08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cc0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc10:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800cc1c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800cc1e:	f7ff fa35 	bl	800c08c <vPortExitCritical>
}
 800cc22:	4628      	mov	r0, r5
 800cc24:	b005      	add	sp, #20
 800cc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f7ff fb92 	bl	800c352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc2e:	f000 fb6f 	bl	800d310 <xTaskResumeAll>
 800cc32:	e7d5      	b.n	800cbe0 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800cc34:	4620      	mov	r0, r4
 800cc36:	f7ff fb8c 	bl	800c352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc3a:	f000 fb69 	bl	800d310 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f7ff fb32 	bl	800c2a8 <prvIsQueueEmpty>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d0cb      	beq.n	800cbe0 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800cc48:	2d00      	cmp	r5, #0
 800cc4a:	d0ea      	beq.n	800cc22 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800cc4c:	f7ff f9fa 	bl	800c044 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cc50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cc52:	b119      	cbz	r1, 800cc5c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cc54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cc56:	6819      	ldr	r1, [r3, #0]
 800cc58:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc5c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800cc5e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc60:	f000 fdf2 	bl	800d848 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800cc64:	f7ff fa12 	bl	800c08c <vPortExitCritical>
 800cc68:	e7db      	b.n	800cc22 <xQueueSemaphoreTake+0x14e>

0800cc6a <xQueueTakeMutexRecursive>:
	{
 800cc6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	b950      	cbnz	r0, 800cc86 <xQueueTakeMutexRecursive+0x1c>
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	b672      	cpsid	i
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	b662      	cpsie	i
 800cc84:	e7fe      	b.n	800cc84 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cc86:	6885      	ldr	r5, [r0, #8]
 800cc88:	9101      	str	r1, [sp, #4]
 800cc8a:	f000 fd3f 	bl	800d70c <xTaskGetCurrentTaskHandle>
 800cc8e:	4285      	cmp	r5, r0
 800cc90:	9901      	ldr	r1, [sp, #4]
 800cc92:	d105      	bne.n	800cca0 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cc94:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800cc96:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cc98:	3301      	adds	r3, #1
 800cc9a:	60e3      	str	r3, [r4, #12]
	}
 800cc9c:	b003      	add	sp, #12
 800cc9e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cca0:	4620      	mov	r0, r4
 800cca2:	f7ff ff17 	bl	800cad4 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d0f8      	beq.n	800cc9c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ccaa:	68e3      	ldr	r3, [r4, #12]
 800ccac:	3301      	adds	r3, #1
 800ccae:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800ccb0:	e7f4      	b.n	800cc9c <xQueueTakeMutexRecursive+0x32>

0800ccb2 <xQueueReceiveFromISR>:
{
 800ccb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb6:	4689      	mov	r9, r1
 800ccb8:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800ccba:	4605      	mov	r5, r0
 800ccbc:	b950      	cbnz	r0, 800ccd4 <xQueueReceiveFromISR+0x22>
 800ccbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc2:	b672      	cpsid	i
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	b662      	cpsie	i
 800ccd2:	e7fe      	b.n	800ccd2 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccd4:	b961      	cbnz	r1, 800ccf0 <xQueueReceiveFromISR+0x3e>
 800ccd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ccd8:	b153      	cbz	r3, 800ccf0 <xQueueReceiveFromISR+0x3e>
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	b672      	cpsid	i
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	b662      	cpsie	i
 800ccee:	e7fe      	b.n	800ccee <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccf0:	f7ff faa8 	bl	800c244 <vPortValidateInterruptPriority>
	__asm volatile
 800ccf4:	f3ef 8711 	mrs	r7, BASEPRI
 800ccf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfc:	b672      	cpsid	i
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd0c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd0e:	b31c      	cbz	r4, 800cd58 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd10:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd14:	4649      	mov	r1, r9
 800cd16:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd18:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd1a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd1c:	f7ff fb04 	bl	800c328 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd20:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800cd22:	1c73      	adds	r3, r6, #1
 800cd24:	d113      	bne.n	800cd4e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd26:	692b      	ldr	r3, [r5, #16]
 800cd28:	b90b      	cbnz	r3, 800cd2e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800cd2a:	2001      	movs	r0, #1
 800cd2c:	e00b      	b.n	800cd46 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd2e:	f105 0010 	add.w	r0, r5, #16
 800cd32:	f000 fc53 	bl	800d5dc <xTaskRemoveFromEventList>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d0f7      	beq.n	800cd2a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800cd3a:	f1b8 0f00 	cmp.w	r8, #0
 800cd3e:	d0f4      	beq.n	800cd2a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cd40:	2001      	movs	r0, #1
 800cd42:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800cd46:	f387 8811 	msr	BASEPRI, r7
}
 800cd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cd4e:	3601      	adds	r6, #1
 800cd50:	b276      	sxtb	r6, r6
 800cd52:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800cd56:	e7e8      	b.n	800cd2a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800cd58:	4620      	mov	r0, r4
 800cd5a:	e7f4      	b.n	800cd46 <xQueueReceiveFromISR+0x94>

0800cd5c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd5c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd5e:	4a07      	ldr	r2, [pc, #28]	; (800cd7c <vQueueAddToRegistry+0x20>)
	{
 800cd60:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd62:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800cd66:	b92c      	cbnz	r4, 800cd74 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd70:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd72:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd74:	3301      	adds	r3, #1
 800cd76:	2b08      	cmp	r3, #8
 800cd78:	d1f3      	bne.n	800cd62 <vQueueAddToRegistry+0x6>
 800cd7a:	e7fa      	b.n	800cd72 <vQueueAddToRegistry+0x16>
 800cd7c:	200267e4 	.word	0x200267e4

0800cd80 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd80:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cd82:	4a08      	ldr	r2, [pc, #32]	; (800cda4 <vQueueUnregisterQueue+0x24>)
	{
 800cd84:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cd86:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800cd8a:	684c      	ldr	r4, [r1, #4]
 800cd8c:	4284      	cmp	r4, r0
 800cd8e:	d104      	bne.n	800cd9a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cd90:	2000      	movs	r0, #0
 800cd92:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cd96:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cd98:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	2b08      	cmp	r3, #8
 800cd9e:	d1f2      	bne.n	800cd86 <vQueueUnregisterQueue+0x6>
 800cda0:	e7fa      	b.n	800cd98 <vQueueUnregisterQueue+0x18>
 800cda2:	bf00      	nop
 800cda4:	200267e4 	.word	0x200267e4

0800cda8 <vQueueDelete>:
{
 800cda8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800cdaa:	4604      	mov	r4, r0
 800cdac:	b950      	cbnz	r0, 800cdc4 <vQueueDelete+0x1c>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	b672      	cpsid	i
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	b662      	cpsie	i
 800cdc2:	e7fe      	b.n	800cdc2 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 800cdc4:	f7ff ffdc 	bl	800cd80 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cdc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cdcc:	b923      	cbnz	r3, 800cdd8 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800cdce:	4620      	mov	r0, r4
}
 800cdd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800cdd4:	f7ff b84c 	b.w	800be70 <vPortFree>
}
 800cdd8:	bd10      	pop	{r4, pc}

0800cdda <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdda:	b570      	push	{r4, r5, r6, lr}
 800cddc:	4604      	mov	r4, r0
 800cdde:	460d      	mov	r5, r1
 800cde0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cde2:	f7ff f92f 	bl	800c044 <vPortEnterCritical>
 800cde6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cdea:	2bff      	cmp	r3, #255	; 0xff
 800cdec:	d102      	bne.n	800cdf4 <vQueueWaitForMessageRestricted+0x1a>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800cdf4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cdf8:	2bff      	cmp	r3, #255	; 0xff
 800cdfa:	d102      	bne.n	800ce02 <vQueueWaitForMessageRestricted+0x28>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce02:	f7ff f943 	bl	800c08c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce08:	b92b      	cbnz	r3, 800ce16 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ce12:	f000 fbc3 	bl	800d59c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce16:	4620      	mov	r0, r4
	}
 800ce18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800ce1c:	f7ff ba99 	b.w	800c352 <prvUnlockQueue>

0800ce20 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce24:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce26:	f7ff f90d 	bl	800c044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce2a:	4b2f      	ldr	r3, [pc, #188]	; (800cee8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800ce2c:	4e2f      	ldr	r6, [pc, #188]	; (800ceec <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	4f2f      	ldr	r7, [pc, #188]	; (800cef0 <prvAddNewTaskToReadyList+0xd0>)
 800ce32:	3201      	adds	r2, #1
 800ce34:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ce36:	6835      	ldr	r5, [r6, #0]
 800ce38:	2d00      	cmp	r5, #0
 800ce3a:	d14a      	bne.n	800ced2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce3c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d11f      	bne.n	800ce84 <prvAddNewTaskToReadyList+0x64>
 800ce44:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce46:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce48:	4640      	mov	r0, r8
 800ce4a:	f7ff f84d 	bl	800bee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce4e:	f108 0814 	add.w	r8, r8, #20
 800ce52:	2d38      	cmp	r5, #56	; 0x38
 800ce54:	d1f7      	bne.n	800ce46 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce56:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800cf18 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800ce5a:	4d26      	ldr	r5, [pc, #152]	; (800cef4 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800ce5c:	4640      	mov	r0, r8
 800ce5e:	f7ff f843 	bl	800bee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce62:	4628      	mov	r0, r5
 800ce64:	f7ff f840 	bl	800bee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce68:	4823      	ldr	r0, [pc, #140]	; (800cef8 <prvAddNewTaskToReadyList+0xd8>)
 800ce6a:	f7ff f83d 	bl	800bee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce6e:	4823      	ldr	r0, [pc, #140]	; (800cefc <prvAddNewTaskToReadyList+0xdc>)
 800ce70:	f7ff f83a 	bl	800bee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce74:	4822      	ldr	r0, [pc, #136]	; (800cf00 <prvAddNewTaskToReadyList+0xe0>)
 800ce76:	f7ff f837 	bl	800bee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce7a:	4b22      	ldr	r3, [pc, #136]	; (800cf04 <prvAddNewTaskToReadyList+0xe4>)
 800ce7c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce80:	4b21      	ldr	r3, [pc, #132]	; (800cf08 <prvAddNewTaskToReadyList+0xe8>)
 800ce82:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800ce84:	4a21      	ldr	r2, [pc, #132]	; (800cf0c <prvAddNewTaskToReadyList+0xec>)
 800ce86:	6813      	ldr	r3, [r2, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800ce8c:	4a20      	ldr	r2, [pc, #128]	; (800cf10 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce8e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800ce90:	6811      	ldr	r1, [r2, #0]
 800ce92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce94:	428b      	cmp	r3, r1
 800ce96:	d900      	bls.n	800ce9a <prvAddNewTaskToReadyList+0x7a>
 800ce98:	6013      	str	r3, [r2, #0]
 800ce9a:	2014      	movs	r0, #20
 800ce9c:	1d21      	adds	r1, r4, #4
 800ce9e:	fb00 7003 	mla	r0, r0, r3, r7
 800cea2:	f7ff f82f 	bl	800bf04 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cea6:	f7ff f8f1 	bl	800c08c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ceaa:	4b1a      	ldr	r3, [pc, #104]	; (800cf14 <prvAddNewTaskToReadyList+0xf4>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	b173      	cbz	r3, 800cece <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ceb0:	6833      	ldr	r3, [r6, #0]
 800ceb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d209      	bcs.n	800cece <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800ceba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	f3bf 8f6f 	isb	sy
}
 800cece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800ced2:	4b10      	ldr	r3, [pc, #64]	; (800cf14 <prvAddNewTaskToReadyList+0xf4>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1d4      	bne.n	800ce84 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ceda:	6833      	ldr	r3, [r6, #0]
 800cedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cede:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d8cf      	bhi.n	800ce84 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800cee4:	6034      	str	r4, [r6, #0]
 800cee6:	e7cd      	b.n	800ce84 <prvAddNewTaskToReadyList+0x64>
 800cee8:	20026c90 	.word	0x20026c90
 800ceec:	20026824 	.word	0x20026824
 800cef0:	20026830 	.word	0x20026830
 800cef4:	20026cbc 	.word	0x20026cbc
 800cef8:	20026cd8 	.word	0x20026cd8
 800cefc:	20026d04 	.word	0x20026d04
 800cf00:	20026cf0 	.word	0x20026cf0
 800cf04:	20026828 	.word	0x20026828
 800cf08:	2002682c 	.word	0x2002682c
 800cf0c:	20026ca0 	.word	0x20026ca0
 800cf10:	20026ca4 	.word	0x20026ca4
 800cf14:	20026cec 	.word	0x20026cec
 800cf18:	20026ca8 	.word	0x20026ca8

0800cf1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf1e:	4b15      	ldr	r3, [pc, #84]	; (800cf74 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800cf20:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf22:	4e15      	ldr	r6, [pc, #84]	; (800cf78 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800cf24:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800cf26:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf28:	6830      	ldr	r0, [r6, #0]
 800cf2a:	3004      	adds	r0, #4
 800cf2c:	f7ff f80d 	bl	800bf4a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf30:	1c63      	adds	r3, r4, #1
 800cf32:	d107      	bne.n	800cf44 <prvAddCurrentTaskToDelayedList+0x28>
 800cf34:	b137      	cbz	r7, 800cf44 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf36:	6831      	ldr	r1, [r6, #0]
 800cf38:	4810      	ldr	r0, [pc, #64]	; (800cf7c <prvAddCurrentTaskToDelayedList+0x60>)
 800cf3a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cf3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf40:	f7fe bfe0 	b.w	800bf04 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cf44:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cf46:	6833      	ldr	r3, [r6, #0]
 800cf48:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cf4a:	d307      	bcc.n	800cf5c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf4c:	4b0c      	ldr	r3, [pc, #48]	; (800cf80 <prvAddCurrentTaskToDelayedList+0x64>)
 800cf4e:	6818      	ldr	r0, [r3, #0]
 800cf50:	6831      	ldr	r1, [r6, #0]
}
 800cf52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf56:	3104      	adds	r1, #4
 800cf58:	f7fe bfe0 	b.w	800bf1c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf5c:	4b09      	ldr	r3, [pc, #36]	; (800cf84 <prvAddCurrentTaskToDelayedList+0x68>)
 800cf5e:	6818      	ldr	r0, [r3, #0]
 800cf60:	6831      	ldr	r1, [r6, #0]
 800cf62:	3104      	adds	r1, #4
 800cf64:	f7fe ffda 	bl	800bf1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf68:	4b07      	ldr	r3, [pc, #28]	; (800cf88 <prvAddCurrentTaskToDelayedList+0x6c>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	42a2      	cmp	r2, r4
 800cf6e:	d900      	bls.n	800cf72 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800cf70:	601c      	str	r4, [r3, #0]
}
 800cf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf74:	20026d18 	.word	0x20026d18
 800cf78:	20026824 	.word	0x20026824
 800cf7c:	20026cf0 	.word	0x20026cf0
 800cf80:	2002682c 	.word	0x2002682c
 800cf84:	20026828 	.word	0x20026828
 800cf88:	20026cd0 	.word	0x20026cd0

0800cf8c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf8c:	4a06      	ldr	r2, [pc, #24]	; (800cfa8 <prvResetNextTaskUnblockTime+0x1c>)
 800cf8e:	6813      	ldr	r3, [r2, #0]
 800cf90:	6819      	ldr	r1, [r3, #0]
 800cf92:	4b06      	ldr	r3, [pc, #24]	; (800cfac <prvResetNextTaskUnblockTime+0x20>)
 800cf94:	b919      	cbnz	r1, 800cf9e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf96:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf9a:	601a      	str	r2, [r3, #0]
}
 800cf9c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf9e:	6812      	ldr	r2, [r2, #0]
 800cfa0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfa2:	68d2      	ldr	r2, [r2, #12]
 800cfa4:	6852      	ldr	r2, [r2, #4]
 800cfa6:	e7f8      	b.n	800cf9a <prvResetNextTaskUnblockTime+0xe>
 800cfa8:	20026828 	.word	0x20026828
 800cfac:	20026cd0 	.word	0x20026cd0

0800cfb0 <prvDeleteTCB>:
	{
 800cfb0:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfb2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800cfb6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfb8:	b93b      	cbnz	r3, 800cfca <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800cfba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800cfbc:	f7fe ff58 	bl	800be70 <vPortFree>
				vPortFree( pxTCB );
 800cfc0:	4620      	mov	r0, r4
	}
 800cfc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800cfc6:	f7fe bf53 	b.w	800be70 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d0f9      	beq.n	800cfc2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d00a      	beq.n	800cfe8 <prvDeleteTCB+0x38>
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	b672      	cpsid	i
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	b662      	cpsie	i
 800cfe6:	e7fe      	b.n	800cfe6 <prvDeleteTCB+0x36>
	}
 800cfe8:	bd10      	pop	{r4, pc}
	...

0800cfec <prvIdleTask>:
{
 800cfec:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfee:	4c14      	ldr	r4, [pc, #80]	; (800d040 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cff0:	4f14      	ldr	r7, [pc, #80]	; (800d044 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800cff2:	4d15      	ldr	r5, [pc, #84]	; (800d048 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	b983      	cbnz	r3, 800d01a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cff8:	4b14      	ldr	r3, [pc, #80]	; (800d04c <prvIdleTask+0x60>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d909      	bls.n	800d014 <prvIdleTask+0x28>
				taskYIELD();
 800d000:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d008:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800d014:	f7f6 f91a 	bl	800324c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d018:	e7eb      	b.n	800cff2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800d01a:	f7ff f813 	bl	800c044 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d022:	1d30      	adds	r0, r6, #4
 800d024:	f7fe ff91 	bl	800bf4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d028:	682b      	ldr	r3, [r5, #0]
 800d02a:	3b01      	subs	r3, #1
 800d02c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	3b01      	subs	r3, #1
 800d032:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800d034:	f7ff f82a 	bl	800c08c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d038:	4630      	mov	r0, r6
 800d03a:	f7ff ffb9 	bl	800cfb0 <prvDeleteTCB>
 800d03e:	e7d9      	b.n	800cff4 <prvIdleTask+0x8>
 800d040:	20026c94 	.word	0x20026c94
 800d044:	20026d04 	.word	0x20026d04
 800d048:	20026c90 	.word	0x20026c90
 800d04c:	20026830 	.word	0x20026830

0800d050 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d054:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d058:	4606      	mov	r6, r0
 800d05a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d05c:	21a5      	movs	r1, #165	; 0xa5
 800d05e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d060:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d062:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800d066:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d06a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d06c:	f018 f8ec 	bl	8025248 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d070:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d072:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d074:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800d078:	b3b5      	cbz	r5, 800d0e8 <prvInitialiseNewTask.constprop.0+0x98>
 800d07a:	1e6b      	subs	r3, r5, #1
 800d07c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d080:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d082:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d086:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800d08a:	b108      	cbz	r0, 800d090 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d08c:	42ab      	cmp	r3, r5
 800d08e:	d1f8      	bne.n	800d082 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d090:	2300      	movs	r3, #0
 800d092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d096:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800d098:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d09c:	1d20      	adds	r0, r4, #4
 800d09e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800d0a0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800d0a4:	bf28      	it	cs
 800d0a6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800d0a8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d0aa:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0ac:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0b0:	f7fe ff25 	bl	800befe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0b4:	f104 0018 	add.w	r0, r4, #24
 800d0b8:	f7fe ff21 	bl	800befe <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800d0bc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0c0:	463a      	mov	r2, r7
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0c6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0c8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0ca:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800d0cc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0d0:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0d4:	f7fe ff8c 	bl	800bff0 <pxPortInitialiseStack>
 800d0d8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d0da:	f1b8 0f00 	cmp.w	r8, #0
 800d0de:	d001      	beq.n	800d0e4 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0e0:	f8c8 4000 	str.w	r4, [r8]
}
 800d0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d0e8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800d0ec:	e7d3      	b.n	800d096 <prvInitialiseNewTask.constprop.0+0x46>

0800d0ee <xTaskCreateStatic>:
	{
 800d0ee:	b570      	push	{r4, r5, r6, lr}
 800d0f0:	b086      	sub	sp, #24
 800d0f2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d0f6:	b955      	cbnz	r5, 800d10e <xTaskCreateStatic+0x20>
 800d0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fc:	b672      	cpsid	i
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	b662      	cpsie	i
 800d10c:	e7fe      	b.n	800d10c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800d10e:	b954      	cbnz	r4, 800d126 <xTaskCreateStatic+0x38>
 800d110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d114:	b672      	cpsid	i
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	b662      	cpsie	i
 800d124:	e7fe      	b.n	800d124 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d126:	2660      	movs	r6, #96	; 0x60
 800d128:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d12a:	9e05      	ldr	r6, [sp, #20]
 800d12c:	2e60      	cmp	r6, #96	; 0x60
 800d12e:	d00a      	beq.n	800d146 <xTaskCreateStatic+0x58>
 800d130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d134:	b672      	cpsid	i
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	b662      	cpsie	i
 800d144:	e7fe      	b.n	800d144 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d146:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d148:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d14a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d14c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d150:	ad04      	add	r5, sp, #16
 800d152:	9402      	str	r4, [sp, #8]
 800d154:	9501      	str	r5, [sp, #4]
 800d156:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d158:	9500      	str	r5, [sp, #0]
 800d15a:	f7ff ff79 	bl	800d050 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d15e:	4620      	mov	r0, r4
 800d160:	f7ff fe5e 	bl	800ce20 <prvAddNewTaskToReadyList>
	}
 800d164:	9804      	ldr	r0, [sp, #16]
 800d166:	b006      	add	sp, #24
 800d168:	bd70      	pop	{r4, r5, r6, pc}

0800d16a <xTaskCreate>:
	{
 800d16a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d16e:	4607      	mov	r7, r0
 800d170:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d172:	0090      	lsls	r0, r2, #2
	{
 800d174:	4688      	mov	r8, r1
 800d176:	4616      	mov	r6, r2
 800d178:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d17a:	f7fe fde3 	bl	800bd44 <pvPortMalloc>
			if( pxStack != NULL )
 800d17e:	4605      	mov	r5, r0
 800d180:	b1e8      	cbz	r0, 800d1be <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d182:	2060      	movs	r0, #96	; 0x60
 800d184:	f7fe fdde 	bl	800bd44 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d188:	4604      	mov	r4, r0
 800d18a:	b1a8      	cbz	r0, 800d1b8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d18c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800d18e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d190:	4632      	mov	r2, r6
 800d192:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d194:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d19a:	9002      	str	r0, [sp, #8]
 800d19c:	4638      	mov	r0, r7
 800d19e:	9301      	str	r3, [sp, #4]
 800d1a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	464b      	mov	r3, r9
 800d1a6:	f7ff ff53 	bl	800d050 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f7ff fe38 	bl	800ce20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d1b0:	2001      	movs	r0, #1
	}
 800d1b2:	b005      	add	sp, #20
 800d1b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f7fe fe59 	bl	800be70 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800d1c2:	e7f6      	b.n	800d1b2 <xTaskCreate+0x48>

0800d1c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d1c4:	4a02      	ldr	r2, [pc, #8]	; (800d1d0 <vTaskSuspendAll+0xc>)
 800d1c6:	6813      	ldr	r3, [r2, #0]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	6013      	str	r3, [r2, #0]
}
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20026c9c 	.word	0x20026c9c

0800d1d4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d1d4:	4b01      	ldr	r3, [pc, #4]	; (800d1dc <xTaskGetTickCount+0x8>)
 800d1d6:	6818      	ldr	r0, [r3, #0]
}
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	20026d18 	.word	0x20026d18

0800d1e0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1e0:	4b40      	ldr	r3, [pc, #256]	; (800d2e4 <xTaskIncrementTick+0x104>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
{
 800d1e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d174      	bne.n	800d2d6 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1ec:	4b3e      	ldr	r3, [pc, #248]	; (800d2e8 <xTaskIncrementTick+0x108>)
 800d1ee:	681d      	ldr	r5, [r3, #0]
 800d1f0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d1f2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1f4:	b9cd      	cbnz	r5, 800d22a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800d1f6:	4b3d      	ldr	r3, [pc, #244]	; (800d2ec <xTaskIncrementTick+0x10c>)
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	6812      	ldr	r2, [r2, #0]
 800d1fc:	b152      	cbz	r2, 800d214 <xTaskIncrementTick+0x34>
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	b672      	cpsid	i
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	b662      	cpsie	i
 800d212:	e7fe      	b.n	800d212 <xTaskIncrementTick+0x32>
 800d214:	4a36      	ldr	r2, [pc, #216]	; (800d2f0 <xTaskIncrementTick+0x110>)
 800d216:	6819      	ldr	r1, [r3, #0]
 800d218:	6810      	ldr	r0, [r2, #0]
 800d21a:	6018      	str	r0, [r3, #0]
 800d21c:	6011      	str	r1, [r2, #0]
 800d21e:	4a35      	ldr	r2, [pc, #212]	; (800d2f4 <xTaskIncrementTick+0x114>)
 800d220:	6813      	ldr	r3, [r2, #0]
 800d222:	3301      	adds	r3, #1
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	f7ff feb1 	bl	800cf8c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d22a:	4e33      	ldr	r6, [pc, #204]	; (800d2f8 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800d22c:	2400      	movs	r4, #0
 800d22e:	4f33      	ldr	r7, [pc, #204]	; (800d2fc <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d230:	6833      	ldr	r3, [r6, #0]
 800d232:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800d308 <xTaskIncrementTick+0x128>
 800d236:	42ab      	cmp	r3, r5
 800d238:	d911      	bls.n	800d25e <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d23a:	f8d8 3000 	ldr.w	r3, [r8]
 800d23e:	2214      	movs	r2, #20
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	4353      	muls	r3, r2
 800d244:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800d246:	2b02      	cmp	r3, #2
 800d248:	bf28      	it	cs
 800d24a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800d24c:	4b2c      	ldr	r3, [pc, #176]	; (800d300 <xTaskIncrementTick+0x120>)
 800d24e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800d250:	2b00      	cmp	r3, #0
}
 800d252:	bf0c      	ite	eq
 800d254:	4620      	moveq	r0, r4
 800d256:	2001      	movne	r0, #1
 800d258:	b003      	add	sp, #12
 800d25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d25e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d2ec <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800d262:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800d30c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d266:	f8d9 3000 	ldr.w	r3, [r9]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	b91b      	cbnz	r3, 800d276 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d26e:	f04f 33ff 	mov.w	r3, #4294967295
 800d272:	6033      	str	r3, [r6, #0]
					break;
 800d274:	e7e1      	b.n	800d23a <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d276:	f8d9 3000 	ldr.w	r3, [r9]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d280:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800d284:	4295      	cmp	r5, r2
 800d286:	d201      	bcs.n	800d28c <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800d288:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d28a:	e7d6      	b.n	800d23a <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d28c:	f10b 0104 	add.w	r1, fp, #4
 800d290:	4608      	mov	r0, r1
 800d292:	9101      	str	r1, [sp, #4]
 800d294:	f7fe fe59 	bl	800bf4a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d298:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800d29c:	9901      	ldr	r1, [sp, #4]
 800d29e:	b122      	cbz	r2, 800d2aa <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2a0:	f10b 0018 	add.w	r0, fp, #24
 800d2a4:	f7fe fe51 	bl	800bf4a <uxListRemove>
 800d2a8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800d2aa:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800d2ae:	f8da 2000 	ldr.w	r2, [sl]
 800d2b2:	4290      	cmp	r0, r2
 800d2b4:	d901      	bls.n	800d2ba <xTaskIncrementTick+0xda>
 800d2b6:	f8ca 0000 	str.w	r0, [sl]
 800d2ba:	2314      	movs	r3, #20
 800d2bc:	fb03 7000 	mla	r0, r3, r0, r7
 800d2c0:	f7fe fe20 	bl	800bf04 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2c4:	f8d8 1000 	ldr.w	r1, [r8]
 800d2c8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800d2cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	bf28      	it	cs
 800d2d2:	2401      	movcs	r4, #1
 800d2d4:	e7c7      	b.n	800d266 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800d2d6:	4a0b      	ldr	r2, [pc, #44]	; (800d304 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800d2d8:	2400      	movs	r4, #0
		++uxPendedTicks;
 800d2da:	6813      	ldr	r3, [r2, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	6013      	str	r3, [r2, #0]
 800d2e0:	e7b4      	b.n	800d24c <xTaskIncrementTick+0x6c>
 800d2e2:	bf00      	nop
 800d2e4:	20026c9c 	.word	0x20026c9c
 800d2e8:	20026d18 	.word	0x20026d18
 800d2ec:	20026828 	.word	0x20026828
 800d2f0:	2002682c 	.word	0x2002682c
 800d2f4:	20026cd4 	.word	0x20026cd4
 800d2f8:	20026cd0 	.word	0x20026cd0
 800d2fc:	20026830 	.word	0x20026830
 800d300:	20026d1c 	.word	0x20026d1c
 800d304:	20026c98 	.word	0x20026c98
 800d308:	20026824 	.word	0x20026824
 800d30c:	20026ca4 	.word	0x20026ca4

0800d310 <xTaskResumeAll>:
{
 800d310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800d312:	4c32      	ldr	r4, [pc, #200]	; (800d3dc <xTaskResumeAll+0xcc>)
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	b953      	cbnz	r3, 800d32e <xTaskResumeAll+0x1e>
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	b672      	cpsid	i
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	b662      	cpsie	i
 800d32c:	e7fe      	b.n	800d32c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800d32e:	f7fe fe89 	bl	800c044 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	3b01      	subs	r3, #1
 800d336:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d338:	6824      	ldr	r4, [r4, #0]
 800d33a:	b12c      	cbz	r4, 800d348 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800d33c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d33e:	f7fe fea5 	bl	800c08c <vPortExitCritical>
}
 800d342:	4620      	mov	r0, r4
 800d344:	b003      	add	sp, #12
 800d346:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d348:	4b25      	ldr	r3, [pc, #148]	; (800d3e0 <xTaskResumeAll+0xd0>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d0f5      	beq.n	800d33c <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d350:	4d24      	ldr	r5, [pc, #144]	; (800d3e4 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800d352:	4e25      	ldr	r6, [pc, #148]	; (800d3e8 <xTaskResumeAll+0xd8>)
 800d354:	4f25      	ldr	r7, [pc, #148]	; (800d3ec <xTaskResumeAll+0xdc>)
 800d356:	e01e      	b.n	800d396 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d358:	68eb      	ldr	r3, [r5, #12]
 800d35a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d35c:	f104 0018 	add.w	r0, r4, #24
 800d360:	f7fe fdf3 	bl	800bf4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d364:	1d21      	adds	r1, r4, #4
 800d366:	4608      	mov	r0, r1
 800d368:	9101      	str	r1, [sp, #4]
 800d36a:	f7fe fdee 	bl	800bf4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d36e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d370:	6832      	ldr	r2, [r6, #0]
 800d372:	9901      	ldr	r1, [sp, #4]
 800d374:	4293      	cmp	r3, r2
 800d376:	d900      	bls.n	800d37a <xTaskResumeAll+0x6a>
 800d378:	6033      	str	r3, [r6, #0]
 800d37a:	2014      	movs	r0, #20
 800d37c:	fb00 7003 	mla	r0, r0, r3, r7
 800d380:	f7fe fdc0 	bl	800bf04 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d384:	4b1a      	ldr	r3, [pc, #104]	; (800d3f0 <xTaskResumeAll+0xe0>)
 800d386:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d302      	bcc.n	800d396 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800d390:	4b18      	ldr	r3, [pc, #96]	; (800d3f4 <xTaskResumeAll+0xe4>)
 800d392:	2201      	movs	r2, #1
 800d394:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d396:	682b      	ldr	r3, [r5, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1dd      	bne.n	800d358 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800d39c:	b10c      	cbz	r4, 800d3a2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800d39e:	f7ff fdf5 	bl	800cf8c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d3a2:	4d15      	ldr	r5, [pc, #84]	; (800d3f8 <xTaskResumeAll+0xe8>)
 800d3a4:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d3a6:	b144      	cbz	r4, 800d3ba <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800d3a8:	4e12      	ldr	r6, [pc, #72]	; (800d3f4 <xTaskResumeAll+0xe4>)
 800d3aa:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d3ac:	f7ff ff18 	bl	800d1e0 <xTaskIncrementTick>
 800d3b0:	b100      	cbz	r0, 800d3b4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800d3b2:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d3b4:	3c01      	subs	r4, #1
 800d3b6:	d1f9      	bne.n	800d3ac <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800d3b8:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800d3ba:	4b0e      	ldr	r3, [pc, #56]	; (800d3f4 <xTaskResumeAll+0xe4>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d0bc      	beq.n	800d33c <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800d3c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d3d6:	2401      	movs	r4, #1
 800d3d8:	e7b1      	b.n	800d33e <xTaskResumeAll+0x2e>
 800d3da:	bf00      	nop
 800d3dc:	20026c9c 	.word	0x20026c9c
 800d3e0:	20026c90 	.word	0x20026c90
 800d3e4:	20026cd8 	.word	0x20026cd8
 800d3e8:	20026ca4 	.word	0x20026ca4
 800d3ec:	20026830 	.word	0x20026830
 800d3f0:	20026824 	.word	0x20026824
 800d3f4:	20026d1c 	.word	0x20026d1c
 800d3f8:	20026c98 	.word	0x20026c98

0800d3fc <vTaskSetApplicationTaskTag>:
	{
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	460d      	mov	r5, r1
		if( xTask == NULL )
 800d400:	4604      	mov	r4, r0
 800d402:	b908      	cbnz	r0, 800d408 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800d404:	4b04      	ldr	r3, [pc, #16]	; (800d418 <vTaskSetApplicationTaskTag+0x1c>)
 800d406:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800d408:	f7fe fe1c 	bl	800c044 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800d40c:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800d40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800d412:	f7fe be3b 	b.w	800c08c <vPortExitCritical>
 800d416:	bf00      	nop
 800d418:	20026824 	.word	0x20026824

0800d41c <xTaskCallApplicationTaskHook>:
	{
 800d41c:	4603      	mov	r3, r0
 800d41e:	4608      	mov	r0, r1
		if( xTask == NULL )
 800d420:	b90b      	cbnz	r3, 800d426 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800d422:	4b03      	ldr	r3, [pc, #12]	; (800d430 <xTaskCallApplicationTaskHook+0x14>)
 800d424:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800d426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d428:	b103      	cbz	r3, 800d42c <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800d42a:	4718      	bx	r3
	}
 800d42c:	4618      	mov	r0, r3
 800d42e:	4770      	bx	lr
 800d430:	20026824 	.word	0x20026824

0800d434 <vTaskStartScheduler>:
{
 800d434:	b510      	push	{r4, lr}
 800d436:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d438:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d43a:	aa07      	add	r2, sp, #28
 800d43c:	a906      	add	r1, sp, #24
 800d43e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d440:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d444:	f7fe fc42 	bl	800bccc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d448:	9b05      	ldr	r3, [sp, #20]
 800d44a:	9a07      	ldr	r2, [sp, #28]
 800d44c:	9302      	str	r3, [sp, #8]
 800d44e:	9b06      	ldr	r3, [sp, #24]
 800d450:	491b      	ldr	r1, [pc, #108]	; (800d4c0 <vTaskStartScheduler+0x8c>)
 800d452:	481c      	ldr	r0, [pc, #112]	; (800d4c4 <vTaskStartScheduler+0x90>)
 800d454:	e9cd 4300 	strd	r4, r3, [sp]
 800d458:	4623      	mov	r3, r4
 800d45a:	f7ff fe48 	bl	800d0ee <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800d45e:	b360      	cbz	r0, 800d4ba <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800d460:	f000 faa6 	bl	800d9b0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d464:	2801      	cmp	r0, #1
 800d466:	d11b      	bne.n	800d4a0 <vTaskStartScheduler+0x6c>
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	b672      	cpsid	i
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800d47c:	f04f 32ff 	mov.w	r2, #4294967295
 800d480:	4b11      	ldr	r3, [pc, #68]	; (800d4c8 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 800d482:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800d484:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d486:	4b11      	ldr	r3, [pc, #68]	; (800d4cc <vTaskStartScheduler+0x98>)
 800d488:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d48a:	4b11      	ldr	r3, [pc, #68]	; (800d4d0 <vTaskStartScheduler+0x9c>)
 800d48c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800d48e:	4b11      	ldr	r3, [pc, #68]	; (800d4d4 <vTaskStartScheduler+0xa0>)
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	f7ff ffc3 	bl	800d41c <xTaskCallApplicationTaskHook>
}
 800d496:	b008      	add	sp, #32
 800d498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800d49c:	f7fe be6c 	b.w	800c178 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	d10a      	bne.n	800d4ba <vTaskStartScheduler+0x86>
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	b672      	cpsid	i
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	b662      	cpsie	i
 800d4b8:	e7fe      	b.n	800d4b8 <vTaskStartScheduler+0x84>
}
 800d4ba:	b008      	add	sp, #32
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	bf00      	nop
 800d4c0:	080291c9 	.word	0x080291c9
 800d4c4:	0800cfed 	.word	0x0800cfed
 800d4c8:	20026cd0 	.word	0x20026cd0
 800d4cc:	20026cec 	.word	0x20026cec
 800d4d0:	20026d18 	.word	0x20026d18
 800d4d4:	20026824 	.word	0x20026824

0800d4d8 <vTaskSwitchContext>:
{
 800d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4da:	4b1d      	ldr	r3, [pc, #116]	; (800d550 <vTaskSwitchContext+0x78>)
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	4b1d      	ldr	r3, [pc, #116]	; (800d554 <vTaskSwitchContext+0x7c>)
 800d4e0:	b112      	cbz	r2, 800d4e8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	601a      	str	r2, [r3, #0]
}
 800d4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800d4e8:	4c1b      	ldr	r4, [pc, #108]	; (800d558 <vTaskSwitchContext+0x80>)
 800d4ea:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ec:	4e1b      	ldr	r6, [pc, #108]	; (800d55c <vTaskSwitchContext+0x84>)
 800d4ee:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800d4f0:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800d4f2:	6820      	ldr	r0, [r4, #0]
 800d4f4:	f7ff ff92 	bl	800d41c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4f8:	6832      	ldr	r2, [r6, #0]
 800d4fa:	4919      	ldr	r1, [pc, #100]	; (800d560 <vTaskSwitchContext+0x88>)
 800d4fc:	fb07 f302 	mul.w	r3, r7, r2
 800d500:	58cd      	ldr	r5, [r1, r3]
 800d502:	18c8      	adds	r0, r1, r3
 800d504:	b1ad      	cbz	r5, 800d532 <vTaskSwitchContext+0x5a>
 800d506:	6845      	ldr	r5, [r0, #4]
 800d508:	3308      	adds	r3, #8
 800d50a:	686d      	ldr	r5, [r5, #4]
 800d50c:	440b      	add	r3, r1
 800d50e:	429d      	cmp	r5, r3
 800d510:	6045      	str	r5, [r0, #4]
 800d512:	bf04      	itt	eq
 800d514:	686b      	ldreq	r3, [r5, #4]
 800d516:	6043      	streq	r3, [r0, #4]
 800d518:	2314      	movs	r3, #20
 800d51a:	fb03 1102 	mla	r1, r3, r2, r1
 800d51e:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800d520:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800d528:	6820      	ldr	r0, [r4, #0]
}
 800d52a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800d52e:	f7ff bf75 	b.w	800d41c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d532:	b952      	cbnz	r2, 800d54a <vTaskSwitchContext+0x72>
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	b672      	cpsid	i
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	b662      	cpsie	i
 800d548:	e7fe      	b.n	800d548 <vTaskSwitchContext+0x70>
 800d54a:	3a01      	subs	r2, #1
 800d54c:	e7d6      	b.n	800d4fc <vTaskSwitchContext+0x24>
 800d54e:	bf00      	nop
 800d550:	20026c9c 	.word	0x20026c9c
 800d554:	20026d1c 	.word	0x20026d1c
 800d558:	20026824 	.word	0x20026824
 800d55c:	20026ca4 	.word	0x20026ca4
 800d560:	20026830 	.word	0x20026830

0800d564 <vTaskPlaceOnEventList>:
{
 800d564:	b510      	push	{r4, lr}
 800d566:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800d568:	b950      	cbnz	r0, 800d580 <vTaskPlaceOnEventList+0x1c>
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	b672      	cpsid	i
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	b662      	cpsie	i
 800d57e:	e7fe      	b.n	800d57e <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d580:	4b05      	ldr	r3, [pc, #20]	; (800d598 <vTaskPlaceOnEventList+0x34>)
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	3118      	adds	r1, #24
 800d586:	f7fe fcc9 	bl	800bf1c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d58a:	4620      	mov	r0, r4
 800d58c:	2101      	movs	r1, #1
}
 800d58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d592:	f7ff bcc3 	b.w	800cf1c <prvAddCurrentTaskToDelayedList>
 800d596:	bf00      	nop
 800d598:	20026824 	.word	0x20026824

0800d59c <vTaskPlaceOnEventListRestricted>:
	{
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	460d      	mov	r5, r1
 800d5a0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800d5a2:	b950      	cbnz	r0, 800d5ba <vTaskPlaceOnEventListRestricted+0x1e>
 800d5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a8:	b672      	cpsid	i
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	b662      	cpsie	i
 800d5b8:	e7fe      	b.n	800d5b8 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5ba:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <vTaskPlaceOnEventListRestricted+0x3c>)
 800d5bc:	6819      	ldr	r1, [r3, #0]
 800d5be:	3118      	adds	r1, #24
 800d5c0:	f7fe fca0 	bl	800bf04 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800d5c4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	bf0c      	ite	eq
 800d5ca:	4628      	moveq	r0, r5
 800d5cc:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800d5d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5d4:	f7ff bca2 	b.w	800cf1c <prvAddCurrentTaskToDelayedList>
 800d5d8:	20026824 	.word	0x20026824

0800d5dc <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5dc:	68c3      	ldr	r3, [r0, #12]
{
 800d5de:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d5e2:	b954      	cbnz	r4, 800d5fa <xTaskRemoveFromEventList+0x1e>
 800d5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e8:	b672      	cpsid	i
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	b662      	cpsie	i
 800d5f8:	e7fe      	b.n	800d5f8 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d5fa:	f104 0118 	add.w	r1, r4, #24
 800d5fe:	4608      	mov	r0, r1
 800d600:	9101      	str	r1, [sp, #4]
 800d602:	f7fe fca2 	bl	800bf4a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d606:	4b12      	ldr	r3, [pc, #72]	; (800d650 <xTaskRemoveFromEventList+0x74>)
 800d608:	9901      	ldr	r1, [sp, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	b9e3      	cbnz	r3, 800d648 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d60e:	1d21      	adds	r1, r4, #4
 800d610:	4608      	mov	r0, r1
 800d612:	9101      	str	r1, [sp, #4]
 800d614:	f7fe fc99 	bl	800bf4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d618:	4a0e      	ldr	r2, [pc, #56]	; (800d654 <xTaskRemoveFromEventList+0x78>)
 800d61a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d61c:	6810      	ldr	r0, [r2, #0]
 800d61e:	9901      	ldr	r1, [sp, #4]
 800d620:	4283      	cmp	r3, r0
 800d622:	d900      	bls.n	800d626 <xTaskRemoveFromEventList+0x4a>
 800d624:	6013      	str	r3, [r2, #0]
 800d626:	4a0c      	ldr	r2, [pc, #48]	; (800d658 <xTaskRemoveFromEventList+0x7c>)
 800d628:	2014      	movs	r0, #20
 800d62a:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d62e:	f7fe fc69 	bl	800bf04 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d632:	4b0a      	ldr	r3, [pc, #40]	; (800d65c <xTaskRemoveFromEventList+0x80>)
 800d634:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d906      	bls.n	800d64c <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800d63e:	2001      	movs	r0, #1
 800d640:	4b07      	ldr	r3, [pc, #28]	; (800d660 <xTaskRemoveFromEventList+0x84>)
 800d642:	6018      	str	r0, [r3, #0]
}
 800d644:	b002      	add	sp, #8
 800d646:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d648:	4806      	ldr	r0, [pc, #24]	; (800d664 <xTaskRemoveFromEventList+0x88>)
 800d64a:	e7f0      	b.n	800d62e <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800d64c:	2000      	movs	r0, #0
	return xReturn;
 800d64e:	e7f9      	b.n	800d644 <xTaskRemoveFromEventList+0x68>
 800d650:	20026c9c 	.word	0x20026c9c
 800d654:	20026ca4 	.word	0x20026ca4
 800d658:	20026830 	.word	0x20026830
 800d65c:	20026824 	.word	0x20026824
 800d660:	20026d1c 	.word	0x20026d1c
 800d664:	20026cd8 	.word	0x20026cd8

0800d668 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d668:	4b03      	ldr	r3, [pc, #12]	; (800d678 <vTaskInternalSetTimeOutState+0x10>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d66e:	4b03      	ldr	r3, [pc, #12]	; (800d67c <vTaskInternalSetTimeOutState+0x14>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6043      	str	r3, [r0, #4]
}
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	20026cd4 	.word	0x20026cd4
 800d67c:	20026d18 	.word	0x20026d18

0800d680 <xTaskCheckForTimeOut>:
{
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800d684:	4605      	mov	r5, r0
 800d686:	b950      	cbnz	r0, 800d69e <xTaskCheckForTimeOut+0x1e>
 800d688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68c:	b672      	cpsid	i
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	b662      	cpsie	i
 800d69c:	e7fe      	b.n	800d69c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800d69e:	b951      	cbnz	r1, 800d6b6 <xTaskCheckForTimeOut+0x36>
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	b672      	cpsid	i
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	b662      	cpsie	i
 800d6b4:	e7fe      	b.n	800d6b4 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800d6b6:	f7fe fcc5 	bl	800c044 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d6ba:	4b0f      	ldr	r3, [pc, #60]	; (800d6f8 <xTaskCheckForTimeOut+0x78>)
 800d6bc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	1c5a      	adds	r2, r3, #1
 800d6c2:	d010      	beq.n	800d6e6 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6c4:	480d      	ldr	r0, [pc, #52]	; (800d6fc <xTaskCheckForTimeOut+0x7c>)
 800d6c6:	682e      	ldr	r6, [r5, #0]
 800d6c8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6ca:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6cc:	4286      	cmp	r6, r0
 800d6ce:	d001      	beq.n	800d6d4 <xTaskCheckForTimeOut+0x54>
 800d6d0:	428a      	cmp	r2, r1
 800d6d2:	d90f      	bls.n	800d6f4 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6d4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d6d6:	4283      	cmp	r3, r0
 800d6d8:	d90a      	bls.n	800d6f0 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800d6da:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d6dc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800d6de:	4413      	add	r3, r2
 800d6e0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d6e2:	f7ff ffc1 	bl	800d668 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800d6e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d6e8:	f7fe fcd0 	bl	800c08c <vPortExitCritical>
}
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d6f4:	2401      	movs	r4, #1
 800d6f6:	e7f7      	b.n	800d6e8 <xTaskCheckForTimeOut+0x68>
 800d6f8:	20026d18 	.word	0x20026d18
 800d6fc:	20026cd4 	.word	0x20026cd4

0800d700 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d700:	4b01      	ldr	r3, [pc, #4]	; (800d708 <vTaskMissedYield+0x8>)
 800d702:	2201      	movs	r2, #1
 800d704:	601a      	str	r2, [r3, #0]
}
 800d706:	4770      	bx	lr
 800d708:	20026d1c 	.word	0x20026d1c

0800d70c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800d70c:	4b01      	ldr	r3, [pc, #4]	; (800d714 <xTaskGetCurrentTaskHandle+0x8>)
 800d70e:	6818      	ldr	r0, [r3, #0]
	}
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	20026824 	.word	0x20026824

0800d718 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d718:	4b05      	ldr	r3, [pc, #20]	; (800d730 <xTaskGetSchedulerState+0x18>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	b133      	cbz	r3, 800d72c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d71e:	4b05      	ldr	r3, [pc, #20]	; (800d734 <xTaskGetSchedulerState+0x1c>)
 800d720:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800d722:	2b00      	cmp	r3, #0
 800d724:	bf0c      	ite	eq
 800d726:	2002      	moveq	r0, #2
 800d728:	2000      	movne	r0, #0
 800d72a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d72c:	2001      	movs	r0, #1
	}
 800d72e:	4770      	bx	lr
 800d730:	20026cec 	.word	0x20026cec
 800d734:	20026c9c 	.word	0x20026c9c

0800d738 <xTaskPriorityInherit>:
	{
 800d738:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800d73a:	4604      	mov	r4, r0
 800d73c:	b340      	cbz	r0, 800d790 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d73e:	4d1b      	ldr	r5, [pc, #108]	; (800d7ac <xTaskPriorityInherit+0x74>)
 800d740:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d742:	682a      	ldr	r2, [r5, #0]
 800d744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d746:	4293      	cmp	r3, r2
 800d748:	d228      	bcs.n	800d79c <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d74a:	6982      	ldr	r2, [r0, #24]
 800d74c:	2a00      	cmp	r2, #0
 800d74e:	db04      	blt.n	800d75a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d750:	682a      	ldr	r2, [r5, #0]
 800d752:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d754:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d758:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d75a:	2214      	movs	r2, #20
 800d75c:	4e14      	ldr	r6, [pc, #80]	; (800d7b0 <xTaskPriorityInherit+0x78>)
 800d75e:	fb02 6303 	mla	r3, r2, r3, r6
 800d762:	6962      	ldr	r2, [r4, #20]
 800d764:	429a      	cmp	r2, r3
 800d766:	d115      	bne.n	800d794 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d768:	1d21      	adds	r1, r4, #4
 800d76a:	4608      	mov	r0, r1
 800d76c:	9101      	str	r1, [sp, #4]
 800d76e:	f7fe fbec 	bl	800bf4a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d772:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d774:	4a0f      	ldr	r2, [pc, #60]	; (800d7b4 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d778:	6810      	ldr	r0, [r2, #0]
 800d77a:	9901      	ldr	r1, [sp, #4]
 800d77c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d77e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d780:	d900      	bls.n	800d784 <xTaskPriorityInherit+0x4c>
 800d782:	6013      	str	r3, [r2, #0]
 800d784:	2014      	movs	r0, #20
 800d786:	fb00 6003 	mla	r0, r0, r3, r6
 800d78a:	f7fe fbbb 	bl	800bf04 <vListInsertEnd>
				xReturn = pdTRUE;
 800d78e:	2001      	movs	r0, #1
	}
 800d790:	b002      	add	sp, #8
 800d792:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d79a:	e7f8      	b.n	800d78e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d79c:	682b      	ldr	r3, [r5, #0]
 800d79e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d7a0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d7a2:	42a0      	cmp	r0, r4
 800d7a4:	bf2c      	ite	cs
 800d7a6:	2000      	movcs	r0, #0
 800d7a8:	2001      	movcc	r0, #1
 800d7aa:	e7f1      	b.n	800d790 <xTaskPriorityInherit+0x58>
 800d7ac:	20026824 	.word	0x20026824
 800d7b0:	20026830 	.word	0x20026830
 800d7b4:	20026ca4 	.word	0x20026ca4

0800d7b8 <xTaskPriorityDisinherit>:
	{
 800d7b8:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800d7ba:	b910      	cbnz	r0, 800d7c2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800d7bc:	2000      	movs	r0, #0
	}
 800d7be:	b002      	add	sp, #8
 800d7c0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800d7c2:	4b1e      	ldr	r3, [pc, #120]	; (800d83c <xTaskPriorityDisinherit+0x84>)
 800d7c4:	681c      	ldr	r4, [r3, #0]
 800d7c6:	4284      	cmp	r4, r0
 800d7c8:	d00a      	beq.n	800d7e0 <xTaskPriorityDisinherit+0x28>
 800d7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ce:	b672      	cpsid	i
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	b662      	cpsie	i
 800d7de:	e7fe      	b.n	800d7de <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800d7e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d7e2:	b953      	cbnz	r3, 800d7fa <xTaskPriorityDisinherit+0x42>
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	b672      	cpsid	i
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	b662      	cpsie	i
 800d7f8:	e7fe      	b.n	800d7f8 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800d7fc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7fe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800d800:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d802:	4291      	cmp	r1, r2
 800d804:	d0da      	beq.n	800d7bc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1d8      	bne.n	800d7bc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d80a:	1d21      	adds	r1, r4, #4
 800d80c:	4608      	mov	r0, r1
 800d80e:	9101      	str	r1, [sp, #4]
 800d810:	f7fe fb9b 	bl	800bf4a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d814:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800d816:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d818:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d81c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d81e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d820:	4a07      	ldr	r2, [pc, #28]	; (800d840 <xTaskPriorityDisinherit+0x88>)
 800d822:	6810      	ldr	r0, [r2, #0]
 800d824:	4283      	cmp	r3, r0
 800d826:	d900      	bls.n	800d82a <xTaskPriorityDisinherit+0x72>
 800d828:	6013      	str	r3, [r2, #0]
 800d82a:	4a06      	ldr	r2, [pc, #24]	; (800d844 <xTaskPriorityDisinherit+0x8c>)
 800d82c:	2014      	movs	r0, #20
 800d82e:	fb00 2003 	mla	r0, r0, r3, r2
 800d832:	f7fe fb67 	bl	800bf04 <vListInsertEnd>
					xReturn = pdTRUE;
 800d836:	2001      	movs	r0, #1
		return xReturn;
 800d838:	e7c1      	b.n	800d7be <xTaskPriorityDisinherit+0x6>
 800d83a:	bf00      	nop
 800d83c:	20026824 	.word	0x20026824
 800d840:	20026ca4 	.word	0x20026ca4
 800d844:	20026830 	.word	0x20026830

0800d848 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800d848:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800d84a:	4604      	mov	r4, r0
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d048      	beq.n	800d8e2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800d850:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800d852:	b952      	cbnz	r2, 800d86a <vTaskPriorityDisinheritAfterTimeout+0x22>
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	b672      	cpsid	i
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	b662      	cpsie	i
 800d868:	e7fe      	b.n	800d868 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d86a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d86c:	4299      	cmp	r1, r3
 800d86e:	bf38      	it	cc
 800d870:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d872:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d874:	428b      	cmp	r3, r1
 800d876:	d034      	beq.n	800d8e2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d878:	2a01      	cmp	r2, #1
 800d87a:	d132      	bne.n	800d8e2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800d87c:	4a1a      	ldr	r2, [pc, #104]	; (800d8e8 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800d87e:	6812      	ldr	r2, [r2, #0]
 800d880:	4282      	cmp	r2, r0
 800d882:	d10a      	bne.n	800d89a <vTaskPriorityDisinheritAfterTimeout+0x52>
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	b672      	cpsid	i
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	b662      	cpsie	i
 800d898:	e7fe      	b.n	800d898 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d89a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d89c:	4d13      	ldr	r5, [pc, #76]	; (800d8ec <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d89e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8a0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800d8a4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8a6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8aa:	bfa8      	it	ge
 800d8ac:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8b0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8b2:	bfa8      	it	ge
 800d8b4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d113      	bne.n	800d8e2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8ba:	1d01      	adds	r1, r0, #4
 800d8bc:	4608      	mov	r0, r1
 800d8be:	9101      	str	r1, [sp, #4]
 800d8c0:	f7fe fb43 	bl	800bf4a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d8c4:	4a0a      	ldr	r2, [pc, #40]	; (800d8f0 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800d8c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d8c8:	6810      	ldr	r0, [r2, #0]
 800d8ca:	9901      	ldr	r1, [sp, #4]
 800d8cc:	4283      	cmp	r3, r0
 800d8ce:	d900      	bls.n	800d8d2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800d8d0:	6013      	str	r3, [r2, #0]
 800d8d2:	2014      	movs	r0, #20
 800d8d4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800d8d8:	b003      	add	sp, #12
 800d8da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800d8de:	f7fe bb11 	b.w	800bf04 <vListInsertEnd>
	}
 800d8e2:	b003      	add	sp, #12
 800d8e4:	bd30      	pop	{r4, r5, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20026824 	.word	0x20026824
 800d8ec:	20026830 	.word	0x20026830
 800d8f0:	20026ca4 	.word	0x20026ca4

0800d8f4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d8f4:	4b04      	ldr	r3, [pc, #16]	; (800d908 <pvTaskIncrementMutexHeldCount+0x14>)
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	b11a      	cbz	r2, 800d902 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d8fa:	6819      	ldr	r1, [r3, #0]
 800d8fc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800d8fe:	3201      	adds	r2, #1
 800d900:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800d902:	6818      	ldr	r0, [r3, #0]
	}
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	20026824 	.word	0x20026824

0800d90c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800d90e:	4c11      	ldr	r4, [pc, #68]	; (800d954 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800d910:	f7fe fb98 	bl	800c044 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800d914:	6825      	ldr	r5, [r4, #0]
 800d916:	b9bd      	cbnz	r5, 800d948 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d918:	4f0f      	ldr	r7, [pc, #60]	; (800d958 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800d91a:	4e10      	ldr	r6, [pc, #64]	; (800d95c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800d91c:	4638      	mov	r0, r7
 800d91e:	f7fe fae3 	bl	800bee8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d922:	4630      	mov	r0, r6
 800d924:	f7fe fae0 	bl	800bee8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d928:	4b0d      	ldr	r3, [pc, #52]	; (800d960 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d92a:	4a0e      	ldr	r2, [pc, #56]	; (800d964 <prvCheckForValidListAndQueue+0x58>)
 800d92c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800d92e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d930:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800d932:	4b0d      	ldr	r3, [pc, #52]	; (800d968 <prvCheckForValidListAndQueue+0x5c>)
 800d934:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d936:	4b0d      	ldr	r3, [pc, #52]	; (800d96c <prvCheckForValidListAndQueue+0x60>)
 800d938:	9500      	str	r5, [sp, #0]
 800d93a:	f7fe fdcf 	bl	800c4dc <xQueueGenericCreateStatic>
 800d93e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d940:	b110      	cbz	r0, 800d948 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d942:	490b      	ldr	r1, [pc, #44]	; (800d970 <prvCheckForValidListAndQueue+0x64>)
 800d944:	f7ff fa0a 	bl	800cd5c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800d948:	b003      	add	sp, #12
 800d94a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800d94e:	f7fe bb9d 	b.w	800c08c <vPortExitCritical>
 800d952:	bf00      	nop
 800d954:	20026e44 	.word	0x20026e44
 800d958:	20026dc8 	.word	0x20026dc8
 800d95c:	20026ddc 	.word	0x20026ddc
 800d960:	20026d20 	.word	0x20026d20
 800d964:	20026d28 	.word	0x20026d28
 800d968:	20026d24 	.word	0x20026d24
 800d96c:	20026df4 	.word	0x20026df4
 800d970:	080291ce 	.word	0x080291ce

0800d974 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800d974:	4291      	cmp	r1, r2
{
 800d976:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d978:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d97a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800d97c:	d80a      	bhi.n	800d994 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d97e:	1ad2      	subs	r2, r2, r3
 800d980:	6983      	ldr	r3, [r0, #24]
 800d982:	429a      	cmp	r2, r3
 800d984:	d20d      	bcs.n	800d9a2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d986:	1d01      	adds	r1, r0, #4
 800d988:	4b07      	ldr	r3, [pc, #28]	; (800d9a8 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d98a:	6818      	ldr	r0, [r3, #0]
 800d98c:	f7fe fac6 	bl	800bf1c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d990:	2000      	movs	r0, #0
}
 800d992:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d994:	429a      	cmp	r2, r3
 800d996:	d201      	bcs.n	800d99c <prvInsertTimerInActiveList+0x28>
 800d998:	4299      	cmp	r1, r3
 800d99a:	d202      	bcs.n	800d9a2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d99c:	1d01      	adds	r1, r0, #4
 800d99e:	4b03      	ldr	r3, [pc, #12]	; (800d9ac <prvInsertTimerInActiveList+0x38>)
 800d9a0:	e7f3      	b.n	800d98a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800d9a2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d9a4:	e7f5      	b.n	800d992 <prvInsertTimerInActiveList+0x1e>
 800d9a6:	bf00      	nop
 800d9a8:	20026d24 	.word	0x20026d24
 800d9ac:	20026d20 	.word	0x20026d20

0800d9b0 <xTimerCreateTimerTask>:
{
 800d9b0:	b510      	push	{r4, lr}
 800d9b2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d9b4:	f7ff ffaa 	bl	800d90c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d9b8:	4b13      	ldr	r3, [pc, #76]	; (800da08 <xTimerCreateTimerTask+0x58>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	b1b3      	cbz	r3, 800d9ec <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d9be:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9c0:	aa07      	add	r2, sp, #28
 800d9c2:	a906      	add	r1, sp, #24
 800d9c4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d9c6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9ca:	f7fe f98b 	bl	800bce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9ce:	9b05      	ldr	r3, [sp, #20]
 800d9d0:	9a07      	ldr	r2, [sp, #28]
 800d9d2:	9302      	str	r3, [sp, #8]
 800d9d4:	9b06      	ldr	r3, [sp, #24]
 800d9d6:	490d      	ldr	r1, [pc, #52]	; (800da0c <xTimerCreateTimerTask+0x5c>)
 800d9d8:	9301      	str	r3, [sp, #4]
 800d9da:	2302      	movs	r3, #2
 800d9dc:	480c      	ldr	r0, [pc, #48]	; (800da10 <xTimerCreateTimerTask+0x60>)
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	4623      	mov	r3, r4
 800d9e2:	f7ff fb84 	bl	800d0ee <xTaskCreateStatic>
 800d9e6:	4b0b      	ldr	r3, [pc, #44]	; (800da14 <xTimerCreateTimerTask+0x64>)
 800d9e8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d9ea:	b950      	cbnz	r0, 800da02 <xTimerCreateTimerTask+0x52>
 800d9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f0:	b672      	cpsid	i
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	b662      	cpsie	i
	configASSERT( xReturn );
 800da00:	e7fe      	b.n	800da00 <xTimerCreateTimerTask+0x50>
}
 800da02:	2001      	movs	r0, #1
 800da04:	b008      	add	sp, #32
 800da06:	bd10      	pop	{r4, pc}
 800da08:	20026e44 	.word	0x20026e44
 800da0c:	080291d3 	.word	0x080291d3
 800da10:	0800db21 	.word	0x0800db21
 800da14:	20026e48 	.word	0x20026e48

0800da18 <xTimerGenericCommand>:
{
 800da18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800da1a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800da1c:	4604      	mov	r4, r0
{
 800da1e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800da20:	b950      	cbnz	r0, 800da38 <xTimerGenericCommand+0x20>
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	b672      	cpsid	i
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	b662      	cpsie	i
 800da36:	e7fe      	b.n	800da36 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800da38:	4d0c      	ldr	r5, [pc, #48]	; (800da6c <xTimerGenericCommand+0x54>)
 800da3a:	6828      	ldr	r0, [r5, #0]
 800da3c:	b178      	cbz	r0, 800da5e <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da3e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da40:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da42:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da46:	dc0c      	bgt.n	800da62 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da48:	f7ff fe66 	bl	800d718 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da4c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da4e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da50:	4669      	mov	r1, sp
 800da52:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da54:	bf0c      	ite	eq
 800da56:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da58:	461a      	movne	r2, r3
 800da5a:	f7fe fdc4 	bl	800c5e6 <xQueueGenericSend>
}
 800da5e:	b004      	add	sp, #16
 800da60:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da62:	2300      	movs	r3, #0
 800da64:	4669      	mov	r1, sp
 800da66:	f7fe fecb 	bl	800c800 <xQueueGenericSendFromISR>
 800da6a:	e7f8      	b.n	800da5e <xTimerGenericCommand+0x46>
 800da6c:	20026e44 	.word	0x20026e44

0800da70 <prvSampleTimeNow>:
{
 800da70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800da74:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800db1c <prvSampleTimeNow+0xac>
{
 800da78:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800da7a:	f7ff fbab 	bl	800d1d4 <xTaskGetTickCount>
 800da7e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800da80:	f8d8 3000 	ldr.w	r3, [r8]
 800da84:	4283      	cmp	r3, r0
 800da86:	d942      	bls.n	800db0e <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da88:	4f22      	ldr	r7, [pc, #136]	; (800db14 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da8a:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	b95a      	cbnz	r2, 800daac <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800da94:	4a20      	ldr	r2, [pc, #128]	; (800db18 <prvSampleTimeNow+0xa8>)
 800da96:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da98:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800da9a:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800da9c:	6039      	str	r1, [r7, #0]
}
 800da9e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800daa0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800daa2:	f8c8 5000 	str.w	r5, [r8]
}
 800daa6:	b004      	add	sp, #16
 800daa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800daac:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daae:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dab0:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dab4:	1d21      	adds	r1, r4, #4
 800dab6:	4608      	mov	r0, r1
 800dab8:	9103      	str	r1, [sp, #12]
 800daba:	f7fe fa46 	bl	800bf4a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dabe:	6a23      	ldr	r3, [r4, #32]
 800dac0:	4620      	mov	r0, r4
 800dac2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dac4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dac8:	9903      	ldr	r1, [sp, #12]
 800daca:	f013 0f04 	tst.w	r3, #4
 800dace:	d0de      	beq.n	800da8e <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dad0:	69a3      	ldr	r3, [r4, #24]
 800dad2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800dad4:	459a      	cmp	sl, r3
 800dad6:	d205      	bcs.n	800dae4 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dad8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dada:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dadc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dade:	f7fe fa1d 	bl	800bf1c <vListInsert>
 800dae2:	e7d4      	b.n	800da8e <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dae4:	2300      	movs	r3, #0
 800dae6:	4652      	mov	r2, sl
 800dae8:	4620      	mov	r0, r4
 800daea:	f8cd 9000 	str.w	r9, [sp]
 800daee:	4619      	mov	r1, r3
 800daf0:	f7ff ff92 	bl	800da18 <xTimerGenericCommand>
				configASSERT( xResult );
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d1ca      	bne.n	800da8e <prvSampleTimeNow+0x1e>
 800daf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafc:	b672      	cpsid	i
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	b662      	cpsie	i
 800db0c:	e7fe      	b.n	800db0c <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800db0e:	2300      	movs	r3, #0
 800db10:	e7c5      	b.n	800da9e <prvSampleTimeNow+0x2e>
 800db12:	bf00      	nop
 800db14:	20026d20 	.word	0x20026d20
 800db18:	20026d24 	.word	0x20026d24
 800db1c:	20026df0 	.word	0x20026df0

0800db20 <prvTimerTask>:
{
 800db20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db24:	4d71      	ldr	r5, [pc, #452]	; (800dcec <prvTimerTask+0x1cc>)
{
 800db26:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db28:	4e71      	ldr	r6, [pc, #452]	; (800dcf0 <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db2a:	682b      	ldr	r3, [r5, #0]
 800db2c:	f8d3 8000 	ldr.w	r8, [r3]
 800db30:	f1b8 0f00 	cmp.w	r8, #0
 800db34:	d037      	beq.n	800dba6 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db36:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db38:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db3a:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800db3e:	f7ff fb41 	bl	800d1c4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db42:	a804      	add	r0, sp, #16
 800db44:	f7ff ff94 	bl	800da70 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800db48:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db4a:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d16b      	bne.n	800dc28 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db50:	2c00      	cmp	r4, #0
 800db52:	d14e      	bne.n	800dbf2 <prvTimerTask+0xd2>
 800db54:	4540      	cmp	r0, r8
 800db56:	d352      	bcc.n	800dbfe <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800db58:	f7ff fbda 	bl	800d310 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db62:	1d38      	adds	r0, r7, #4
 800db64:	f7fe f9f1 	bl	800bf4a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db6c:	0758      	lsls	r0, r3, #29
 800db6e:	d51c      	bpl.n	800dbaa <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db70:	69b9      	ldr	r1, [r7, #24]
 800db72:	4643      	mov	r3, r8
 800db74:	464a      	mov	r2, r9
 800db76:	4638      	mov	r0, r7
 800db78:	4441      	add	r1, r8
 800db7a:	f7ff fefb 	bl	800d974 <prvInsertTimerInActiveList>
 800db7e:	b1c0      	cbz	r0, 800dbb2 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db80:	4623      	mov	r3, r4
 800db82:	4642      	mov	r2, r8
 800db84:	4621      	mov	r1, r4
 800db86:	4638      	mov	r0, r7
 800db88:	9400      	str	r4, [sp, #0]
 800db8a:	f7ff ff45 	bl	800da18 <xTimerGenericCommand>
			configASSERT( xResult );
 800db8e:	b980      	cbnz	r0, 800dbb2 <prvTimerTask+0x92>
 800db90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db94:	b672      	cpsid	i
 800db96:	f383 8811 	msr	BASEPRI, r3
 800db9a:	f3bf 8f6f 	isb	sy
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	b662      	cpsie	i
 800dba4:	e7fe      	b.n	800dba4 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dba6:	2401      	movs	r4, #1
 800dba8:	e7c9      	b.n	800db3e <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbaa:	f023 0301 	bic.w	r3, r3, #1
 800dbae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbb2:	6a3b      	ldr	r3, [r7, #32]
 800dbb4:	4638      	mov	r0, r7
 800dbb6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbb8:	2200      	movs	r2, #0
 800dbba:	a904      	add	r1, sp, #16
 800dbbc:	6830      	ldr	r0, [r6, #0]
 800dbbe:	f7fe fee4 	bl	800c98a <xQueueReceive>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d0b1      	beq.n	800db2a <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dbc6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dbc8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	db2f      	blt.n	800dc2e <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dbce:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dbd0:	6963      	ldr	r3, [r4, #20]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d132      	bne.n	800dc3c <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbd6:	a803      	add	r0, sp, #12
 800dbd8:	f7ff ff4a 	bl	800da70 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800dbdc:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbde:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800dbe0:	2b09      	cmp	r3, #9
 800dbe2:	d8e9      	bhi.n	800dbb8 <prvTimerTask+0x98>
 800dbe4:	e8df f003 	tbb	[pc, r3]
 800dbe8:	592e2e2e 	.word	0x592e2e2e
 800dbec:	2e2e7a60 	.word	0x2e2e7a60
 800dbf0:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dbf2:	4b40      	ldr	r3, [pc, #256]	; (800dcf4 <prvTimerTask+0x1d4>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681c      	ldr	r4, [r3, #0]
 800dbf8:	fab4 f484 	clz	r4, r4
 800dbfc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dbfe:	4622      	mov	r2, r4
 800dc00:	eba8 0109 	sub.w	r1, r8, r9
 800dc04:	6830      	ldr	r0, [r6, #0]
 800dc06:	f7ff f8e8 	bl	800cdda <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc0a:	f7ff fb81 	bl	800d310 <xTaskResumeAll>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d1d2      	bne.n	800dbb8 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800dc12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	e7c7      	b.n	800dbb8 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800dc28:	f7ff fb72 	bl	800d310 <xTaskResumeAll>
}
 800dc2c:	e7c4      	b.n	800dbb8 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc2e:	9b05      	ldr	r3, [sp, #20]
 800dc30:	9907      	ldr	r1, [sp, #28]
 800dc32:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc34:	9b04      	ldr	r3, [sp, #16]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	dbbe      	blt.n	800dbb8 <prvTimerTask+0x98>
 800dc3a:	e7c8      	b.n	800dbce <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc3c:	1d20      	adds	r0, r4, #4
 800dc3e:	f7fe f984 	bl	800bf4a <uxListRemove>
 800dc42:	e7c8      	b.n	800dbd6 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc48:	4620      	mov	r0, r4
 800dc4a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc4c:	f043 0301 	orr.w	r3, r3, #1
 800dc50:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc54:	9b05      	ldr	r3, [sp, #20]
 800dc56:	4419      	add	r1, r3
 800dc58:	f7ff fe8c 	bl	800d974 <prvInsertTimerInActiveList>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d0ab      	beq.n	800dbb8 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc60:	6a23      	ldr	r3, [r4, #32]
 800dc62:	4620      	mov	r0, r4
 800dc64:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dc6a:	0759      	lsls	r1, r3, #29
 800dc6c:	d5a4      	bpl.n	800dbb8 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc6e:	69a2      	ldr	r2, [r4, #24]
 800dc70:	2300      	movs	r3, #0
 800dc72:	9905      	ldr	r1, [sp, #20]
 800dc74:	4620      	mov	r0, r4
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	440a      	add	r2, r1
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	f7ff fecc 	bl	800da18 <xTimerGenericCommand>
							configASSERT( xResult );
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d199      	bne.n	800dbb8 <prvTimerTask+0x98>
 800dc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc88:	b672      	cpsid	i
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	b662      	cpsie	i
 800dc98:	e7fe      	b.n	800dc98 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc9e:	f023 0301 	bic.w	r3, r3, #1
 800dca2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800dca6:	e787      	b.n	800dbb8 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dca8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dcac:	f043 0301 	orr.w	r3, r3, #1
 800dcb0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dcb4:	9905      	ldr	r1, [sp, #20]
 800dcb6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dcb8:	b951      	cbnz	r1, 800dcd0 <prvTimerTask+0x1b0>
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	b672      	cpsid	i
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	b662      	cpsie	i
 800dcce:	e7fe      	b.n	800dcce <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	4401      	add	r1, r0
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f7ff fe4d 	bl	800d974 <prvInsertTimerInActiveList>
					break;
 800dcda:	e76d      	b.n	800dbb8 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dcdc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dce0:	079a      	lsls	r2, r3, #30
 800dce2:	d4dc      	bmi.n	800dc9e <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800dce4:	4620      	mov	r0, r4
 800dce6:	f7fe f8c3 	bl	800be70 <vPortFree>
 800dcea:	e765      	b.n	800dbb8 <prvTimerTask+0x98>
 800dcec:	20026d20 	.word	0x20026d20
 800dcf0:	20026e44 	.word	0x20026e44
 800dcf4:	20026d24 	.word	0x20026d24

0800dcf8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	b093      	sub	sp, #76	; 0x4c
 800dcfe:	9209      	str	r2, [sp, #36]	; 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800dd00:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 800dd04:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
{  
 800dd08:	9111      	str	r1, [sp, #68]	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800dd0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd0e:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800dd10:	4b73      	ldr	r3, [pc, #460]	; (800dee0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 800dd12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd14:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dd16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dd18:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dd1a:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dd1c:	930c      	str	r3, [sp, #48]	; 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800dd1e:	0053      	lsls	r3, r2, #1
 800dd20:	930d      	str	r3, [sp, #52]	; 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 800dd22:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800dd26:	4413      	add	r3, r2
 800dd28:	455b      	cmp	r3, fp
 800dd2a:	d803      	bhi.n	800dd34 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 800dd2c:	9808      	ldr	r0, [sp, #32]
 800dd2e:	b013      	add	sp, #76	; 0x4c
 800dd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800dd34:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800dd38:	9b06      	ldr	r3, [sp, #24]
    currentMCU++;
 800dd3a:	f10b 0b01 	add.w	fp, fp, #1
    pLum = pInBuffer;
 800dd3e:	4681      	mov	r9, r0
    for(i= 0; i <  16; i+=2)
 800dd40:	f04f 0800 	mov.w	r8, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800dd44:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dd48:	9b01      	ldr	r3, [sp, #4]
 800dd4a:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800dd4e:	9b06      	ldr	r3, [sp, #24]
 800dd50:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800dd5a:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800dd5c:	f500 7380 	add.w	r3, r0, #256	; 0x100
 800dd60:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800dd62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd64:	9a00      	ldr	r2, [sp, #0]
 800dd66:	4293      	cmp	r3, r2
 800dd68:	f240 80ac 	bls.w	800dec4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>
        pOutAddr = pOutBuffer + refline;
 800dd6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800dd6e:	f04f 0c00 	mov.w	ip, #0
 800dd72:	f8cd 900c 	str.w	r9, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 800dd76:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800dd78:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 800dd7a:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800dd7c:	4413      	add	r3, r2
 800dd7e:	930e      	str	r3, [sp, #56]	; 0x38
 800dd80:	9b02      	ldr	r3, [sp, #8]
 800dd82:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 800dd84:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 800dd86:	2600      	movs	r6, #0
 800dd88:	9f03      	ldr	r7, [sp, #12]
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	9305      	str	r3, [sp, #20]
 800dd8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd90:	4463      	add	r3, ip
 800dd92:	930a      	str	r3, [sp, #40]	; 0x28
 800dd94:	9b07      	ldr	r3, [sp, #28]
 800dd96:	4463      	add	r3, ip
 800dd98:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          for(j=0; j < 8; j+=2)
 800dd9c:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 800dd9e:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 800dda2:	4433      	add	r3, r6
 800dda4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dda6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dda8:	4433      	add	r3, r6
 800ddaa:	9310      	str	r3, [sp, #64]	; 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800ddac:	9b05      	ldr	r3, [sp, #20]
 800ddae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ddb2:	9305      	str	r3, [sp, #20]
 800ddb4:	4b4b      	ldr	r3, [pc, #300]	; (800dee4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 800ddb6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800ddba:	9b05      	ldr	r3, [sp, #20]
 800ddbc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ddc0:	4b49      	ldr	r3, [pc, #292]	; (800dee8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 800ddc2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800ddc6:	4b49      	ldr	r3, [pc, #292]	; (800deec <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 800ddc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ddcc:	4b48      	ldr	r3, [pc, #288]	; (800def0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 800ddce:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ddd2:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800ddd4:	4947      	ldr	r1, [pc, #284]	; (800def4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1fc>)
 800ddd6:	440d      	add	r5, r1
 800ddd8:	460b      	mov	r3, r1
 800ddda:	eb05 010e 	add.w	r1, r5, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ddde:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800dde2:	441c      	add	r4, r3
            *(__IO uint16_t *)pOutAddr = 
 800dde4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dde6:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800ddea:	ea4f 0ad1 	mov.w	sl, r1, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ddee:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800ddf2:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ddf4:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800ddf8:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 800ddfc:	0889      	lsrs	r1, r1, #2
 800ddfe:	0149      	lsls	r1, r1, #5
 800de00:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800de04:	ea41 01de 	orr.w	r1, r1, lr, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800de08:	5399      	strh	r1, [r3, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 800de0a:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800de0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800de10:	eb05 010e 	add.w	r1, r5, lr
 800de14:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de18:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800de1c:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de1e:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800de22:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de26:	0889      	lsrs	r1, r1, #2
 800de28:	0149      	lsls	r1, r1, #5
 800de2a:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800de2e:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800de32:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800de36:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800de38:	f897 e006 	ldrb.w	lr, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 800de3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800de3e:	eb05 010e 	add.w	r1, r5, lr
 800de42:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de46:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800de4a:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de4c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800de50:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de54:	0889      	lsrs	r1, r1, #2
 800de56:	0149      	lsls	r1, r1, #5
 800de58:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800de5c:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800de60:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 800de64:	5399      	strh	r1, [r3, r6]
          for(j=0; j < 8; j+=2)
 800de66:	3604      	adds	r6, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800de68:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 800de6a:	2e10      	cmp	r6, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800de6c:	440d      	add	r5, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de6e:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800de70:	4421      	add	r1, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800de72:	f895 5100 	ldrb.w	r5, [r5, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de76:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800de7a:	ea4f 05d5 	mov.w	r5, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800de7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800de80:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800de84:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800de88:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 800de8c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
 800de90:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800de94:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 800de96:	d180      	bne.n	800dd9a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
 800de98:	9b04      	ldr	r3, [sp, #16]
        for(k= 0; k<2; k++)
 800de9a:	f10c 0c10 	add.w	ip, ip, #16
            pChrom++;
 800de9e:	3304      	adds	r3, #4
        for(k= 0; k<2; k++)
 800dea0:	f1bc 0f20 	cmp.w	ip, #32
            pChrom++;
 800dea4:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 800dea6:	9b03      	ldr	r3, [sp, #12]
 800dea8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800deac:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 800deae:	f47f af69 	bne.w	800dd84 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8c>
            pChrom++;
 800deb2:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800deb4:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800deb8:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 800deba:	3308      	adds	r3, #8
 800debc:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800debe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dec0:	441a      	add	r2, r3
 800dec2:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 800dec4:	f108 0802 	add.w	r8, r8, #2
 800dec8:	f1b8 0f10 	cmp.w	r8, #16
 800decc:	d102      	bne.n	800ded4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800dece:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800ded2:	e726      	b.n	800dd22 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
      if(i == 8)
 800ded4:	f1b8 0f08 	cmp.w	r8, #8
        pLum = pInBuffer + 128;
 800ded8:	bf08      	it	eq
 800deda:	f100 0980 	addeq.w	r9, r0, #128	; 0x80
 800dede:	e740      	b.n	800dd62 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 800dee0:	20027e4c 	.word	0x20027e4c
 800dee4:	20026e4c 	.word	0x20026e4c
 800dee8:	20027a4c 	.word	0x20027a4c
 800deec:	2002764c 	.word	0x2002764c
 800def0:	2002724c 	.word	0x2002724c
 800def4:	080291db 	.word	0x080291db

0800def8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800defc:	0a1b      	lsrs	r3, r3, #8
{  
 800defe:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800df00:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800df02:	4b4f      	ldr	r3, [pc, #316]	; (800e040 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 800df04:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800df06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 800df08:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800df0c:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800df0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800df10:	691b      	ldr	r3, [r3, #16]
{  
 800df12:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800df14:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800df16:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 800df18:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800df1c:	4413      	add	r3, r2
 800df1e:	4573      	cmp	r3, lr
 800df20:	d803      	bhi.n	800df2a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 800df22:	9805      	ldr	r0, [sp, #20]
 800df24:	b00d      	add	sp, #52	; 0x34
 800df26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800df2a:	ea4f 120e 	mov.w	r2, lr, lsl #4
 800df2e:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 800df30:	f10e 0e01 	add.w	lr, lr, #1
 800df34:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 800df38:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800df3a:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800df3e:	9b03      	ldr	r3, [sp, #12]
 800df40:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800df44:	9b02      	ldr	r3, [sp, #8]
 800df46:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df50:	9300      	str	r3, [sp, #0]
    currentMCU++;
 800df52:	2308      	movs	r3, #8
 800df54:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800df56:	9b07      	ldr	r3, [sp, #28]
 800df58:	9a00      	ldr	r2, [sp, #0]
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d969      	bls.n	800e032 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 800df5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df60:	46d0      	mov	r8, sl
 800df62:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800df66:	f107 0308 	add.w	r3, r7, #8
 800df6a:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800df6c:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 800df6e:	2400      	movs	r4, #0
 800df70:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 800df72:	f108 0301 	add.w	r3, r8, #1
 800df76:	930b      	str	r3, [sp, #44]	; 0x2c
 800df78:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 800df7c:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 800df80:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800df82:	9b01      	ldr	r3, [sp, #4]
 800df84:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800df88:	9301      	str	r3, [sp, #4]
 800df8a:	4b2e      	ldr	r3, [pc, #184]	; (800e044 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 800df8c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800df90:	9b01      	ldr	r3, [sp, #4]
 800df92:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800df96:	4b2c      	ldr	r3, [pc, #176]	; (800e048 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800df98:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800df9c:	4b2b      	ldr	r3, [pc, #172]	; (800e04c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800df9e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800dfa2:	4b2b      	ldr	r3, [pc, #172]	; (800e050 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 800dfa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dfa8:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dfaa:	4a2a      	ldr	r2, [pc, #168]	; (800e054 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800dfac:	4613      	mov	r3, r2
 800dfae:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dfb0:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dfb4:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800dfb8:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800dfba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dfbc:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dfc0:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800dfc4:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dfc6:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dfca:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dfce:	0892      	lsrs	r2, r2, #2
 800dfd0:	0152      	lsls	r2, r2, #5
 800dfd2:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800dfd6:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 800dfda:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800dfde:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 800dfe2:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 800dfe6:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800dfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dfea:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dfec:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800dfee:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 800dff0:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dff2:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dff6:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800dffa:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800dffe:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e002:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800e006:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800e00a:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 800e00e:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800e012:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 800e014:	d1b0      	bne.n	800df78 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 800e016:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 800e018:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800e01a:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 800e01e:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 800e022:	42bb      	cmp	r3, r7
 800e024:	d1a2      	bne.n	800df6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800e026:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 800e028:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800e02c:	9b03      	ldr	r3, [sp, #12]
 800e02e:	441a      	add	r2, r3
 800e030:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 800e032:	9b04      	ldr	r3, [sp, #16]
 800e034:	3b01      	subs	r3, #1
 800e036:	9304      	str	r3, [sp, #16]
 800e038:	d18d      	bne.n	800df56 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800e03a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800e03e:	e76b      	b.n	800df18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 800e040:	20027e4c 	.word	0x20027e4c
 800e044:	20026e4c 	.word	0x20026e4c
 800e048:	20027a4c 	.word	0x20027a4c
 800e04c:	2002764c 	.word	0x2002764c
 800e050:	2002724c 	.word	0x2002724c
 800e054:	080291db 	.word	0x080291db

0800e058 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800e05e:	22c0      	movs	r2, #192	; 0xc0
{  
 800e060:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 800e062:	4654      	mov	r4, sl
{  
 800e064:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800e066:	fbb3 f3f2 	udiv	r3, r3, r2
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e06a:	4a35      	ldr	r2, [pc, #212]	; (800e140 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800e06c:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e06e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e070:	9100      	str	r1, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e072:	6a91      	ldr	r1, [r2, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e074:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e076:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e078:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800e07a:	9b04      	ldr	r3, [sp, #16]
 800e07c:	eb03 020a 	add.w	r2, r3, sl
 800e080:	42a2      	cmp	r2, r4
 800e082:	d803      	bhi.n	800e08c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800e084:	4618      	mov	r0, r3
 800e086:	b009      	add	sp, #36	; 0x24
 800e088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e08c:	00e1      	lsls	r1, r4, #3
 800e08e:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;   
 800e090:	3401      	adds	r4, #1
    pLum = pInBuffer;
 800e092:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e094:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e098:	9a01      	ldr	r2, [sp, #4]
 800e09a:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800e09e:	9a00      	ldr	r2, [sp, #0]
 800e0a0:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;   
 800e0a4:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e0a6:	0052      	lsls	r2, r2, #1
    currentMCU++;   
 800e0a8:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e0aa:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800e0ae:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e0b2:	9905      	ldr	r1, [sp, #20]
 800e0b4:	4291      	cmp	r1, r2
 800e0b6:	d93d      	bls.n	800e134 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 800e0b8:	9907      	ldr	r1, [sp, #28]
 800e0ba:	f106 3eff 	add.w	lr, r6, #4294967295
 800e0be:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 800e0c0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e0c4:	9102      	str	r1, [sp, #8]
 800e0c6:	f105 0110 	add.w	r1, r5, #16
 800e0ca:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800e0cc:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800e0ce:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 800e0d2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800e0d6:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e0da:	4b1a      	ldr	r3, [pc, #104]	; (800e144 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 800e0dc:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e0de:	4f1a      	ldr	r7, [pc, #104]	; (800e148 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 800e0e0:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800e0e2:	4b1a      	ldr	r3, [pc, #104]	; (800e14c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e0e4:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 800e0e8:	440f      	add	r7, r1
 800e0ea:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800e0ee:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800e0f2:	4b17      	ldr	r3, [pc, #92]	; (800e150 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800e0f4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800e0f8:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800e0fa:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800e0fe:	4b15      	ldr	r3, [pc, #84]	; (800e154 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e100:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800e104:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e108:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 800e10a:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800e10c:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800e10e:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 800e112:	eb01 4828 	add.w	r8, r1, r8, asr #16
 800e116:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 800e11a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800e11e:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr = 
 800e122:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 800e126:	429d      	cmp	r5, r3
 800e128:	d1d0      	bne.n	800e0cc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800e12a:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 800e12c:	3608      	adds	r6, #8
          pLum += 8;
 800e12e:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800e132:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 800e134:	9b03      	ldr	r3, [sp, #12]
 800e136:	3b01      	subs	r3, #1
 800e138:	9303      	str	r3, [sp, #12]
 800e13a:	d1ba      	bne.n	800e0b2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800e13c:	30c0      	adds	r0, #192	; 0xc0
 800e13e:	e79c      	b.n	800e07a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800e140:	20027e4c 	.word	0x20027e4c
 800e144:	080291db 	.word	0x080291db
 800e148:	20027a4c 	.word	0x20027a4c
 800e14c:	20026e4c 	.word	0x20026e4c
 800e150:	2002764c 	.word	0x2002764c
 800e154:	2002724c 	.word	0x2002724c

0800e158 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	b085      	sub	sp, #20
 800e15e:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800e160:	0998      	lsrs	r0, r3, #6
{
 800e162:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 800e164:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e168:	491a      	ldr	r1, [pc, #104]	; (800e1d4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 800e16a:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e16c:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e170:	6909      	ldr	r1, [r1, #16]
 800e172:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800e174:	9b03      	ldr	r3, [sp, #12]
 800e176:	4293      	cmp	r3, r2
 800e178:	d802      	bhi.n	800e180 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 800e17a:	b005      	add	sp, #20
 800e17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e180:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 800e182:	46a4      	mov	ip, r4
    currentMCU++;
 800e184:	3201      	adds	r2, #1
 800e186:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e188:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e18c:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800e190:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e194:	005b      	lsls	r3, r3, #1
 800e196:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e19a:	9901      	ldr	r1, [sp, #4]
 800e19c:	4299      	cmp	r1, r3
 800e19e:	d914      	bls.n	800e1ca <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 800e1a0:	9902      	ldr	r1, [sp, #8]
 800e1a2:	46e2      	mov	sl, ip
 800e1a4:	4419      	add	r1, r3
 800e1a6:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 800e1aa:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800e1ae:	08f5      	lsrs	r5, r6, #3
 800e1b0:	08b6      	lsrs	r6, r6, #2
 800e1b2:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 800e1b6:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 800e1ba:	432e      	orrs	r6, r5
 800e1bc:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 800e1c0:	4559      	cmp	r1, fp
 800e1c2:	d1f2      	bne.n	800e1aa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 800e1c4:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 800e1c8:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 800e1ca:	3f01      	subs	r7, #1
 800e1cc:	d1e5      	bne.n	800e19a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800e1ce:	3440      	adds	r4, #64	; 0x40
 800e1d0:	e7d0      	b.n	800e174 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 800e1d2:	bf00      	nop
 800e1d4:	20027e4c 	.word	0x20027e4c

0800e1d8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	b085      	sub	sp, #20
 800e1de:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800e1e0:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800e1e2:	0a18      	lsrs	r0, r3, #8
{  
 800e1e4:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800e1e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e1ea:	4928      	ldr	r1, [pc, #160]	; (800e28c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 800e1ec:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e1ee:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e1f2:	6909      	ldr	r1, [r1, #16]
 800e1f4:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800e1f6:	9b03      	ldr	r3, [sp, #12]
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d802      	bhi.n	800e202 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800e1fc:	b005      	add	sp, #20
 800e1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e202:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 800e204:	46ae      	mov	lr, r5
    currentMCU++;
 800e206:	3201      	adds	r2, #1
 800e208:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800e20c:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e210:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800e214:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800e218:	0049      	lsls	r1, r1, #1
 800e21a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	428b      	cmp	r3, r1
 800e222:	d92c      	bls.n	800e27e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;        
 800e224:	9b02      	ldr	r3, [sp, #8]
 800e226:	4674      	mov	r4, lr
 800e228:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 800e22a:	f106 0310 	add.w	r3, r6, #16
 800e22e:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 800e230:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 800e234:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800e236:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800e23a:	fb13 f308 	smulbb	r3, r3, r8
 800e23e:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800e242:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800e246:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800e24a:	fb13 f308 	smulbb	r3, r3, r8
 800e24e:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800e252:	109b      	asrs	r3, r3, #2
 800e254:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800e256:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800e25a:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 800e25e:	fb1b fb08 	smulbb	fp, fp, r8
 800e262:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800e266:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 800e26a:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800e26c:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr = 
 800e270:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 800e274:	429e      	cmp	r6, r3
 800e276:	d1db      	bne.n	800e230 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 800e278:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800e27c:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 800e27e:	f1bc 0c01 	subs.w	ip, ip, #1
 800e282:	d1cc      	bne.n	800e21e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800e284:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800e288:	e7b5      	b.n	800e1f6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 800e28a:	bf00      	nop
 800e28c:	20027e4c 	.word	0x20027e4c

0800e290 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800e290:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800e292:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800e294:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800e296:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800e298:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800e29c:	4b28      	ldr	r3, [pc, #160]	; (800e340 <JPEG_GetDecodeColorConvertFunc+0xb0>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800e29e:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800e2a0:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800e2a2:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800e2a6:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800e2a8:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800e2aa:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800e2ac:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800e2ae:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800e2b0:	d13c      	bne.n	800e32c <JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800e2b2:	2801      	cmp	r0, #1
 800e2b4:	d122      	bne.n	800e2fc <JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800e2b6:	4823      	ldr	r0, [pc, #140]	; (800e344 <JPEG_GetDecodeColorConvertFunc+0xb4>)
 800e2b8:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800e2ba:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800e2be:	bf18      	it	ne
 800e2c0:	f1c1 0110 	rsbne	r1, r1, #16
 800e2c4:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800e2c6:	2110      	movs	r1, #16
 800e2c8:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 800e2ca:	6219      	str	r1, [r3, #32]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800e2cc:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800e2ce:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800e2d0:	4421      	add	r1, r4
 800e2d2:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800e2d4:	0061      	lsls	r1, r4, #1
 800e2d6:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800e2d8:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800e2dc:	fb00 4411 	mls	r4, r0, r1, r4
 800e2e0:	b104      	cbz	r4, 800e2e4 <JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800e2e2:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800e2e4:	6a1c      	ldr	r4, [r3, #32]
 800e2e6:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800e2ea:	fb04 5510 	mls	r5, r4, r0, r5
 800e2ee:	b105      	cbz	r5, 800e2f2 <JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800e2f0:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800e2f2:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 800e2f4:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800e2f6:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800e2f8:	6011      	str	r1, [r2, #0]
}
 800e2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800e2fc:	2802      	cmp	r0, #2
 800e2fe:	d10b      	bne.n	800e318 <JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800e300:	4811      	ldr	r0, [pc, #68]	; (800e348 <JPEG_GetDecodeColorConvertFunc+0xb8>)
 800e302:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800e304:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800e308:	bf18      	it	ne
 800e30a:	f1c1 0110 	rsbne	r1, r1, #16
 800e30e:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800e310:	2110      	movs	r1, #16
 800e312:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800e314:	2108      	movs	r1, #8
 800e316:	e7d8      	b.n	800e2ca <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800e318:	480c      	ldr	r0, [pc, #48]	; (800e34c <JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800e31a:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800e31c:	f014 0107 	ands.w	r1, r4, #7
 800e320:	d001      	beq.n	800e326 <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800e322:	f1c1 0108 	rsb	r1, r1, #8
 800e326:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800e328:	2108      	movs	r1, #8
 800e32a:	e7cd      	b.n	800e2c8 <JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800e32c:	b90e      	cbnz	r6, 800e332 <JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800e32e:	4808      	ldr	r0, [pc, #32]	; (800e350 <JPEG_GetDecodeColorConvertFunc+0xc0>)
 800e330:	e7f3      	b.n	800e31a <JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800e332:	2e30      	cmp	r6, #48	; 0x30
 800e334:	d101      	bne.n	800e33a <JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800e336:	4807      	ldr	r0, [pc, #28]	; (800e354 <JPEG_GetDecodeColorConvertFunc+0xc4>)
 800e338:	e7ef      	b.n	800e31a <JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 800e33a:	2001      	movs	r0, #1
 800e33c:	e7dd      	b.n	800e2fa <JPEG_GetDecodeColorConvertFunc+0x6a>
 800e33e:	bf00      	nop
 800e340:	20027e4c 	.word	0x20027e4c
 800e344:	0800dcf9 	.word	0x0800dcf9
 800e348:	0800def9 	.word	0x0800def9
 800e34c:	0800e059 	.word	0x0800e059
 800e350:	0800e159 	.word	0x0800e159
 800e354:	0800e1d9 	.word	0x0800e1d9

0800e358 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800e358:	8880      	ldrh	r0, [r0, #4]
 800e35a:	4770      	bx	lr

0800e35c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800e35c:	b570      	push	{r4, r5, r6, lr}
 800e35e:	6803      	ldr	r3, [r0, #0]
 800e360:	460c      	mov	r4, r1
 800e362:	2100      	movs	r1, #0
 800e364:	4605      	mov	r5, r0
 800e366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e368:	4798      	blx	r3
 800e36a:	4606      	mov	r6, r0
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	4628      	mov	r0, r5
 800e370:	1ba4      	subs	r4, r4, r6
 800e372:	6a1b      	ldr	r3, [r3, #32]
 800e374:	b2a4      	uxth	r4, r4
 800e376:	4798      	blx	r3
 800e378:	fbb4 f0f0 	udiv	r0, r4, r0
 800e37c:	bd70      	pop	{r4, r5, r6, pc}

0800e37e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800e37e:	2300      	movs	r3, #0
 800e380:	8083      	strh	r3, [r0, #4]
 800e382:	4770      	bx	lr

0800e384 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800e384:	b510      	push	{r4, lr}
 800e386:	6803      	ldr	r3, [r0, #0]
 800e388:	4604      	mov	r4, r0
 800e38a:	8881      	ldrh	r1, [r0, #4]
 800e38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38e:	4798      	blx	r3
 800e390:	88a3      	ldrh	r3, [r4, #4]
 800e392:	3301      	adds	r3, #1
 800e394:	80a3      	strh	r3, [r4, #4]
 800e396:	bd10      	pop	{r4, pc}

0800e398 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800e398:	6803      	ldr	r3, [r0, #0]
 800e39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39c:	4718      	bx	r3

0800e39e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800e39e:	4770      	bx	lr

0800e3a0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800e3a0:	4a02      	ldr	r2, [pc, #8]	; (800e3ac <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800e3a2:	6002      	str	r2, [r0, #0]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	8082      	strh	r2, [r0, #4]
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	080294e4 	.word	0x080294e4

0800e3b0 <_ZN8touchgfx9Container13getFirstChildEv>:
 800e3b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e3b2:	4770      	bx	lr

0800e3b4 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 800e3b4:	30dc      	adds	r0, #220	; 0xdc
 800e3b6:	4770      	bx	lr

0800e3b8 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 800e3b8:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 800e3bc:	4770      	bx	lr

0800e3be <_ZNK8touchgfx12TextProgress8getColorEv>:
 800e3be:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 800e3c2:	4770      	bx	lr

0800e3c4 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 800e3c4:	2902      	cmp	r1, #2
 800e3c6:	b570      	push	{r4, r5, r6, lr}
 800e3c8:	bf28      	it	cs
 800e3ca:	2102      	movcs	r1, #2
 800e3cc:	6803      	ldr	r3, [r0, #0]
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	f8a0 1112 	strh.w	r1, [r0, #274]	; 0x112
 800e3d4:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800e3d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e3dc:	4798      	blx	r3
 800e3de:	462b      	mov	r3, r5
 800e3e0:	4601      	mov	r1, r0
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3e8:	4718      	bx	r3

0800e3ea <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 800e3ea:	f8b0 0112 	ldrh.w	r0, [r0, #274]	; 0x112
 800e3ee:	4770      	bx	lr

0800e3f0 <_ZN8touchgfx12TextProgressD1Ev>:
 800e3f0:	4770      	bx	lr

0800e3f2 <_ZN8touchgfx12TextProgressD0Ev>:
 800e3f2:	b510      	push	{r4, lr}
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	f44f 718a 	mov.w	r1, #276	; 0x114
 800e3fa:	f016 fcb8 	bl	8024d6e <_ZdlPvj>
 800e3fe:	4620      	mov	r0, r4
 800e400:	bd10      	pop	{r4, pc}

0800e402 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 800e402:	30b4      	adds	r0, #180	; 0xb4
 800e404:	f002 bf2a 	b.w	801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

0800e408 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	4604      	mov	r4, r0
 800e40c:	460d      	mov	r5, r1
 800e40e:	f000 fa47 	bl	800e8a0 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800e412:	f884 50ea 	strb.w	r5, [r4, #234]	; 0xea
 800e416:	bd38      	pop	{r3, r4, r5, pc}

0800e418 <_ZN8touchgfx12TextProgress8setValueEi>:
 800e418:	b570      	push	{r4, r5, r6, lr}
 800e41a:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 800e41e:	4604      	mov	r4, r0
 800e420:	460e      	mov	r6, r1
 800e422:	b086      	sub	sp, #24
 800e424:	4628      	mov	r0, r5
 800e426:	f003 f969 	bl	80116fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 800e42a:	4631      	mov	r1, r6
 800e42c:	4620      	mov	r0, r4
 800e42e:	f504 7680 	add.w	r6, r4, #256	; 0x100
 800e432:	f000 fa86 	bl	800e942 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800e436:	4b1c      	ldr	r3, [pc, #112]	; (800e4a8 <_ZN8touchgfx12TextProgress8setValueEi+0x90>)
 800e438:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e43c:	ab06      	add	r3, sp, #24
 800e43e:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800e442:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
 800e446:	aa06      	add	r2, sp, #24
 800e448:	4620      	mov	r0, r4
 800e44a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e44e:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800e452:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e456:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e45a:	0089      	lsls	r1, r1, #2
 800e45c:	b289      	uxth	r1, r1
 800e45e:	f000 facd 	bl	800e9fc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800e462:	f8b4 1112 	ldrh.w	r1, [r4, #274]	; 0x112
 800e466:	b1b9      	cbz	r1, 800e498 <_ZN8touchgfx12TextProgress8setValueEi+0x80>
 800e468:	ab06      	add	r3, sp, #24
 800e46a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e46e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 800e472:	fb90 f3f2 	sdiv	r3, r0, r2
 800e476:	fb02 0213 	mls	r2, r2, r3, r0
 800e47a:	4630      	mov	r0, r6
 800e47c:	e9cd 1200 	strd	r1, r2, [sp]
 800e480:	4a0a      	ldr	r2, [pc, #40]	; (800e4ac <_ZN8touchgfx12TextProgress8setValueEi+0x94>)
 800e482:	2108      	movs	r1, #8
 800e484:	f008 fe6c 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800e488:	4628      	mov	r0, r5
 800e48a:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
 800e48e:	b006      	add	sp, #24
 800e490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e494:	f003 b932 	b.w	80116fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 800e498:	4603      	mov	r3, r0
 800e49a:	4a05      	ldr	r2, [pc, #20]	; (800e4b0 <_ZN8touchgfx12TextProgress8setValueEi+0x98>)
 800e49c:	2108      	movs	r1, #8
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f008 fe5e 	bl	8017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800e4a4:	e7f0      	b.n	800e488 <_ZN8touchgfx12TextProgress8setValueEi+0x70>
 800e4a6:	bf00      	nop
 800e4a8:	080262c8 	.word	0x080262c8
 800e4ac:	08029510 	.word	0x08029510
 800e4b0:	08028d0c 	.word	0x08028d0c

0800e4b4 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 800e4b4:	b510      	push	{r4, lr}
 800e4b6:	6803      	ldr	r3, [r0, #0]
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e4be:	4798      	blx	r3
 800e4c0:	b120      	cbz	r0, 800e4cc <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x18>
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4c8:	f000 bba1 	b.w	800ec0e <_ZNK8touchgfx9Container17invalidateContentEv>
 800e4cc:	bd10      	pop	{r4, pc}

0800e4ce <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 800e4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d2:	461d      	mov	r5, r3
 800e4d4:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
 800e4d8:	2300      	movs	r3, #0
 800e4da:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800e4de:	4691      	mov	r9, r2
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800e4e6:	4688      	mov	r8, r1
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	4629      	mov	r1, r5
 800e4ec:	f7f6 fc88 	bl	8004e00 <_ZN8touchgfx8TextArea8setWidthEs>
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	f7f6 fc96 	bl	8004e24 <_ZN8touchgfx8TextArea9setHeightEs>
 800e4f8:	9608      	str	r6, [sp, #32]
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	464a      	mov	r2, r9
 800e4fe:	4641      	mov	r1, r8
 800e500:	4620      	mov	r0, r4
 800e502:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e506:	f000 babc 	b.w	800ea82 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>
	...

0800e50c <_ZN8touchgfx12TextProgressC1Ev>:
 800e50c:	b510      	push	{r4, lr}
 800e50e:	4604      	mov	r4, r0
 800e510:	f000 fae4 	bl	800eadc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800e514:	2201      	movs	r2, #1
 800e516:	4b25      	ldr	r3, [pc, #148]	; (800e5ac <_ZN8touchgfx12TextProgressC1Ev+0xa0>)
 800e518:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800e51c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e520:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
 800e524:	4a22      	ldr	r2, [pc, #136]	; (800e5b0 <_ZN8touchgfx12TextProgressC1Ev+0xa4>)
 800e526:	6023      	str	r3, [r4, #0]
 800e528:	2300      	movs	r3, #0
 800e52a:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 800e52e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e532:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
 800e536:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 800e53a:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
 800e53e:	f8a4 20f4 	strh.w	r2, [r4, #244]	; 0xf4
 800e542:	f8a4 20f6 	strh.w	r2, [r4, #246]	; 0xf6
 800e546:	4a1b      	ldr	r2, [pc, #108]	; (800e5b4 <_ZN8touchgfx12TextProgressC1Ev+0xa8>)
 800e548:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
 800e54c:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 800e550:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 800e554:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 800e558:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 800e55c:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800e560:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800e564:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 800e568:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 800e56c:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
 800e570:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
 800e574:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
 800e578:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800e57c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800e580:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
 800e584:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 800e588:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 800e58c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800e590:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 800e594:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 800e598:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
 800e59c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 800e5a0:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
 800e5a4:	f000 fafa 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	bd10      	pop	{r4, pc}
 800e5ac:	08029520 	.word	0x08029520
 800e5b0:	080281b4 	.word	0x080281b4
 800e5b4:	08028900 	.word	0x08028900

0800e5b8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 800e5b8:	f8c0 10e0 	str.w	r1, [r0, #224]	; 0xe0
 800e5bc:	4770      	bx	lr

0800e5be <_ZNK8touchgfx11BoxProgress8getColorEv>:
 800e5be:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 800e5c2:	4770      	bx	lr

0800e5c4 <_ZN8touchgfx11BoxProgressD1Ev>:
 800e5c4:	4770      	bx	lr

0800e5c6 <_ZN8touchgfx11BoxProgressD0Ev>:
 800e5c6:	b510      	push	{r4, lr}
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	21e4      	movs	r1, #228	; 0xe4
 800e5cc:	f016 fbcf 	bl	8024d6e <_ZdlPvj>
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	bd10      	pop	{r4, pc}

0800e5d4 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	460d      	mov	r5, r1
 800e5da:	f000 f961 	bl	800e8a0 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800e5de:	f884 50de 	strb.w	r5, [r4, #222]	; 0xde
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}

0800e5e4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 800e5e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e5e8:	4617      	mov	r7, r2
 800e5ea:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	460e      	mov	r6, r1
 800e5f4:	4698      	mov	r8, r3
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	9500      	str	r5, [sp, #0]
 800e5fa:	30b8      	adds	r0, #184	; 0xb8
 800e5fc:	f7f6 fcb5 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 800e600:	4643      	mov	r3, r8
 800e602:	463a      	mov	r2, r7
 800e604:	4631      	mov	r1, r6
 800e606:	4620      	mov	r0, r4
 800e608:	9508      	str	r5, [sp, #32]
 800e60a:	b002      	add	sp, #8
 800e60c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e610:	f000 ba37 	b.w	800ea82 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800e614 <_ZN8touchgfx11BoxProgress8setValueEi>:
 800e614:	b530      	push	{r4, r5, lr}
 800e616:	4604      	mov	r4, r0
 800e618:	b085      	sub	sp, #20
 800e61a:	f000 f992 	bl	800e942 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800e61e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 800e622:	2b03      	cmp	r3, #3
 800e624:	d814      	bhi.n	800e650 <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 800e626:	e8df f003 	tbb	[pc, r3]
 800e62a:	0202      	.short	0x0202
 800e62c:	1010      	.short	0x1010
 800e62e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800e632:	4620      	mov	r0, r4
 800e634:	f000 f9e2 	bl	800e9fc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800e638:	b200      	sxth	r0, r0
 800e63a:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 800e63e:	2b03      	cmp	r3, #3
 800e640:	d830      	bhi.n	800e6a4 <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 800e642:	e8df f003 	tbb	[pc, r3]
 800e646:	3107      	.short	0x3107
 800e648:	6442      	.short	0x6442
 800e64a:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800e64e:	e7f0      	b.n	800e632 <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 800e650:	2000      	movs	r0, #0
 800e652:	e7f2      	b.n	800e63a <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 800e654:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 800e658:	2200      	movs	r2, #0
 800e65a:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	; 0xc0
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	4611      	mov	r1, r2
 800e662:	4603      	mov	r3, r0
 800e664:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800e668:	f7f6 fc7f 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 800e66c:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	; 0xc0
 800e670:	4629      	mov	r1, r5
 800e672:	429d      	cmp	r5, r3
 800e674:	eba5 0503 	sub.w	r5, r5, r3
 800e678:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	; 0xc2
 800e67c:	bfa8      	it	ge
 800e67e:	4619      	movge	r1, r3
 800e680:	2d00      	cmp	r5, #0
 800e682:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e686:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e68a:	f04f 0100 	mov.w	r1, #0
 800e68e:	bfb8      	it	lt
 800e690:	426d      	neglt	r5, r5
 800e692:	f8ad 100a 	strh.w	r1, [sp, #10]
 800e696:	f8ad 500c 	strh.w	r5, [sp, #12]
 800e69a:	a902      	add	r1, sp, #8
 800e69c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6a0:	f006 fd6a 	bl	8015178 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 800e6a4:	b005      	add	sp, #20
 800e6a6:	bd30      	pop	{r4, r5, pc}
 800e6a8:	8921      	ldrh	r1, [r4, #8]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 800e6b0:	1a09      	subs	r1, r1, r0
 800e6b2:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	; 0xbc
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	b209      	sxth	r1, r1
 800e6bc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800e6c0:	f7f6 fc53 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 800e6c4:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	; 0xbc
 800e6c8:	e7d2      	b.n	800e670 <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 800e6d0:	9000      	str	r0, [sp, #0]
 800e6d2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	; 0xc2
 800e6dc:	f7f6 fc45 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 800e6e0:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	; 0xc2
 800e6e4:	2100      	movs	r1, #0
 800e6e6:	429d      	cmp	r5, r3
 800e6e8:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	; 0xc0
 800e6ec:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	eba5 0503 	sub.w	r5, r5, r3
 800e6f6:	bfa8      	it	ge
 800e6f8:	4619      	movge	r1, r3
 800e6fa:	f8ad 200c 	strh.w	r2, [sp, #12]
 800e6fe:	2d00      	cmp	r5, #0
 800e700:	f8ad 100a 	strh.w	r1, [sp, #10]
 800e704:	bfb8      	it	lt
 800e706:	426d      	neglt	r5, r5
 800e708:	f8ad 500e 	strh.w	r5, [sp, #14]
 800e70c:	e7c5      	b.n	800e69a <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 800e70e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e712:	2100      	movs	r1, #0
 800e714:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 800e718:	1a12      	subs	r2, r2, r0
 800e71a:	9000      	str	r0, [sp, #0]
 800e71c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800e720:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	; 0xbe
 800e724:	b212      	sxth	r2, r2
 800e726:	f7f6 fc20 	bl	8004f6a <_ZN8touchgfx8Drawable11setPositionEssss>
 800e72a:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	; 0xbe
 800e72e:	e7d9      	b.n	800e6e4 <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>

0800e730 <_ZN8touchgfx11BoxProgressC1Ev>:
 800e730:	b510      	push	{r4, lr}
 800e732:	4604      	mov	r4, r0
 800e734:	f000 f85a 	bl	800e7ec <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 800e738:	2201      	movs	r2, #1
 800e73a:	4b17      	ldr	r3, [pc, #92]	; (800e798 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 800e73c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e740:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 800e744:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
 800e748:	4a14      	ldr	r2, [pc, #80]	; (800e79c <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 800e74a:	6023      	str	r3, [r4, #0]
 800e74c:	2300      	movs	r3, #0
 800e74e:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 800e752:	22ff      	movs	r2, #255	; 0xff
 800e754:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 800e758:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 800e75c:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 800e760:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800e764:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800e768:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 800e76c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 800e770:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 800e774:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800e778:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
 800e77c:	f8a4 30da 	strh.w	r3, [r4, #218]	; 0xda
 800e780:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 800e784:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
 800e788:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800e78c:	e9c4 3333 	strd	r3, r3, [r4, #204]	; 0xcc
 800e790:	f000 fa04 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e794:	4620      	mov	r0, r4
 800e796:	bd10      	pop	{r4, pc}
 800e798:	0802960c 	.word	0x0802960c
 800e79c:	08029c38 	.word	0x08029c38

0800e7a0 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 800e7a0:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
 800e7a4:	4770      	bx	lr

0800e7a6 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 800e7a6:	4770      	bx	lr

0800e7a8 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	21b8      	movs	r1, #184	; 0xb8
 800e7ae:	f016 fade 	bl	8024d6e <_ZdlPvj>
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	bd10      	pop	{r4, pc}

0800e7b6 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 800e7b6:	b570      	push	{r4, r5, r6, lr}
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 800e7be:	3058      	adds	r0, #88	; 0x58
 800e7c0:	f006 fc88 	bl	80150d4 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e7c4:	6823      	ldr	r3, [r4, #0]
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800e7cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e7d0:	4798      	blx	r3
 800e7d2:	462b      	mov	r3, r5
 800e7d4:	4601      	mov	r1, r0
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7dc:	4718      	bx	r3

0800e7de <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 800e7de:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 800e7e2:	428b      	cmp	r3, r1
 800e7e4:	d001      	beq.n	800e7ea <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 800e7e6:	f7ff bfe6 	b.w	800e7b6 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 800e7ea:	4770      	bx	lr

0800e7ec <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 800e7ec:	b510      	push	{r4, lr}
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	f000 f974 	bl	800eadc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800e7f4:	4b03      	ldr	r3, [pc, #12]	; (800e804 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	6023      	str	r3, [r4, #0]
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800e800:	bd10      	pop	{r4, pc}
 800e802:	bf00      	nop
 800e804:	080296f0 	.word	0x080296f0

0800e808 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800e808:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 800e80c:	4770      	bx	lr

0800e80e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800e80e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 800e812:	4770      	bx	lr

0800e814 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800e814:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 800e818:	4770      	bx	lr

0800e81a <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800e81a:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 800e81e:	4770      	bx	lr

0800e820 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800e820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e822:	461e      	mov	r6, r3
 800e824:	6803      	ldr	r3, [r0, #0]
 800e826:	460f      	mov	r7, r1
 800e828:	4604      	mov	r4, r0
 800e82a:	4615      	mov	r5, r2
 800e82c:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 800e830:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800e834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e838:	4798      	blx	r3
 800e83a:	b93e      	cbnz	r6, 800e84c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800e83c:	1bed      	subs	r5, r5, r7
 800e83e:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 800e842:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800e846:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 800e84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e84c:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 800e850:	e7f7      	b.n	800e842 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800e852 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800e852:	b510      	push	{r4, lr}
 800e854:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800e858:	600c      	str	r4, [r1, #0]
 800e85a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800e85e:	6011      	str	r1, [r2, #0]
 800e860:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800e864:	801a      	strh	r2, [r3, #0]
 800e866:	9b02      	ldr	r3, [sp, #8]
 800e868:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 800e86c:	801a      	strh	r2, [r3, #0]
 800e86e:	bd10      	pop	{r4, pc}

0800e870 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800e870:	b510      	push	{r4, lr}
 800e872:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800e876:	600c      	str	r4, [r1, #0]
 800e878:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800e87c:	6011      	str	r1, [r2, #0]
 800e87e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800e882:	801a      	strh	r2, [r3, #0]
 800e884:	bd10      	pop	{r4, pc}

0800e886 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800e886:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800e88a:	600b      	str	r3, [r1, #0]
 800e88c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e890:	6013      	str	r3, [r2, #0]
 800e892:	4770      	bx	lr

0800e894 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800e894:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 800e898:	4770      	bx	lr

0800e89a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800e89a:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800e89e:	4770      	bx	lr

0800e8a0 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800e8a0:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800e8a4:	4770      	bx	lr

0800e8a6 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800e8a6:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800e8aa:	4770      	bx	lr

0800e8ac <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800e8ac:	4770      	bx	lr

0800e8ae <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800e8ae:	b510      	push	{r4, lr}
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	21b4      	movs	r1, #180	; 0xb4
 800e8b4:	f016 fa5b 	bl	8024d6e <_ZdlPvj>
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	bd10      	pop	{r4, pc}

0800e8bc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	4616      	mov	r6, r2
 800e8c6:	428d      	cmp	r5, r1
 800e8c8:	bfb8      	it	lt
 800e8ca:	460d      	movlt	r5, r1
 800e8cc:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800e8d0:	428d      	cmp	r5, r1
 800e8d2:	bfa8      	it	ge
 800e8d4:	460d      	movge	r5, r1
 800e8d6:	b99a      	cbnz	r2, 800e900 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800e8d8:	6803      	ldr	r3, [r0, #0]
 800e8da:	4629      	mov	r1, r5
 800e8dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e8e0:	4798      	blx	r3
 800e8e2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e8e6:	b358      	cbz	r0, 800e940 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 800e8e8:	6803      	ldr	r3, [r0, #0]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	4798      	blx	r3
 800e8ee:	b338      	cbz	r0, 800e940 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 800e8f0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	6803      	ldr	r3, [r0, #0]
 800e8f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	4718      	bx	r3
 800e900:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800e904:	2b00      	cmp	r3, #0
 800e906:	dd07      	ble.n	800e918 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 800e908:	f005 fc10 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 800e90c:	4621      	mov	r1, r4
 800e90e:	f005 fc38 	bl	8014182 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 800e912:	2300      	movs	r3, #0
 800e914:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800e918:	6823      	ldr	r3, [r4, #0]
 800e91a:	4620      	mov	r0, r4
 800e91c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e920:	4798      	blx	r3
 800e922:	2300      	movs	r3, #0
 800e924:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 800e928:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800e92c:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 800e930:	f005 fbfc 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 800e934:	4621      	mov	r1, r4
 800e936:	f005 fbff 	bl	8014138 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 800e93a:	2301      	movs	r3, #1
 800e93c:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800e940:	bd70      	pop	{r4, r5, r6, pc}

0800e942 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800e942:	b510      	push	{r4, lr}
 800e944:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800e948:	4604      	mov	r4, r0
 800e94a:	4299      	cmp	r1, r3
 800e94c:	bfb8      	it	lt
 800e94e:	4619      	movlt	r1, r3
 800e950:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e954:	4299      	cmp	r1, r3
 800e956:	bfa8      	it	ge
 800e958:	4619      	movge	r1, r3
 800e95a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800e95e:	428b      	cmp	r3, r1
 800e960:	d010      	beq.n	800e984 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800e962:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 800e966:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800e96a:	b158      	cbz	r0, 800e984 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800e96c:	6803      	ldr	r3, [r0, #0]
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	4798      	blx	r3
 800e972:	b138      	cbz	r0, 800e984 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800e974:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800e978:	4621      	mov	r1, r4
 800e97a:	6803      	ldr	r3, [r0, #0]
 800e97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	4718      	bx	r3
 800e984:	bd10      	pop	{r4, pc}

0800e986 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800e986:	b570      	push	{r4, r5, r6, lr}
 800e988:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800e98c:	4604      	mov	r4, r0
 800e98e:	b3a3      	cbz	r3, 800e9fa <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800e990:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800e994:	2100      	movs	r1, #0
 800e996:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800e99a:	3001      	adds	r0, #1
 800e99c:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 800e9a0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 800e9a4:	b280      	uxth	r0, r0
 800e9a6:	1ad2      	subs	r2, r2, r3
 800e9a8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800e9ac:	b212      	sxth	r2, r2
 800e9ae:	47a8      	blx	r5
 800e9b0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800e9b4:	6823      	ldr	r3, [r4, #0]
 800e9b6:	4401      	add	r1, r0
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e9be:	4798      	blx	r3
 800e9c0:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	db18      	blt.n	800e9fa <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800e9c8:	2500      	movs	r5, #0
 800e9ca:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800e9ce:	f005 fbad 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 800e9d2:	4621      	mov	r1, r4
 800e9d4:	f005 fbd5 	bl	8014182 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 800e9d8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e9dc:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800e9e0:	b158      	cbz	r0, 800e9fa <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800e9e2:	6803      	ldr	r3, [r0, #0]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	4798      	blx	r3
 800e9e8:	b138      	cbz	r0, 800e9fa <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800e9ea:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	6803      	ldr	r3, [r0, #0]
 800e9f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	4718      	bx	r3
 800e9fa:	bd70      	pop	{r4, r5, r6, pc}

0800e9fc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800e9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9fe:	4604      	mov	r4, r0
 800ea00:	460d      	mov	r5, r1
 800ea02:	b1a9      	cbz	r1, 800ea30 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800ea04:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 800ea08:	ab01      	add	r3, sp, #4
 800ea0a:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 800ea0e:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800ea12:	1b89      	subs	r1, r1, r6
 800ea14:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 800ea18:	1a12      	subs	r2, r2, r0
 800ea1a:	1a38      	subs	r0, r7, r0
 800ea1c:	f006 fd1f 	bl	801545e <_ZN8touchgfx6muldivElllRl>
 800ea20:	4629      	mov	r1, r5
 800ea22:	ab01      	add	r3, sp, #4
 800ea24:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 800ea28:	4430      	add	r0, r6
 800ea2a:	f006 fd18 	bl	801545e <_ZN8touchgfx6muldivElllRl>
 800ea2e:	b285      	uxth	r5, r0
 800ea30:	4628      	mov	r0, r5
 800ea32:	b003      	add	sp, #12
 800ea34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ea38 <_ZN8touchgfx8DrawableC1Ev>:
 800ea38:	4a0a      	ldr	r2, [pc, #40]	; (800ea64 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800ea3a:	6002      	str	r2, [r0, #0]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	8082      	strh	r2, [r0, #4]
 800ea40:	80c2      	strh	r2, [r0, #6]
 800ea42:	8102      	strh	r2, [r0, #8]
 800ea44:	8142      	strh	r2, [r0, #10]
 800ea46:	8182      	strh	r2, [r0, #12]
 800ea48:	81c2      	strh	r2, [r0, #14]
 800ea4a:	8202      	strh	r2, [r0, #16]
 800ea4c:	8242      	strh	r2, [r0, #18]
 800ea4e:	61c2      	str	r2, [r0, #28]
 800ea50:	8402      	strh	r2, [r0, #32]
 800ea52:	8442      	strh	r2, [r0, #34]	; 0x22
 800ea54:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800ea58:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800ea62:	4770      	bx	lr
 800ea64:	08029eb8 	.word	0x08029eb8

0800ea68 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800ea68:	b570      	push	{r4, r5, r6, lr}
 800ea6a:	6803      	ldr	r3, [r0, #0]
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	4615      	mov	r5, r2
 800ea70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea72:	4798      	blx	r3
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	4629      	mov	r1, r5
 800ea78:	4620      	mov	r0, r4
 800ea7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea80:	4718      	bx	r3

0800ea82 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800ea82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea86:	4604      	mov	r4, r0
 800ea88:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800ea8c:	4698      	mov	r8, r3
 800ea8e:	460e      	mov	r6, r1
 800ea90:	4615      	mov	r5, r2
 800ea92:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 800ea96:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	463a      	mov	r2, r7
 800ea9e:	3058      	adds	r0, #88	; 0x58
 800eaa0:	f7ff ffe2 	bl	800ea68 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800eaa4:	4446      	add	r6, r8
 800eaa6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800eaaa:	443d      	add	r5, r7
 800eaac:	42b3      	cmp	r3, r6
 800eaae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800eab2:	bfb8      	it	lt
 800eab4:	8126      	strhlt	r6, [r4, #8]
 800eab6:	42ab      	cmp	r3, r5
 800eab8:	bfb8      	it	lt
 800eaba:	8165      	strhlt	r5, [r4, #10]
 800eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eac0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800eac0:	b510      	push	{r4, lr}
 800eac2:	4604      	mov	r4, r0
 800eac4:	302c      	adds	r0, #44	; 0x2c
 800eac6:	f002 ff1f 	bl	8011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800eaca:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 800eace:	4620      	mov	r0, r4
 800ead0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800ead4:	f7ff ffc8 	bl	800ea68 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800ead8:	bd10      	pop	{r4, pc}
	...

0800eadc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800eadc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eade:	4604      	mov	r4, r0
 800eae0:	2500      	movs	r5, #0
 800eae2:	f7ff ffa9 	bl	800ea38 <_ZN8touchgfx8DrawableC1Ev>
 800eae6:	4b24      	ldr	r3, [pc, #144]	; (800eb78 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800eae8:	4626      	mov	r6, r4
 800eaea:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800eaee:	2226      	movs	r2, #38	; 0x26
 800eaf0:	4629      	mov	r1, r5
 800eaf2:	62a5      	str	r5, [r4, #40]	; 0x28
 800eaf4:	f846 3b2c 	str.w	r3, [r6], #44
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f8ad 7004 	strh.w	r7, [sp, #4]
 800eafe:	f016 fba3 	bl	8025248 <memset>
 800eb02:	4630      	mov	r0, r6
 800eb04:	f7ff ff98 	bl	800ea38 <_ZN8touchgfx8DrawableC1Ev>
 800eb08:	a902      	add	r1, sp, #8
 800eb0a:	4b1c      	ldr	r3, [pc, #112]	; (800eb7c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 800eb12:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800eb16:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb18:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800eb1c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800eb20:	f002 fef2 	bl	8011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800eb24:	4638      	mov	r0, r7
 800eb26:	f7ff ff87 	bl	800ea38 <_ZN8touchgfx8DrawableC1Ev>
 800eb2a:	4b15      	ldr	r3, [pc, #84]	; (800eb80 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	4630      	mov	r0, r6
 800eb30:	65a3      	str	r3, [r4, #88]	; 0x58
 800eb32:	2364      	movs	r3, #100	; 0x64
 800eb34:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800eb38:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800eb3c:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 800eb40:	4b10      	ldr	r3, [pc, #64]	; (800eb84 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800eb42:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 800eb46:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800eb4a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 800eb4e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800eb52:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 800eb56:	f7f6 f923 	bl	8004da0 <_ZN8touchgfx8Drawable4setXEs>
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	f7f6 f921 	bl	8004da4 <_ZN8touchgfx8Drawable4setYEs>
 800eb62:	4631      	mov	r1, r6
 800eb64:	4620      	mov	r0, r4
 800eb66:	f000 f819 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	f000 f815 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800eb72:	4620      	mov	r0, r4
 800eb74:	b003      	add	sp, #12
 800eb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb78:	080297cc 	.word	0x080297cc
 800eb7c:	08029df0 	.word	0x08029df0
 800eb80:	080298a0 	.word	0x080298a0
 800eb84:	08015b55 	.word	0x08015b55

0800eb88 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800eb88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	b12b      	cbz	r3, 800eb9a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800eb8e:	b920      	cbnz	r0, 800eb9a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800eb90:	1a5a      	subs	r2, r3, r1
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	4250      	negs	r0, r2
 800eb96:	4150      	adcs	r0, r2
 800eb98:	e7f8      	b.n	800eb8c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800eb9a:	4770      	bx	lr

0800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	6148      	str	r0, [r1, #20]
 800eba0:	618b      	str	r3, [r1, #24]
 800eba2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800eba4:	b913      	cbnz	r3, 800ebac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800eba6:	6281      	str	r1, [r0, #40]	; 0x28
 800eba8:	4770      	bx	lr
 800ebaa:	4613      	mov	r3, r2
 800ebac:	699a      	ldr	r2, [r3, #24]
 800ebae:	2a00      	cmp	r2, #0
 800ebb0:	d1fb      	bne.n	800ebaa <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ebb2:	6199      	str	r1, [r3, #24]
 800ebb4:	4770      	bx	lr

0800ebb6 <_ZN8touchgfx9Container9removeAllEv>:
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ebba:	b123      	cbz	r3, 800ebc6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ebbc:	6999      	ldr	r1, [r3, #24]
 800ebbe:	6281      	str	r1, [r0, #40]	; 0x28
 800ebc0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ebc4:	e7f8      	b.n	800ebb8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ebc6:	4770      	bx	lr

0800ebc8 <_ZN8touchgfx9Container6unlinkEv>:
 800ebc8:	2300      	movs	r3, #0
 800ebca:	6283      	str	r3, [r0, #40]	; 0x28
 800ebcc:	4770      	bx	lr

0800ebce <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ebce:	2200      	movs	r2, #0
 800ebd0:	8002      	strh	r2, [r0, #0]
 800ebd2:	8042      	strh	r2, [r0, #2]
 800ebd4:	8082      	strh	r2, [r0, #4]
 800ebd6:	80c2      	strh	r2, [r0, #6]
 800ebd8:	4770      	bx	lr

0800ebda <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ebda:	b570      	push	{r4, r5, r6, lr}
 800ebdc:	460d      	mov	r5, r1
 800ebde:	4616      	mov	r6, r2
 800ebe0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ebe2:	b13c      	cbz	r4, 800ebf4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ebe4:	6823      	ldr	r3, [r4, #0]
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	4632      	mov	r2, r6
 800ebea:	4629      	mov	r1, r5
 800ebec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebee:	4798      	blx	r3
 800ebf0:	69a4      	ldr	r4, [r4, #24]
 800ebf2:	e7f6      	b.n	800ebe2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ebf4:	bd70      	pop	{r4, r5, r6, pc}

0800ebf6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ebf6:	b538      	push	{r3, r4, r5, lr}
 800ebf8:	460d      	mov	r5, r1
 800ebfa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ebfc:	b134      	cbz	r4, 800ec0c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800ebfe:	682b      	ldr	r3, [r5, #0]
 800ec00:	4621      	mov	r1, r4
 800ec02:	4628      	mov	r0, r5
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	4798      	blx	r3
 800ec08:	69a4      	ldr	r4, [r4, #24]
 800ec0a:	e7f7      	b.n	800ebfc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ec0c:	bd38      	pop	{r3, r4, r5, pc}

0800ec0e <_ZNK8touchgfx9Container17invalidateContentEv>:
 800ec0e:	b510      	push	{r4, lr}
 800ec10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ec12:	b12c      	cbz	r4, 800ec20 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	4620      	mov	r0, r4
 800ec18:	699b      	ldr	r3, [r3, #24]
 800ec1a:	4798      	blx	r3
 800ec1c:	69a4      	ldr	r4, [r4, #24]
 800ec1e:	e7f8      	b.n	800ec12 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800ec20:	bd10      	pop	{r4, pc}

0800ec22 <_ZN8touchgfx9ContainerD1Ev>:
 800ec22:	4770      	bx	lr

0800ec24 <_ZN8touchgfx9ContainerD0Ev>:
 800ec24:	b510      	push	{r4, lr}
 800ec26:	4604      	mov	r4, r0
 800ec28:	212c      	movs	r1, #44	; 0x2c
 800ec2a:	f016 f8a0 	bl	8024d6e <_ZdlPvj>
 800ec2e:	4620      	mov	r0, r4
 800ec30:	bd10      	pop	{r4, pc}

0800ec32 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ec32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ec34:	b19b      	cbz	r3, 800ec5e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ec36:	428b      	cmp	r3, r1
 800ec38:	d109      	bne.n	800ec4e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ec3a:	699a      	ldr	r2, [r3, #24]
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	6159      	str	r1, [r3, #20]
 800ec40:	6282      	str	r2, [r0, #40]	; 0x28
 800ec42:	b902      	cbnz	r2, 800ec46 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ec44:	4770      	bx	lr
 800ec46:	6199      	str	r1, [r3, #24]
 800ec48:	4770      	bx	lr
 800ec4a:	4613      	mov	r3, r2
 800ec4c:	b13a      	cbz	r2, 800ec5e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ec4e:	699a      	ldr	r2, [r3, #24]
 800ec50:	428a      	cmp	r2, r1
 800ec52:	d1fa      	bne.n	800ec4a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ec54:	698a      	ldr	r2, [r1, #24]
 800ec56:	619a      	str	r2, [r3, #24]
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ec5e:	4770      	bx	lr

0800ec60 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ec60:	b410      	push	{r4}
 800ec62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ec64:	4604      	mov	r4, r0
 800ec66:	b92b      	cbnz	r3, 800ec74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ec68:	6803      	ldr	r3, [r0, #0]
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec72:	4718      	bx	r3
 800ec74:	b941      	cbnz	r1, 800ec88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ec76:	6193      	str	r3, [r2, #24]
 800ec78:	6282      	str	r2, [r0, #40]	; 0x28
 800ec7a:	6154      	str	r4, [r2, #20]
 800ec7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec80:	4770      	bx	lr
 800ec82:	4603      	mov	r3, r0
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d0f9      	beq.n	800ec7c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ec88:	4299      	cmp	r1, r3
 800ec8a:	6998      	ldr	r0, [r3, #24]
 800ec8c:	d1f9      	bne.n	800ec82 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ec8e:	6190      	str	r0, [r2, #24]
 800ec90:	618a      	str	r2, [r1, #24]
 800ec92:	e7f2      	b.n	800ec7a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800ec94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ec94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec98:	461f      	mov	r7, r3
 800ec9a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ec9e:	460d      	mov	r5, r1
 800eca0:	4616      	mov	r6, r2
 800eca2:	b103      	cbz	r3, 800eca6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800eca4:	6038      	str	r0, [r7, #0]
 800eca6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800eca8:	b314      	cbz	r4, 800ecf0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ecaa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ecae:	b1eb      	cbz	r3, 800ecec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ecb0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ecb4:	428d      	cmp	r5, r1
 800ecb6:	db19      	blt.n	800ecec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ecb8:	b289      	uxth	r1, r1
 800ecba:	8923      	ldrh	r3, [r4, #8]
 800ecbc:	440b      	add	r3, r1
 800ecbe:	b21b      	sxth	r3, r3
 800ecc0:	429d      	cmp	r5, r3
 800ecc2:	da13      	bge.n	800ecec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ecc4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ecc8:	4296      	cmp	r6, r2
 800ecca:	db0f      	blt.n	800ecec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800eccc:	b292      	uxth	r2, r2
 800ecce:	8963      	ldrh	r3, [r4, #10]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	b21b      	sxth	r3, r3
 800ecd4:	429e      	cmp	r6, r3
 800ecd6:	da09      	bge.n	800ecec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ecd8:	6823      	ldr	r3, [r4, #0]
 800ecda:	1ab2      	subs	r2, r6, r2
 800ecdc:	1a69      	subs	r1, r5, r1
 800ecde:	4620      	mov	r0, r4
 800ece0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800ece4:	b212      	sxth	r2, r2
 800ece6:	463b      	mov	r3, r7
 800ece8:	b209      	sxth	r1, r1
 800ecea:	47c0      	blx	r8
 800ecec:	69a4      	ldr	r4, [r4, #24]
 800ecee:	e7db      	b.n	800eca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ecf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ecf4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800ecf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf8:	4c6d      	ldr	r4, [pc, #436]	; (800eeb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800ecfa:	b0a1      	sub	sp, #132	; 0x84
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	6824      	ldr	r4, [r4, #0]
 800ed00:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800ed02:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800ed06:	2400      	movs	r4, #0
 800ed08:	9303      	str	r3, [sp, #12]
 800ed0a:	802c      	strh	r4, [r5, #0]
 800ed0c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800ed0e:	802c      	strh	r4, [r5, #0]
 800ed10:	601c      	str	r4, [r3, #0]
 800ed12:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ed16:	f7ff ffbd 	bl	800ec94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ed1a:	f1b9 0f03 	cmp.w	r9, #3
 800ed1e:	f340 80c1 	ble.w	800eea4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800ed22:	4631      	mov	r1, r6
 800ed24:	a80c      	add	r0, sp, #48	; 0x30
 800ed26:	f006 fa71 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ed2a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800ed2e:	9306      	str	r3, [sp, #24]
 800ed30:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800ed34:	9307      	str	r3, [sp, #28]
 800ed36:	9b03      	ldr	r3, [sp, #12]
 800ed38:	f8d3 a000 	ldr.w	sl, [r3]
 800ed3c:	f1ba 0f00 	cmp.w	sl, #0
 800ed40:	f000 80b3 	beq.w	800eeaa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800ed44:	4651      	mov	r1, sl
 800ed46:	a810      	add	r0, sp, #64	; 0x40
 800ed48:	f006 fa60 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ed4c:	2002      	movs	r0, #2
 800ed4e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800ed52:	9b01      	ldr	r3, [sp, #4]
 800ed54:	9a06      	ldr	r2, [sp, #24]
 800ed56:	fb91 f1f0 	sdiv	r1, r1, r0
 800ed5a:	189d      	adds	r5, r3, r2
 800ed5c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800ed60:	9a07      	ldr	r2, [sp, #28]
 800ed62:	4419      	add	r1, r3
 800ed64:	9b02      	ldr	r3, [sp, #8]
 800ed66:	4413      	add	r3, r2
 800ed68:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800ed6c:	1a6d      	subs	r5, r5, r1
 800ed6e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ed72:	fb92 f2f0 	sdiv	r2, r2, r0
 800ed76:	440a      	add	r2, r1
 800ed78:	1a9b      	subs	r3, r3, r2
 800ed7a:	435b      	muls	r3, r3
 800ed7c:	fb05 3505 	mla	r5, r5, r5, r3
 800ed80:	4f4c      	ldr	r7, [pc, #304]	; (800eeb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800ed82:	ac10      	add	r4, sp, #64	; 0x40
 800ed84:	f1b9 0f0c 	cmp.w	r9, #12
 800ed88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ed8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ed8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed90:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ed92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed94:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ed98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ed9c:	f04f 0303 	mov.w	r3, #3
 800eda0:	bfd8      	it	le
 800eda2:	f109 32ff 	addle.w	r2, r9, #4294967295
 800eda6:	f04f 0400 	mov.w	r4, #0
 800edaa:	f8cd 9000 	str.w	r9, [sp]
 800edae:	bfcc      	ite	gt
 800edb0:	4698      	movgt	r8, r3
 800edb2:	fb92 f8f3 	sdivle	r8, r2, r3
 800edb6:	1c63      	adds	r3, r4, #1
 800edb8:	aa10      	add	r2, sp, #64	; 0x40
 800edba:	f004 0401 	and.w	r4, r4, #1
 800edbe:	f04f 0b00 	mov.w	fp, #0
 800edc2:	9308      	str	r3, [sp, #32]
 800edc4:	9b00      	ldr	r3, [sp, #0]
 800edc6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800edca:	fb93 f3f8 	sdiv	r3, r3, r8
 800edce:	3404      	adds	r4, #4
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	9304      	str	r3, [sp, #16]
 800edd4:	9a04      	ldr	r2, [sp, #16]
 800edd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800edda:	fb13 f302 	smulbb	r3, r3, r2
 800edde:	9a01      	ldr	r2, [sp, #4]
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	1899      	adds	r1, r3, r2
 800ede4:	9305      	str	r3, [sp, #20]
 800ede6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800edea:	b209      	sxth	r1, r1
 800edec:	4299      	cmp	r1, r3
 800edee:	db4d      	blt.n	800ee8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800edf0:	8932      	ldrh	r2, [r6, #8]
 800edf2:	4413      	add	r3, r2
 800edf4:	b21b      	sxth	r3, r3
 800edf6:	4299      	cmp	r1, r3
 800edf8:	da48      	bge.n	800ee8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800edfa:	9b04      	ldr	r3, [sp, #16]
 800edfc:	6827      	ldr	r7, [r4, #0]
 800edfe:	fb17 f703 	smulbb	r7, r7, r3
 800ee02:	9b02      	ldr	r3, [sp, #8]
 800ee04:	b2bf      	uxth	r7, r7
 800ee06:	18fa      	adds	r2, r7, r3
 800ee08:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ee0c:	b212      	sxth	r2, r2
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	db3c      	blt.n	800ee8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee12:	8970      	ldrh	r0, [r6, #10]
 800ee14:	4403      	add	r3, r0
 800ee16:	b21b      	sxth	r3, r3
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	da37      	bge.n	800ee8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	4630      	mov	r0, r6
 800ee20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee22:	ab0b      	add	r3, sp, #44	; 0x2c
 800ee24:	f7ff ff36 	bl	800ec94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ee28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee2a:	b37a      	cbz	r2, 800ee8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee2c:	4552      	cmp	r2, sl
 800ee2e:	d02d      	beq.n	800ee8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee30:	4611      	mov	r1, r2
 800ee32:	a80e      	add	r0, sp, #56	; 0x38
 800ee34:	9209      	str	r2, [sp, #36]	; 0x24
 800ee36:	f006 f9e9 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ee3a:	f04f 0e02 	mov.w	lr, #2
 800ee3e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800ee42:	9a06      	ldr	r2, [sp, #24]
 800ee44:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800ee48:	9b01      	ldr	r3, [sp, #4]
 800ee4a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800ee4e:	4413      	add	r3, r2
 800ee50:	9a07      	ldr	r2, [sp, #28]
 800ee52:	fb91 f1fe 	sdiv	r1, r1, lr
 800ee56:	fb9c fcfe 	sdiv	ip, ip, lr
 800ee5a:	4401      	add	r1, r0
 800ee5c:	1a58      	subs	r0, r3, r1
 800ee5e:	9b02      	ldr	r3, [sp, #8]
 800ee60:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800ee64:	4413      	add	r3, r2
 800ee66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee68:	448c      	add	ip, r1
 800ee6a:	eba3 030c 	sub.w	r3, r3, ip
 800ee6e:	435b      	muls	r3, r3
 800ee70:	fb00 3300 	mla	r3, r0, r0, r3
 800ee74:	42ab      	cmp	r3, r5
 800ee76:	d208      	bcs.n	800ee8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800ee78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee7a:	461d      	mov	r5, r3
 800ee7c:	9803      	ldr	r0, [sp, #12]
 800ee7e:	6001      	str	r1, [r0, #0]
 800ee80:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ee82:	9805      	ldr	r0, [sp, #20]
 800ee84:	8008      	strh	r0, [r1, #0]
 800ee86:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ee88:	800f      	strh	r7, [r1, #0]
 800ee8a:	4692      	mov	sl, r2
 800ee8c:	f10b 0b01 	add.w	fp, fp, #1
 800ee90:	3408      	adds	r4, #8
 800ee92:	f1bb 0f04 	cmp.w	fp, #4
 800ee96:	d19d      	bne.n	800edd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800ee98:	9b00      	ldr	r3, [sp, #0]
 800ee9a:	9c08      	ldr	r4, [sp, #32]
 800ee9c:	444b      	add	r3, r9
 800ee9e:	4544      	cmp	r4, r8
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	d188      	bne.n	800edb6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800eea4:	b021      	add	sp, #132	; 0x84
 800eea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeaa:	f04f 35ff 	mov.w	r5, #4294967295
 800eeae:	e767      	b.n	800ed80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800eeb0:	20027e98 	.word	0x20027e98
 800eeb4:	080262d4 	.word	0x080262d4

0800eeb8 <_ZN8touchgfx4RectaNERKS0_>:
 800eeb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eebc:	f9b1 7000 	ldrsh.w	r7, [r1]
 800eec0:	888c      	ldrh	r4, [r1, #4]
 800eec2:	f9b0 9000 	ldrsh.w	r9, [r0]
 800eec6:	443c      	add	r4, r7
 800eec8:	b2a4      	uxth	r4, r4
 800eeca:	fa0f f884 	sxth.w	r8, r4
 800eece:	45c1      	cmp	r9, r8
 800eed0:	da2f      	bge.n	800ef32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800eed2:	8882      	ldrh	r2, [r0, #4]
 800eed4:	444a      	add	r2, r9
 800eed6:	b292      	uxth	r2, r2
 800eed8:	fa0f fe82 	sxth.w	lr, r2
 800eedc:	4577      	cmp	r7, lr
 800eede:	da28      	bge.n	800ef32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800eee0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800eee4:	88cb      	ldrh	r3, [r1, #6]
 800eee6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800eeea:	442b      	add	r3, r5
 800eeec:	b21b      	sxth	r3, r3
 800eeee:	429e      	cmp	r6, r3
 800eef0:	da1f      	bge.n	800ef32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800eef2:	88c3      	ldrh	r3, [r0, #6]
 800eef4:	4433      	add	r3, r6
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	fa0f fc83 	sxth.w	ip, r3
 800eefc:	4565      	cmp	r5, ip
 800eefe:	da18      	bge.n	800ef32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ef00:	454f      	cmp	r7, r9
 800ef02:	bfb8      	it	lt
 800ef04:	464f      	movlt	r7, r9
 800ef06:	42b5      	cmp	r5, r6
 800ef08:	bfb8      	it	lt
 800ef0a:	4635      	movlt	r5, r6
 800ef0c:	45f0      	cmp	r8, lr
 800ef0e:	bfd8      	it	le
 800ef10:	4622      	movle	r2, r4
 800ef12:	1bd2      	subs	r2, r2, r7
 800ef14:	8082      	strh	r2, [r0, #4]
 800ef16:	884a      	ldrh	r2, [r1, #2]
 800ef18:	88c9      	ldrh	r1, [r1, #6]
 800ef1a:	8007      	strh	r7, [r0, #0]
 800ef1c:	440a      	add	r2, r1
 800ef1e:	8045      	strh	r5, [r0, #2]
 800ef20:	b292      	uxth	r2, r2
 800ef22:	b211      	sxth	r1, r2
 800ef24:	458c      	cmp	ip, r1
 800ef26:	bfa8      	it	ge
 800ef28:	4613      	movge	r3, r2
 800ef2a:	1b5b      	subs	r3, r3, r5
 800ef2c:	80c3      	strh	r3, [r0, #6]
 800ef2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef32:	2300      	movs	r3, #0
 800ef34:	8003      	strh	r3, [r0, #0]
 800ef36:	8043      	strh	r3, [r0, #2]
 800ef38:	8083      	strh	r3, [r0, #4]
 800ef3a:	80c3      	strh	r3, [r0, #6]
 800ef3c:	e7f7      	b.n	800ef2e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ef3e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	dd06      	ble.n	800ef54 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800ef46:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	bfcc      	ite	gt
 800ef4e:	2000      	movgt	r0, #0
 800ef50:	2001      	movle	r0, #1
 800ef52:	4770      	bx	lr
 800ef54:	2001      	movs	r0, #1
 800ef56:	4770      	bx	lr

0800ef58 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ef58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	4604      	mov	r4, r0
 800ef60:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800ef62:	8003      	strh	r3, [r0, #0]
 800ef64:	8043      	strh	r3, [r0, #2]
 800ef66:	8083      	strh	r3, [r0, #4]
 800ef68:	80c3      	strh	r3, [r0, #6]
 800ef6a:	2d00      	cmp	r5, #0
 800ef6c:	d040      	beq.n	800eff0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ef6e:	1d28      	adds	r0, r5, #4
 800ef70:	f7ff ffe5 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef74:	b988      	cbnz	r0, 800ef9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ef76:	4620      	mov	r0, r4
 800ef78:	f7ff ffe1 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef7c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ef80:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ef84:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ef88:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ef8c:	b138      	cbz	r0, 800ef9e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ef8e:	8022      	strh	r2, [r4, #0]
 800ef90:	8063      	strh	r3, [r4, #2]
 800ef92:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ef96:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ef9a:	69ad      	ldr	r5, [r5, #24]
 800ef9c:	e7e5      	b.n	800ef6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ef9e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800efa2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800efa6:	4290      	cmp	r0, r2
 800efa8:	4607      	mov	r7, r0
 800efaa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800efae:	460e      	mov	r6, r1
 800efb0:	bfa8      	it	ge
 800efb2:	4617      	movge	r7, r2
 800efb4:	4299      	cmp	r1, r3
 800efb6:	4472      	add	r2, lr
 800efb8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800efbc:	bfa8      	it	ge
 800efbe:	461e      	movge	r6, r3
 800efc0:	4440      	add	r0, r8
 800efc2:	4471      	add	r1, lr
 800efc4:	4463      	add	r3, ip
 800efc6:	b200      	sxth	r0, r0
 800efc8:	8027      	strh	r7, [r4, #0]
 800efca:	b212      	sxth	r2, r2
 800efcc:	8066      	strh	r6, [r4, #2]
 800efce:	b209      	sxth	r1, r1
 800efd0:	b21b      	sxth	r3, r3
 800efd2:	4290      	cmp	r0, r2
 800efd4:	bfac      	ite	ge
 800efd6:	ebc7 0200 	rsbge	r2, r7, r0
 800efda:	ebc7 0202 	rsblt	r2, r7, r2
 800efde:	4299      	cmp	r1, r3
 800efe0:	bfac      	ite	ge
 800efe2:	ebc6 0301 	rsbge	r3, r6, r1
 800efe6:	ebc6 0303 	rsblt	r3, r6, r3
 800efea:	80a2      	strh	r2, [r4, #4]
 800efec:	80e3      	strh	r3, [r4, #6]
 800efee:	e7d4      	b.n	800ef9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800eff0:	4620      	mov	r0, r4
 800eff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eff6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800eff6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800effa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800effe:	b383      	cbz	r3, 800f062 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f000:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f002:	b374      	cbz	r4, 800f062 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f004:	f9b1 5000 	ldrsh.w	r5, [r1]
 800f008:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800f00c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800f010:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800f014:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f018:	b303      	cbz	r3, 800f05c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f01a:	4668      	mov	r0, sp
 800f01c:	1d21      	adds	r1, r4, #4
 800f01e:	f8ad 5000 	strh.w	r5, [sp]
 800f022:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f026:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f02a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800f02e:	f7ff ff43 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 800f032:	4668      	mov	r0, sp
 800f034:	f7ff ff83 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f038:	b980      	cbnz	r0, 800f05c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f03a:	f8bd 3000 	ldrh.w	r3, [sp]
 800f03e:	4669      	mov	r1, sp
 800f040:	88a2      	ldrh	r2, [r4, #4]
 800f042:	4620      	mov	r0, r4
 800f044:	1a9b      	subs	r3, r3, r2
 800f046:	88e2      	ldrh	r2, [r4, #6]
 800f048:	f8ad 3000 	strh.w	r3, [sp]
 800f04c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f050:	1a9b      	subs	r3, r3, r2
 800f052:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	4798      	blx	r3
 800f05c:	69a4      	ldr	r4, [r4, #24]
 800f05e:	2c00      	cmp	r4, #0
 800f060:	d1d8      	bne.n	800f014 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800f062:	b002      	add	sp, #8
 800f064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f068 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800f068:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f06a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f06e:	460d      	mov	r5, r1
 800f070:	4616      	mov	r6, r2
 800f072:	b323      	cbz	r3, 800f0be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f074:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f076:	b314      	cbz	r4, 800f0be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f078:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f07c:	b1eb      	cbz	r3, 800f0ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f07e:	6828      	ldr	r0, [r5, #0]
 800f080:	466b      	mov	r3, sp
 800f082:	6869      	ldr	r1, [r5, #4]
 800f084:	c303      	stmia	r3!, {r0, r1}
 800f086:	4668      	mov	r0, sp
 800f088:	1d21      	adds	r1, r4, #4
 800f08a:	f7ff ff15 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 800f08e:	4668      	mov	r0, sp
 800f090:	f7ff ff55 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f094:	b988      	cbnz	r0, 800f0ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f096:	f8bd 3000 	ldrh.w	r3, [sp]
 800f09a:	4669      	mov	r1, sp
 800f09c:	88a2      	ldrh	r2, [r4, #4]
 800f09e:	4620      	mov	r0, r4
 800f0a0:	1a9b      	subs	r3, r3, r2
 800f0a2:	88e2      	ldrh	r2, [r4, #6]
 800f0a4:	f8ad 3000 	strh.w	r3, [sp]
 800f0a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f0ac:	1a9b      	subs	r3, r3, r2
 800f0ae:	4632      	mov	r2, r6
 800f0b0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f0b4:	6823      	ldr	r3, [r4, #0]
 800f0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0b8:	4798      	blx	r3
 800f0ba:	69a4      	ldr	r4, [r4, #24]
 800f0bc:	e7db      	b.n	800f076 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800f0be:	b002      	add	sp, #8
 800f0c0:	bd70      	pop	{r4, r5, r6, pc}

0800f0c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800f0c2:	6803      	ldr	r3, [r0, #0]
 800f0c4:	b513      	push	{r0, r1, r4, lr}
 800f0c6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	e9cd 3300 	strd	r3, r3, [sp]
 800f0d0:	466b      	mov	r3, sp
 800f0d2:	47a0      	blx	r4
 800f0d4:	b002      	add	sp, #8
 800f0d6:	bd10      	pop	{r4, pc}

0800f0d8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800f0d8:	2301      	movs	r3, #1
 800f0da:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800f0de:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800f0e2:	4770      	bx	lr

0800f0e4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800f0ea:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800f0ee:	4770      	bx	lr

0800f0f0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800f0f0:	6843      	ldr	r3, [r0, #4]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	725a      	strb	r2, [r3, #9]
 800f0f6:	6840      	ldr	r0, [r0, #4]
 800f0f8:	6803      	ldr	r3, [r0, #0]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	4718      	bx	r3

0800f0fe <_ZN8touchgfx3HAL8flushDMAEv>:
 800f0fe:	6840      	ldr	r0, [r0, #4]
 800f100:	6803      	ldr	r3, [r0, #0]
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	4718      	bx	r3

0800f106 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800f106:	b530      	push	{r4, r5, lr}
 800f108:	b08b      	sub	sp, #44	; 0x2c
 800f10a:	6804      	ldr	r4, [r0, #0]
 800f10c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800f110:	9509      	str	r5, [sp, #36]	; 0x24
 800f112:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800f116:	9508      	str	r5, [sp, #32]
 800f118:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800f11c:	9507      	str	r5, [sp, #28]
 800f11e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800f122:	9506      	str	r5, [sp, #24]
 800f124:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800f128:	9505      	str	r5, [sp, #20]
 800f12a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800f12e:	9504      	str	r5, [sp, #16]
 800f130:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800f134:	9503      	str	r5, [sp, #12]
 800f136:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800f13a:	9502      	str	r5, [sp, #8]
 800f13c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800f140:	e9cd 3500 	strd	r3, r5, [sp]
 800f144:	4613      	mov	r3, r2
 800f146:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800f148:	2200      	movs	r2, #0
 800f14a:	47a0      	blx	r4
 800f14c:	b00b      	add	sp, #44	; 0x2c
 800f14e:	bd30      	pop	{r4, r5, pc}

0800f150 <_ZN8touchgfx3HAL10beginFrameEv>:
 800f150:	4b04      	ldr	r3, [pc, #16]	; (800f164 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	b123      	cbz	r3, 800f160 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800f156:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800f15a:	f080 0001 	eor.w	r0, r0, #1
 800f15e:	4770      	bx	lr
 800f160:	2001      	movs	r0, #1
 800f162:	4770      	bx	lr
 800f164:	20027e96 	.word	0x20027e96

0800f168 <_ZN8touchgfx3HAL8endFrameEv>:
 800f168:	b510      	push	{r4, lr}
 800f16a:	4604      	mov	r4, r0
 800f16c:	6840      	ldr	r0, [r0, #4]
 800f16e:	6803      	ldr	r3, [r0, #0]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	4798      	blx	r3
 800f174:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800f178:	b113      	cbz	r3, 800f180 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800f17a:	2301      	movs	r3, #1
 800f17c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800f180:	bd10      	pop	{r4, pc}

0800f182 <_ZN8touchgfx3HAL10initializeEv>:
 800f182:	b510      	push	{r4, lr}
 800f184:	4604      	mov	r4, r0
 800f186:	f7f2 fe0f 	bl	8001da8 <_ZN8touchgfx10OSWrappers10initializeEv>
 800f18a:	6860      	ldr	r0, [r4, #4]
 800f18c:	6803      	ldr	r3, [r0, #0]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	4798      	blx	r3
 800f192:	68e0      	ldr	r0, [r4, #12]
 800f194:	6803      	ldr	r3, [r0, #0]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	4798      	blx	r3
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	4620      	mov	r0, r4
 800f19e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1a4:	4718      	bx	r3
	...

0800f1a8 <_ZN8touchgfx3HAL4tickEv>:
 800f1a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f1aa:	6803      	ldr	r3, [r0, #0]
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	4d5b      	ldr	r5, [pc, #364]	; (800f31c <_ZN8touchgfx3HAL4tickEv+0x174>)
 800f1b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f1b4:	4798      	blx	r3
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	f000 8095 	beq.w	800f2e6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800f1bc:	2001      	movs	r0, #1
 800f1be:	2600      	movs	r6, #0
 800f1c0:	f7f1 fdec 	bl	8000d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f1c4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800f1c8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800f1cc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f1d0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800f1d4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800f1d8:	b133      	cbz	r3, 800f1e8 <_ZN8touchgfx3HAL4tickEv+0x40>
 800f1da:	6823      	ldr	r3, [r4, #0]
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f1e2:	4798      	blx	r3
 800f1e4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800f1e8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800f1ec:	2601      	movs	r6, #1
 800f1ee:	6862      	ldr	r2, [r4, #4]
 800f1f0:	f083 0301 	eor.w	r3, r3, #1
 800f1f4:	702e      	strb	r6, [r5, #0]
 800f1f6:	7253      	strb	r3, [r2, #9]
 800f1f8:	f004 ff98 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 800f1fc:	6803      	ldr	r3, [r0, #0]
 800f1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f200:	4798      	blx	r3
 800f202:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800f206:	b90b      	cbnz	r3, 800f20c <_ZN8touchgfx3HAL4tickEv+0x64>
 800f208:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800f20c:	f004 ff8e 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 800f210:	6803      	ldr	r3, [r0, #0]
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	4798      	blx	r3
 800f216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f218:	6803      	ldr	r3, [r0, #0]
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	4798      	blx	r3
 800f21e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800f222:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800f226:	3b01      	subs	r3, #1
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f22e:	b10a      	cbz	r2, 800f234 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1eb      	bne.n	800f20c <_ZN8touchgfx3HAL4tickEv+0x64>
 800f234:	4a3a      	ldr	r2, [pc, #232]	; (800f320 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800f236:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800f23a:	7813      	ldrb	r3, [r2, #0]
 800f23c:	3301      	adds	r3, #1
 800f23e:	b25b      	sxtb	r3, r3
 800f240:	4299      	cmp	r1, r3
 800f242:	7013      	strb	r3, [r2, #0]
 800f244:	dc10      	bgt.n	800f268 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800f246:	2300      	movs	r3, #0
 800f248:	68e0      	ldr	r0, [r4, #12]
 800f24a:	a902      	add	r1, sp, #8
 800f24c:	7013      	strb	r3, [r2, #0]
 800f24e:	aa03      	add	r2, sp, #12
 800f250:	6803      	ldr	r3, [r0, #0]
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	4798      	blx	r3
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	2800      	cmp	r0, #0
 800f25a:	d050      	beq.n	800f2fe <_ZN8touchgfx3HAL4tickEv+0x156>
 800f25c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f260:	4620      	mov	r0, r4
 800f262:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f266:	4798      	blx	r3
 800f268:	2300      	movs	r3, #0
 800f26a:	6960      	ldr	r0, [r4, #20]
 800f26c:	f88d 3007 	strb.w	r3, [sp, #7]
 800f270:	b158      	cbz	r0, 800f28a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800f272:	6803      	ldr	r3, [r0, #0]
 800f274:	f10d 0107 	add.w	r1, sp, #7
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	4798      	blx	r3
 800f27c:	b128      	cbz	r0, 800f28a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800f27e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f280:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f284:	6803      	ldr	r3, [r0, #0]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	4798      	blx	r3
 800f28a:	f104 001c 	add.w	r0, r4, #28
 800f28e:	f013 fd4f 	bl	8022d30 <_ZN8touchgfx8Gestures4tickEv>
 800f292:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800f296:	b30b      	cbz	r3, 800f2dc <_ZN8touchgfx3HAL4tickEv+0x134>
 800f298:	6920      	ldr	r0, [r4, #16]
 800f29a:	6803      	ldr	r3, [r0, #0]
 800f29c:	691b      	ldr	r3, [r3, #16]
 800f29e:	4798      	blx	r3
 800f2a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	b903      	cbnz	r3, 800f2a8 <_ZN8touchgfx3HAL4tickEv+0x100>
 800f2a6:	6720      	str	r0, [r4, #112]	; 0x70
 800f2a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f2aa:	4a1e      	ldr	r2, [pc, #120]	; (800f324 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800f2ac:	1af3      	subs	r3, r6, r3
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d914      	bls.n	800f2dc <_ZN8touchgfx3HAL4tickEv+0x134>
 800f2b2:	6920      	ldr	r0, [r4, #16]
 800f2b4:	6803      	ldr	r3, [r0, #0]
 800f2b6:	699b      	ldr	r3, [r3, #24]
 800f2b8:	4798      	blx	r3
 800f2ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f2bc:	2264      	movs	r2, #100	; 0x64
 800f2be:	1af3      	subs	r3, r6, r3
 800f2c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2c4:	fbb0 f0f3 	udiv	r0, r0, r3
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	dc1d      	bgt.n	800f308 <_ZN8touchgfx3HAL4tickEv+0x160>
 800f2cc:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800f2d0:	6920      	ldr	r0, [r4, #16]
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	6803      	ldr	r3, [r0, #0]
 800f2d6:	69db      	ldr	r3, [r3, #28]
 800f2d8:	4798      	blx	r3
 800f2da:	6726      	str	r6, [r4, #112]	; 0x70
 800f2dc:	f004 ff26 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 800f2e0:	6803      	ldr	r3, [r0, #0]
 800f2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e4:	4798      	blx	r3
 800f2e6:	6823      	ldr	r3, [r4, #0]
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f2ee:	4798      	blx	r3
 800f2f0:	2001      	movs	r0, #1
 800f2f2:	f7f1 fd83 	bl	8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	702b      	strb	r3, [r5, #0]
 800f2fa:	b004      	add	sp, #16
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}
 800f2fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f302:	4620      	mov	r0, r4
 800f304:	4798      	blx	r3
 800f306:	e7af      	b.n	800f268 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800f308:	2863      	cmp	r0, #99	; 0x63
 800f30a:	bfcb      	itete	gt
 800f30c:	2300      	movgt	r3, #0
 800f30e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800f312:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800f316:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800f31a:	e7d9      	b.n	800f2d0 <_ZN8touchgfx3HAL4tickEv+0x128>
 800f31c:	20027e9c 	.word	0x20027e9c
 800f320:	20027e9d 	.word	0x20027e9d
 800f324:	05f5e100 	.word	0x05f5e100

0800f328 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f328:	f7f2 bd6e 	b.w	8001e08 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f32c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f32c:	6581      	str	r1, [r0, #88]	; 0x58
 800f32e:	301c      	adds	r0, #28
 800f330:	f013 bcfc 	b.w	8022d2c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f334 <_ZN8touchgfx3HAL5touchEll>:
 800f334:	b530      	push	{r4, r5, lr}
 800f336:	b087      	sub	sp, #28
 800f338:	4604      	mov	r4, r0
 800f33a:	a804      	add	r0, sp, #16
 800f33c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f340:	f004 fc54 	bl	8013bec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800f344:	9b04      	ldr	r3, [sp, #16]
 800f346:	a906      	add	r1, sp, #24
 800f348:	a803      	add	r0, sp, #12
 800f34a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f34e:	9b05      	ldr	r3, [sp, #20]
 800f350:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800f354:	f004 fc9c 	bl	8013c90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800f358:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800f35c:	f104 001c 	add.w	r0, r4, #28
 800f360:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f364:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f368:	b189      	cbz	r1, 800f38e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800f36a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	4613      	mov	r3, r2
 800f372:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800f376:	462a      	mov	r2, r5
 800f378:	f013 fce8 	bl	8022d4c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800f37c:	b128      	cbz	r0, 800f38a <_ZN8touchgfx3HAL5touchEll+0x56>
 800f37e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f382:	65e3      	str	r3, [r4, #92]	; 0x5c
 800f384:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f388:	6623      	str	r3, [r4, #96]	; 0x60
 800f38a:	b007      	add	sp, #28
 800f38c:	bd30      	pop	{r4, r5, pc}
 800f38e:	f013 fd1d 	bl	8022dcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f392:	2301      	movs	r3, #1
 800f394:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800f398:	e7f1      	b.n	800f37e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800f39a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800f39a:	b510      	push	{r4, lr}
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d046      	beq.n	800f42e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f3a0:	ea81 0002 	eor.w	r0, r1, r2
 800f3a4:	07c4      	lsls	r4, r0, #31
 800f3a6:	d508      	bpl.n	800f3ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800f3a8:	440b      	add	r3, r1
 800f3aa:	3a01      	subs	r2, #1
 800f3ac:	428b      	cmp	r3, r1
 800f3ae:	d93e      	bls.n	800f42e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f3b0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f3b4:	f801 0b01 	strb.w	r0, [r1], #1
 800f3b8:	e7f8      	b.n	800f3ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800f3ba:	07d0      	lsls	r0, r2, #31
 800f3bc:	bf42      	ittt	mi
 800f3be:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800f3c2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f3c6:	f801 0b01 	strbmi.w	r0, [r1], #1
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d911      	bls.n	800f3f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f3ce:	ea81 0402 	eor.w	r4, r1, r2
 800f3d2:	4610      	mov	r0, r2
 800f3d4:	07a4      	lsls	r4, r4, #30
 800f3d6:	d022      	beq.n	800f41e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800f3d8:	f023 0401 	bic.w	r4, r3, #1
 800f3dc:	440c      	add	r4, r1
 800f3de:	428c      	cmp	r4, r1
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	d904      	bls.n	800f3ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800f3e4:	8812      	ldrh	r2, [r2, #0]
 800f3e6:	3002      	adds	r0, #2
 800f3e8:	f821 2b02 	strh.w	r2, [r1], #2
 800f3ec:	e7f7      	b.n	800f3de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	f023 0003 	bic.w	r0, r3, #3
 800f3f6:	4408      	add	r0, r1
 800f3f8:	4288      	cmp	r0, r1
 800f3fa:	4614      	mov	r4, r2
 800f3fc:	d904      	bls.n	800f408 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800f3fe:	6824      	ldr	r4, [r4, #0]
 800f400:	3204      	adds	r2, #4
 800f402:	f841 4b04 	str.w	r4, [r1], #4
 800f406:	e7f7      	b.n	800f3f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800f408:	f003 0303 	and.w	r3, r3, #3
 800f40c:	3a01      	subs	r2, #1
 800f40e:	440b      	add	r3, r1
 800f410:	428b      	cmp	r3, r1
 800f412:	d90c      	bls.n	800f42e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f414:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f418:	f801 0b01 	strb.w	r0, [r1], #1
 800f41c:	e7f8      	b.n	800f410 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800f41e:	0790      	lsls	r0, r2, #30
 800f420:	d0e7      	beq.n	800f3f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f422:	f832 0b02 	ldrh.w	r0, [r2], #2
 800f426:	3b02      	subs	r3, #2
 800f428:	f821 0b02 	strh.w	r0, [r1], #2
 800f42c:	e7e1      	b.n	800f3f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f42e:	2001      	movs	r0, #1
 800f430:	bd10      	pop	{r4, pc}

0800f432 <_ZN8touchgfx3HAL7noTouchEv>:
 800f432:	b510      	push	{r4, lr}
 800f434:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800f438:	4604      	mov	r4, r0
 800f43a:	b153      	cbz	r3, 800f452 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800f43c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800f440:	2101      	movs	r1, #1
 800f442:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800f446:	301c      	adds	r0, #28
 800f448:	f013 fcc0 	bl	8022dcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f44c:	2300      	movs	r3, #0
 800f44e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800f452:	bd10      	pop	{r4, pc}

0800f454 <_ZN8touchgfx3HAL3lcdEv>:
 800f454:	4b04      	ldr	r3, [pc, #16]	; (800f468 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f45c:	b10a      	cbz	r2, 800f462 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800f45e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f460:	b900      	cbnz	r0, 800f464 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800f462:	6898      	ldr	r0, [r3, #8]
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop
 800f468:	20027e98 	.word	0x20027e98

0800f46c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800f46c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f470:	b085      	sub	sp, #20
 800f472:	4604      	mov	r4, r0
 800f474:	2000      	movs	r0, #0
 800f476:	4699      	mov	r9, r3
 800f478:	ad04      	add	r5, sp, #16
 800f47a:	460f      	mov	r7, r1
 800f47c:	4690      	mov	r8, r2
 800f47e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f482:	69a0      	ldr	r0, [r4, #24]
 800f484:	6806      	ldr	r6, [r0, #0]
 800f486:	9501      	str	r5, [sp, #4]
 800f488:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800f48c:	9500      	str	r5, [sp, #0]
 800f48e:	6835      	ldr	r5, [r6, #0]
 800f490:	47a8      	blx	r5
 800f492:	4d10      	ldr	r5, [pc, #64]	; (800f4d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800f494:	4606      	mov	r6, r0
 800f496:	f8a5 9000 	strh.w	r9, [r5]
 800f49a:	f7ff ffdb 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800f49e:	6803      	ldr	r3, [r0, #0]
 800f4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a2:	4798      	blx	r3
 800f4a4:	b128      	cbz	r0, 800f4b2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800f4a6:	2801      	cmp	r0, #1
 800f4a8:	d00b      	beq.n	800f4c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800f4aa:	4630      	mov	r0, r6
 800f4ac:	b005      	add	sp, #20
 800f4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4b2:	882b      	ldrh	r3, [r5, #0]
 800f4b4:	fb08 7203 	mla	r2, r8, r3, r7
 800f4b8:	9b03      	ldr	r3, [sp, #12]
 800f4ba:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800f4be:	63e3      	str	r3, [r4, #60]	; 0x3c
 800f4c0:	e7f3      	b.n	800f4aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f4c2:	882a      	ldrh	r2, [r5, #0]
 800f4c4:	9b03      	ldr	r3, [sp, #12]
 800f4c6:	fb08 7202 	mla	r2, r8, r2, r7
 800f4ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f4ce:	1a9a      	subs	r2, r3, r2
 800f4d0:	63e2      	str	r2, [r4, #60]	; 0x3c
 800f4d2:	e7ea      	b.n	800f4aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f4d4:	20027e92 	.word	0x20027e92

0800f4d8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800f4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4da:	b08b      	sub	sp, #44	; 0x2c
 800f4dc:	4617      	mov	r7, r2
 800f4de:	4604      	mov	r4, r0
 800f4e0:	460e      	mov	r6, r1
 800f4e2:	461d      	mov	r5, r3
 800f4e4:	f7ff ffb6 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800f4e8:	6803      	ldr	r3, [r0, #0]
 800f4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ec:	4798      	blx	r3
 800f4ee:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800f4f2:	9007      	str	r0, [sp, #28]
 800f4f4:	4631      	mov	r1, r6
 800f4f6:	6822      	ldr	r2, [r4, #0]
 800f4f8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f4fc:	4b0c      	ldr	r3, [pc, #48]	; (800f530 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800f4fe:	4620      	mov	r0, r4
 800f500:	881b      	ldrh	r3, [r3, #0]
 800f502:	9306      	str	r3, [sp, #24]
 800f504:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800f508:	9305      	str	r3, [sp, #20]
 800f50a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f50e:	9304      	str	r3, [sp, #16]
 800f510:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f514:	9303      	str	r3, [sp, #12]
 800f516:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f51a:	9302      	str	r3, [sp, #8]
 800f51c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f520:	e9cd 5300 	strd	r5, r3, [sp]
 800f524:	463b      	mov	r3, r7
 800f526:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800f528:	2200      	movs	r2, #0
 800f52a:	47a8      	blx	r5
 800f52c:	b00b      	add	sp, #44	; 0x2c
 800f52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f530:	20027e92 	.word	0x20027e92

0800f534 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800f534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f538:	4698      	mov	r8, r3
 800f53a:	6803      	ldr	r3, [r0, #0]
 800f53c:	b08b      	sub	sp, #44	; 0x2c
 800f53e:	4617      	mov	r7, r2
 800f540:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800f542:	460e      	mov	r6, r1
 800f544:	4b13      	ldr	r3, [pc, #76]	; (800f594 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800f546:	4604      	mov	r4, r0
 800f548:	f8b3 9000 	ldrh.w	r9, [r3]
 800f54c:	f7ff ff82 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800f550:	6803      	ldr	r3, [r0, #0]
 800f552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f554:	4798      	blx	r3
 800f556:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f55a:	2200      	movs	r2, #0
 800f55c:	4631      	mov	r1, r6
 800f55e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f562:	2302      	movs	r3, #2
 800f564:	4620      	mov	r0, r4
 800f566:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800f56a:	2301      	movs	r3, #1
 800f56c:	9305      	str	r3, [sp, #20]
 800f56e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800f572:	9304      	str	r3, [sp, #16]
 800f574:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800f578:	9303      	str	r3, [sp, #12]
 800f57a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f57e:	9302      	str	r3, [sp, #8]
 800f580:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f584:	e9cd 8300 	strd	r8, r3, [sp]
 800f588:	463b      	mov	r3, r7
 800f58a:	47a8      	blx	r5
 800f58c:	b00b      	add	sp, #44	; 0x2c
 800f58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f592:	bf00      	nop
 800f594:	20027e92 	.word	0x20027e92

0800f598 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800f598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f59c:	4698      	mov	r8, r3
 800f59e:	6803      	ldr	r3, [r0, #0]
 800f5a0:	b087      	sub	sp, #28
 800f5a2:	460e      	mov	r6, r1
 800f5a4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800f5a6:	4617      	mov	r7, r2
 800f5a8:	4b0f      	ldr	r3, [pc, #60]	; (800f5e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	f8b3 9000 	ldrh.w	r9, [r3]
 800f5b0:	f7ff ff50 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800f5b4:	6803      	ldr	r3, [r0, #0]
 800f5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b8:	4798      	blx	r3
 800f5ba:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800f5be:	463a      	mov	r2, r7
 800f5c0:	4631      	mov	r1, r6
 800f5c2:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5c6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800f5ca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	9302      	str	r3, [sp, #8]
 800f5d2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	4643      	mov	r3, r8
 800f5e0:	47a8      	blx	r5
 800f5e2:	b007      	add	sp, #28
 800f5e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5e8:	20027e92 	.word	0x20027e92

0800f5ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800f5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	b08f      	sub	sp, #60	; 0x3c
 800f5f4:	4610      	mov	r0, r2
 800f5f6:	460d      	mov	r5, r1
 800f5f8:	4691      	mov	r9, r2
 800f5fa:	461e      	mov	r6, r3
 800f5fc:	f007 fdd6 	bl	80171ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f600:	2800      	cmp	r0, #0
 800f602:	f000 809d 	beq.w	800f740 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	4620      	mov	r0, r4
 800f60a:	f8df b198 	ldr.w	fp, [pc, #408]	; 800f7a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800f60e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f614:	4798      	blx	r3
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	4620      	mov	r0, r4
 800f61a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800f7a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800f61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f620:	4798      	blx	r3
 800f622:	f8bb 3000 	ldrh.w	r3, [fp]
 800f626:	4f5c      	ldr	r7, [pc, #368]	; (800f798 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f628:	9301      	str	r3, [sp, #4]
 800f62a:	f8ba 3000 	ldrh.w	r3, [sl]
 800f62e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800f632:	4640      	mov	r0, r8
 800f634:	9302      	str	r3, [sp, #8]
 800f636:	883b      	ldrh	r3, [r7, #0]
 800f638:	9303      	str	r3, [sp, #12]
 800f63a:	4b58      	ldr	r3, [pc, #352]	; (800f79c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f63c:	881a      	ldrh	r2, [r3, #0]
 800f63e:	9305      	str	r3, [sp, #20]
 800f640:	9204      	str	r2, [sp, #16]
 800f642:	f007 fe47 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f646:	8038      	strh	r0, [r7, #0]
 800f648:	4640      	mov	r0, r8
 800f64a:	f007 fe77 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f64e:	9b05      	ldr	r3, [sp, #20]
 800f650:	b280      	uxth	r0, r0
 800f652:	8018      	strh	r0, [r3, #0]
 800f654:	4b52      	ldr	r3, [pc, #328]	; (800f7a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d174      	bne.n	800f746 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800f65c:	883b      	ldrh	r3, [r7, #0]
 800f65e:	f8aa 0000 	strh.w	r0, [sl]
 800f662:	f8ab 3000 	strh.w	r3, [fp]
 800f666:	4648      	mov	r0, r9
 800f668:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800f66c:	f007 fd9e 	bl	80171ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f670:	2200      	movs	r2, #0
 800f672:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800f676:	4611      	mov	r1, r2
 800f678:	4628      	mov	r0, r5
 800f67a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800f67e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800f682:	f7f5 fc65 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 800f686:	2301      	movs	r3, #1
 800f688:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800f68c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800f690:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f694:	2b00      	cmp	r3, #0
 800f696:	dd5c      	ble.n	800f752 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f698:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	dd58      	ble.n	800f752 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f6a0:	462a      	mov	r2, r5
 800f6a2:	ab0a      	add	r3, sp, #40	; 0x28
 800f6a4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f6a8:	6851      	ldr	r1, [r2, #4]
 800f6aa:	c303      	stmia	r3!, {r0, r1}
 800f6ac:	4631      	mov	r1, r6
 800f6ae:	a80a      	add	r0, sp, #40	; 0x28
 800f6b0:	f7ff fc02 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 800f6b4:	4b38      	ldr	r3, [pc, #224]	; (800f798 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6bc:	4b37      	ldr	r3, [pc, #220]	; (800f79c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f6be:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800f6c2:	aa0a      	add	r2, sp, #40	; 0x28
 800f6c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6c8:	910c      	str	r1, [sp, #48]	; 0x30
 800f6ca:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800f6ce:	ab08      	add	r3, sp, #32
 800f6d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	a90c      	add	r1, sp, #48	; 0x30
 800f6dc:	f7ff fbec 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 800f6e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d13c      	bne.n	800f760 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800f6ec:	2600      	movs	r6, #0
 800f6ee:	696b      	ldr	r3, [r5, #20]
 800f6f0:	a908      	add	r1, sp, #32
 800f6f2:	682a      	ldr	r2, [r5, #0]
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	9305      	str	r3, [sp, #20]
 800f6f8:	616e      	str	r6, [r5, #20]
 800f6fa:	6892      	ldr	r2, [r2, #8]
 800f6fc:	4790      	blx	r2
 800f6fe:	9b05      	ldr	r3, [sp, #20]
 800f700:	4652      	mov	r2, sl
 800f702:	4649      	mov	r1, r9
 800f704:	616b      	str	r3, [r5, #20]
 800f706:	4628      	mov	r0, r5
 800f708:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800f70c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800f710:	f7f5 fc1e 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 800f714:	9a01      	ldr	r2, [sp, #4]
 800f716:	4b23      	ldr	r3, [pc, #140]	; (800f7a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800f718:	4620      	mov	r0, r4
 800f71a:	801a      	strh	r2, [r3, #0]
 800f71c:	9a02      	ldr	r2, [sp, #8]
 800f71e:	4b22      	ldr	r3, [pc, #136]	; (800f7a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800f720:	801a      	strh	r2, [r3, #0]
 800f722:	9a03      	ldr	r2, [sp, #12]
 800f724:	4b1c      	ldr	r3, [pc, #112]	; (800f798 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f726:	801a      	strh	r2, [r3, #0]
 800f728:	4b1c      	ldr	r3, [pc, #112]	; (800f79c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f72a:	9a04      	ldr	r2, [sp, #16]
 800f72c:	801a      	strh	r2, [r3, #0]
 800f72e:	6823      	ldr	r3, [r4, #0]
 800f730:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800f734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f736:	4798      	blx	r3
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	4620      	mov	r0, r4
 800f73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73e:	4798      	blx	r3
 800f740:	b00f      	add	sp, #60	; 0x3c
 800f742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f746:	883b      	ldrh	r3, [r7, #0]
 800f748:	f8ab 0000 	strh.w	r0, [fp]
 800f74c:	f8aa 3000 	strh.w	r3, [sl]
 800f750:	e789      	b.n	800f666 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800f752:	462a      	mov	r2, r5
 800f754:	ab0a      	add	r3, sp, #40	; 0x28
 800f756:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f75a:	6851      	ldr	r1, [r2, #4]
 800f75c:	c303      	stmia	r3!, {r0, r1}
 800f75e:	e7a9      	b.n	800f6b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800f760:	a807      	add	r0, sp, #28
 800f762:	f007 ff27 	bl	80175b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f766:	4606      	mov	r6, r0
 800f768:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800f76a:	6803      	ldr	r3, [r0, #0]
 800f76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76e:	4798      	blx	r3
 800f770:	4286      	cmp	r6, r0
 800f772:	d1b8      	bne.n	800f6e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800f774:	f7ff fe6e 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800f778:	6803      	ldr	r3, [r0, #0]
 800f77a:	4606      	mov	r6, r0
 800f77c:	a807      	add	r0, sp, #28
 800f77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f780:	9305      	str	r3, [sp, #20]
 800f782:	f007 ff17 	bl	80175b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f786:	9b05      	ldr	r3, [sp, #20]
 800f788:	4601      	mov	r1, r0
 800f78a:	4630      	mov	r0, r6
 800f78c:	4798      	blx	r3
 800f78e:	f080 0001 	eor.w	r0, r0, #1
 800f792:	b2c0      	uxtb	r0, r0
 800f794:	e7a8      	b.n	800f6e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800f796:	bf00      	nop
 800f798:	20027e8c 	.word	0x20027e8c
 800f79c:	20027e8e 	.word	0x20027e8e
 800f7a0:	20027e90 	.word	0x20027e90
 800f7a4:	20027e92 	.word	0x20027e92
 800f7a8:	20027e94 	.word	0x20027e94

0800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800f7ac:	4b07      	ldr	r3, [pc, #28]	; (800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800f7ae:	b510      	push	{r4, lr}
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	b13b      	cbz	r3, 800f7c6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f7b6:	6803      	ldr	r3, [r0, #0]
 800f7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ba:	4798      	blx	r3
 800f7bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7be:	4283      	cmp	r3, r0
 800f7c0:	d101      	bne.n	800f7c6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f7c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800f7c4:	bd10      	pop	{r4, pc}
 800f7c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f7c8:	e7fc      	b.n	800f7c4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800f7ca:	bf00      	nop
 800f7cc:	20027e96 	.word	0x20027e96

0800f7d0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800f7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d4:	461d      	mov	r5, r3
 800f7d6:	b08a      	sub	sp, #40	; 0x28
 800f7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7dc:	4690      	mov	r8, r2
 800f7de:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800f7e2:	2400      	movs	r4, #0
 800f7e4:	4607      	mov	r7, r0
 800f7e6:	fb06 8505 	mla	r5, r6, r5, r8
 800f7ea:	9404      	str	r4, [sp, #16]
 800f7ec:	f88d 4020 	strb.w	r4, [sp, #32]
 800f7f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f7f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f7f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f7fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f800:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f804:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f808:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f80c:	f7ff ffce 	bl	800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f810:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f81a:	a901      	add	r1, sp, #4
 800f81c:	9505      	str	r5, [sp, #20]
 800f81e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800f822:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800f826:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800f82a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800f82e:	6803      	ldr	r3, [r0, #0]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	4798      	blx	r3
 800f834:	b00a      	add	sp, #40	; 0x28
 800f836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f83a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800f83a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f83e:	b08b      	sub	sp, #44	; 0x2c
 800f840:	2400      	movs	r4, #0
 800f842:	4691      	mov	r9, r2
 800f844:	461d      	mov	r5, r3
 800f846:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800f84a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f84e:	4688      	mov	r8, r1
 800f850:	4607      	mov	r7, r0
 800f852:	9404      	str	r4, [sp, #16]
 800f854:	fb06 9505 	mla	r5, r6, r5, r9
 800f858:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f85c:	f7ff ffa6 	bl	800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f860:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f864:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f86e:	a901      	add	r1, sp, #4
 800f870:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f874:	9505      	str	r5, [sp, #20]
 800f876:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f87a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f87e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f882:	f8cd 8010 	str.w	r8, [sp, #16]
 800f886:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f88a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800f88e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800f892:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800f896:	6803      	ldr	r3, [r0, #0]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	4798      	blx	r3
 800f89c:	b00b      	add	sp, #44	; 0x2c
 800f89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800f8a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800f8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a8:	b08a      	sub	sp, #40	; 0x28
 800f8aa:	4698      	mov	r8, r3
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800f8b4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800f8b8:	2d0b      	cmp	r5, #11
 800f8ba:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800f8be:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800f8c2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800f8c6:	9304      	str	r3, [sp, #16]
 800f8c8:	d137      	bne.n	800f93a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800f8ca:	2380      	movs	r3, #128	; 0x80
 800f8cc:	f88d 0020 	strb.w	r0, [sp, #32]
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	9203      	str	r2, [sp, #12]
 800f8d4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f8d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f8dc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f8e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f8e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f8e8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f8ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f8f0:	f7ff ff5c 	bl	800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f8f4:	2c0b      	cmp	r4, #11
 800f8f6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800f8fa:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f8fe:	bf94      	ite	ls
 800f900:	4b19      	ldrls	r3, [pc, #100]	; (800f968 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800f902:	2100      	movhi	r1, #0
 800f904:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800f908:	bf98      	it	ls
 800f90a:	5d19      	ldrbls	r1, [r3, r4]
 800f90c:	fb02 8307 	mla	r3, r2, r7, r8
 800f910:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800f914:	10c9      	asrs	r1, r1, #3
 800f916:	fb01 0003 	mla	r0, r1, r3, r0
 800f91a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800f91e:	a901      	add	r1, sp, #4
 800f920:	9005      	str	r0, [sp, #20]
 800f922:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800f926:	2300      	movs	r3, #0
 800f928:	6870      	ldr	r0, [r6, #4]
 800f92a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f92e:	6803      	ldr	r3, [r0, #0]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	4798      	blx	r3
 800f934:	b00a      	add	sp, #40	; 0x28
 800f936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93a:	2d02      	cmp	r5, #2
 800f93c:	d109      	bne.n	800f952 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800f93e:	28ff      	cmp	r0, #255	; 0xff
 800f940:	d105      	bne.n	800f94e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800f942:	f1bc 0f00 	cmp.w	ip, #0
 800f946:	bf14      	ite	ne
 800f948:	2340      	movne	r3, #64	; 0x40
 800f94a:	2320      	moveq	r3, #32
 800f94c:	e7be      	b.n	800f8cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f94e:	2340      	movs	r3, #64	; 0x40
 800f950:	e7bc      	b.n	800f8cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f952:	28ff      	cmp	r0, #255	; 0xff
 800f954:	d105      	bne.n	800f962 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800f956:	f1bc 0f00 	cmp.w	ip, #0
 800f95a:	bf14      	ite	ne
 800f95c:	2304      	movne	r3, #4
 800f95e:	2301      	moveq	r3, #1
 800f960:	e7b4      	b.n	800f8cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f962:	2304      	movs	r3, #4
 800f964:	e7b2      	b.n	800f8cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f966:	bf00      	nop
 800f968:	08029928 	.word	0x08029928

0800f96c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800f96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f970:	b08b      	sub	sp, #44	; 0x2c
 800f972:	461d      	mov	r5, r3
 800f974:	2400      	movs	r4, #0
 800f976:	4688      	mov	r8, r1
 800f978:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800f97c:	4693      	mov	fp, r2
 800f97e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800f982:	4607      	mov	r7, r0
 800f984:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800f988:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800f98c:	9404      	str	r4, [sp, #16]
 800f98e:	bf14      	ite	ne
 800f990:	2308      	movne	r3, #8
 800f992:	2302      	moveq	r3, #2
 800f994:	fb05 b50a 	mla	r5, r5, sl, fp
 800f998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f99c:	f7ff ff06 	bl	800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f9a0:	2e0b      	cmp	r6, #11
 800f9a2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800f9a6:	a901      	add	r1, sp, #4
 800f9a8:	bf98      	it	ls
 800f9aa:	4b13      	ldrls	r3, [pc, #76]	; (800f9f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800f9ac:	f8ad a01e 	strh.w	sl, [sp, #30]
 800f9b0:	bf98      	it	ls
 800f9b2:	5d9c      	ldrbls	r4, [r3, r6]
 800f9b4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800f9b8:	10e4      	asrs	r4, r4, #3
 800f9ba:	f8cd 8010 	str.w	r8, [sp, #16]
 800f9be:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f9c2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800f9c6:	fb04 0405 	mla	r4, r4, r5, r0
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	9405      	str	r4, [sp, #20]
 800f9d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f9d8:	f88d 9020 	strb.w	r9, [sp, #32]
 800f9dc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800f9e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f9e4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800f9e8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800f9ec:	6803      	ldr	r3, [r0, #0]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	4798      	blx	r3
 800f9f2:	b00b      	add	sp, #44	; 0x2c
 800f9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f8:	08029928 	.word	0x08029928

0800f9fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800f9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa00:	461e      	mov	r6, r3
 800fa02:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800fa04:	460f      	mov	r7, r1
 800fa06:	4690      	mov	r8, r2
 800fa08:	881d      	ldrh	r5, [r3, #0]
 800fa0a:	f7ff fd23 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800fa0e:	6803      	ldr	r3, [r0, #0]
 800fa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa12:	4798      	blx	r3
 800fa14:	280b      	cmp	r0, #11
 800fa16:	bf96      	itet	ls
 800fa18:	4b05      	ldrls	r3, [pc, #20]	; (800fa30 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800fa1a:	2400      	movhi	r4, #0
 800fa1c:	5c1c      	ldrbls	r4, [r3, r0]
 800fa1e:	fb08 7005 	mla	r0, r8, r5, r7
 800fa22:	10e4      	asrs	r4, r4, #3
 800fa24:	fb04 6000 	mla	r0, r4, r0, r6
 800fa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa2c:	20027e92 	.word	0x20027e92
 800fa30:	08029928 	.word	0x08029928

0800fa34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800fa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa36:	b08b      	sub	sp, #44	; 0x2c
 800fa38:	461f      	mov	r7, r3
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	4616      	mov	r6, r2
 800fa3e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800fa42:	2500      	movs	r5, #0
 800fa44:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fa48:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fa4c:	9504      	str	r5, [sp, #16]
 800fa4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fa52:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800fa56:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fa5a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800fa5e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fa62:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800fa66:	f88d 3020 	strb.w	r3, [sp, #32]
 800fa6a:	f7ff fe9f 	bl	800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fa6e:	463a      	mov	r2, r7
 800fa70:	4631      	mov	r1, r6
 800fa72:	4603      	mov	r3, r0
 800fa74:	4620      	mov	r0, r4
 800fa76:	f7ff ffc1 	bl	800f9fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fa7a:	4b0e      	ldr	r3, [pc, #56]	; (800fab4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800fa7c:	9005      	str	r0, [sp, #20]
 800fa7e:	881b      	ldrh	r3, [r3, #0]
 800fa80:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fa84:	f7ff fce6 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800fa88:	6803      	ldr	r3, [r0, #0]
 800fa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa8c:	4798      	blx	r3
 800fa8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa90:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800fa94:	a901      	add	r1, sp, #4
 800fa96:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800fa9a:	9304      	str	r3, [sp, #16]
 800fa9c:	6860      	ldr	r0, [r4, #4]
 800fa9e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800faa2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800faa6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800faaa:	6803      	ldr	r3, [r0, #0]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	4798      	blx	r3
 800fab0:	b00b      	add	sp, #44	; 0x2c
 800fab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fab4:	20027e92 	.word	0x20027e92

0800fab8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800fab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faba:	b08d      	sub	sp, #52	; 0x34
 800fabc:	2501      	movs	r5, #1
 800fabe:	4604      	mov	r4, r0
 800fac0:	466b      	mov	r3, sp
 800fac2:	9503      	str	r5, [sp, #12]
 800fac4:	e883 0006 	stmia.w	r3, {r1, r2}
 800fac8:	2300      	movs	r3, #0
 800faca:	f8bd 6000 	ldrh.w	r6, [sp]
 800face:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800fad2:	9306      	str	r3, [sp, #24]
 800fad4:	6803      	ldr	r3, [r0, #0]
 800fad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fad8:	4798      	blx	r3
 800fada:	463a      	mov	r2, r7
 800fadc:	4631      	mov	r1, r6
 800fade:	4603      	mov	r3, r0
 800fae0:	4620      	mov	r0, r4
 800fae2:	f7ff ff8b 	bl	800f9fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fae6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fae8:	9004      	str	r0, [sp, #16]
 800faea:	9307      	str	r3, [sp, #28]
 800faec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800faf0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800faf4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800faf8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fafc:	4b0e      	ldr	r3, [pc, #56]	; (800fb38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800fafe:	881b      	ldrh	r3, [r3, #0]
 800fb00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800fb04:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800fb08:	f7ff fca4 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800fb0c:	6803      	ldr	r3, [r0, #0]
 800fb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb10:	4798      	blx	r3
 800fb12:	23ff      	movs	r3, #255	; 0xff
 800fb14:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800fb18:	a903      	add	r1, sp, #12
 800fb1a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800fb1e:	6860      	ldr	r0, [r4, #4]
 800fb20:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800fb24:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800fb28:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800fb2c:	6803      	ldr	r3, [r0, #0]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	4798      	blx	r3
 800fb32:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800fb34:	b00d      	add	sp, #52	; 0x34
 800fb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb38:	20027e92 	.word	0x20027e92

0800fb3c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800fb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb40:	b08c      	sub	sp, #48	; 0x30
 800fb42:	461e      	mov	r6, r3
 800fb44:	2300      	movs	r3, #0
 800fb46:	4604      	mov	r4, r0
 800fb48:	466d      	mov	r5, sp
 800fb4a:	9306      	str	r3, [sp, #24]
 800fb4c:	6803      	ldr	r3, [r0, #0]
 800fb4e:	e885 0006 	stmia.w	r5, {r1, r2}
 800fb52:	2501      	movs	r5, #1
 800fb54:	f8bd 7000 	ldrh.w	r7, [sp]
 800fb58:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800fb5c:	9503      	str	r5, [sp, #12]
 800fb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb60:	4798      	blx	r3
 800fb62:	4642      	mov	r2, r8
 800fb64:	4639      	mov	r1, r7
 800fb66:	4603      	mov	r3, r0
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f7ff ff47 	bl	800f9fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fb6e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fb72:	9004      	str	r0, [sp, #16]
 800fb74:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fb78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fb7c:	9607      	str	r6, [sp, #28]
 800fb7e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fb82:	4b10      	ldr	r3, [pc, #64]	; (800fbc4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800fb84:	881b      	ldrh	r3, [r3, #0]
 800fb86:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800fb8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb8c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800fb90:	f7ff fc60 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 800fb94:	6803      	ldr	r3, [r0, #0]
 800fb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb98:	4798      	blx	r3
 800fb9a:	23ff      	movs	r3, #255	; 0xff
 800fb9c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800fba0:	a903      	add	r1, sp, #12
 800fba2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800fba6:	6860      	ldr	r0, [r4, #4]
 800fba8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800fbac:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800fbb0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800fbb4:	6803      	ldr	r3, [r0, #0]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	4798      	blx	r3
 800fbba:	4630      	mov	r0, r6
 800fbbc:	b00c      	add	sp, #48	; 0x30
 800fbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc2:	bf00      	nop
 800fbc4:	20027e92 	.word	0x20027e92

0800fbc8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800fbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbca:	b085      	sub	sp, #20
 800fbcc:	4605      	mov	r5, r0
 800fbce:	ac02      	add	r4, sp, #8
 800fbd0:	e884 0006 	stmia.w	r4, {r1, r2}
 800fbd4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800fbd8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800fbdc:	f7ff fde6 	bl	800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fbe0:	4631      	mov	r1, r6
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	463a      	mov	r2, r7
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f7ff ff08 	bl	800f9fc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fbec:	4a05      	ldr	r2, [pc, #20]	; (800fc04 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800fbee:	682b      	ldr	r3, [r5, #0]
 800fbf0:	8812      	ldrh	r2, [r2, #0]
 800fbf2:	9200      	str	r2, [sp, #0]
 800fbf4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	e894 0006 	ldmia.w	r4, {r1, r2}
 800fbfe:	47b0      	blx	r6
 800fc00:	b005      	add	sp, #20
 800fc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc04:	20027e92 	.word	0x20027e92

0800fc08 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800fc0e:	4604      	mov	r4, r0
 800fc10:	b19b      	cbz	r3, 800fc3a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800fc12:	2002      	movs	r0, #2
 800fc14:	f7f1 f922 	bl	8000e5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800fc18:	2300      	movs	r3, #0
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800fc20:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800fc2a:	f7ff fdbf 	bl	800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fc2e:	4601      	mov	r1, r0
 800fc30:	4620      	mov	r0, r4
 800fc32:	462b      	mov	r3, r5
 800fc34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc38:	4718      	bx	r3
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}

0800fc3c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	4605      	mov	r5, r0
 800fc40:	460c      	mov	r4, r1
 800fc42:	2003      	movs	r0, #3
 800fc44:	b149      	cbz	r1, 800fc5a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800fc46:	f7f1 f8a9 	bl	8000d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800fc4a:	6928      	ldr	r0, [r5, #16]
 800fc4c:	b168      	cbz	r0, 800fc6a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800fc4e:	6803      	ldr	r3, [r0, #0]
 800fc50:	2101      	movs	r1, #1
 800fc52:	695b      	ldr	r3, [r3, #20]
 800fc54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc58:	4718      	bx	r3
 800fc5a:	f7f1 f8cf 	bl	8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800fc5e:	6928      	ldr	r0, [r5, #16]
 800fc60:	b118      	cbz	r0, 800fc6a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800fc62:	6803      	ldr	r3, [r0, #0]
 800fc64:	4621      	mov	r1, r4
 800fc66:	695b      	ldr	r3, [r3, #20]
 800fc68:	e7f4      	b.n	800fc54 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800fc6a:	bd70      	pop	{r4, r5, r6, pc}

0800fc6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800fc6c:	b538      	push	{r3, r4, r5, lr}
 800fc6e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800fc72:	4604      	mov	r4, r0
 800fc74:	460d      	mov	r5, r1
 800fc76:	428b      	cmp	r3, r1
 800fc78:	d006      	beq.n	800fc88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800fc7a:	6803      	ldr	r3, [r0, #0]
 800fc7c:	b929      	cbnz	r1, 800fc8a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800fc7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800fc82:	4798      	blx	r3
 800fc84:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800fc88:	bd38      	pop	{r3, r4, r5, pc}
 800fc8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fc8e:	e7f8      	b.n	800fc82 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800fc90 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800fc90:	4b0d      	ldr	r3, [pc, #52]	; (800fcc8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800fc92:	b510      	push	{r4, lr}
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	4604      	mov	r4, r0
 800fc98:	b95b      	cbnz	r3, 800fcb2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fc9a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800fc9e:	2b02      	cmp	r3, #2
 800fca0:	d007      	beq.n	800fcb2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fca2:	6840      	ldr	r0, [r0, #4]
 800fca4:	f000 f92a 	bl	800fefc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800fca8:	b118      	cbz	r0, 800fcb2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fcaa:	6862      	ldr	r2, [r4, #4]
 800fcac:	7a53      	ldrb	r3, [r2, #9]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d0fc      	beq.n	800fcac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800fcb2:	f7f2 f8a1 	bl	8001df8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	2100      	movs	r1, #0
 800fcba:	f7ff ffd7 	bl	800fc6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f7ff fd74 	bl	800f7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fcc4:	bd10      	pop	{r4, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20027e96 	.word	0x20027e96

0800fccc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800fccc:	b570      	push	{r4, r5, r6, lr}
 800fcce:	4604      	mov	r4, r0
 800fcd0:	6803      	ldr	r3, [r0, #0]
 800fcd2:	b919      	cbnz	r1, 800fcdc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800fcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcda:	4718      	bx	r3
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 800fce2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 800fce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fce8:	4798      	blx	r3
 800fcea:	4605      	mov	r5, r0
 800fcec:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	2101      	movs	r1, #1
 800fcf4:	f7ff ffba 	bl	800fc6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}

0800fcfc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800fcfc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800fd00:	1a13      	subs	r3, r2, r0
 800fd02:	4258      	negs	r0, r3
 800fd04:	4158      	adcs	r0, r3
 800fd06:	4770      	bx	lr

0800fd08 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800fd08:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800fd0c:	1a9b      	subs	r3, r3, r2
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	bfdc      	itt	le
 800fd12:	6882      	ldrle	r2, [r0, #8]
 800fd14:	189b      	addle	r3, r3, r2
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	bfcc      	ite	gt
 800fd1a:	2000      	movgt	r0, #0
 800fd1c:	2001      	movle	r0, #1
 800fd1e:	4770      	bx	lr

0800fd20 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800fd20:	6902      	ldr	r2, [r0, #16]
 800fd22:	6843      	ldr	r3, [r0, #4]
 800fd24:	2024      	movs	r0, #36	; 0x24
 800fd26:	fb00 3002 	mla	r0, r0, r2, r3
 800fd2a:	4770      	bx	lr

0800fd2c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800fd2c:	6803      	ldr	r3, [r0, #0]
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	4718      	bx	r3

0800fd32 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800fd32:	2301      	movs	r3, #1
 800fd34:	b570      	push	{r4, r5, r6, lr}
 800fd36:	7203      	strb	r3, [r0, #8]
 800fd38:	4604      	mov	r4, r0
 800fd3a:	6840      	ldr	r0, [r0, #4]
 800fd3c:	6803      	ldr	r3, [r0, #0]
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	4798      	blx	r3
 800fd42:	6803      	ldr	r3, [r0, #0]
 800fd44:	4605      	mov	r5, r0
 800fd46:	2b40      	cmp	r3, #64	; 0x40
 800fd48:	d00c      	beq.n	800fd64 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd4a:	d810      	bhi.n	800fd6e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800fd4c:	2b04      	cmp	r3, #4
 800fd4e:	d01d      	beq.n	800fd8c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800fd50:	d804      	bhi.n	800fd5c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d006      	beq.n	800fd64 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd56:	2b02      	cmp	r3, #2
 800fd58:	d02c      	beq.n	800fdb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800fd5a:	bd70      	pop	{r4, r5, r6, pc}
 800fd5c:	2b08      	cmp	r3, #8
 800fd5e:	d01d      	beq.n	800fd9c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800fd60:	2b20      	cmp	r3, #32
 800fd62:	d1fa      	bne.n	800fd5a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800fd64:	6823      	ldr	r3, [r4, #0]
 800fd66:	4620      	mov	r0, r4
 800fd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd6a:	4798      	blx	r3
 800fd6c:	e013      	b.n	800fd96 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800fd6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd72:	d0f7      	beq.n	800fd64 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd74:	d804      	bhi.n	800fd80 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800fd76:	2b80      	cmp	r3, #128	; 0x80
 800fd78:	d0f4      	beq.n	800fd64 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd7e:	e7f0      	b.n	800fd62 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800fd80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd84:	d0ee      	beq.n	800fd64 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd8a:	e7e5      	b.n	800fd58 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	7f01      	ldrb	r1, [r0, #28]
 800fd90:	4620      	mov	r0, r4
 800fd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd94:	4798      	blx	r3
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd9a:	e006      	b.n	800fdaa <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800fd9c:	6823      	ldr	r3, [r4, #0]
 800fd9e:	7f01      	ldrb	r1, [r0, #28]
 800fda0:	4620      	mov	r0, r4
 800fda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda4:	4798      	blx	r3
 800fda6:	6823      	ldr	r3, [r4, #0]
 800fda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdaa:	4629      	mov	r1, r5
 800fdac:	4620      	mov	r0, r4
 800fdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdb2:	4718      	bx	r3
 800fdb4:	6823      	ldr	r3, [r4, #0]
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdba:	4798      	blx	r3
 800fdbc:	e7f3      	b.n	800fda6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800fdbe <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800fdbe:	4770      	bx	lr

0800fdc0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800fdc0:	4770      	bx	lr

0800fdc2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800fdc2:	4770      	bx	lr

0800fdc4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800fdc4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800fdc8:	b510      	push	{r4, lr}
 800fdca:	1ad2      	subs	r2, r2, r3
 800fdcc:	2a00      	cmp	r2, #0
 800fdce:	bfdc      	itt	le
 800fdd0:	6884      	ldrle	r4, [r0, #8]
 800fdd2:	1912      	addle	r2, r2, r4
 800fdd4:	2a01      	cmp	r2, #1
 800fdd6:	dd16      	ble.n	800fe06 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800fdd8:	6842      	ldr	r2, [r0, #4]
 800fdda:	2424      	movs	r4, #36	; 0x24
 800fddc:	fb04 2303 	mla	r3, r4, r3, r2
 800fde0:	f101 0220 	add.w	r2, r1, #32
 800fde4:	f851 4b04 	ldr.w	r4, [r1], #4
 800fde8:	4291      	cmp	r1, r2
 800fdea:	f843 4b04 	str.w	r4, [r3], #4
 800fdee:	d1f9      	bne.n	800fde4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800fdf0:	780a      	ldrb	r2, [r1, #0]
 800fdf2:	701a      	strb	r2, [r3, #0]
 800fdf4:	68c3      	ldr	r3, [r0, #12]
 800fdf6:	6882      	ldr	r2, [r0, #8]
 800fdf8:	f3bf 8f5b 	dmb	ish
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	bfd8      	it	le
 800fe02:	1a9b      	suble	r3, r3, r2
 800fe04:	60c3      	str	r3, [r0, #12]
 800fe06:	bd10      	pop	{r4, pc}

0800fe08 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800fe08:	6903      	ldr	r3, [r0, #16]
 800fe0a:	6882      	ldr	r2, [r0, #8]
 800fe0c:	f3bf 8f5b 	dmb	ish
 800fe10:	3301      	adds	r3, #1
 800fe12:	429a      	cmp	r2, r3
 800fe14:	bfd8      	it	le
 800fe16:	1a9b      	suble	r3, r3, r2
 800fe18:	6103      	str	r3, [r0, #16]
 800fe1a:	4770      	bx	lr

0800fe1c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800fe1c:	b570      	push	{r4, r5, r6, lr}
 800fe1e:	4604      	mov	r4, r0
 800fe20:	460e      	mov	r6, r1
 800fe22:	6860      	ldr	r0, [r4, #4]
 800fe24:	6803      	ldr	r3, [r0, #0]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	4798      	blx	r3
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d1f9      	bne.n	800fe22 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800fe2e:	4d0d      	ldr	r5, [pc, #52]	; (800fe64 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800fe30:	6828      	ldr	r0, [r5, #0]
 800fe32:	6803      	ldr	r3, [r0, #0]
 800fe34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe36:	4798      	blx	r3
 800fe38:	f7f1 ffec 	bl	8001e14 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800fe3c:	6828      	ldr	r0, [r5, #0]
 800fe3e:	2101      	movs	r1, #1
 800fe40:	f7ff ff14 	bl	800fc6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fe44:	6860      	ldr	r0, [r4, #4]
 800fe46:	4631      	mov	r1, r6
 800fe48:	6803      	ldr	r3, [r0, #0]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	4798      	blx	r3
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	4620      	mov	r0, r4
 800fe52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe54:	4798      	blx	r3
 800fe56:	6828      	ldr	r0, [r5, #0]
 800fe58:	6803      	ldr	r3, [r0, #0]
 800fe5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe60:	4718      	bx	r3
 800fe62:	bf00      	nop
 800fe64:	20027e98 	.word	0x20027e98

0800fe68 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800fe68:	b508      	push	{r3, lr}
 800fe6a:	f7f1 ffc5 	bl	8001df8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fe6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fe72:	f7f1 bfc9 	b.w	8001e08 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800fe76 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fe76:	b510      	push	{r4, lr}
 800fe78:	4604      	mov	r4, r0
 800fe7a:	2114      	movs	r1, #20
 800fe7c:	f014 ff77 	bl	8024d6e <_ZdlPvj>
 800fe80:	4620      	mov	r0, r4
 800fe82:	bd10      	pop	{r4, pc}

0800fe84 <_ZN8touchgfx13DMA_Interface5startEv>:
 800fe84:	b510      	push	{r4, lr}
 800fe86:	4604      	mov	r4, r0
 800fe88:	6840      	ldr	r0, [r0, #4]
 800fe8a:	6803      	ldr	r3, [r0, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4798      	blx	r3
 800fe90:	b948      	cbnz	r0, 800fea6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800fe92:	7a63      	ldrb	r3, [r4, #9]
 800fe94:	b13b      	cbz	r3, 800fea6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800fe96:	7a23      	ldrb	r3, [r4, #8]
 800fe98:	b92b      	cbnz	r3, 800fea6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fea4:	4718      	bx	r3
 800fea6:	bd10      	pop	{r4, pc}

0800fea8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	4604      	mov	r4, r0
 800feac:	6840      	ldr	r0, [r0, #4]
 800feae:	6803      	ldr	r3, [r0, #0]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4798      	blx	r3
 800feb4:	4605      	mov	r5, r0
 800feb6:	b930      	cbnz	r0, 800fec6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800feb8:	7a23      	ldrb	r3, [r4, #8]
 800feba:	b123      	cbz	r3, 800fec6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800febc:	6860      	ldr	r0, [r4, #4]
 800febe:	6803      	ldr	r3, [r0, #0]
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	4798      	blx	r3
 800fec4:	7225      	strb	r5, [r4, #8]
 800fec6:	6860      	ldr	r0, [r4, #4]
 800fec8:	6803      	ldr	r3, [r0, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4798      	blx	r3
 800fece:	b928      	cbnz	r0, 800fedc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800fed0:	6823      	ldr	r3, [r4, #0]
 800fed2:	4620      	mov	r0, r4
 800fed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feda:	4718      	bx	r3
 800fedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fee0:	f7f1 bfa0 	b.w	8001e24 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800fee4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800fee4:	b510      	push	{r4, lr}
 800fee6:	6082      	str	r2, [r0, #8]
 800fee8:	2200      	movs	r2, #0
 800feea:	4c03      	ldr	r4, [pc, #12]	; (800fef8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800feec:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800fef0:	e9c0 4100 	strd	r4, r1, [r0]
 800fef4:	bd10      	pop	{r4, pc}
 800fef6:	bf00      	nop
 800fef8:	0802993c 	.word	0x0802993c

0800fefc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800fefc:	6840      	ldr	r0, [r0, #4]
 800fefe:	6803      	ldr	r3, [r0, #0]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4718      	bx	r3

0800ff04 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 800ff04:	094a      	lsrs	r2, r1, #5
 800ff06:	4b06      	ldr	r3, [pc, #24]	; (800ff20 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 800ff08:	60c1      	str	r1, [r0, #12]
 800ff0a:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 800ff0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800ff12:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800ff16:	4313      	orrs	r3, r2
 800ff18:	4319      	orrs	r1, r3
 800ff1a:	8201      	strh	r1, [r0, #16]
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	fffff800 	.word	0xfffff800

0800ff24 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 800ff24:	f1a0 0008 	sub.w	r0, r0, #8
 800ff28:	e7ec      	b.n	800ff04 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 800ff2a:	bf00      	nop

0800ff2c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 800ff2c:	b508      	push	{r3, lr}
 800ff2e:	4b05      	ldr	r3, [pc, #20]	; (800ff44 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 800ff30:	6818      	ldr	r0, [r3, #0]
 800ff32:	6803      	ldr	r3, [r0, #0]
 800ff34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ff38:	4798      	blx	r3
 800ff3a:	1e43      	subs	r3, r0, #1
 800ff3c:	4258      	negs	r0, r3
 800ff3e:	4158      	adcs	r0, r3
 800ff40:	bd08      	pop	{r3, pc}
 800ff42:	bf00      	nop
 800ff44:	20027e98 	.word	0x20027e98

0800ff48 <_ZN8touchgfx13PainterRGB565D1Ev>:
 800ff48:	4770      	bx	lr

0800ff4a <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 800ff4a:	3808      	subs	r0, #8
 800ff4c:	4770      	bx	lr

0800ff4e <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 800ff4e:	b430      	push	{r4, r5}
 800ff50:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 800ff54:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 800ff58:	8a02      	ldrh	r2, [r0, #16]
 800ff5a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ff5e:	4629      	mov	r1, r5
 800ff60:	9202      	str	r2, [sp, #8]
 800ff62:	68c2      	ldr	r2, [r0, #12]
 800ff64:	4620      	mov	r0, r4
 800ff66:	bc30      	pop	{r4, r5}
 800ff68:	f7f2 b918 	b.w	800219c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

0800ff6c <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 800ff6c:	f7f2 b90c 	b.w	8002188 <_ZN8touchgfx5paint6rgb5658tearDownEv>

0800ff70 <_ZN8touchgfx13PainterRGB565D0Ev>:
 800ff70:	b510      	push	{r4, lr}
 800ff72:	4604      	mov	r4, r0
 800ff74:	2114      	movs	r1, #20
 800ff76:	f014 fefa 	bl	8024d6e <_ZdlPvj>
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	bd10      	pop	{r4, pc}

0800ff7e <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 800ff7e:	f1a0 0008 	sub.w	r0, r0, #8
 800ff82:	e7f5      	b.n	800ff70 <_ZN8touchgfx13PainterRGB565D0Ev>

0800ff84 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 800ff84:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 800ff88:	4770      	bx	lr

0800ff8a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 800ff8a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800ff8e:	4770      	bx	lr

0800ff90 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 800ff90:	2200      	movs	r2, #0
 800ff92:	8002      	strh	r2, [r0, #0]
 800ff94:	8042      	strh	r2, [r0, #2]
 800ff96:	8082      	strh	r2, [r0, #4]
 800ff98:	80c2      	strh	r2, [r0, #6]
 800ff9a:	4770      	bx	lr

0800ff9c <_ZNK8touchgfx4Line14getMinimalRectEv>:
 800ff9c:	f101 0364 	add.w	r3, r1, #100	; 0x64
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	cb03      	ldmia	r3!, {r0, r1}
 800ffa4:	6010      	str	r0, [r2, #0]
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	6051      	str	r1, [r2, #4]
 800ffaa:	4770      	bx	lr

0800ffac <_ZN8touchgfx4LineD1Ev>:
 800ffac:	4770      	bx	lr

0800ffae <_ZN8touchgfx4LineD0Ev>:
 800ffae:	b510      	push	{r4, lr}
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	2170      	movs	r1, #112	; 0x70
 800ffb4:	f014 fedb 	bl	8024d6e <_ZdlPvj>
 800ffb8:	4620      	mov	r0, r4
 800ffba:	bd10      	pop	{r4, pc}

0800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 800ffbc:	b507      	push	{r0, r1, r2, lr}
 800ffbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ffc2:	ab01      	add	r3, sp, #4
 800ffc4:	6809      	ldr	r1, [r1, #0]
 800ffc6:	6800      	ldr	r0, [r0, #0]
 800ffc8:	f005 fa49 	bl	801545e <_ZN8touchgfx6muldivElllRl>
 800ffcc:	b003      	add	sp, #12
 800ffce:	f85d fb04 	ldr.w	pc, [sp], #4

0800ffd2 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 800ffd2:	6800      	ldr	r0, [r0, #0]
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	bfb9      	ittee	lt
 800ffd8:	2320      	movlt	r3, #32
 800ffda:	fb90 f0f3 	sdivlt	r0, r0, r3
 800ffde:	301f      	addge	r0, #31
 800ffe0:	1140      	asrge	r0, r0, #5
 800ffe2:	4770      	bx	lr

0800ffe4 <_ZNK8touchgfx4Line17invalidateContentEv>:
 800ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe8:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800ffec:	b089      	sub	sp, #36	; 0x24
 800ffee:	4604      	mov	r4, r0
 800fff0:	b353      	cbz	r3, 8010048 <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 800fff2:	6803      	ldr	r3, [r0, #0]
 800fff4:	4601      	mov	r1, r0
 800fff6:	a802      	add	r0, sp, #8
 800fff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fffa:	4798      	blx	r3
 800fffc:	2220      	movs	r2, #32
 800fffe:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 8010002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010004:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010006:	f8d4 b000 	ldr.w	fp, [r4]
 801000a:	fb9a f0f2 	sdiv	r0, sl, r2
 801000e:	fb91 f5f2 	sdiv	r5, r1, r2
 8010012:	fb93 f6f2 	sdiv	r6, r3, r2
 8010016:	1b40      	subs	r0, r0, r5
 8010018:	0076      	lsls	r6, r6, #1
 801001a:	2800      	cmp	r0, #0
 801001c:	bfb8      	it	lt
 801001e:	4240      	neglt	r0, r0
 8010020:	4286      	cmp	r6, r0
 8010022:	dc0c      	bgt.n	801003e <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8010024:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010026:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 801002a:	fb95 f0f2 	sdiv	r0, r5, r2
 801002e:	fb98 f7f2 	sdiv	r7, r8, r2
 8010032:	1bc0      	subs	r0, r0, r7
 8010034:	2800      	cmp	r0, #0
 8010036:	bfb8      	it	lt
 8010038:	4240      	neglt	r0, r0
 801003a:	4286      	cmp	r6, r0
 801003c:	dd07      	ble.n	801004e <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 801003e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010042:	a902      	add	r1, sp, #8
 8010044:	4620      	mov	r0, r4
 8010046:	4798      	blx	r3
 8010048:	b009      	add	sp, #36	; 0x24
 801004a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801004e:	eb01 060a 	add.w	r6, r1, sl
 8010052:	2002      	movs	r0, #2
 8010054:	eb08 0705 	add.w	r7, r8, r5
 8010058:	3301      	adds	r3, #1
 801005a:	f10d 0920 	add.w	r9, sp, #32
 801005e:	9101      	str	r1, [sp, #4]
 8010060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010064:	fb96 f6f0 	sdiv	r6, r6, r0
 8010068:	fb97 f7f0 	sdiv	r7, r7, r0
 801006c:	4103      	asrs	r3, r0
 801006e:	b236      	sxth	r6, r6
 8010070:	b23f      	sxth	r7, r7
 8010072:	f849 3d08 	str.w	r3, [r9, #-8]!
 8010076:	4648      	mov	r0, r9
 8010078:	fb96 f6f2 	sdiv	r6, r6, r2
 801007c:	fb97 f7f2 	sdiv	r7, r7, r2
 8010080:	f7ff ffa7 	bl	800ffd2 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8010084:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010088:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801008c:	fa1f fe87 	uxth.w	lr, r7
 8010090:	9901      	ldr	r1, [sp, #4]
 8010092:	fa1f fc86 	uxth.w	ip, r6
 8010096:	4293      	cmp	r3, r2
 8010098:	b280      	uxth	r0, r0
 801009a:	eba1 0a0a 	sub.w	sl, r1, sl
 801009e:	da54      	bge.n	801014a <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 80100a0:	ebac 0100 	sub.w	r1, ip, r0
 80100a4:	f1ba 0f00 	cmp.w	sl, #0
 80100a8:	4460      	add	r0, ip
 80100aa:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80100ae:	b289      	uxth	r1, r1
 80100b0:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 80100b4:	b280      	uxth	r0, r0
 80100b6:	b20e      	sxth	r6, r1
 80100b8:	da29      	bge.n	801010e <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 80100ba:	eba8 0505 	sub.w	r5, r8, r5
 80100be:	2d00      	cmp	r5, #0
 80100c0:	da2a      	bge.n	8010118 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 80100c2:	fa1f f88a 	uxth.w	r8, sl
 80100c6:	f8ad a010 	strh.w	sl, [sp, #16]
 80100ca:	fa1f f58c 	uxth.w	r5, ip
 80100ce:	f8ad c012 	strh.w	ip, [sp, #18]
 80100d2:	eba0 0008 	sub.w	r0, r0, r8
 80100d6:	4443      	add	r3, r8
 80100d8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80100dc:	f8ad 0014 	strh.w	r0, [sp, #20]
 80100e0:	1a59      	subs	r1, r3, r1
 80100e2:	ebae 0005 	sub.w	r0, lr, r5
 80100e6:	f8ad 701a 	strh.w	r7, [sp, #26]
 80100ea:	f8ad 101c 	strh.w	r1, [sp, #28]
 80100ee:	f8ad 0016 	strh.w	r0, [sp, #22]
 80100f2:	442a      	add	r2, r5
 80100f4:	eba2 0e0e 	sub.w	lr, r2, lr
 80100f8:	f8ad e01e 	strh.w	lr, [sp, #30]
 80100fc:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010100:	a904      	add	r1, sp, #16
 8010102:	4620      	mov	r0, r4
 8010104:	4798      	blx	r3
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	4649      	mov	r1, r9
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	e79a      	b.n	8010044 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 801010e:	d003      	beq.n	8010118 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8010110:	eba8 0505 	sub.w	r5, r8, r5
 8010114:	2d00      	cmp	r5, #0
 8010116:	dcd4      	bgt.n	80100c2 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 8010118:	fa1f f88a 	uxth.w	r8, sl
 801011c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8010120:	fa1f f58c 	uxth.w	r5, ip
 8010124:	f8ad c012 	strh.w	ip, [sp, #18]
 8010128:	4443      	add	r3, r8
 801012a:	eba0 0008 	sub.w	r0, r0, r8
 801012e:	f8ad a018 	strh.w	sl, [sp, #24]
 8010132:	1a59      	subs	r1, r3, r1
 8010134:	ebae 0305 	sub.w	r3, lr, r5
 8010138:	f8ad 701a 	strh.w	r7, [sp, #26]
 801013c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010140:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010144:	f8ad 001c 	strh.w	r0, [sp, #28]
 8010148:	e7d3      	b.n	80100f2 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 801014a:	ebae 0100 	sub.w	r1, lr, r0
 801014e:	f1ba 0f00 	cmp.w	sl, #0
 8010152:	4470      	add	r0, lr
 8010154:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8010158:	b289      	uxth	r1, r1
 801015a:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 801015e:	b280      	uxth	r0, r0
 8010160:	b20f      	sxth	r7, r1
 8010162:	da20      	bge.n	80101a6 <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 8010164:	eba8 0505 	sub.w	r5, r8, r5
 8010168:	2d00      	cmp	r5, #0
 801016a:	da21      	bge.n	80101b0 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801016c:	fa1f f88e 	uxth.w	r8, lr
 8010170:	f8ad e010 	strh.w	lr, [sp, #16]
 8010174:	fa1f f58a 	uxth.w	r5, sl
 8010178:	f8ad a012 	strh.w	sl, [sp, #18]
 801017c:	4443      	add	r3, r8
 801017e:	ebac 0e08 	sub.w	lr, ip, r8
 8010182:	442a      	add	r2, r5
 8010184:	1b40      	subs	r0, r0, r5
 8010186:	eba3 0c0c 	sub.w	ip, r3, ip
 801018a:	f8ad e014 	strh.w	lr, [sp, #20]
 801018e:	1a51      	subs	r1, r2, r1
 8010190:	f8ad 0016 	strh.w	r0, [sp, #22]
 8010194:	f8ad 6018 	strh.w	r6, [sp, #24]
 8010198:	f8ad 701a 	strh.w	r7, [sp, #26]
 801019c:	f8ad c01c 	strh.w	ip, [sp, #28]
 80101a0:	f8ad 101e 	strh.w	r1, [sp, #30]
 80101a4:	e7aa      	b.n	80100fc <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 80101a6:	d003      	beq.n	80101b0 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80101a8:	eba8 0505 	sub.w	r5, r8, r5
 80101ac:	2d00      	cmp	r5, #0
 80101ae:	dcdd      	bgt.n	801016c <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 80101b0:	fa1f f58e 	uxth.w	r5, lr
 80101b4:	f8ad 7012 	strh.w	r7, [sp, #18]
 80101b8:	fa1f f88a 	uxth.w	r8, sl
 80101bc:	f8ad e010 	strh.w	lr, [sp, #16]
 80101c0:	442b      	add	r3, r5
 80101c2:	ebac 0705 	sub.w	r7, ip, r5
 80101c6:	4442      	add	r2, r8
 80101c8:	eba0 0008 	sub.w	r0, r0, r8
 80101cc:	eba3 0c0c 	sub.w	ip, r3, ip
 80101d0:	f8ad 7014 	strh.w	r7, [sp, #20]
 80101d4:	1a51      	subs	r1, r2, r1
 80101d6:	f8ad 6018 	strh.w	r6, [sp, #24]
 80101da:	f8ad a01a 	strh.w	sl, [sp, #26]
 80101de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80101e2:	f8ad c01c 	strh.w	ip, [sp, #28]
 80101e6:	f8ad 001e 	strh.w	r0, [sp, #30]
 80101ea:	e787      	b.n	80100fc <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

080101ec <_ZN8touchgfx7CWRUtil4sineEi>:
 80101ec:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80101f0:	fb90 f2f3 	sdiv	r2, r0, r3
 80101f4:	fb02 0013 	mls	r0, r2, r3, r0
 80101f8:	2800      	cmp	r0, #0
 80101fa:	bfb8      	it	lt
 80101fc:	18c0      	addlt	r0, r0, r3
 80101fe:	4b0a      	ldr	r3, [pc, #40]	; (8010228 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8010200:	285a      	cmp	r0, #90	; 0x5a
 8010202:	dc02      	bgt.n	801020a <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8010204:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8010208:	4770      	bx	lr
 801020a:	28b4      	cmp	r0, #180	; 0xb4
 801020c:	dc02      	bgt.n	8010214 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 801020e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8010212:	e7f7      	b.n	8010204 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8010214:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8010218:	bfd4      	ite	le
 801021a:	38b4      	suble	r0, #180	; 0xb4
 801021c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8010220:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8010224:	4240      	negs	r0, r0
 8010226:	4770      	bx	lr
 8010228:	080299fc 	.word	0x080299fc

0801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 801022c:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8010230:	fb90 f2f3 	sdiv	r2, r0, r3
 8010234:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010236:	fb02 0013 	mls	r0, r2, r3, r0
 801023a:	2800      	cmp	r0, #0
 801023c:	bfb8      	it	lt
 801023e:	18c0      	addlt	r0, r0, r3
 8010240:	1144      	asrs	r4, r0, #5
 8010242:	f000 061f 	and.w	r6, r0, #31
 8010246:	4620      	mov	r0, r4
 8010248:	f7ff ffd0 	bl	80101ec <_ZN8touchgfx7CWRUtil4sineEi>
 801024c:	4605      	mov	r5, r0
 801024e:	b90e      	cbnz	r6, 8010254 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8010250:	b002      	add	sp, #8
 8010252:	bd70      	pop	{r4, r5, r6, pc}
 8010254:	1c60      	adds	r0, r4, #1
 8010256:	f7ff ffc9 	bl	80101ec <_ZN8touchgfx7CWRUtil4sineEi>
 801025a:	ab01      	add	r3, sp, #4
 801025c:	2220      	movs	r2, #32
 801025e:	4631      	mov	r1, r6
 8010260:	1b40      	subs	r0, r0, r5
 8010262:	f005 f8fc 	bl	801545e <_ZN8touchgfx6muldivElllRl>
 8010266:	4428      	add	r0, r5
 8010268:	e7f2      	b.n	8010250 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

0801026a <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801026a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801026e:	f04f 0300 	mov.w	r3, #0
 8010272:	bf2c      	ite	cs
 8010274:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8010278:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801027c:	1899      	adds	r1, r3, r2
 801027e:	4288      	cmp	r0, r1
 8010280:	bf24      	itt	cs
 8010282:	1853      	addcs	r3, r2, r1
 8010284:	1a40      	subcs	r0, r0, r1
 8010286:	0892      	lsrs	r2, r2, #2
 8010288:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801028c:	d1f6      	bne.n	801027c <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801028e:	4618      	mov	r0, r3
 8010290:	4770      	bx	lr

08010292 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8010292:	b510      	push	{r4, lr}
 8010294:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8010298:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801029c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80102a0:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80102a4:	139b      	asrs	r3, r3, #14
 80102a6:	13a4      	asrs	r4, r4, #14
 80102a8:	429c      	cmp	r4, r3
 80102aa:	bfb8      	it	lt
 80102ac:	461c      	movlt	r4, r3
 80102ae:	2c01      	cmp	r4, #1
 80102b0:	dd07      	ble.n	80102c2 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80102b2:	fb91 f1f4 	sdiv	r1, r1, r4
 80102b6:	fb90 f0f4 	sdiv	r0, r0, r4
 80102ba:	f7ff ffea 	bl	8010292 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80102be:	4360      	muls	r0, r4
 80102c0:	bd10      	pop	{r4, pc}
 80102c2:	4340      	muls	r0, r0
 80102c4:	fb01 0001 	mla	r0, r1, r1, r0
 80102c8:	f7ff ffcf 	bl	801026a <_ZN8touchgfx7CWRUtil5isqrtEm>
 80102cc:	e7f8      	b.n	80102c0 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>
	...

080102d0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80102d0:	2800      	cmp	r0, #0
 80102d2:	b508      	push	{r3, lr}
 80102d4:	da05      	bge.n	80102e2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80102d6:	4240      	negs	r0, r0
 80102d8:	f7ff fffa 	bl	80102d0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80102dc:	4240      	negs	r0, r0
 80102de:	b240      	sxtb	r0, r0
 80102e0:	bd08      	pop	{r3, pc}
 80102e2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80102e6:	dc11      	bgt.n	801030c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80102e8:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80102ec:	dd09      	ble.n	8010302 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80102ee:	4340      	muls	r0, r0
 80102f0:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80102f4:	f7ff ffb9 	bl	801026a <_ZN8touchgfx7CWRUtil5isqrtEm>
 80102f8:	f7ff ffea 	bl	80102d0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80102fc:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8010300:	e7ed      	b.n	80102de <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8010302:	3003      	adds	r0, #3
 8010304:	4b02      	ldr	r3, [pc, #8]	; (8010310 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8010306:	10c0      	asrs	r0, r0, #3
 8010308:	5618      	ldrsb	r0, [r3, r0]
 801030a:	e7e9      	b.n	80102e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801030c:	2000      	movs	r0, #0
 801030e:	e7e7      	b.n	80102e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8010310:	080299a0 	.word	0x080299a0

08010314 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8010314:	4281      	cmp	r1, r0
 8010316:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010318:	460c      	mov	r4, r1
 801031a:	4615      	mov	r5, r2
 801031c:	dd07      	ble.n	801032e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 801031e:	4601      	mov	r1, r0
 8010320:	4620      	mov	r0, r4
 8010322:	f7ff fff7 	bl	8010314 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8010326:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801032a:	b003      	add	sp, #12
 801032c:	bd30      	pop	{r4, r5, pc}
 801032e:	f7ff ffb0 	bl	8010292 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8010332:	6028      	str	r0, [r5, #0]
 8010334:	2800      	cmp	r0, #0
 8010336:	d0f8      	beq.n	801032a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8010338:	4602      	mov	r2, r0
 801033a:	ab01      	add	r3, sp, #4
 801033c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010340:	4620      	mov	r0, r4
 8010342:	f005 f88c 	bl	801545e <_ZN8touchgfx6muldivElllRl>
 8010346:	f7ff ffc3 	bl	80102d0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801034a:	e7ee      	b.n	801032a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

0801034c <_ZN8touchgfx4LineC1Ev>:
 801034c:	b510      	push	{r4, lr}
 801034e:	4604      	mov	r4, r0
 8010350:	f013 fe20 	bl	8023f94 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8010354:	4b0c      	ldr	r3, [pc, #48]	; (8010388 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8010356:	2220      	movs	r2, #32
 8010358:	4620      	mov	r0, r4
 801035a:	6023      	str	r3, [r4, #0]
 801035c:	2300      	movs	r3, #0
 801035e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8010360:	2212      	movs	r2, #18
 8010362:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010366:	66e2      	str	r2, [r4, #108]	; 0x6c
 8010368:	60a3      	str	r3, [r4, #8]
 801036a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801036e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8010372:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8010376:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801037a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 801037e:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8010382:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8010386:	bd10      	pop	{r4, pc}
 8010388:	08029abc 	.word	0x08029abc

0801038c <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801038c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010390:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8010392:	4604      	mov	r4, r0
 8010394:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010396:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8010398:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801039a:	1aff      	subs	r7, r7, r3
 801039c:	eba5 0502 	sub.w	r5, r5, r2
 80103a0:	d142      	bne.n	8010428 <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 80103a2:	b955      	cbnz	r5, 80103ba <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 80103a4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 80103a8:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 80103ac:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 80103b0:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 80103b4:	b002      	add	sp, #8
 80103b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ba:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 80103be:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 80103c2:	4629      	mov	r1, r5
 80103c4:	2502      	movs	r5, #2
 80103c6:	4642      	mov	r2, r8
 80103c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80103ca:	f005 f867 	bl	801549c <_ZN8touchgfx6muldivElll>
 80103ce:	4642      	mov	r2, r8
 80103d0:	4639      	mov	r1, r7
 80103d2:	fb90 f6f5 	sdiv	r6, r0, r5
 80103d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80103d8:	f005 f860 	bl	801549c <_ZN8touchgfx6muldivElll>
 80103dc:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 80103e0:	fb90 f5f5 	sdiv	r5, r0, r5
 80103e4:	f1b9 0f00 	cmp.w	r9, #0
 80103e8:	d067      	beq.n	80104ba <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 80103ea:	f1b9 0f02 	cmp.w	r9, #2
 80103ee:	d878      	bhi.n	80104e2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 80103f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80103f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80103f4:	1b93      	subs	r3, r2, r6
 80103f6:	4432      	add	r2, r6
 80103f8:	1b5b      	subs	r3, r3, r5
 80103fa:	1b52      	subs	r2, r2, r5
 80103fc:	6463      	str	r3, [r4, #68]	; 0x44
 80103fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010400:	6522      	str	r2, [r4, #80]	; 0x50
 8010402:	18e9      	adds	r1, r5, r3
 8010404:	1b5b      	subs	r3, r3, r5
 8010406:	1b89      	subs	r1, r1, r6
 8010408:	1b9b      	subs	r3, r3, r6
 801040a:	6561      	str	r1, [r4, #84]	; 0x54
 801040c:	1b81      	subs	r1, r0, r6
 801040e:	4430      	add	r0, r6
 8010410:	4429      	add	r1, r5
 8010412:	4428      	add	r0, r5
 8010414:	64a1      	str	r1, [r4, #72]	; 0x48
 8010416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010418:	64e0      	str	r0, [r4, #76]	; 0x4c
 801041a:	186f      	adds	r7, r5, r1
 801041c:	1b49      	subs	r1, r1, r5
 801041e:	4437      	add	r7, r6
 8010420:	4431      	add	r1, r6
 8010422:	65a7      	str	r7, [r4, #88]	; 0x58
 8010424:	65e1      	str	r1, [r4, #92]	; 0x5c
 8010426:	e05b      	b.n	80104e0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8010428:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 801042c:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8010430:	2d00      	cmp	r5, #0
 8010432:	d0c6      	beq.n	80103c2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8010434:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8010438:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801043c:	fb93 f2f8 	sdiv	r2, r3, r8
 8010440:	fb08 3312 	mls	r3, r8, r2, r3
 8010444:	b353      	cbz	r3, 801049c <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8010446:	fb98 f2f3 	sdiv	r2, r8, r3
 801044a:	fb03 8812 	mls	r8, r3, r2, r8
 801044e:	f1b8 0f00 	cmp.w	r8, #0
 8010452:	d1f3      	bne.n	801043c <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8010454:	2b01      	cmp	r3, #1
 8010456:	f24b 5104 	movw	r1, #46340	; 0xb504
 801045a:	bf1c      	itt	ne
 801045c:	fb97 f7f3 	sdivne	r7, r7, r3
 8010460:	fb95 f5f3 	sdivne	r5, r5, r3
 8010464:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8010468:	4608      	mov	r0, r1
 801046a:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 801046e:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8010472:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8010476:	428b      	cmp	r3, r1
 8010478:	dd01      	ble.n	801047e <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 801047a:	428a      	cmp	r2, r1
 801047c:	dc10      	bgt.n	80104a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 801047e:	fb90 f3f3 	sdiv	r3, r0, r3
 8010482:	fb90 f2f2 	sdiv	r2, r0, r2
 8010486:	4293      	cmp	r3, r2
 8010488:	bfa8      	it	ge
 801048a:	4613      	movge	r3, r2
 801048c:	435f      	muls	r7, r3
 801048e:	435d      	muls	r5, r3
 8010490:	4629      	mov	r1, r5
 8010492:	4638      	mov	r0, r7
 8010494:	f7ff fefd 	bl	8010292 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8010498:	4680      	mov	r8, r0
 801049a:	e792      	b.n	80103c2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 801049c:	4643      	mov	r3, r8
 801049e:	e7d9      	b.n	8010454 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 80104a0:	fb93 f3f1 	sdiv	r3, r3, r1
 80104a4:	fb92 f2f1 	sdiv	r2, r2, r1
 80104a8:	4293      	cmp	r3, r2
 80104aa:	bfcc      	ite	gt
 80104ac:	3301      	addgt	r3, #1
 80104ae:	1c53      	addle	r3, r2, #1
 80104b0:	fb97 f7f3 	sdiv	r7, r7, r3
 80104b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80104b8:	e7ea      	b.n	8010490 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 80104ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80104bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80104be:	1b93      	subs	r3, r2, r6
 80104c0:	4432      	add	r2, r6
 80104c2:	6463      	str	r3, [r4, #68]	; 0x44
 80104c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80104c6:	6522      	str	r2, [r4, #80]	; 0x50
 80104c8:	18e9      	adds	r1, r5, r3
 80104ca:	1b5b      	subs	r3, r3, r5
 80104cc:	6561      	str	r1, [r4, #84]	; 0x54
 80104ce:	1b81      	subs	r1, r0, r6
 80104d0:	4430      	add	r0, r6
 80104d2:	64a1      	str	r1, [r4, #72]	; 0x48
 80104d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80104d6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80104d8:	186f      	adds	r7, r5, r1
 80104da:	1b49      	subs	r1, r1, r5
 80104dc:	65a7      	str	r7, [r4, #88]	; 0x58
 80104de:	65e1      	str	r1, [r4, #92]	; 0x5c
 80104e0:	6623      	str	r3, [r4, #96]	; 0x60
 80104e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80104e4:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80104e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80104ea:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 80104ee:	9200      	str	r2, [sp, #0]
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	680f      	ldr	r7, [r1, #0]
 80104f4:	3104      	adds	r1, #4
 80104f6:	9800      	ldr	r0, [sp, #0]
 80104f8:	42ba      	cmp	r2, r7
 80104fa:	bfa8      	it	ge
 80104fc:	463a      	movge	r2, r7
 80104fe:	4287      	cmp	r7, r0
 8010500:	9801      	ldr	r0, [sp, #4]
 8010502:	bfc8      	it	gt
 8010504:	9700      	strgt	r7, [sp, #0]
 8010506:	68cf      	ldr	r7, [r1, #12]
 8010508:	42bb      	cmp	r3, r7
 801050a:	bfa8      	it	ge
 801050c:	463b      	movge	r3, r7
 801050e:	4287      	cmp	r7, r0
 8010510:	bfc8      	it	gt
 8010512:	9701      	strgt	r7, [sp, #4]
 8010514:	458c      	cmp	ip, r1
 8010516:	d1ec      	bne.n	80104f2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8010518:	2720      	movs	r7, #32
 801051a:	4668      	mov	r0, sp
 801051c:	fb92 f8f7 	sdiv	r8, r2, r7
 8010520:	fb93 f7f7 	sdiv	r7, r3, r7
 8010524:	f7ff fd55 	bl	800ffd2 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8010528:	4682      	mov	sl, r0
 801052a:	a801      	add	r0, sp, #4
 801052c:	f7ff fd51 	bl	800ffd2 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8010530:	ebaa 0208 	sub.w	r2, sl, r8
 8010534:	1bc0      	subs	r0, r0, r7
 8010536:	f1b9 0f01 	cmp.w	r9, #1
 801053a:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 801053e:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 8010542:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 8010546:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 801054a:	f47f af33 	bne.w	80103b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 801054e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010552:	1b83      	subs	r3, r0, r6
 8010554:	6463      	str	r3, [r4, #68]	; 0x44
 8010556:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010558:	18ea      	adds	r2, r5, r3
 801055a:	6562      	str	r2, [r4, #84]	; 0x54
 801055c:	1b8a      	subs	r2, r1, r6
 801055e:	4431      	add	r1, r6
 8010560:	4406      	add	r6, r0
 8010562:	64a2      	str	r2, [r4, #72]	; 0x48
 8010564:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010566:	64e1      	str	r1, [r4, #76]	; 0x4c
 8010568:	18af      	adds	r7, r5, r2
 801056a:	1b52      	subs	r2, r2, r5
 801056c:	1b5d      	subs	r5, r3, r5
 801056e:	6526      	str	r6, [r4, #80]	; 0x50
 8010570:	65a7      	str	r7, [r4, #88]	; 0x58
 8010572:	65e2      	str	r2, [r4, #92]	; 0x5c
 8010574:	6625      	str	r5, [r4, #96]	; 0x60
 8010576:	e71d      	b.n	80103b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08010578 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8010578:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801057a:	428b      	cmp	r3, r1
 801057c:	d102      	bne.n	8010584 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801057e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010580:	4293      	cmp	r3, r2
 8010582:	d003      	beq.n	801058c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8010584:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 8010588:	f7ff bf00 	b.w	801038c <_ZN8touchgfx4Line17updateCachedShapeEv>
 801058c:	4770      	bx	lr

0801058e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801058e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010590:	428b      	cmp	r3, r1
 8010592:	d102      	bne.n	801059a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8010594:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010596:	4293      	cmp	r3, r2
 8010598:	d003      	beq.n	80105a2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801059a:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801059e:	f7ff bef5 	b.w	801038c <_ZN8touchgfx4Line17updateCachedShapeEv>
 80105a2:	4770      	bx	lr

080105a4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 80105a4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 80105a8:	f7ff bef0 	b.w	801038c <_ZN8touchgfx4Line17updateCachedShapeEv>

080105ac <_ZN8touchgfx6CanvasD1Ev>:
 80105ac:	4b04      	ldr	r3, [pc, #16]	; (80105c0 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80105ae:	b510      	push	{r4, lr}
 80105b0:	4604      	mov	r4, r0
 80105b2:	f840 3b20 	str.w	r3, [r0], #32
 80105b6:	f001 fa1b 	bl	80119f0 <_ZN8touchgfx7OutlineD1Ev>
 80105ba:	4620      	mov	r0, r4
 80105bc:	bd10      	pop	{r4, pc}
 80105be:	bf00      	nop
 80105c0:	08029998 	.word	0x08029998

080105c4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 80105c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c8:	b0a0      	sub	sp, #128	; 0x80
 80105ca:	4604      	mov	r4, r0
 80105cc:	460a      	mov	r2, r1
 80105ce:	4601      	mov	r1, r0
 80105d0:	a804      	add	r0, sp, #16
 80105d2:	f012 fd49 	bl	8023068 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80105d6:	2300      	movs	r3, #0
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d17c      	bne.n	80106dc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 80105e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80105e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80105e6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80105e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80105ea:	1ac0      	subs	r0, r0, r3
 80105ec:	eba1 0102 	sub.w	r1, r1, r2
 80105f0:	d437      	bmi.n	8010662 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 80105f2:	2900      	cmp	r1, #0
 80105f4:	aa01      	add	r2, sp, #4
 80105f6:	db2e      	blt.n	8010656 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 80105f8:	f7ff fe8c 	bl	8010314 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80105fc:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8010600:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8010602:	a804      	add	r0, sp, #16
 8010604:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010606:	f012 ff05 	bl	8023414 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801060a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801060c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801060e:	a804      	add	r0, sp, #16
 8010610:	f012 fdd8 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8010614:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8010616:	2db3      	cmp	r5, #179	; 0xb3
 8010618:	dc33      	bgt.n	8010682 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 801061a:	eba6 0805 	sub.w	r8, r6, r5
 801061e:	4640      	mov	r0, r8
 8010620:	f7ff fde4 	bl	80101ec <_ZN8touchgfx7CWRUtil4sineEi>
 8010624:	a902      	add	r1, sp, #8
 8010626:	9002      	str	r0, [sp, #8]
 8010628:	a801      	add	r0, sp, #4
 801062a:	f7ff fcc7 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801062e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010630:	1847      	adds	r7, r0, r1
 8010632:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8010636:	f7ff fdd9 	bl	80101ec <_ZN8touchgfx7CWRUtil4sineEi>
 801063a:	a903      	add	r1, sp, #12
 801063c:	9003      	str	r0, [sp, #12]
 801063e:	a801      	add	r0, sp, #4
 8010640:	f7ff fcbc 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010644:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010646:	4639      	mov	r1, r7
 8010648:	1a12      	subs	r2, r2, r0
 801064a:	a804      	add	r0, sp, #16
 801064c:	f012 fdba 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8010650:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010652:	441d      	add	r5, r3
 8010654:	e7df      	b.n	8010616 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8010656:	4249      	negs	r1, r1
 8010658:	f7ff fe5c 	bl	8010314 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801065c:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 8010660:	e7ce      	b.n	8010600 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8010662:	2900      	cmp	r1, #0
 8010664:	f1c0 0000 	rsb	r0, r0, #0
 8010668:	aa01      	add	r2, sp, #4
 801066a:	db04      	blt.n	8010676 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 801066c:	f7ff fe52 	bl	8010314 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8010670:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 8010674:	e7c4      	b.n	8010600 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8010676:	4249      	negs	r1, r1
 8010678:	f7ff fe4c 	bl	8010314 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801067c:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 8010680:	e7be      	b.n	8010600 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8010682:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010684:	a804      	add	r0, sp, #16
 8010686:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8010688:	f012 fd9c 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801068c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801068e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8010690:	a804      	add	r0, sp, #16
 8010692:	f012 fd97 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8010696:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8010698:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 801069c:	2d00      	cmp	r5, #0
 801069e:	dd31      	ble.n	8010704 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 80106a0:	eb05 0806 	add.w	r8, r5, r6
 80106a4:	4640      	mov	r0, r8
 80106a6:	f7ff fda1 	bl	80101ec <_ZN8touchgfx7CWRUtil4sineEi>
 80106aa:	a902      	add	r1, sp, #8
 80106ac:	9002      	str	r0, [sp, #8]
 80106ae:	a801      	add	r0, sp, #4
 80106b0:	f7ff fc84 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80106b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80106b6:	1847      	adds	r7, r0, r1
 80106b8:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 80106bc:	f7ff fd96 	bl	80101ec <_ZN8touchgfx7CWRUtil4sineEi>
 80106c0:	a903      	add	r1, sp, #12
 80106c2:	9003      	str	r0, [sp, #12]
 80106c4:	a801      	add	r0, sp, #4
 80106c6:	f7ff fc79 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80106ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80106cc:	4639      	mov	r1, r7
 80106ce:	1a12      	subs	r2, r2, r0
 80106d0:	a804      	add	r0, sp, #16
 80106d2:	f012 fd77 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80106d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80106d8:	1aed      	subs	r5, r5, r3
 80106da:	e7df      	b.n	801069c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 80106dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80106de:	a804      	add	r0, sp, #16
 80106e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80106e2:	f012 fe97 	bl	8023414 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80106e6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80106e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80106ea:	a804      	add	r0, sp, #16
 80106ec:	f012 fd6a 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80106f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80106f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80106f4:	a804      	add	r0, sp, #16
 80106f6:	f012 fd65 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80106fa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80106fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80106fe:	a804      	add	r0, sp, #16
 8010700:	f012 fd60 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8010704:	21ff      	movs	r1, #255	; 0xff
 8010706:	a804      	add	r0, sp, #16
 8010708:	f012 fdd8 	bl	80232bc <_ZN8touchgfx6Canvas6renderEh>
 801070c:	4604      	mov	r4, r0
 801070e:	a804      	add	r0, sp, #16
 8010710:	f7ff ff4c 	bl	80105ac <_ZN8touchgfx6CanvasD1Ev>
 8010714:	4620      	mov	r0, r4
 8010716:	b020      	add	sp, #128	; 0x80
 8010718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801071c <_ZN8touchgfx6CanvasD0Ev>:
 801071c:	b510      	push	{r4, lr}
 801071e:	4604      	mov	r4, r0
 8010720:	f7ff ff44 	bl	80105ac <_ZN8touchgfx6CanvasD1Ev>
 8010724:	2170      	movs	r1, #112	; 0x70
 8010726:	4620      	mov	r0, r4
 8010728:	f014 fb21 	bl	8024d6e <_ZdlPvj>
 801072c:	4620      	mov	r0, r4
 801072e:	bd10      	pop	{r4, pc}

08010730 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8010730:	b508      	push	{r3, lr}
 8010732:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8010736:	b10b      	cbz	r3, 801073c <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 8010738:	f7f4 fbcc 	bl	8004ed4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801073c:	bd08      	pop	{r3, pc}

0801073e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801073e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8010742:	4770      	bx	lr

08010744 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8010744:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8010748:	4770      	bx	lr

0801074a <_ZN8touchgfx13ScalableImageD1Ev>:
 801074a:	4770      	bx	lr

0801074c <_ZN8touchgfx13ScalableImageD0Ev>:
 801074c:	b510      	push	{r4, lr}
 801074e:	4604      	mov	r4, r0
 8010750:	212c      	movs	r1, #44	; 0x2c
 8010752:	f014 fb0c 	bl	8024d6e <_ZdlPvj>
 8010756:	4620      	mov	r0, r4
 8010758:	bd10      	pop	{r4, pc}

0801075a <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 801075a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801075c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010760:	4605      	mov	r5, r0
 8010762:	2bff      	cmp	r3, #255	; 0xff
 8010764:	d11e      	bne.n	80107a4 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8010766:	f101 0426 	add.w	r4, r1, #38	; 0x26
 801076a:	4668      	mov	r0, sp
 801076c:	4621      	mov	r1, r4
 801076e:	f006 fe19 	bl	80173a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010772:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8010776:	4620      	mov	r0, r4
 8010778:	f006 fdac 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801077c:	4286      	cmp	r6, r0
 801077e:	d111      	bne.n	80107a4 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8010780:	4621      	mov	r1, r4
 8010782:	a802      	add	r0, sp, #8
 8010784:	f006 fe0e 	bl	80173a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010788:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801078c:	4620      	mov	r0, r4
 801078e:	f006 fdd5 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010792:	4286      	cmp	r6, r0
 8010794:	d106      	bne.n	80107a4 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8010796:	4621      	mov	r1, r4
 8010798:	4628      	mov	r0, r5
 801079a:	f006 fe03 	bl	80173a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801079e:	4628      	mov	r0, r5
 80107a0:	b004      	add	sp, #16
 80107a2:	bd70      	pop	{r4, r5, r6, pc}
 80107a4:	2300      	movs	r3, #0
 80107a6:	802b      	strh	r3, [r5, #0]
 80107a8:	806b      	strh	r3, [r5, #2]
 80107aa:	80ab      	strh	r3, [r5, #4]
 80107ac:	80eb      	strh	r3, [r5, #6]
 80107ae:	e7f6      	b.n	801079e <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

080107b0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	2300      	movs	r3, #0
 80107b4:	2501      	movs	r5, #1
 80107b6:	4604      	mov	r4, r0
 80107b8:	8083      	strh	r3, [r0, #4]
 80107ba:	80c3      	strh	r3, [r0, #6]
 80107bc:	8103      	strh	r3, [r0, #8]
 80107be:	8143      	strh	r3, [r0, #10]
 80107c0:	8183      	strh	r3, [r0, #12]
 80107c2:	81c3      	strh	r3, [r0, #14]
 80107c4:	8203      	strh	r3, [r0, #16]
 80107c6:	8243      	strh	r3, [r0, #18]
 80107c8:	61c3      	str	r3, [r0, #28]
 80107ca:	8403      	strh	r3, [r0, #32]
 80107cc:	8443      	strh	r3, [r0, #34]	; 0x22
 80107ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80107d2:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 80107d6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80107da:	4b07      	ldr	r3, [pc, #28]	; (80107f8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 80107dc:	6003      	str	r3, [r0, #0]
 80107de:	880b      	ldrh	r3, [r1, #0]
 80107e0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80107e2:	23ff      	movs	r3, #255	; 0xff
 80107e4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80107e8:	f001 f88e 	bl	8011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80107ec:	4b03      	ldr	r3, [pc, #12]	; (80107fc <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 80107ee:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 80107f2:	4620      	mov	r0, r4
 80107f4:	6023      	str	r3, [r4, #0]
 80107f6:	bd38      	pop	{r3, r4, r5, pc}
 80107f8:	08029df0 	.word	0x08029df0
 80107fc:	08029b34 	.word	0x08029b34

08010800 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8010800:	4603      	mov	r3, r0
 8010802:	3026      	adds	r0, #38	; 0x26
 8010804:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010808:	b90b      	cbnz	r3, 801080e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801080a:	f004 bd9d 	b.w	8015348 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801080e:	f004 bdab 	b.w	8015368 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08010814 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8010814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010818:	4604      	mov	r4, r0
 801081a:	469b      	mov	fp, r3
 801081c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8010820:	b0b3      	sub	sp, #204	; 0xcc
 8010822:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010826:	f9b1 6000 	ldrsh.w	r6, [r1]
 801082a:	8888      	ldrh	r0, [r1, #4]
 801082c:	9206      	str	r2, [sp, #24]
 801082e:	2200      	movs	r2, #0
 8010830:	4430      	add	r0, r6
 8010832:	9211      	str	r2, [sp, #68]	; 0x44
 8010834:	b280      	uxth	r0, r0
 8010836:	fa0f fe80 	sxth.w	lr, r0
 801083a:	4596      	cmp	lr, r2
 801083c:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 8010840:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 8010844:	f340 811a 	ble.w	8010a7c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010848:	45b4      	cmp	ip, r6
 801084a:	f340 8117 	ble.w	8010a7c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801084e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010852:	88ca      	ldrh	r2, [r1, #6]
 8010854:	442a      	add	r2, r5
 8010856:	b292      	uxth	r2, r2
 8010858:	b211      	sxth	r1, r2
 801085a:	2900      	cmp	r1, #0
 801085c:	f340 810e 	ble.w	8010a7c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010860:	42ab      	cmp	r3, r5
 8010862:	f340 810b 	ble.w	8010a7c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010866:	45f4      	cmp	ip, lr
 8010868:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801086c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8010870:	bfb8      	it	lt
 8010872:	fa1f f08c 	uxthlt.w	r0, ip
 8010876:	428b      	cmp	r3, r1
 8010878:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801087c:	bfb8      	it	lt
 801087e:	b29a      	uxthlt	r2, r3
 8010880:	1b80      	subs	r0, r0, r6
 8010882:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8010886:	1b52      	subs	r2, r2, r5
 8010888:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801088c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8010890:	ab11      	add	r3, sp, #68	; 0x44
 8010892:	ad13      	add	r5, sp, #76	; 0x4c
 8010894:	6822      	ldr	r2, [r4, #0]
 8010896:	1d26      	adds	r6, r4, #4
 8010898:	9307      	str	r3, [sp, #28]
 801089a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801089c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80108a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80108a4:	4629      	mov	r1, r5
 80108a6:	4620      	mov	r0, r4
 80108a8:	4790      	blx	r2
 80108aa:	4621      	mov	r1, r4
 80108ac:	a815      	add	r0, sp, #84	; 0x54
 80108ae:	f004 fcad 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80108b2:	a815      	add	r0, sp, #84	; 0x54
 80108b4:	f003 fa1a 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80108b8:	9b07      	ldr	r3, [sp, #28]
 80108ba:	4631      	mov	r1, r6
 80108bc:	4618      	mov	r0, r3
 80108be:	f003 fa59 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80108c2:	4628      	mov	r0, r5
 80108c4:	f104 0526 	add.w	r5, r4, #38	; 0x26
 80108c8:	f003 fa10 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80108cc:	4628      	mov	r0, r5
 80108ce:	f006 fded 	bl	80174ac <_ZNK8touchgfx6Bitmap7getDataEv>
 80108d2:	9007      	str	r0, [sp, #28]
 80108d4:	2800      	cmp	r0, #0
 80108d6:	f000 80ce 	beq.w	8010a76 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 80108da:	f8db 2000 	ldr.w	r2, [fp]
 80108de:	a90d      	add	r1, sp, #52	; 0x34
 80108e0:	a809      	add	r0, sp, #36	; 0x24
 80108e2:	9209      	str	r2, [sp, #36]	; 0x24
 80108e4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80108e8:	920a      	str	r2, [sp, #40]	; 0x28
 80108ea:	f8db 2008 	ldr.w	r2, [fp, #8]
 80108ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80108f0:	f8db 200c 	ldr.w	r2, [fp, #12]
 80108f4:	920c      	str	r2, [sp, #48]	; 0x30
 80108f6:	f8da 2000 	ldr.w	r2, [sl]
 80108fa:	920d      	str	r2, [sp, #52]	; 0x34
 80108fc:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010900:	920e      	str	r2, [sp, #56]	; 0x38
 8010902:	f8da 2008 	ldr.w	r2, [sl, #8]
 8010906:	920f      	str	r2, [sp, #60]	; 0x3c
 8010908:	f8da 200c 	ldr.w	r2, [sl, #12]
 801090c:	9210      	str	r2, [sp, #64]	; 0x40
 801090e:	4632      	mov	r2, r6
 8010910:	f003 fa14 	bl	8013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010914:	4632      	mov	r2, r6
 8010916:	a90e      	add	r1, sp, #56	; 0x38
 8010918:	a80a      	add	r0, sp, #40	; 0x28
 801091a:	f003 fa0f 	bl	8013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801091e:	4632      	mov	r2, r6
 8010920:	a90f      	add	r1, sp, #60	; 0x3c
 8010922:	a80b      	add	r0, sp, #44	; 0x2c
 8010924:	f003 fa0a 	bl	8013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010928:	4632      	mov	r2, r6
 801092a:	a910      	add	r1, sp, #64	; 0x40
 801092c:	a80c      	add	r0, sp, #48	; 0x30
 801092e:	f003 fa05 	bl	8013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8010932:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8010936:	edd7 3a00 	vldr	s7, [r7]
 801093a:	eef0 6a67 	vmov.f32	s13, s15
 801093e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8010942:	ed97 5a01 	vldr	s10, [r7, #4]
 8010946:	eeb0 7a67 	vmov.f32	s14, s15
 801094a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801094e:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8010952:	edd9 2a00 	vldr	s5, [r9]
 8010956:	eeb0 6a67 	vmov.f32	s12, s15
 801095a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801095e:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8010962:	ed98 3a00 	vldr	s6, [r8]
 8010966:	ed99 4a01 	vldr	s8, [r9, #4]
 801096a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801096e:	edd8 4a01 	vldr	s9, [r8, #4]
 8010972:	edd9 5a02 	vldr	s11, [r9, #8]
 8010976:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801097a:	ee16 6a10 	vmov	r6, s12
 801097e:	eeb0 6a67 	vmov.f32	s12, s15
 8010982:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8010986:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801098a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801098e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8010992:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 8010996:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 801099a:	ee16 0a10 	vmov	r0, s12
 801099e:	eeb0 6a67 	vmov.f32	s12, s15
 80109a2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80109a6:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 80109aa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80109ae:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80109b2:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 80109b6:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 80109ba:	ee16 1a10 	vmov	r1, s12
 80109be:	eeb0 6a67 	vmov.f32	s12, s15
 80109c2:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80109c6:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 80109ca:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80109ce:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80109d2:	f8d8 b008 	ldr.w	fp, [r8, #8]
 80109d6:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80109da:	68ff      	ldr	r7, [r7, #12]
 80109dc:	ee16 2a10 	vmov	r2, s12
 80109e0:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 80109e4:	9624      	str	r6, [sp, #144]	; 0x90
 80109e6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80109ea:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 80109ee:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 80109f2:	4628      	mov	r0, r5
 80109f4:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 80109f8:	9b06      	ldr	r3, [sp, #24]
 80109fa:	922d      	str	r2, [sp, #180]	; 0xb4
 80109fc:	4a21      	ldr	r2, [pc, #132]	; (8010a84 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 80109fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a00:	8812      	ldrh	r2, [r2, #0]
 8010a02:	9b07      	ldr	r3, [sp, #28]
 8010a04:	9218      	str	r2, [sp, #96]	; 0x60
 8010a06:	9319      	str	r3, [sp, #100]	; 0x64
 8010a08:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8010a0c:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8010a10:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8010a14:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8010a18:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8010a1c:	9731      	str	r7, [sp, #196]	; 0xc4
 8010a1e:	f006 fd75 	bl	801750c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8010a22:	901a      	str	r0, [sp, #104]	; 0x68
 8010a24:	4628      	mov	r0, r5
 8010a26:	f006 fc55 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010a2a:	901b      	str	r0, [sp, #108]	; 0x6c
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	f006 fc85 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010a32:	901c      	str	r0, [sp, #112]	; 0x70
 8010a34:	4628      	mov	r0, r5
 8010a36:	f006 fc4d 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010a3a:	4b13      	ldr	r3, [pc, #76]	; (8010a88 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 8010a3c:	901d      	str	r0, [sp, #116]	; 0x74
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010a44:	b10a      	cbz	r2, 8010a4a <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 8010a46:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8010a48:	b905      	cbnz	r5, 8010a4c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 8010a4a:	689d      	ldr	r5, [r3, #8]
 8010a4c:	682b      	ldr	r3, [r5, #0]
 8010a4e:	4620      	mov	r0, r4
 8010a50:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8010a52:	f7ff fed5 	bl	8010800 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8010a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a5a:	aa1e      	add	r2, sp, #120	; 0x78
 8010a5c:	a917      	add	r1, sp, #92	; 0x5c
 8010a5e:	9304      	str	r3, [sp, #16]
 8010a60:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010a64:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010a68:	ab13      	add	r3, sp, #76	; 0x4c
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	9301      	str	r3, [sp, #4]
 8010a6e:	ab15      	add	r3, sp, #84	; 0x54
 8010a70:	9300      	str	r3, [sp, #0]
 8010a72:	ab19      	add	r3, sp, #100	; 0x64
 8010a74:	47b0      	blx	r6
 8010a76:	b033      	add	sp, #204	; 0xcc
 8010a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	9312      	str	r3, [sp, #72]	; 0x48
 8010a80:	e706      	b.n	8010890 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 8010a82:	bf00      	nop
 8010a84:	20027e92 	.word	0x20027e92
 8010a88:	20027e98 	.word	0x20027e98

08010a8c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	ed2d 8b04 	vpush	{d8-d9}
 8010a92:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8010a96:	b098      	sub	sp, #96	; 0x60
 8010a98:	4604      	mov	r4, r0
 8010a9a:	460e      	mov	r6, r1
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d065      	beq.n	8010b6c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8010aa0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010aa4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8010aa8:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8010b88 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8010aac:	ee09 3a10 	vmov	s18, r3
 8010ab0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010ab4:	4628      	mov	r0, r5
 8010ab6:	ee08 3a90 	vmov	s17, r3
 8010aba:	4b34      	ldr	r3, [pc, #208]	; (8010b8c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8010abc:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8010ac0:	930c      	str	r3, [sp, #48]	; 0x30
 8010ac2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8010ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8010ac8:	930e      	str	r3, [sp, #56]	; 0x38
 8010aca:	ee39 9a08 	vadd.f32	s18, s18, s16
 8010ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ad0:	f006 fc00 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010ad4:	ee07 0a90 	vmov	s15, r0
 8010ad8:	4628      	mov	r0, r5
 8010ada:	ee78 8a88 	vadd.f32	s17, s17, s16
 8010ade:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8010ae2:	f006 fc2b 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010ae6:	4b2a      	ldr	r3, [pc, #168]	; (8010b90 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8010ae8:	ee07 0a90 	vmov	s15, r0
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010af2:	eef0 7a48 	vmov.f32	s15, s16
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d13c      	bne.n	8010b74 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 8010afa:	eef0 6a69 	vmov.f32	s13, s19
 8010afe:	ee19 3a90 	vmov	r3, s19
 8010b02:	eeb0 6a47 	vmov.f32	s12, s14
 8010b06:	eef0 5a47 	vmov.f32	s11, s14
 8010b0a:	eef0 9a48 	vmov.f32	s19, s16
 8010b0e:	eeb0 7a48 	vmov.f32	s14, s16
 8010b12:	9314      	str	r3, [sp, #80]	; 0x50
 8010b14:	ab14      	add	r3, sp, #80	; 0x50
 8010b16:	2200      	movs	r2, #0
 8010b18:	4631      	mov	r1, r6
 8010b1a:	9303      	str	r3, [sp, #12]
 8010b1c:	ab10      	add	r3, sp, #64	; 0x40
 8010b1e:	4620      	mov	r0, r4
 8010b20:	edcd 7a04 	vstr	s15, [sp, #16]
 8010b24:	9302      	str	r3, [sp, #8]
 8010b26:	ab0c      	add	r3, sp, #48	; 0x30
 8010b28:	ed8d 9a05 	vstr	s18, [sp, #20]
 8010b2c:	9301      	str	r3, [sp, #4]
 8010b2e:	ab08      	add	r3, sp, #32
 8010b30:	ed8d 9a06 	vstr	s18, [sp, #24]
 8010b34:	9300      	str	r3, [sp, #0]
 8010b36:	ab04      	add	r3, sp, #16
 8010b38:	edcd 7a07 	vstr	s15, [sp, #28]
 8010b3c:	edcd 7a08 	vstr	s15, [sp, #32]
 8010b40:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8010b44:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8010b48:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 8010b4c:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8010b50:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 8010b54:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 8010b58:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8010b5c:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8010b60:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 8010b64:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 8010b68:	f7ff fe54 	bl	8010814 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8010b6c:	b018      	add	sp, #96	; 0x60
 8010b6e:	ecbd 8b04 	vpop	{d8-d9}
 8010b72:	bd70      	pop	{r4, r5, r6, pc}
 8010b74:	eef0 6a47 	vmov.f32	s13, s14
 8010b78:	ee18 3a10 	vmov	r3, s16
 8010b7c:	eef0 5a69 	vmov.f32	s11, s19
 8010b80:	eeb0 6a48 	vmov.f32	s12, s16
 8010b84:	e7c5      	b.n	8010b12 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 8010b86:	bf00      	nop
 8010b88:	00000000 	.word	0x00000000
 8010b8c:	42c80000 	.word	0x42c80000
 8010b90:	20027e90 	.word	0x20027e90

08010b94 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8010b94:	2000      	movs	r0, #0
 8010b96:	4770      	bx	lr

08010b98 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8010b98:	4b07      	ldr	r3, [pc, #28]	; (8010bb8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8010b9a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8010b9c:	881b      	ldrh	r3, [r3, #0]
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	bf81      	itttt	hi
 8010ba2:	4b06      	ldrhi	r3, [pc, #24]	; (8010bbc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8010ba4:	681b      	ldrhi	r3, [r3, #0]
 8010ba6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8010baa:	7858      	ldrbhi	r0, [r3, #1]
 8010bac:	bf8c      	ite	hi
 8010bae:	f000 0003 	andhi.w	r0, r0, #3
 8010bb2:	2000      	movls	r0, #0
 8010bb4:	4770      	bx	lr
 8010bb6:	bf00      	nop
 8010bb8:	20027ef4 	.word	0x20027ef4
 8010bbc:	20027ef0 	.word	0x20027ef0

08010bc0 <_ZN8touchgfx8TextAreaD1Ev>:
 8010bc0:	4770      	bx	lr
	...

08010bc4 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8010bc4:	4b11      	ldr	r3, [pc, #68]	; (8010c0c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8010bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bca:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8010bcc:	4604      	mov	r4, r0
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	428b      	cmp	r3, r1
 8010bd2:	d918      	bls.n	8010c06 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8010bd4:	6803      	ldr	r3, [r0, #0]
 8010bd6:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8010bd8:	4b0d      	ldr	r3, [pc, #52]	; (8010c10 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8010bda:	6818      	ldr	r0, [r3, #0]
 8010bdc:	f7f5 fac6 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	4606      	mov	r6, r0
 8010be4:	4620      	mov	r0, r4
 8010be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010be8:	4798      	blx	r3
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	4607      	mov	r7, r0
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bf4:	4798      	blx	r3
 8010bf6:	463a      	mov	r2, r7
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	4631      	mov	r1, r6
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	46ac      	mov	ip, r5
 8010c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c04:	4760      	bx	ip
 8010c06:	2000      	movs	r0, #0
 8010c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c0c:	20027ef4 	.word	0x20027ef4
 8010c10:	20027efc 	.word	0x20027efc

08010c14 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8010c14:	4b18      	ldr	r3, [pc, #96]	; (8010c78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8010c16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c1a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	428b      	cmp	r3, r1
 8010c22:	d926      	bls.n	8010c72 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8010c24:	4b15      	ldr	r3, [pc, #84]	; (8010c7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8010c2c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8010c30:	4b13      	ldr	r3, [pc, #76]	; (8010c80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8010c32:	7855      	ldrb	r5, [r2, #1]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8010c3a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8010c3e:	6833      	ldr	r3, [r6, #0]
 8010c40:	69df      	ldr	r7, [r3, #28]
 8010c42:	4b10      	ldr	r3, [pc, #64]	; (8010c84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8010c44:	6818      	ldr	r0, [r3, #0]
 8010c46:	f7f5 fa91 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 8010c4a:	6823      	ldr	r3, [r4, #0]
 8010c4c:	4680      	mov	r8, r0
 8010c4e:	4620      	mov	r0, r4
 8010c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c52:	4798      	blx	r3
 8010c54:	6823      	ldr	r3, [r4, #0]
 8010c56:	4681      	mov	r9, r0
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c5e:	4798      	blx	r3
 8010c60:	464b      	mov	r3, r9
 8010c62:	9000      	str	r0, [sp, #0]
 8010c64:	4642      	mov	r2, r8
 8010c66:	4629      	mov	r1, r5
 8010c68:	4630      	mov	r0, r6
 8010c6a:	47b8      	blx	r7
 8010c6c:	b003      	add	sp, #12
 8010c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c72:	2000      	movs	r0, #0
 8010c74:	e7fa      	b.n	8010c6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8010c76:	bf00      	nop
 8010c78:	20027ef4 	.word	0x20027ef4
 8010c7c:	20027ef0 	.word	0x20027ef0
 8010c80:	20027ef8 	.word	0x20027ef8
 8010c84:	20027efc 	.word	0x20027efc

08010c88 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8010c88:	b40e      	push	{r1, r2, r3}
 8010c8a:	4b30      	ldr	r3, [pc, #192]	; (8010d4c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8010c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c90:	881a      	ldrh	r2, [r3, #0]
 8010c92:	b09d      	sub	sp, #116	; 0x74
 8010c94:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8010c96:	4604      	mov	r4, r0
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d954      	bls.n	8010d46 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8010c9c:	aa26      	add	r2, sp, #152	; 0x98
 8010c9e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8010d50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8010ca2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8010d54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8010ca6:	9202      	str	r2, [sp, #8]
 8010ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8010cac:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8010cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8010cb4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8010cb8:	682b      	ldr	r3, [r5, #0]
 8010cba:	4628      	mov	r0, r5
 8010cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cbe:	4798      	blx	r3
 8010cc0:	4606      	mov	r6, r0
 8010cc2:	b207      	sxth	r7, r0
 8010cc4:	a803      	add	r0, sp, #12
 8010cc6:	f004 ff72 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 8010cca:	682b      	ldr	r3, [r5, #0]
 8010ccc:	4628      	mov	r0, r5
 8010cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cd0:	4798      	blx	r3
 8010cd2:	682b      	ldr	r3, [r5, #0]
 8010cd4:	4682      	mov	sl, r0
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010cda:	4798      	blx	r3
 8010cdc:	4653      	mov	r3, sl
 8010cde:	9000      	str	r0, [sp, #0]
 8010ce0:	a803      	add	r0, sp, #12
 8010ce2:	9a02      	ldr	r2, [sp, #8]
 8010ce4:	9925      	ldr	r1, [sp, #148]	; 0x94
 8010ce6:	f004 ffbd 	bl	8015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010cea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8010cec:	f8d9 3000 	ldr.w	r3, [r9]
 8010cf0:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8010cf4:	8925      	ldrh	r5, [r4, #8]
 8010cf6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8010cfa:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8010cfe:	eba5 050c 	sub.w	r5, r5, ip
 8010d02:	784a      	ldrb	r2, [r1, #1]
 8010d04:	f8d8 3000 	ldr.w	r3, [r8]
 8010d08:	b22d      	sxth	r5, r5
 8010d0a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8010d0e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8010d12:	9500      	str	r5, [sp, #0]
 8010d14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010d18:	a803      	add	r0, sp, #12
 8010d1a:	f002 fcfc 	bl	8013716 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010d1e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8010d22:	b203      	sxth	r3, r0
 8010d24:	18b9      	adds	r1, r7, r2
 8010d26:	2900      	cmp	r1, #0
 8010d28:	dd0b      	ble.n	8010d42 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	fb13 f302 	smulbb	r3, r3, r2
 8010d30:	fb16 3300 	smlabb	r3, r6, r0, r3
 8010d34:	b21f      	sxth	r7, r3
 8010d36:	4638      	mov	r0, r7
 8010d38:	b01d      	add	sp, #116	; 0x74
 8010d3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d3e:	b003      	add	sp, #12
 8010d40:	4770      	bx	lr
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	dcf7      	bgt.n	8010d36 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8010d46:	2700      	movs	r7, #0
 8010d48:	e7f5      	b.n	8010d36 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8010d4a:	bf00      	nop
 8010d4c:	20027ef4 	.word	0x20027ef4
 8010d50:	20027ef0 	.word	0x20027ef0
 8010d54:	20027ef8 	.word	0x20027ef8

08010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8010d58:	4bbc      	ldr	r3, [pc, #752]	; (801104c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8010d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d5e:	460c      	mov	r4, r1
 8010d60:	881b      	ldrh	r3, [r3, #0]
 8010d62:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8010d64:	b0a9      	sub	sp, #164	; 0xa4
 8010d66:	4681      	mov	r9, r0
 8010d68:	428b      	cmp	r3, r1
 8010d6a:	d809      	bhi.n	8010d80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d72:	6083      	str	r3, [r0, #8]
 8010d74:	e9c0 3200 	strd	r3, r2, [r0]
 8010d78:	4648      	mov	r0, r9
 8010d7a:	b029      	add	sp, #164	; 0xa4
 8010d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d80:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8011054 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8010d84:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8010d88:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8011058 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8010d8c:	f8db 3000 	ldr.w	r3, [fp]
 8010d90:	f8d8 0000 	ldr.w	r0, [r8]
 8010d94:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8010d98:	4bad      	ldr	r3, [pc, #692]	; (8011050 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8010da0:	f7f5 f9e4 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 8010da4:	4607      	mov	r7, r0
 8010da6:	682b      	ldr	r3, [r5, #0]
 8010da8:	4628      	mov	r0, r5
 8010daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dac:	4798      	blx	r3
 8010dae:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8010db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010db4:	4430      	add	r0, r6
 8010db6:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8010dba:	b283      	uxth	r3, r0
 8010dbc:	4650      	mov	r0, sl
 8010dbe:	9302      	str	r3, [sp, #8]
 8010dc0:	2e00      	cmp	r6, #0
 8010dc2:	f040 8090 	bne.w	8010ee6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8010dc6:	f004 fef2 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 8010dca:	682b      	ldr	r3, [r5, #0]
 8010dcc:	4628      	mov	r0, r5
 8010dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dd0:	4798      	blx	r3
 8010dd2:	682b      	ldr	r3, [r5, #0]
 8010dd4:	9005      	str	r0, [sp, #20]
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dda:	4798      	blx	r3
 8010ddc:	6823      	ldr	r3, [r4, #0]
 8010dde:	4680      	mov	r8, r0
 8010de0:	4620      	mov	r0, r4
 8010de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010de4:	4798      	blx	r3
 8010de6:	6822      	ldr	r2, [r4, #0]
 8010de8:	9004      	str	r0, [sp, #16]
 8010dea:	4620      	mov	r0, r4
 8010dec:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010df0:	4790      	blx	r2
 8010df2:	9905      	ldr	r1, [sp, #20]
 8010df4:	9b04      	ldr	r3, [sp, #16]
 8010df6:	460a      	mov	r2, r1
 8010df8:	4639      	mov	r1, r7
 8010dfa:	4637      	mov	r7, r6
 8010dfc:	9001      	str	r0, [sp, #4]
 8010dfe:	9300      	str	r3, [sp, #0]
 8010e00:	4650      	mov	r0, sl
 8010e02:	4643      	mov	r3, r8
 8010e04:	f004 ff43 	bl	8015c8e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8010e08:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	f8db 3000 	ldr.w	r3, [fp]
 8010e10:	4650      	mov	r0, sl
 8010e12:	3601      	adds	r6, #1
 8010e14:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010e18:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010e1c:	b2b6      	uxth	r6, r6
 8010e1e:	785b      	ldrb	r3, [r3, #1]
 8010e20:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010e24:	f002 f9c8 	bl	80131b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8010e28:	4287      	cmp	r7, r0
 8010e2a:	bfb8      	it	lt
 8010e2c:	b207      	sxthlt	r7, r0
 8010e2e:	4650      	mov	r0, sl
 8010e30:	f004 fee4 	bl	8015bfc <_ZN8touchgfx12TextProvider11endOfStringEv>
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d0e7      	beq.n	8010e08 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8010e38:	9b02      	ldr	r3, [sp, #8]
 8010e3a:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8010e3e:	fb13 f606 	smulbb	r6, r3, r6
 8010e42:	eba6 0608 	sub.w	r6, r6, r8
 8010e46:	b2b6      	uxth	r6, r6
 8010e48:	fa0f f886 	sxth.w	r8, r6
 8010e4c:	f1b8 0f00 	cmp.w	r8, #0
 8010e50:	dd06      	ble.n	8010e60 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 8010e52:	682b      	ldr	r3, [r5, #0]
 8010e54:	4628      	mov	r0, r5
 8010e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e58:	4798      	blx	r3
 8010e5a:	4430      	add	r0, r6
 8010e5c:	fa0f f880 	sxth.w	r8, r0
 8010e60:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010e64:	4620      	mov	r0, r4
 8010e66:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8010e6a:	6823      	ldr	r3, [r4, #0]
 8010e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e6e:	bf0c      	ite	eq
 8010e70:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8010e74:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8010e78:	4798      	blx	r3
 8010e7a:	2801      	cmp	r0, #1
 8010e7c:	b2ba      	uxth	r2, r7
 8010e7e:	f000 80d2 	beq.w	8011026 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8010e82:	2802      	cmp	r0, #2
 8010e84:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8010e88:	f000 80d3 	beq.w	8011032 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8010e8c:	b21e      	sxth	r6, r3
 8010e8e:	7a29      	ldrb	r1, [r5, #8]
 8010e90:	7a6d      	ldrb	r5, [r5, #9]
 8010e92:	1a76      	subs	r6, r6, r1
 8010e94:	4429      	add	r1, r5
 8010e96:	b2b3      	uxth	r3, r6
 8010e98:	440a      	add	r2, r1
 8010e9a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8010e9e:	b21f      	sxth	r7, r3
 8010ea0:	b292      	uxth	r2, r2
 8010ea2:	2902      	cmp	r1, #2
 8010ea4:	b216      	sxth	r6, r2
 8010ea6:	f000 80c7 	beq.w	8011038 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8010eaa:	2903      	cmp	r1, #3
 8010eac:	f000 80d6 	beq.w	801105c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8010eb0:	2901      	cmp	r1, #1
 8010eb2:	f040 80dc 	bne.w	801106e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8010eb6:	8923      	ldrh	r3, [r4, #8]
 8010eb8:	4632      	mov	r2, r6
 8010eba:	463d      	mov	r5, r7
 8010ebc:	4646      	mov	r6, r8
 8010ebe:	eba3 0308 	sub.w	r3, r3, r8
 8010ec2:	4690      	mov	r8, r2
 8010ec4:	b21f      	sxth	r7, r3
 8010ec6:	9b03      	ldr	r3, [sp, #12]
 8010ec8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8010eca:	6818      	ldr	r0, [r3, #0]
 8010ecc:	f7f5 f94e 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 8010ed0:	f8a9 7000 	strh.w	r7, [r9]
 8010ed4:	f8a9 5002 	strh.w	r5, [r9, #2]
 8010ed8:	f8a9 6004 	strh.w	r6, [r9, #4]
 8010edc:	f8a9 8006 	strh.w	r8, [r9, #6]
 8010ee0:	f8c9 0008 	str.w	r0, [r9, #8]
 8010ee4:	e748      	b.n	8010d78 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8010ee6:	f004 fe62 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 8010eea:	682b      	ldr	r3, [r5, #0]
 8010eec:	4628      	mov	r0, r5
 8010eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ef0:	4798      	blx	r3
 8010ef2:	682b      	ldr	r3, [r5, #0]
 8010ef4:	4606      	mov	r6, r0
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010efa:	4798      	blx	r3
 8010efc:	6823      	ldr	r3, [r4, #0]
 8010efe:	4680      	mov	r8, r0
 8010f00:	4620      	mov	r0, r4
 8010f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f04:	4798      	blx	r3
 8010f06:	6822      	ldr	r2, [r4, #0]
 8010f08:	9004      	str	r0, [sp, #16]
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010f10:	4790      	blx	r2
 8010f12:	9b04      	ldr	r3, [sp, #16]
 8010f14:	4632      	mov	r2, r6
 8010f16:	9001      	str	r0, [sp, #4]
 8010f18:	9300      	str	r3, [sp, #0]
 8010f1a:	4639      	mov	r1, r7
 8010f1c:	4643      	mov	r3, r8
 8010f1e:	4650      	mov	r0, sl
 8010f20:	f004 feb5 	bl	8015c8e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8010f24:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010f28:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8010f2c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8010f30:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010f34:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8010f36:	bf0a      	itet	eq
 8010f38:	4642      	moveq	r2, r8
 8010f3a:	461a      	movne	r2, r3
 8010f3c:	4698      	moveq	r8, r3
 8010f3e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8010f42:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8010f46:	1ad2      	subs	r2, r2, r3
 8010f48:	f8db 3000 	ldr.w	r3, [fp]
 8010f4c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010f50:	7859      	ldrb	r1, [r3, #1]
 8010f52:	2300      	movs	r3, #0
 8010f54:	f8cd a020 	str.w	sl, [sp, #32]
 8010f58:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8010f5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010f60:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8010f64:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8010f68:	950a      	str	r5, [sp, #40]	; 0x28
 8010f6a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8010f6e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8010f72:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8010f76:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8010f7a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8010f7e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010f82:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8010f86:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010f8a:	b350      	cbz	r0, 8010fe2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8010f8c:	682b      	ldr	r3, [r5, #0]
 8010f8e:	4628      	mov	r0, r5
 8010f90:	695b      	ldr	r3, [r3, #20]
 8010f92:	4798      	blx	r3
 8010f94:	4607      	mov	r7, r0
 8010f96:	b320      	cbz	r0, 8010fe2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8010f98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	6803      	ldr	r3, [r0, #0]
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	4798      	blx	r3
 8010fa2:	4606      	mov	r6, r0
 8010fa4:	b1e8      	cbz	r0, 8010fe2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8010fa6:	7b43      	ldrb	r3, [r0, #13]
 8010fa8:	7a82      	ldrb	r2, [r0, #10]
 8010faa:	005b      	lsls	r3, r3, #1
 8010fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8010fb6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8010fba:	2b04      	cmp	r3, #4
 8010fbc:	d111      	bne.n	8010fe2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8010fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010fc0:	4632      	mov	r2, r6
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	6803      	ldr	r3, [r0, #0]
 8010fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fc8:	4798      	blx	r3
 8010fca:	7b73      	ldrb	r3, [r6, #13]
 8010fcc:	005b      	lsls	r3, r3, #1
 8010fce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010fd2:	7ab3      	ldrb	r3, [r6, #10]
 8010fd4:	4313      	orrs	r3, r2
 8010fd6:	4418      	add	r0, r3
 8010fd8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010fdc:	4418      	add	r0, r3
 8010fde:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8010fe2:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8010fe6:	2600      	movs	r6, #0
 8010fe8:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8010fec:	4637      	mov	r7, r6
 8010fee:	45c3      	cmp	fp, r8
 8010ff0:	a807      	add	r0, sp, #28
 8010ff2:	f106 0601 	add.w	r6, r6, #1
 8010ff6:	bfd4      	ite	le
 8010ff8:	2100      	movle	r1, #0
 8010ffa:	2101      	movgt	r1, #1
 8010ffc:	f002 fabc 	bl	8013578 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011000:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8011004:	b2b6      	uxth	r6, r6
 8011006:	429f      	cmp	r7, r3
 8011008:	bfb8      	it	lt
 801100a:	b21f      	sxthlt	r7, r3
 801100c:	9b02      	ldr	r3, [sp, #8]
 801100e:	eba8 0803 	sub.w	r8, r8, r3
 8011012:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8011016:	fa0f f888 	sxth.w	r8, r8
 801101a:	2b00      	cmp	r3, #0
 801101c:	f43f af0c 	beq.w	8010e38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8011020:	45c2      	cmp	sl, r8
 8011022:	dbe4      	blt.n	8010fee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 8011024:	e708      	b.n	8010e38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8011026:	1bf6      	subs	r6, r6, r7
 8011028:	2702      	movs	r7, #2
 801102a:	fb96 f6f7 	sdiv	r6, r6, r7
 801102e:	b236      	sxth	r6, r6
 8011030:	e72d      	b.n	8010e8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 8011032:	4413      	add	r3, r2
 8011034:	1af6      	subs	r6, r6, r3
 8011036:	e7fa      	b.n	801102e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 8011038:	8925      	ldrh	r5, [r4, #8]
 801103a:	1aad      	subs	r5, r5, r2
 801103c:	1aed      	subs	r5, r5, r3
 801103e:	b22f      	sxth	r7, r5
 8011040:	8965      	ldrh	r5, [r4, #10]
 8011042:	eba5 0508 	sub.w	r5, r5, r8
 8011046:	b22d      	sxth	r5, r5
 8011048:	e73d      	b.n	8010ec6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801104a:	bf00      	nop
 801104c:	20027ef4 	.word	0x20027ef4
 8011050:	20027ef8 	.word	0x20027ef8
 8011054:	20027ef0 	.word	0x20027ef0
 8011058:	20027efc 	.word	0x20027efc
 801105c:	8965      	ldrh	r5, [r4, #10]
 801105e:	2700      	movs	r7, #0
 8011060:	1aad      	subs	r5, r5, r2
 8011062:	1aed      	subs	r5, r5, r3
 8011064:	4633      	mov	r3, r6
 8011066:	4646      	mov	r6, r8
 8011068:	b22d      	sxth	r5, r5
 801106a:	4698      	mov	r8, r3
 801106c:	e72b      	b.n	8010ec6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801106e:	2500      	movs	r5, #0
 8011070:	e729      	b.n	8010ec6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8011072:	bf00      	nop

08011074 <_ZN8touchgfx8TextAreaD0Ev>:
 8011074:	b510      	push	{r4, lr}
 8011076:	4604      	mov	r4, r0
 8011078:	2148      	movs	r1, #72	; 0x48
 801107a:	f013 fe78 	bl	8024d6e <_ZdlPvj>
 801107e:	4620      	mov	r0, r4
 8011080:	bd10      	pop	{r4, pc}
	...

08011084 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8011084:	b513      	push	{r0, r1, r4, lr}
 8011086:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801108a:	4604      	mov	r4, r0
 801108c:	b1fb      	cbz	r3, 80110ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801108e:	4b16      	ldr	r3, [pc, #88]	; (80110e8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8011090:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8011092:	881b      	ldrh	r3, [r3, #0]
 8011094:	428b      	cmp	r3, r1
 8011096:	d91a      	bls.n	80110ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8011098:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801109c:	2b00      	cmp	r3, #0
 801109e:	dd16      	ble.n	80110ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80110a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	dd12      	ble.n	80110ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80110a8:	4b10      	ldr	r3, [pc, #64]	; (80110ec <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80110aa:	6818      	ldr	r0, [r3, #0]
 80110ac:	f7f5 f85e 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 80110b0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80110b4:	6822      	ldr	r2, [r4, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	db06      	blt.n	80110c8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80110ba:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80110be:	2b00      	cmp	r3, #0
 80110c0:	db02      	blt.n	80110c8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80110c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80110c4:	4298      	cmp	r0, r3
 80110c6:	d004      	beq.n	80110d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80110c8:	6953      	ldr	r3, [r2, #20]
 80110ca:	4620      	mov	r0, r4
 80110cc:	4798      	blx	r3
 80110ce:	b002      	add	sp, #8
 80110d0:	bd10      	pop	{r4, pc}
 80110d2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80110d6:	466b      	mov	r3, sp
 80110d8:	6912      	ldr	r2, [r2, #16]
 80110da:	c903      	ldmia	r1, {r0, r1}
 80110dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80110e0:	4619      	mov	r1, r3
 80110e2:	4620      	mov	r0, r4
 80110e4:	4790      	blx	r2
 80110e6:	e7f2      	b.n	80110ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80110e8:	20027ef4 	.word	0x20027ef4
 80110ec:	20027efc 	.word	0x20027efc

080110f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80110f0:	4b45      	ldr	r3, [pc, #276]	; (8011208 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80110f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80110f8:	b08e      	sub	sp, #56	; 0x38
 80110fa:	881b      	ldrh	r3, [r3, #0]
 80110fc:	4604      	mov	r4, r0
 80110fe:	4293      	cmp	r3, r2
 8011100:	d97e      	bls.n	8011200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8011102:	6808      	ldr	r0, [r1, #0]
 8011104:	ab05      	add	r3, sp, #20
 8011106:	6849      	ldr	r1, [r1, #4]
 8011108:	4d40      	ldr	r5, [pc, #256]	; (801120c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801110a:	c303      	stmia	r3!, {r0, r1}
 801110c:	4611      	mov	r1, r2
 801110e:	6828      	ldr	r0, [r5, #0]
 8011110:	f7f5 f82c 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 8011114:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8011118:	2b00      	cmp	r3, #0
 801111a:	db11      	blt.n	8011140 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801111c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8011120:	2b00      	cmp	r3, #0
 8011122:	db0d      	blt.n	8011140 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8011124:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011126:	4298      	cmp	r0, r3
 8011128:	d10a      	bne.n	8011140 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801112a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801112e:	ab09      	add	r3, sp, #36	; 0x24
 8011130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011134:	e883 0003 	stmia.w	r3, {r0, r1}
 8011138:	4619      	mov	r1, r3
 801113a:	a805      	add	r0, sp, #20
 801113c:	f7fd febc 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8011140:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011144:	2b00      	cmp	r3, #0
 8011146:	dd5b      	ble.n	8011200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8011148:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801114c:	2b00      	cmp	r3, #0
 801114e:	dd57      	ble.n	8011200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8011150:	4f2f      	ldr	r7, [pc, #188]	; (8011210 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8011152:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801115a:	4b2e      	ldr	r3, [pc, #184]	; (8011214 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011162:	2e00      	cmp	r6, #0
 8011164:	d04c      	beq.n	8011200 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8011166:	6823      	ldr	r3, [r4, #0]
 8011168:	4620      	mov	r0, r4
 801116a:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801116e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011170:	4798      	blx	r3
 8011172:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801117a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801117e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8011182:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8011186:	785b      	ldrb	r3, [r3, #1]
 8011188:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801118c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011190:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011192:	9609      	str	r6, [sp, #36]	; 0x24
 8011194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011198:	4b1f      	ldr	r3, [pc, #124]	; (8011218 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801119a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80111a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80111a6:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80111aa:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80111ae:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80111b2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80111b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80111ba:	b10a      	cbz	r2, 80111c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80111bc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80111be:	b906      	cbnz	r6, 80111c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80111c0:	689e      	ldr	r6, [r3, #8]
 80111c2:	af07      	add	r7, sp, #28
 80111c4:	4621      	mov	r1, r4
 80111c6:	4638      	mov	r0, r7
 80111c8:	f004 f820 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111cc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80111ce:	6828      	ldr	r0, [r5, #0]
 80111d0:	f7f4 ffcc 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 80111d4:	6823      	ldr	r3, [r4, #0]
 80111d6:	4605      	mov	r5, r0
 80111d8:	4620      	mov	r0, r4
 80111da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111dc:	4798      	blx	r3
 80111de:	6823      	ldr	r3, [r4, #0]
 80111e0:	4680      	mov	r8, r0
 80111e2:	4620      	mov	r0, r4
 80111e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111e8:	4798      	blx	r3
 80111ea:	ab09      	add	r3, sp, #36	; 0x24
 80111ec:	9501      	str	r5, [sp, #4]
 80111ee:	9300      	str	r3, [sp, #0]
 80111f0:	ab05      	add	r3, sp, #20
 80111f2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80111f6:	4630      	mov	r0, r6
 80111f8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80111fc:	f7f4 ff68 	bl	80060d0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011200:	b00e      	add	sp, #56	; 0x38
 8011202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011206:	bf00      	nop
 8011208:	20027ef4 	.word	0x20027ef4
 801120c:	20027efc 	.word	0x20027efc
 8011210:	20027ef0 	.word	0x20027ef0
 8011214:	20027ef8 	.word	0x20027ef8
 8011218:	20027e98 	.word	0x20027e98

0801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801121c:	b538      	push	{r3, r4, r5, lr}
 801121e:	4b0e      	ldr	r3, [pc, #56]	; (8011258 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8011220:	4604      	mov	r4, r0
 8011222:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	429a      	cmp	r2, r3
 8011228:	d214      	bcs.n	8011254 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801122a:	6803      	ldr	r3, [r0, #0]
 801122c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801122e:	4798      	blx	r3
 8011230:	6823      	ldr	r3, [r4, #0]
 8011232:	4605      	mov	r5, r0
 8011234:	4620      	mov	r0, r4
 8011236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011238:	4798      	blx	r3
 801123a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801123e:	b22d      	sxth	r5, r5
 8011240:	4601      	mov	r1, r0
 8011242:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8011246:	bf06      	itte	eq
 8011248:	4602      	moveq	r2, r0
 801124a:	4629      	moveq	r1, r5
 801124c:	462a      	movne	r2, r5
 801124e:	4620      	mov	r0, r4
 8011250:	f7fd fc0a 	bl	800ea68 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8011254:	bd38      	pop	{r3, r4, r5, pc}
 8011256:	bf00      	nop
 8011258:	20027ef4 	.word	0x20027ef4

0801125c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801125c:	b530      	push	{r4, r5, lr}
 801125e:	888b      	ldrh	r3, [r1, #4]
 8011260:	b085      	sub	sp, #20
 8011262:	4604      	mov	r4, r0
 8011264:	8583      	strh	r3, [r0, #44]	; 0x2c
 8011266:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801126a:	b923      	cbnz	r3, 8011276 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801126c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011270:	b90b      	cbnz	r3, 8011276 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011272:	f7ff ffd3 	bl	801121c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8011276:	6823      	ldr	r3, [r4, #0]
 8011278:	466d      	mov	r5, sp
 801127a:	4621      	mov	r1, r4
 801127c:	343c      	adds	r4, #60	; 0x3c
 801127e:	4628      	mov	r0, r5
 8011280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011284:	4798      	blx	r3
 8011286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801128a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801128e:	b005      	add	sp, #20
 8011290:	bd30      	pop	{r4, r5, pc}

08011292 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011292:	2300      	movs	r3, #0
 8011294:	8083      	strh	r3, [r0, #4]
 8011296:	80c3      	strh	r3, [r0, #6]
 8011298:	8003      	strh	r3, [r0, #0]
 801129a:	8043      	strh	r3, [r0, #2]
 801129c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80112a0:	2bff      	cmp	r3, #255	; 0xff
 80112a2:	bf01      	itttt	eq
 80112a4:	890b      	ldrheq	r3, [r1, #8]
 80112a6:	8083      	strheq	r3, [r0, #4]
 80112a8:	894b      	ldrheq	r3, [r1, #10]
 80112aa:	80c3      	strheq	r3, [r0, #6]
 80112ac:	4770      	bx	lr
	...

080112b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80112b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112b2:	4604      	mov	r4, r0
 80112b4:	466b      	mov	r3, sp
 80112b6:	6808      	ldr	r0, [r1, #0]
 80112b8:	6849      	ldr	r1, [r1, #4]
 80112ba:	c303      	stmia	r3!, {r0, r1}
 80112bc:	6823      	ldr	r3, [r4, #0]
 80112be:	4669      	mov	r1, sp
 80112c0:	4620      	mov	r0, r4
 80112c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c4:	4798      	blx	r3
 80112c6:	4b08      	ldr	r3, [pc, #32]	; (80112e8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80112ce:	b10a      	cbz	r2, 80112d4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80112d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80112d2:	b900      	cbnz	r0, 80112d6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80112d4:	6898      	ldr	r0, [r3, #8]
 80112d6:	6803      	ldr	r3, [r0, #0]
 80112d8:	4669      	mov	r1, sp
 80112da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80112dc:	6a1d      	ldr	r5, [r3, #32]
 80112de:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80112e2:	47a8      	blx	r5
 80112e4:	b003      	add	sp, #12
 80112e6:	bd30      	pop	{r4, r5, pc}
 80112e8:	20027e98 	.word	0x20027e98

080112ec <_ZN8touchgfx3BoxD1Ev>:
 80112ec:	4770      	bx	lr

080112ee <_ZN8touchgfx3BoxD0Ev>:
 80112ee:	b510      	push	{r4, lr}
 80112f0:	4604      	mov	r4, r0
 80112f2:	212c      	movs	r1, #44	; 0x2c
 80112f4:	f013 fd3b 	bl	8024d6e <_ZdlPvj>
 80112f8:	4620      	mov	r0, r4
 80112fa:	bd10      	pop	{r4, pc}

080112fc <_ZNK8touchgfx3Box17invalidateContentEv>:
 80112fc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8011300:	b12a      	cbz	r2, 801130e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011302:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8011306:	b112      	cbz	r2, 801130e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011308:	6803      	ldr	r3, [r0, #0]
 801130a:	695b      	ldr	r3, [r3, #20]
 801130c:	4718      	bx	r3
 801130e:	4770      	bx	lr

08011310 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 8011310:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 8011314:	600b      	str	r3, [r1, #0]
 8011316:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 801131a:	6013      	str	r3, [r2, #0]
 801131c:	4770      	bx	lr

0801131e <_ZN8touchgfx5Gauge8setWidthEs>:
 801131e:	8101      	strh	r1, [r0, #8]
 8011320:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 8011324:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 8011328:	4770      	bx	lr

0801132a <_ZN8touchgfx5Gauge9setHeightEs>:
 801132a:	8141      	strh	r1, [r0, #10]
 801132c:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 8011330:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 8011334:	4770      	bx	lr

08011336 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8011336:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801133a:	4770      	bx	lr

0801133c <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801133c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8011340:	4770      	bx	lr

08011342 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 8011342:	4770      	bx	lr

08011344 <_ZN8touchgfx5GaugeD1Ev>:
 8011344:	4770      	bx	lr

08011346 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8011346:	b538      	push	{r3, r4, r5, lr}
 8011348:	4604      	mov	r4, r0
 801134a:	460d      	mov	r5, r1
 801134c:	f7fd faa8 	bl	800e8a0 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8011350:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 8011354:	f884 517e 	strb.w	r5, [r4, #382]	; 0x17e
 8011358:	bd38      	pop	{r3, r4, r5, pc}

0801135a <_ZN8touchgfx5GaugeD0Ev>:
 801135a:	b510      	push	{r4, lr}
 801135c:	4604      	mov	r4, r0
 801135e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8011362:	f013 fd04 	bl	8024d6e <_ZdlPvj>
 8011366:	4620      	mov	r0, r4
 8011368:	bd10      	pop	{r4, pc}

0801136a <_ZNK8touchgfx5Gauge17invalidateContentEv>:
 801136a:	b510      	push	{r4, lr}
 801136c:	6803      	ldr	r3, [r0, #0]
 801136e:	4604      	mov	r4, r0
 8011370:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011374:	4798      	blx	r3
 8011376:	b150      	cbz	r0, 801138e <_ZNK8touchgfx5Gauge17invalidateContentEv+0x24>
 8011378:	6823      	ldr	r3, [r4, #0]
 801137a:	4620      	mov	r0, r4
 801137c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011380:	4798      	blx	r3
 8011382:	b120      	cbz	r0, 801138e <_ZNK8touchgfx5Gauge17invalidateContentEv+0x24>
 8011384:	4620      	mov	r0, r4
 8011386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801138a:	f7fd bc40 	b.w	800ec0e <_ZNK8touchgfx9Container17invalidateContentEv>
 801138e:	bd10      	pop	{r4, pc}

08011390 <_ZN8touchgfx5GaugeC1Ev>:
 8011390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011392:	4604      	mov	r4, r0
 8011394:	f7fd fba2 	bl	800eadc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8011398:	4b18      	ldr	r3, [pc, #96]	; (80113fc <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801139a:	a902      	add	r1, sp, #8
 801139c:	4626      	mov	r6, r4
 801139e:	2500      	movs	r5, #0
 80113a0:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 80113a4:	f846 3bb4 	str.w	r3, [r6], #180
 80113a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113ac:	4630      	mov	r0, r6
 80113ae:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80113b2:	f012 fedd 	bl	8024170 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 80113b6:	2301      	movs	r3, #1
 80113b8:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 80113bc:	4638      	mov	r0, r7
 80113be:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 80113c2:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 80113c6:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 80113ca:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 80113ce:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 80113d2:	f012 f87b 	bl	80234cc <_ZN8touchgfx6CircleC1Ev>
 80113d6:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80113da:	4620      	mov	r0, r4
 80113dc:	f7fd fc29 	bl	800ec32 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 80113e0:	4639      	mov	r1, r7
 80113e2:	4620      	mov	r0, r4
 80113e4:	f7fd fbda 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80113e8:	4620      	mov	r0, r4
 80113ea:	4631      	mov	r1, r6
 80113ec:	f7fd fbd6 	bl	800eb9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80113f0:	4620      	mov	r0, r4
 80113f2:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 80113f6:	b003      	add	sp, #12
 80113f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113fa:	bf00      	nop
 80113fc:	08029ca0 	.word	0x08029ca0

08011400 <_ZN8touchgfx5Gauge19setBackgroundOffsetEss>:
 8011400:	b508      	push	{r3, lr}
 8011402:	302c      	adds	r0, #44	; 0x2c
 8011404:	f7f3 fda4 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 8011408:	bd08      	pop	{r3, pc}

0801140a <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801140a:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801140e:	4770      	bx	lr

08011410 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8011410:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 8011414:	4770      	bx	lr
	...

08011418 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	8902      	ldrh	r2, [r0, #8]
 801141c:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 8011420:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011424:	4604      	mov	r4, r0
 8011426:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 801142a:	2200      	movs	r2, #0
 801142c:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 8011430:	4628      	mov	r0, r5
 8011432:	4611      	mov	r1, r2
 8011434:	f7f3 fd8c 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 8011438:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 801143c:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 8011440:	4628      	mov	r0, r5
 8011442:	1a9b      	subs	r3, r3, r2
 8011444:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 8011448:	ee07 3a90 	vmov	s15, r3
 801144c:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 8011450:	1a9b      	subs	r3, r3, r2
 8011452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011456:	ee07 3a10 	vmov	s14, r3
 801145a:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 801145e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011462:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 8011466:	f012 fecf 	bl	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801146a:	4b16      	ldr	r3, [pc, #88]	; (80114c4 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 801146c:	4628      	mov	r0, r5
 801146e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8011472:	f012 fec9 	bl	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8011476:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801147a:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 801147e:	4628      	mov	r0, r5
 8011480:	ee07 3a90 	vmov	s15, r3
 8011484:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8011488:	ee07 2a10 	vmov	s14, r2
 801148c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011490:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8011494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011498:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801149c:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 80114a0:	f012 feb2 	bl	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80114a4:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80114a8:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 80114ac:	4628      	mov	r0, r5
 80114ae:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 80114b2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 80114b6:	f012 fea7 	bl	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80114ba:	2301      	movs	r3, #1
 80114bc:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 80114c0:	bd38      	pop	{r3, r4, r5, pc}
 80114c2:	bf00      	nop
 80114c4:	43960000 	.word	0x43960000

080114c8 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 80114c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114ca:	4604      	mov	r4, r0
 80114cc:	a802      	add	r0, sp, #8
 80114ce:	4616      	mov	r6, r2
 80114d0:	461d      	mov	r5, r3
 80114d2:	f820 1d04 	strh.w	r1, [r0, #-4]!
 80114d6:	4601      	mov	r1, r0
 80114d8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80114dc:	f012 ffea 	bl	80244b4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 80114e0:	4620      	mov	r0, r4
 80114e2:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 80114e6:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 80114ea:	f7ff ff95 	bl	8011418 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 80114ee:	b002      	add	sp, #8
 80114f0:	bd70      	pop	{r4, r5, r6, pc}

080114f2 <_ZN8touchgfx5Gauge9setCenterEii>:
 80114f2:	b570      	push	{r4, r5, r6, lr}
 80114f4:	4606      	mov	r6, r0
 80114f6:	460d      	mov	r5, r1
 80114f8:	4614      	mov	r4, r2
 80114fa:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 80114fe:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 8011502:	f7ff ff89 	bl	8011418 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8011506:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801150a:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801150e:	1aa4      	subs	r4, r4, r2
 8011510:	1a6d      	subs	r5, r5, r1
 8011512:	0164      	lsls	r4, r4, #5
 8011514:	016d      	lsls	r5, r5, #5
 8011516:	3410      	adds	r4, #16
 8011518:	3510      	adds	r5, #16
 801151a:	f8c6 4188 	str.w	r4, [r6, #392]	; 0x188
 801151e:	f8c6 5184 	str.w	r5, [r6, #388]	; 0x184
 8011522:	bd70      	pop	{r4, r5, r6, pc}

08011524 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 8011524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011526:	0149      	lsls	r1, r1, #5
 8011528:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801152a:	4604      	mov	r4, r0
 801152c:	4299      	cmp	r1, r3
 801152e:	9101      	str	r1, [sp, #4]
 8011530:	d00b      	beq.n	801154a <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 8011532:	4601      	mov	r1, r0
 8011534:	aa01      	add	r2, sp, #4
 8011536:	a802      	add	r0, sp, #8
 8011538:	f012 f9c4 	bl	80238c4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 801153c:	9b01      	ldr	r3, [sp, #4]
 801153e:	a902      	add	r1, sp, #8
 8011540:	4620      	mov	r0, r4
 8011542:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011544:	6823      	ldr	r3, [r4, #0]
 8011546:	691b      	ldr	r3, [r3, #16]
 8011548:	4798      	blx	r3
 801154a:	b004      	add	sp, #16
 801154c:	bd10      	pop	{r4, pc}
	...

08011550 <_ZN8touchgfx5Gauge8setValueEi>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	4604      	mov	r4, r0
 8011554:	f7fd f9f5 	bl	800e942 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8011558:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801155c:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 8011560:	4620      	mov	r0, r4
 8011562:	429a      	cmp	r2, r3
 8011564:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 8011568:	bfac      	ite	ge
 801156a:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 801156e:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 8011572:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 8011576:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801157a:	1ac9      	subs	r1, r1, r3
 801157c:	2900      	cmp	r1, #0
 801157e:	bfb8      	it	lt
 8011580:	4249      	neglt	r1, r1
 8011582:	b289      	uxth	r1, r1
 8011584:	f7fd fa3a 	bl	800e9fc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8011588:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801158c:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8011590:	4605      	mov	r5, r0
 8011592:	eddf 6a18 	vldr	s13, [pc, #96]	; 80115f4 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 8011596:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801159a:	429a      	cmp	r2, r3
 801159c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80115f8 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 80115a0:	da15      	bge.n	80115ce <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 80115a2:	1b5b      	subs	r3, r3, r5
 80115a4:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 80115a8:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 80115ac:	ee07 3a90 	vmov	s15, r3
 80115b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115b4:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 80115b8:	ee21 1a07 	vmul.f32	s2, s2, s14
 80115bc:	f012 fd92 	bl	80240e4 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 80115c0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 80115c4:	1b49      	subs	r1, r1, r5
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff ffac 	bl	8011524 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 80115cc:	bd70      	pop	{r4, r5, r6, pc}
 80115ce:	442b      	add	r3, r5
 80115d0:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 80115d4:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 80115d8:	ee07 3a90 	vmov	s15, r3
 80115dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115e0:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 80115e4:	ee21 1a07 	vmul.f32	s2, s2, s14
 80115e8:	f012 fd7c 	bl	80240e4 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 80115ec:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 80115f0:	4429      	add	r1, r5
 80115f2:	e7e8      	b.n	80115c6 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 80115f4:	43340000 	.word	0x43340000
 80115f8:	40490fdb 	.word	0x40490fdb

080115fc <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 80115fc:	b510      	push	{r4, lr}
 80115fe:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 8011602:	0149      	lsls	r1, r1, #5
 8011604:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 8011608:	0152      	lsls	r2, r2, #5
 801160a:	4604      	mov	r4, r0
 801160c:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
 8011610:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8011614:	f7fd f941 	bl	800e89a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8011618:	4601      	mov	r1, r0
 801161a:	4620      	mov	r0, r4
 801161c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011620:	f7ff bf96 	b.w	8011550 <_ZN8touchgfx5Gauge8setValueEi>

08011624 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8011624:	4b30      	ldr	r3, [pc, #192]	; (80116e8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8011626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801162a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801162c:	b08d      	sub	sp, #52	; 0x34
 801162e:	881b      	ldrh	r3, [r3, #0]
 8011630:	4604      	mov	r4, r0
 8011632:	460f      	mov	r7, r1
 8011634:	4293      	cmp	r3, r2
 8011636:	d954      	bls.n	80116e2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011638:	4b2c      	ldr	r3, [pc, #176]	; (80116ec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801163a:	6819      	ldr	r1, [r3, #0]
 801163c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8011640:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8011644:	4a2a      	ldr	r2, [pc, #168]	; (80116f0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8011646:	6812      	ldr	r2, [r2, #0]
 8011648:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801164c:	2900      	cmp	r1, #0
 801164e:	d048      	beq.n	80116e2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011650:	785a      	ldrb	r2, [r3, #1]
 8011652:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011656:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801165a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801165e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8011662:	4b24      	ldr	r3, [pc, #144]	; (80116f4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8011664:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 801166e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8011672:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8011676:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8011678:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 801167c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8011680:	9107      	str	r1, [sp, #28]
 8011682:	f88d 8020 	strb.w	r8, [sp, #32]
 8011686:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801168a:	9609      	str	r6, [sp, #36]	; 0x24
 801168c:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8011690:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8011694:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8011698:	b10b      	cbz	r3, 801169e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801169a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801169c:	b905      	cbnz	r5, 80116a0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801169e:	6895      	ldr	r5, [r2, #8]
 80116a0:	ae05      	add	r6, sp, #20
 80116a2:	4621      	mov	r1, r4
 80116a4:	4630      	mov	r0, r6
 80116a6:	f003 fdb1 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80116aa:	4b13      	ldr	r3, [pc, #76]	; (80116f8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80116ac:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80116ae:	6818      	ldr	r0, [r3, #0]
 80116b0:	f7f4 fd5c 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 80116b4:	6823      	ldr	r3, [r4, #0]
 80116b6:	4680      	mov	r8, r0
 80116b8:	4620      	mov	r0, r4
 80116ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116bc:	4798      	blx	r3
 80116be:	6823      	ldr	r3, [r4, #0]
 80116c0:	4681      	mov	r9, r0
 80116c2:	4620      	mov	r0, r4
 80116c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116c8:	4798      	blx	r3
 80116ca:	ab07      	add	r3, sp, #28
 80116cc:	f8cd 8004 	str.w	r8, [sp, #4]
 80116d0:	9300      	str	r3, [sp, #0]
 80116d2:	463b      	mov	r3, r7
 80116d4:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80116d8:	4628      	mov	r0, r5
 80116da:	e896 0006 	ldmia.w	r6, {r1, r2}
 80116de:	f7f4 fcf7 	bl	80060d0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80116e2:	b00d      	add	sp, #52	; 0x34
 80116e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116e8:	20027ef4 	.word	0x20027ef4
 80116ec:	20027ef0 	.word	0x20027ef0
 80116f0:	20027ef8 	.word	0x20027ef8
 80116f4:	20027e98 	.word	0x20027e98
 80116f8:	20027efc 	.word	0x20027efc

080116fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 80116fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011700:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8011704:	b0a0      	sub	sp, #128	; 0x80
 8011706:	4604      	mov	r4, r0
 8011708:	b193      	cbz	r3, 8011730 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801170a:	4b30      	ldr	r3, [pc, #192]	; (80117cc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 801170c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801170e:	881b      	ldrh	r3, [r3, #0]
 8011710:	428b      	cmp	r3, r1
 8011712:	d90d      	bls.n	8011730 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8011714:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011718:	2b00      	cmp	r3, #0
 801171a:	dd09      	ble.n	8011730 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801171c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011720:	2b00      	cmp	r3, #0
 8011722:	dd05      	ble.n	8011730 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8011724:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8011728:	b12b      	cbz	r3, 8011736 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 801172a:	6803      	ldr	r3, [r0, #0]
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	4798      	blx	r3
 8011730:	b020      	add	sp, #128	; 0x80
 8011732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011736:	4b26      	ldr	r3, [pc, #152]	; (80117d0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801173e:	4b25      	ldr	r3, [pc, #148]	; (80117d4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8011746:	4b24      	ldr	r3, [pc, #144]	; (80117d8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 8011748:	6818      	ldr	r0, [r3, #0]
 801174a:	f7f4 fd0f 	bl	800616c <_ZNK8touchgfx5Texts7getTextEt>
 801174e:	4606      	mov	r6, r0
 8011750:	a807      	add	r0, sp, #28
 8011752:	f004 fa2c 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 8011756:	682b      	ldr	r3, [r5, #0]
 8011758:	4628      	mov	r0, r5
 801175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801175c:	4798      	blx	r3
 801175e:	682b      	ldr	r3, [r5, #0]
 8011760:	4607      	mov	r7, r0
 8011762:	4628      	mov	r0, r5
 8011764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011766:	4798      	blx	r3
 8011768:	6823      	ldr	r3, [r4, #0]
 801176a:	4605      	mov	r5, r0
 801176c:	4620      	mov	r0, r4
 801176e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011770:	4798      	blx	r3
 8011772:	6823      	ldr	r3, [r4, #0]
 8011774:	4680      	mov	r8, r0
 8011776:	4620      	mov	r0, r4
 8011778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801177c:	4798      	blx	r3
 801177e:	462b      	mov	r3, r5
 8011780:	463a      	mov	r2, r7
 8011782:	4631      	mov	r1, r6
 8011784:	e9cd 8000 	strd	r8, r0, [sp]
 8011788:	a807      	add	r0, sp, #28
 801178a:	f004 fa80 	bl	8015c8e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801178e:	a807      	add	r0, sp, #28
 8011790:	f004 fe3a 	bl	8016408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011794:	280a      	cmp	r0, #10
 8011796:	d103      	bne.n	80117a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	4620      	mov	r0, r4
 801179c:	695b      	ldr	r3, [r3, #20]
 801179e:	e7c6      	b.n	801172e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 80117a0:	a807      	add	r0, sp, #28
 80117a2:	f004 fe31 	bl	8016408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	d1f4      	bne.n	8011794 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 80117aa:	ad04      	add	r5, sp, #16
 80117ac:	4621      	mov	r1, r4
 80117ae:	4628      	mov	r0, r5
 80117b0:	f7ff fad2 	bl	8010d58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80117b4:	ab02      	add	r3, sp, #8
 80117b6:	6822      	ldr	r2, [r4, #0]
 80117b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80117bc:	6912      	ldr	r2, [r2, #16]
 80117be:	e883 0003 	stmia.w	r3, {r0, r1}
 80117c2:	4619      	mov	r1, r3
 80117c4:	4620      	mov	r0, r4
 80117c6:	4790      	blx	r2
 80117c8:	e7b2      	b.n	8011730 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80117ca:	bf00      	nop
 80117cc:	20027ef4 	.word	0x20027ef4
 80117d0:	20027ef0 	.word	0x20027ef0
 80117d4:	20027ef8 	.word	0x20027ef8
 80117d8:	20027efc 	.word	0x20027efc

080117dc <_ZN8touchgfx13BoxWithBorderD1Ev>:
 80117dc:	4770      	bx	lr

080117de <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80117de:	b510      	push	{r4, lr}
 80117e0:	4604      	mov	r4, r0
 80117e2:	2134      	movs	r1, #52	; 0x34
 80117e4:	f013 fac3 	bl	8024d6e <_ZdlPvj>
 80117e8:	4620      	mov	r0, r4
 80117ea:	bd10      	pop	{r4, pc}

080117ec <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80117ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80117f2:	4604      	mov	r4, r0
 80117f4:	460e      	mov	r6, r1
 80117f6:	b08e      	sub	sp, #56	; 0x38
 80117f8:	b218      	sxth	r0, r3
 80117fa:	8921      	ldrh	r1, [r4, #8]
 80117fc:	005b      	lsls	r3, r3, #1
 80117fe:	8962      	ldrh	r2, [r4, #10]
 8011800:	f8ad 0000 	strh.w	r0, [sp]
 8011804:	b29b      	uxth	r3, r3
 8011806:	f8ad 0002 	strh.w	r0, [sp, #2]
 801180a:	1ac9      	subs	r1, r1, r3
 801180c:	1ad3      	subs	r3, r2, r3
 801180e:	b209      	sxth	r1, r1
 8011810:	b21b      	sxth	r3, r3
 8011812:	2900      	cmp	r1, #0
 8011814:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011818:	f8ad 3006 	strh.w	r3, [sp, #6]
 801181c:	dd5e      	ble.n	80118dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801181e:	2b00      	cmp	r3, #0
 8011820:	dd5c      	ble.n	80118dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8011822:	6830      	ldr	r0, [r6, #0]
 8011824:	ab02      	add	r3, sp, #8
 8011826:	6871      	ldr	r1, [r6, #4]
 8011828:	c303      	stmia	r3!, {r0, r1}
 801182a:	4669      	mov	r1, sp
 801182c:	a802      	add	r0, sp, #8
 801182e:	f7fd fb43 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8011832:	4620      	mov	r0, r4
 8011834:	a902      	add	r1, sp, #8
 8011836:	f7ff fd3b 	bl	80112b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801183a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801183c:	2800      	cmp	r0, #0
 801183e:	d05f      	beq.n	8011900 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8011840:	8963      	ldrh	r3, [r4, #10]
 8011842:	b202      	sxth	r2, r0
 8011844:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011848:	2500      	movs	r5, #0
 801184a:	1a1f      	subs	r7, r3, r0
 801184c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8011850:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011854:	b21b      	sxth	r3, r3
 8011856:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801185a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801185e:	af04      	add	r7, sp, #16
 8011860:	1a09      	subs	r1, r1, r0
 8011862:	9506      	str	r5, [sp, #24]
 8011864:	f8ad 201e 	strh.w	r2, [sp, #30]
 8011868:	f8ad 5020 	strh.w	r5, [sp, #32]
 801186c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8011870:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8011874:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8011878:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801187c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011880:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8011884:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8011888:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801188c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011890:	ab06      	add	r3, sp, #24
 8011892:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011896:	e893 0003 	ldmia.w	r3, {r0, r1}
 801189a:	e887 0003 	stmia.w	r7, {r0, r1}
 801189e:	4631      	mov	r1, r6
 80118a0:	4638      	mov	r0, r7
 80118a2:	f7fd fb09 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 80118a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	dd12      	ble.n	80118d4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80118ae:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	dd0e      	ble.n	80118d4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80118b6:	6823      	ldr	r3, [r4, #0]
 80118b8:	4639      	mov	r1, r7
 80118ba:	4620      	mov	r0, r4
 80118bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118be:	4798      	blx	r3
 80118c0:	f7fd fdc8 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 80118c4:	6803      	ldr	r3, [r0, #0]
 80118c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80118c8:	4639      	mov	r1, r7
 80118ca:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80118ce:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80118d2:	47c0      	blx	r8
 80118d4:	3501      	adds	r5, #1
 80118d6:	2d04      	cmp	r5, #4
 80118d8:	d1da      	bne.n	8011890 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 80118da:	e011      	b.n	8011900 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80118dc:	6830      	ldr	r0, [r6, #0]
 80118de:	ab06      	add	r3, sp, #24
 80118e0:	6871      	ldr	r1, [r6, #4]
 80118e2:	c303      	stmia	r3!, {r0, r1}
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	a906      	add	r1, sp, #24
 80118e8:	4620      	mov	r0, r4
 80118ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ec:	4798      	blx	r3
 80118ee:	f7fd fdb1 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 80118f2:	6803      	ldr	r3, [r0, #0]
 80118f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80118f6:	a906      	add	r1, sp, #24
 80118f8:	6a1d      	ldr	r5, [r3, #32]
 80118fa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80118fe:	47a8      	blx	r5
 8011900:	b00e      	add	sp, #56	; 0x38
 8011902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011906 <_ZN8touchgfx5ImageD1Ev>:
 8011906:	4770      	bx	lr

08011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011908:	b570      	push	{r4, r5, r6, lr}
 801190a:	880b      	ldrh	r3, [r1, #0]
 801190c:	460d      	mov	r5, r1
 801190e:	4604      	mov	r4, r0
 8011910:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011912:	4608      	mov	r0, r1
 8011914:	f005 fcde 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011918:	4606      	mov	r6, r0
 801191a:	4628      	mov	r0, r5
 801191c:	f005 fd0e 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011920:	6823      	ldr	r3, [r4, #0]
 8011922:	4605      	mov	r5, r0
 8011924:	4631      	mov	r1, r6
 8011926:	4620      	mov	r0, r4
 8011928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801192a:	4798      	blx	r3
 801192c:	6823      	ldr	r3, [r4, #0]
 801192e:	4629      	mov	r1, r5
 8011930:	4620      	mov	r0, r4
 8011932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011938:	4718      	bx	r3

0801193a <_ZN8touchgfx5ImageD0Ev>:
 801193a:	b510      	push	{r4, lr}
 801193c:	4604      	mov	r4, r0
 801193e:	212c      	movs	r1, #44	; 0x2c
 8011940:	f013 fa15 	bl	8024d6e <_ZdlPvj>
 8011944:	4620      	mov	r0, r4
 8011946:	bd10      	pop	{r4, pc}

08011948 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011948:	b510      	push	{r4, lr}
 801194a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801194e:	4604      	mov	r4, r0
 8011950:	2bff      	cmp	r3, #255	; 0xff
 8011952:	d006      	beq.n	8011962 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8011954:	2300      	movs	r3, #0
 8011956:	8003      	strh	r3, [r0, #0]
 8011958:	8043      	strh	r3, [r0, #2]
 801195a:	8083      	strh	r3, [r0, #4]
 801195c:	80c3      	strh	r3, [r0, #6]
 801195e:	4620      	mov	r0, r4
 8011960:	bd10      	pop	{r4, pc}
 8011962:	3126      	adds	r1, #38	; 0x26
 8011964:	f005 fd1e 	bl	80173a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011968:	e7f9      	b.n	801195e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801196c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801196c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011970:	4604      	mov	r4, r0
 8011972:	b088      	sub	sp, #32
 8011974:	2500      	movs	r5, #0
 8011976:	460f      	mov	r7, r1
 8011978:	f854 3b26 	ldr.w	r3, [r4], #38
 801197c:	a904      	add	r1, sp, #16
 801197e:	4606      	mov	r6, r0
 8011980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011982:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011986:	4798      	blx	r3
 8011988:	4620      	mov	r0, r4
 801198a:	f005 fca3 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801198e:	4680      	mov	r8, r0
 8011990:	4620      	mov	r0, r4
 8011992:	f005 fcd3 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011996:	9506      	str	r5, [sp, #24]
 8011998:	ad06      	add	r5, sp, #24
 801199a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801199e:	4639      	mov	r1, r7
 80119a0:	f8ad 801c 	strh.w	r8, [sp, #28]
 80119a4:	4628      	mov	r0, r5
 80119a6:	f7fd fa87 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 80119aa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	dd19      	ble.n	80119e6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80119b2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	dd15      	ble.n	80119e6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80119ba:	4b0c      	ldr	r3, [pc, #48]	; (80119ec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80119c2:	b10a      	cbz	r2, 80119c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80119c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80119c6:	b900      	cbnz	r0, 80119ca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80119c8:	6898      	ldr	r0, [r3, #8]
 80119ca:	2701      	movs	r7, #1
 80119cc:	6801      	ldr	r1, [r0, #0]
 80119ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80119d2:	9702      	str	r7, [sp, #8]
 80119d4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80119d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80119dc:	e9cd 5600 	strd	r5, r6, [sp]
 80119e0:	688d      	ldr	r5, [r1, #8]
 80119e2:	4621      	mov	r1, r4
 80119e4:	47a8      	blx	r5
 80119e6:	b008      	add	sp, #32
 80119e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ec:	20027e98 	.word	0x20027e98

080119f0 <_ZN8touchgfx7OutlineD1Ev>:
 80119f0:	4770      	bx	lr

080119f2 <_ZN8touchgfx7OutlineD0Ev>:
 80119f2:	b510      	push	{r4, lr}
 80119f4:	4604      	mov	r4, r0
 80119f6:	2130      	movs	r1, #48	; 0x30
 80119f8:	f013 f9b9 	bl	8024d6e <_ZdlPvj>
 80119fc:	4620      	mov	r0, r4
 80119fe:	bd10      	pop	{r4, pc}

08011a00 <_ZN8touchgfx7Outline5resetEv>:
 8011a00:	b510      	push	{r4, lr}
 8011a02:	4604      	mov	r4, r0
 8011a04:	f000 fe7c 	bl	8012700 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8011a08:	60e0      	str	r0, [r4, #12]
 8011a0a:	f000 fe7f 	bl	801270c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8011a0e:	68e3      	ldr	r3, [r4, #12]
 8011a10:	08c0      	lsrs	r0, r0, #3
 8011a12:	2200      	movs	r2, #0
 8011a14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011a18:	6123      	str	r3, [r4, #16]
 8011a1a:	3801      	subs	r0, #1
 8011a1c:	60a2      	str	r2, [r4, #8]
 8011a1e:	6060      	str	r0, [r4, #4]
 8011a20:	8019      	strh	r1, [r3, #0]
 8011a22:	8059      	strh	r1, [r3, #2]
 8011a24:	809a      	strh	r2, [r3, #4]
 8011a26:	80da      	strh	r2, [r3, #6]
 8011a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a2a:	f023 0301 	bic.w	r3, r3, #1
 8011a2e:	f043 0302 	orr.w	r3, r3, #2
 8011a32:	6263      	str	r3, [r4, #36]	; 0x24
 8011a34:	bd10      	pop	{r4, pc}
	...

08011a38 <_ZN8touchgfx7OutlineC1Ev>:
 8011a38:	4b0a      	ldr	r3, [pc, #40]	; (8011a64 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8011a3a:	b510      	push	{r4, lr}
 8011a3c:	6003      	str	r3, [r0, #0]
 8011a3e:	2300      	movs	r3, #0
 8011a40:	4604      	mov	r4, r0
 8011a42:	6243      	str	r3, [r0, #36]	; 0x24
 8011a44:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011a48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a4c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8011a50:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8011a54:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011a58:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8011a5c:	f7ff ffd0 	bl	8011a00 <_ZN8touchgfx7Outline5resetEv>
 8011a60:	4620      	mov	r0, r4
 8011a62:	bd10      	pop	{r4, pc}
 8011a64:	08029e5c 	.word	0x08029e5c

08011a68 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8011a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a6c:	b093      	sub	sp, #76	; 0x4c
 8011a6e:	1156      	asrs	r6, r2, #5
 8011a70:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011a72:	9305      	str	r3, [sp, #20]
 8011a74:	1153      	asrs	r3, r2, #5
 8011a76:	f004 051f 	and.w	r5, r4, #31
 8011a7a:	9303      	str	r3, [sp, #12]
 8011a7c:	1163      	asrs	r3, r4, #5
 8011a7e:	9504      	str	r5, [sp, #16]
 8011a80:	1165      	asrs	r5, r4, #5
 8011a82:	9306      	str	r3, [sp, #24]
 8011a84:	f002 031f 	and.w	r3, r2, #31
 8011a88:	42ae      	cmp	r6, r5
 8011a8a:	f040 80f4 	bne.w	8011c76 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8011a8e:	9c04      	ldr	r4, [sp, #16]
 8011a90:	9a05      	ldr	r2, [sp, #20]
 8011a92:	42a3      	cmp	r3, r4
 8011a94:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8011a98:	6902      	ldr	r2, [r0, #16]
 8011a9a:	d125      	bne.n	8011ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8011a9c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8011aa0:	459e      	cmp	lr, r3
 8011aa2:	d103      	bne.n	8011aac <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8011aa4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8011aa8:	429e      	cmp	r6, r3
 8011aaa:	d035      	beq.n	8011b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011aac:	88d1      	ldrh	r1, [r2, #6]
 8011aae:	8893      	ldrh	r3, [r2, #4]
 8011ab0:	430b      	orrs	r3, r1
 8011ab2:	d010      	beq.n	8011ad6 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011ab4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	db0c      	blt.n	8011ad6 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011abc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8011abe:	428b      	cmp	r3, r1
 8011ac0:	da09      	bge.n	8011ad6 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8011ac2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011ac6:	428b      	cmp	r3, r1
 8011ac8:	f103 0301 	add.w	r3, r3, #1
 8011acc:	bf38      	it	cc
 8011ace:	3208      	addcc	r2, #8
 8011ad0:	6083      	str	r3, [r0, #8]
 8011ad2:	bf38      	it	cc
 8011ad4:	6102      	strcc	r2, [r0, #16]
 8011ad6:	6903      	ldr	r3, [r0, #16]
 8011ad8:	9a03      	ldr	r2, [sp, #12]
 8011ada:	f8a3 e000 	strh.w	lr, [r3]
 8011ade:	805a      	strh	r2, [r3, #2]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	809a      	strh	r2, [r3, #4]
 8011ae4:	80da      	strh	r2, [r3, #6]
 8011ae6:	e017      	b.n	8011b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011ae8:	9c05      	ldr	r4, [sp, #20]
 8011aea:	114e      	asrs	r6, r1, #5
 8011aec:	f001 0c1f 	and.w	ip, r1, #31
 8011af0:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8011af4:	f004 041f 	and.w	r4, r4, #31
 8011af8:	4576      	cmp	r6, lr
 8011afa:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8011afe:	9402      	str	r4, [sp, #8]
 8011b00:	9c04      	ldr	r4, [sp, #16]
 8011b02:	eba4 0403 	sub.w	r4, r4, r3
 8011b06:	d10a      	bne.n	8011b1e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8011b08:	9b02      	ldr	r3, [sp, #8]
 8011b0a:	44a0      	add	r8, r4
 8011b0c:	449c      	add	ip, r3
 8011b0e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8011b12:	fb04 a40c 	mla	r4, r4, ip, sl
 8011b16:	80d4      	strh	r4, [r2, #6]
 8011b18:	b013      	add	sp, #76	; 0x4c
 8011b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b1e:	9d05      	ldr	r5, [sp, #20]
 8011b20:	1a69      	subs	r1, r5, r1
 8011b22:	bf51      	iteee	pl
 8011b24:	f1cc 0520 	rsbpl	r5, ip, #32
 8011b28:	fb04 f40c 	mulmi.w	r4, r4, ip
 8011b2c:	4249      	negmi	r1, r1
 8011b2e:	2500      	movmi	r5, #0
 8011b30:	bf5d      	ittte	pl
 8011b32:	436c      	mulpl	r4, r5
 8011b34:	2520      	movpl	r5, #32
 8011b36:	f04f 0901 	movpl.w	r9, #1
 8011b3a:	f04f 39ff 	movmi.w	r9, #4294967295
 8011b3e:	9501      	str	r5, [sp, #4]
 8011b40:	9f01      	ldr	r7, [sp, #4]
 8011b42:	444e      	add	r6, r9
 8011b44:	fb94 f5f1 	sdiv	r5, r4, r1
 8011b48:	fb01 4415 	mls	r4, r1, r5, r4
 8011b4c:	44bc      	add	ip, r7
 8011b4e:	2c00      	cmp	r4, #0
 8011b50:	bfbc      	itt	lt
 8011b52:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8011b56:	1864      	addlt	r4, r4, r1
 8011b58:	44a8      	add	r8, r5
 8011b5a:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011b5e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8011b62:	f8a2 c006 	strh.w	ip, [r2, #6]
 8011b66:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011b6a:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011b6e:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8011b72:	ea58 0202 	orrs.w	r2, r8, r2
 8011b76:	d011      	beq.n	8011b9c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011b78:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011b7c:	f1b8 0f00 	cmp.w	r8, #0
 8011b80:	db0c      	blt.n	8011b9c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011b82:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8011b84:	4590      	cmp	r8, r2
 8011b86:	da09      	bge.n	8011b9c <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011b88:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8011b8c:	4590      	cmp	r8, r2
 8011b8e:	bf3c      	itt	cc
 8011b90:	f10c 0208 	addcc.w	r2, ip, #8
 8011b94:	6102      	strcc	r2, [r0, #16]
 8011b96:	f108 0201 	add.w	r2, r8, #1
 8011b9a:	6082      	str	r2, [r0, #8]
 8011b9c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011ba0:	2700      	movs	r7, #0
 8011ba2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011ba6:	45b6      	cmp	lr, r6
 8011ba8:	f8ac 6000 	strh.w	r6, [ip]
 8011bac:	442b      	add	r3, r5
 8011bae:	f8ac 2002 	strh.w	r2, [ip, #2]
 8011bb2:	f8ac 7004 	strh.w	r7, [ip, #4]
 8011bb6:	f8ac 7006 	strh.w	r7, [ip, #6]
 8011bba:	d04b      	beq.n	8011c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8011bbc:	9f04      	ldr	r7, [sp, #16]
 8011bbe:	1a64      	subs	r4, r4, r1
 8011bc0:	f04f 0a00 	mov.w	sl, #0
 8011bc4:	1aff      	subs	r7, r7, r3
 8011bc6:	443d      	add	r5, r7
 8011bc8:	016d      	lsls	r5, r5, #5
 8011bca:	fb95 f8f1 	sdiv	r8, r5, r1
 8011bce:	fb01 5518 	mls	r5, r1, r8, r5
 8011bd2:	2d00      	cmp	r5, #0
 8011bd4:	bfbc      	itt	lt
 8011bd6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011bda:	186d      	addlt	r5, r5, r1
 8011bdc:	f108 0701 	add.w	r7, r8, #1
 8011be0:	9703      	str	r7, [sp, #12]
 8011be2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011be6:	1964      	adds	r4, r4, r5
 8011be8:	444e      	add	r6, r9
 8011bea:	bf54      	ite	pl
 8011bec:	9f03      	ldrpl	r7, [sp, #12]
 8011bee:	4647      	movmi	r7, r8
 8011bf0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8011bf4:	bf58      	it	pl
 8011bf6:	1a64      	subpl	r4, r4, r1
 8011bf8:	443b      	add	r3, r7
 8011bfa:	44bb      	add	fp, r7
 8011bfc:	f8ac b004 	strh.w	fp, [ip, #4]
 8011c00:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011c04:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011c08:	f8ac b006 	strh.w	fp, [ip, #6]
 8011c0c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011c10:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011c14:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011c18:	ea5b 0707 	orrs.w	r7, fp, r7
 8011c1c:	d011      	beq.n	8011c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011c1e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8011c22:	f1bb 0f00 	cmp.w	fp, #0
 8011c26:	db0c      	blt.n	8011c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011c28:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8011c2a:	45bb      	cmp	fp, r7
 8011c2c:	da09      	bge.n	8011c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011c2e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011c32:	45bb      	cmp	fp, r7
 8011c34:	bf3c      	itt	cc
 8011c36:	f10c 0708 	addcc.w	r7, ip, #8
 8011c3a:	6107      	strcc	r7, [r0, #16]
 8011c3c:	f10b 0701 	add.w	r7, fp, #1
 8011c40:	6087      	str	r7, [r0, #8]
 8011c42:	6907      	ldr	r7, [r0, #16]
 8011c44:	45b6      	cmp	lr, r6
 8011c46:	803e      	strh	r6, [r7, #0]
 8011c48:	807a      	strh	r2, [r7, #2]
 8011c4a:	f8a7 a004 	strh.w	sl, [r7, #4]
 8011c4e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8011c52:	d1c6      	bne.n	8011be2 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8011c54:	9a04      	ldr	r2, [sp, #16]
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	6902      	ldr	r2, [r0, #16]
 8011c5a:	8891      	ldrh	r1, [r2, #4]
 8011c5c:	88d6      	ldrh	r6, [r2, #6]
 8011c5e:	4419      	add	r1, r3
 8011c60:	8091      	strh	r1, [r2, #4]
 8011c62:	9902      	ldr	r1, [sp, #8]
 8011c64:	f101 0c20 	add.w	ip, r1, #32
 8011c68:	9901      	ldr	r1, [sp, #4]
 8011c6a:	ebac 0c01 	sub.w	ip, ip, r1
 8011c6e:	fb03 630c 	mla	r3, r3, ip, r6
 8011c72:	80d3      	strh	r3, [r2, #6]
 8011c74:	e750      	b.n	8011b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011c76:	9d05      	ldr	r5, [sp, #20]
 8011c78:	1aa2      	subs	r2, r4, r2
 8011c7a:	eba5 0501 	sub.w	r5, r5, r1
 8011c7e:	9202      	str	r2, [sp, #8]
 8011c80:	9508      	str	r5, [sp, #32]
 8011c82:	f140 8128 	bpl.w	8011ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8011c86:	9a03      	ldr	r2, [sp, #12]
 8011c88:	2a00      	cmp	r2, #0
 8011c8a:	f6ff af45 	blt.w	8011b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011c8e:	9a02      	ldr	r2, [sp, #8]
 8011c90:	f04f 34ff 	mov.w	r4, #4294967295
 8011c94:	4252      	negs	r2, r2
 8011c96:	940b      	str	r4, [sp, #44]	; 0x2c
 8011c98:	2400      	movs	r4, #0
 8011c9a:	9202      	str	r2, [sp, #8]
 8011c9c:	9a06      	ldr	r2, [sp, #24]
 8011c9e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8011ca2:	9206      	str	r2, [sp, #24]
 8011ca4:	462a      	mov	r2, r5
 8011ca6:	435a      	muls	r2, r3
 8011ca8:	9401      	str	r4, [sp, #4]
 8011caa:	9c02      	ldr	r4, [sp, #8]
 8011cac:	9d02      	ldr	r5, [sp, #8]
 8011cae:	fb92 f4f4 	sdiv	r4, r2, r4
 8011cb2:	fb05 2214 	mls	r2, r5, r4, r2
 8011cb6:	2a00      	cmp	r2, #0
 8011cb8:	9207      	str	r2, [sp, #28]
 8011cba:	bfbc      	itt	lt
 8011cbc:	1952      	addlt	r2, r2, r5
 8011cbe:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8011cc2:	6905      	ldr	r5, [r0, #16]
 8011cc4:	bfb8      	it	lt
 8011cc6:	9207      	strlt	r2, [sp, #28]
 8011cc8:	eb04 0901 	add.w	r9, r4, r1
 8011ccc:	9a01      	ldr	r2, [sp, #4]
 8011cce:	ea4f 1669 	mov.w	r6, r9, asr #5
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	f040 8111 	bne.w	8011efa <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8011cd8:	f9b5 3000 	ldrsh.w	r3, [r5]
 8011cdc:	429e      	cmp	r6, r3
 8011cde:	d104      	bne.n	8011cea <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8011ce0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011ce4:	9a03      	ldr	r2, [sp, #12]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d01b      	beq.n	8011d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011cea:	88ea      	ldrh	r2, [r5, #6]
 8011cec:	88ab      	ldrh	r3, [r5, #4]
 8011cee:	4313      	orrs	r3, r2
 8011cf0:	d010      	beq.n	8011d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011cf2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011cf6:	2a00      	cmp	r2, #0
 8011cf8:	db0c      	blt.n	8011d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011cfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	da09      	bge.n	8011d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011d00:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	f102 0201 	add.w	r2, r2, #1
 8011d0a:	bf38      	it	cc
 8011d0c:	3508      	addcc	r5, #8
 8011d0e:	6082      	str	r2, [r0, #8]
 8011d10:	bf38      	it	cc
 8011d12:	6105      	strcc	r5, [r0, #16]
 8011d14:	6903      	ldr	r3, [r0, #16]
 8011d16:	9a03      	ldr	r2, [sp, #12]
 8011d18:	801e      	strh	r6, [r3, #0]
 8011d1a:	805a      	strh	r2, [r3, #2]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	809a      	strh	r2, [r3, #4]
 8011d20:	80da      	strh	r2, [r3, #6]
 8011d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d24:	9a03      	ldr	r2, [sp, #12]
 8011d26:	6901      	ldr	r1, [r0, #16]
 8011d28:	441a      	add	r2, r3
 8011d2a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011d2e:	42b3      	cmp	r3, r6
 8011d30:	d103      	bne.n	8011d3a <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8011d32:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d01a      	beq.n	8011d70 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8011d3a:	88cc      	ldrh	r4, [r1, #6]
 8011d3c:	888b      	ldrh	r3, [r1, #4]
 8011d3e:	4323      	orrs	r3, r4
 8011d40:	d010      	beq.n	8011d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011d42:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011d46:	2c00      	cmp	r4, #0
 8011d48:	db0c      	blt.n	8011d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011d4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011d4c:	429c      	cmp	r4, r3
 8011d4e:	da09      	bge.n	8011d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011d50:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011d54:	429c      	cmp	r4, r3
 8011d56:	f104 0401 	add.w	r4, r4, #1
 8011d5a:	bf38      	it	cc
 8011d5c:	3108      	addcc	r1, #8
 8011d5e:	6084      	str	r4, [r0, #8]
 8011d60:	bf38      	it	cc
 8011d62:	6101      	strcc	r1, [r0, #16]
 8011d64:	6903      	ldr	r3, [r0, #16]
 8011d66:	2100      	movs	r1, #0
 8011d68:	801e      	strh	r6, [r3, #0]
 8011d6a:	805a      	strh	r2, [r3, #2]
 8011d6c:	8099      	strh	r1, [r3, #4]
 8011d6e:	80d9      	strh	r1, [r3, #6]
 8011d70:	9b06      	ldr	r3, [sp, #24]
 8011d72:	4293      	cmp	r3, r2
 8011d74:	f000 8082 	beq.w	8011e7c <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8011d78:	9b08      	ldr	r3, [sp, #32]
 8011d7a:	9902      	ldr	r1, [sp, #8]
 8011d7c:	015b      	lsls	r3, r3, #5
 8011d7e:	9c02      	ldr	r4, [sp, #8]
 8011d80:	fb93 f1f1 	sdiv	r1, r3, r1
 8011d84:	fb04 3311 	mls	r3, r4, r1, r3
 8011d88:	9103      	str	r1, [sp, #12]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	9308      	str	r3, [sp, #32]
 8011d8e:	da04      	bge.n	8011d9a <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8011d90:	1e4b      	subs	r3, r1, #1
 8011d92:	9303      	str	r3, [sp, #12]
 8011d94:	9b08      	ldr	r3, [sp, #32]
 8011d96:	4423      	add	r3, r4
 8011d98:	9308      	str	r3, [sp, #32]
 8011d9a:	9b07      	ldr	r3, [sp, #28]
 8011d9c:	464f      	mov	r7, r9
 8011d9e:	9902      	ldr	r1, [sp, #8]
 8011da0:	2600      	movs	r6, #0
 8011da2:	1a5b      	subs	r3, r3, r1
 8011da4:	9307      	str	r3, [sp, #28]
 8011da6:	9b01      	ldr	r3, [sp, #4]
 8011da8:	f1c3 0320 	rsb	r3, r3, #32
 8011dac:	930e      	str	r3, [sp, #56]	; 0x38
 8011dae:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011db0:	9b01      	ldr	r3, [sp, #4]
 8011db2:	1a5b      	subs	r3, r3, r1
 8011db4:	930a      	str	r3, [sp, #40]	; 0x28
 8011db6:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8011dba:	185b      	adds	r3, r3, r1
 8011dbc:	bf58      	it	pl
 8011dbe:	9902      	ldrpl	r1, [sp, #8]
 8011dc0:	9307      	str	r3, [sp, #28]
 8011dc2:	bf57      	itett	pl
 8011dc4:	1a5b      	subpl	r3, r3, r1
 8011dc6:	9903      	ldrmi	r1, [sp, #12]
 8011dc8:	9307      	strpl	r3, [sp, #28]
 8011dca:	9b03      	ldrpl	r3, [sp, #12]
 8011dcc:	bf58      	it	pl
 8011dce:	1c59      	addpl	r1, r3, #1
 8011dd0:	2a00      	cmp	r2, #0
 8011dd2:	4489      	add	r9, r1
 8011dd4:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8011dd8:	db2e      	blt.n	8011e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011dda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	dd2b      	ble.n	8011e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011de0:	9c01      	ldr	r4, [sp, #4]
 8011de2:	6905      	ldr	r5, [r0, #16]
 8011de4:	46a0      	mov	r8, r4
 8011de6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011de8:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8011dec:	45a0      	cmp	r8, r4
 8011dee:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8011df2:	f040 814c 	bne.w	801208e <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8011df6:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011dfa:	4551      	cmp	r1, sl
 8011dfc:	d103      	bne.n	8011e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8011dfe:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011e02:	4291      	cmp	r1, r2
 8011e04:	d018      	beq.n	8011e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011e06:	ea5c 010e 	orrs.w	r1, ip, lr
 8011e0a:	d00f      	beq.n	8011e2c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011e0c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011e10:	2900      	cmp	r1, #0
 8011e12:	db0b      	blt.n	8011e2c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011e14:	428b      	cmp	r3, r1
 8011e16:	dd09      	ble.n	8011e2c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011e18:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8011e1c:	4299      	cmp	r1, r3
 8011e1e:	f101 0101 	add.w	r1, r1, #1
 8011e22:	bf38      	it	cc
 8011e24:	3508      	addcc	r5, #8
 8011e26:	6081      	str	r1, [r0, #8]
 8011e28:	bf38      	it	cc
 8011e2a:	6105      	strcc	r5, [r0, #16]
 8011e2c:	6903      	ldr	r3, [r0, #16]
 8011e2e:	f8a3 a000 	strh.w	sl, [r3]
 8011e32:	805a      	strh	r2, [r3, #2]
 8011e34:	809e      	strh	r6, [r3, #4]
 8011e36:	80de      	strh	r6, [r3, #6]
 8011e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e3a:	6901      	ldr	r1, [r0, #16]
 8011e3c:	441a      	add	r2, r3
 8011e3e:	88cc      	ldrh	r4, [r1, #6]
 8011e40:	888b      	ldrh	r3, [r1, #4]
 8011e42:	4323      	orrs	r3, r4
 8011e44:	d010      	beq.n	8011e68 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011e46:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011e4a:	2c00      	cmp	r4, #0
 8011e4c:	db0c      	blt.n	8011e68 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011e4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011e50:	429c      	cmp	r4, r3
 8011e52:	da09      	bge.n	8011e68 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011e54:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011e58:	429c      	cmp	r4, r3
 8011e5a:	f104 0401 	add.w	r4, r4, #1
 8011e5e:	bf38      	it	cc
 8011e60:	3108      	addcc	r1, #8
 8011e62:	6084      	str	r4, [r0, #8]
 8011e64:	bf38      	it	cc
 8011e66:	6101      	strcc	r1, [r0, #16]
 8011e68:	6903      	ldr	r3, [r0, #16]
 8011e6a:	464f      	mov	r7, r9
 8011e6c:	f8a3 a000 	strh.w	sl, [r3]
 8011e70:	805a      	strh	r2, [r3, #2]
 8011e72:	809e      	strh	r6, [r3, #4]
 8011e74:	80de      	strh	r6, [r3, #6]
 8011e76:	9b06      	ldr	r3, [sp, #24]
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	d19c      	bne.n	8011db6 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8011e7c:	9b01      	ldr	r3, [sp, #4]
 8011e7e:	6907      	ldr	r7, [r0, #16]
 8011e80:	f1c3 0620 	rsb	r6, r3, #32
 8011e84:	9b05      	ldr	r3, [sp, #20]
 8011e86:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8011e8a:	9b04      	ldr	r3, [sp, #16]
 8011e8c:	429e      	cmp	r6, r3
 8011e8e:	f040 81c7 	bne.w	8012220 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8011e92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011e96:	459e      	cmp	lr, r3
 8011e98:	d104      	bne.n	8011ea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8011e9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	f43f ae3a 	beq.w	8011b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011ea4:	88f9      	ldrh	r1, [r7, #6]
 8011ea6:	88bb      	ldrh	r3, [r7, #4]
 8011ea8:	430b      	orrs	r3, r1
 8011eaa:	d010      	beq.n	8011ece <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	db0c      	blt.n	8011ece <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011eb4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8011eb6:	428b      	cmp	r3, r1
 8011eb8:	da09      	bge.n	8011ece <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011eba:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011ebe:	428b      	cmp	r3, r1
 8011ec0:	f103 0301 	add.w	r3, r3, #1
 8011ec4:	bf38      	it	cc
 8011ec6:	3708      	addcc	r7, #8
 8011ec8:	6083      	str	r3, [r0, #8]
 8011eca:	bf38      	it	cc
 8011ecc:	6107      	strcc	r7, [r0, #16]
 8011ece:	6903      	ldr	r3, [r0, #16]
 8011ed0:	f8a3 e000 	strh.w	lr, [r3]
 8011ed4:	e603      	b.n	8011ade <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8011ed6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8011ed8:	9c03      	ldr	r4, [sp, #12]
 8011eda:	42a2      	cmp	r2, r4
 8011edc:	f6ff ae1c 	blt.w	8011b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011ee0:	9c06      	ldr	r4, [sp, #24]
 8011ee2:	42a2      	cmp	r2, r4
 8011ee4:	9c08      	ldr	r4, [sp, #32]
 8011ee6:	bfbc      	itt	lt
 8011ee8:	3201      	addlt	r2, #1
 8011eea:	9206      	strlt	r2, [sp, #24]
 8011eec:	f1c3 0220 	rsb	r2, r3, #32
 8011ef0:	4362      	muls	r2, r4
 8011ef2:	2401      	movs	r4, #1
 8011ef4:	940b      	str	r4, [sp, #44]	; 0x2c
 8011ef6:	2420      	movs	r4, #32
 8011ef8:	e6d6      	b.n	8011ca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8011efa:	ea4f 1861 	mov.w	r8, r1, asr #5
 8011efe:	f009 021f 	and.w	r2, r9, #31
 8011f02:	f001 011f 	and.w	r1, r1, #31
 8011f06:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8011f0a:	920c      	str	r2, [sp, #48]	; 0x30
 8011f0c:	45b0      	cmp	r8, r6
 8011f0e:	9a01      	ldr	r2, [sp, #4]
 8011f10:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8011f14:	eba2 0203 	sub.w	r2, r2, r3
 8011f18:	d108      	bne.n	8011f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8011f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f1c:	4496      	add	lr, r2
 8011f1e:	4419      	add	r1, r3
 8011f20:	f8a5 e004 	strh.w	lr, [r5, #4]
 8011f24:	fb02 a101 	mla	r1, r2, r1, sl
 8011f28:	80e9      	strh	r1, [r5, #6]
 8011f2a:	e6fa      	b.n	8011d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011f2c:	2c00      	cmp	r4, #0
 8011f2e:	f2c0 80a7 	blt.w	8012080 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8011f32:	2701      	movs	r7, #1
 8011f34:	f1c1 0c20 	rsb	ip, r1, #32
 8011f38:	970a      	str	r7, [sp, #40]	; 0x28
 8011f3a:	2720      	movs	r7, #32
 8011f3c:	fb02 f20c 	mul.w	r2, r2, ip
 8011f40:	9709      	str	r7, [sp, #36]	; 0x24
 8011f42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011f44:	fb92 fcf4 	sdiv	ip, r2, r4
 8011f48:	fb04 221c 	mls	r2, r4, ip, r2
 8011f4c:	4439      	add	r1, r7
 8011f4e:	2a00      	cmp	r2, #0
 8011f50:	bfbc      	itt	lt
 8011f52:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8011f56:	1912      	addlt	r2, r2, r4
 8011f58:	fb0c a101 	mla	r1, ip, r1, sl
 8011f5c:	44e6      	add	lr, ip
 8011f5e:	80e9      	strh	r1, [r5, #6]
 8011f60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f62:	f8a5 e004 	strh.w	lr, [r5, #4]
 8011f66:	eb08 0501 	add.w	r5, r8, r1
 8011f6a:	6901      	ldr	r1, [r0, #16]
 8011f6c:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8011f70:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8011f74:	ea58 070e 	orrs.w	r7, r8, lr
 8011f78:	d010      	beq.n	8011f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011f7a:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8011f7e:	f1be 0f00 	cmp.w	lr, #0
 8011f82:	db0b      	blt.n	8011f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011f84:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8011f86:	45be      	cmp	lr, r7
 8011f88:	da08      	bge.n	8011f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011f8a:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8011f8e:	45be      	cmp	lr, r7
 8011f90:	bf3c      	itt	cc
 8011f92:	3108      	addcc	r1, #8
 8011f94:	6101      	strcc	r1, [r0, #16]
 8011f96:	f10e 0101 	add.w	r1, lr, #1
 8011f9a:	6081      	str	r1, [r0, #8]
 8011f9c:	6901      	ldr	r1, [r0, #16]
 8011f9e:	f04f 0e00 	mov.w	lr, #0
 8011fa2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8011fa6:	42ae      	cmp	r6, r5
 8011fa8:	800d      	strh	r5, [r1, #0]
 8011faa:	4463      	add	r3, ip
 8011fac:	f8a1 8002 	strh.w	r8, [r1, #2]
 8011fb0:	f8a1 e004 	strh.w	lr, [r1, #4]
 8011fb4:	f8a1 e006 	strh.w	lr, [r1, #6]
 8011fb8:	d053      	beq.n	8012062 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8011fba:	9901      	ldr	r1, [sp, #4]
 8011fbc:	1b12      	subs	r2, r2, r4
 8011fbe:	1ac9      	subs	r1, r1, r3
 8011fc0:	4461      	add	r1, ip
 8011fc2:	0149      	lsls	r1, r1, #5
 8011fc4:	fb91 fef4 	sdiv	lr, r1, r4
 8011fc8:	fb04 111e 	mls	r1, r4, lr, r1
 8011fcc:	2900      	cmp	r1, #0
 8011fce:	bfbc      	itt	lt
 8011fd0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8011fd4:	1909      	addlt	r1, r1, r4
 8011fd6:	f10e 0701 	add.w	r7, lr, #1
 8011fda:	970d      	str	r7, [sp, #52]	; 0x34
 8011fdc:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8011fe0:	1852      	adds	r2, r2, r1
 8011fe2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011fe4:	bf54      	ite	pl
 8011fe6:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8011fea:	46f4      	movmi	ip, lr
 8011fec:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8011ff0:	bf58      	it	pl
 8011ff2:	1b12      	subpl	r2, r2, r4
 8011ff4:	4463      	add	r3, ip
 8011ff6:	443d      	add	r5, r7
 8011ff8:	44e3      	add	fp, ip
 8011ffa:	f8aa b004 	strh.w	fp, [sl, #4]
 8011ffe:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8012002:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8012006:	f8aa b006 	strh.w	fp, [sl, #6]
 801200a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801200e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012012:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8012016:	ea5b 070a 	orrs.w	r7, fp, sl
 801201a:	d014      	beq.n	8012046 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801201c:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8012020:	f1ba 0f00 	cmp.w	sl, #0
 8012024:	db0f      	blt.n	8012046 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012026:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8012028:	45ba      	cmp	sl, r7
 801202a:	da0c      	bge.n	8012046 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801202c:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8012030:	45ba      	cmp	sl, r7
 8012032:	f10a 0a01 	add.w	sl, sl, #1
 8012036:	bf38      	it	cc
 8012038:	f10c 0c08 	addcc.w	ip, ip, #8
 801203c:	f8c0 a008 	str.w	sl, [r0, #8]
 8012040:	bf38      	it	cc
 8012042:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8012046:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801204a:	f04f 0700 	mov.w	r7, #0
 801204e:	42ae      	cmp	r6, r5
 8012050:	f8ac 5000 	strh.w	r5, [ip]
 8012054:	f8ac 8002 	strh.w	r8, [ip, #2]
 8012058:	f8ac 7004 	strh.w	r7, [ip, #4]
 801205c:	f8ac 7006 	strh.w	r7, [ip, #6]
 8012060:	d1bc      	bne.n	8011fdc <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8012062:	6904      	ldr	r4, [r0, #16]
 8012064:	9a01      	ldr	r2, [sp, #4]
 8012066:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012068:	1ad3      	subs	r3, r2, r3
 801206a:	88a2      	ldrh	r2, [r4, #4]
 801206c:	3120      	adds	r1, #32
 801206e:	441a      	add	r2, r3
 8012070:	80a2      	strh	r2, [r4, #4]
 8012072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012074:	1a89      	subs	r1, r1, r2
 8012076:	88e2      	ldrh	r2, [r4, #6]
 8012078:	fb03 2301 	mla	r3, r3, r1, r2
 801207c:	80e3      	strh	r3, [r4, #6]
 801207e:	e650      	b.n	8011d22 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012080:	f04f 37ff 	mov.w	r7, #4294967295
 8012084:	434a      	muls	r2, r1
 8012086:	4264      	negs	r4, r4
 8012088:	970a      	str	r7, [sp, #40]	; 0x28
 801208a:	2700      	movs	r7, #0
 801208c:	e758      	b.n	8011f40 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801208e:	ea4f 1867 	mov.w	r8, r7, asr #5
 8012092:	f009 031f 	and.w	r3, r9, #31
 8012096:	f007 071f 	and.w	r7, r7, #31
 801209a:	fa1f fc8c 	uxth.w	ip, ip
 801209e:	45d0      	cmp	r8, sl
 80120a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80120a2:	fa1f fe8e 	uxth.w	lr, lr
 80120a6:	d10a      	bne.n	80120be <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80120a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120aa:	449c      	add	ip, r3
 80120ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120ae:	441f      	add	r7, r3
 80120b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120b2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80120b6:	fb03 e707 	mla	r7, r3, r7, lr
 80120ba:	80ef      	strh	r7, [r5, #6]
 80120bc:	e6bc      	b.n	8011e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80120be:	2900      	cmp	r1, #0
 80120c0:	f2c0 80a6 	blt.w	8012210 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80120c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80120c6:	f1c7 0320 	rsb	r3, r7, #32
 80120ca:	4363      	muls	r3, r4
 80120cc:	2401      	movs	r4, #1
 80120ce:	940d      	str	r4, [sp, #52]	; 0x34
 80120d0:	2420      	movs	r4, #32
 80120d2:	940c      	str	r4, [sp, #48]	; 0x30
 80120d4:	fb93 f4f1 	sdiv	r4, r3, r1
 80120d8:	fb01 3b14 	mls	fp, r1, r4, r3
 80120dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120de:	f1bb 0f00 	cmp.w	fp, #0
 80120e2:	441f      	add	r7, r3
 80120e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120e6:	bfbc      	itt	lt
 80120e8:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80120ec:	448b      	addlt	fp, r1
 80120ee:	fb04 e707 	mla	r7, r4, r7, lr
 80120f2:	44a4      	add	ip, r4
 80120f4:	80ef      	strh	r7, [r5, #6]
 80120f6:	f8a5 c004 	strh.w	ip, [r5, #4]
 80120fa:	eb08 0503 	add.w	r5, r8, r3
 80120fe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012102:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8012106:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801210a:	ea5e 0307 	orrs.w	r3, lr, r7
 801210e:	d011      	beq.n	8012134 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8012110:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8012114:	f1be 0f00 	cmp.w	lr, #0
 8012118:	db0c      	blt.n	8012134 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801211a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801211c:	45be      	cmp	lr, r7
 801211e:	da09      	bge.n	8012134 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8012120:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8012124:	45be      	cmp	lr, r7
 8012126:	bf3c      	itt	cc
 8012128:	f10c 0708 	addcc.w	r7, ip, #8
 801212c:	6107      	strcc	r7, [r0, #16]
 801212e:	f10e 0701 	add.w	r7, lr, #1
 8012132:	6087      	str	r7, [r0, #8]
 8012134:	6907      	ldr	r7, [r0, #16]
 8012136:	b213      	sxth	r3, r2
 8012138:	4555      	cmp	r5, sl
 801213a:	9310      	str	r3, [sp, #64]	; 0x40
 801213c:	807b      	strh	r3, [r7, #2]
 801213e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012140:	803d      	strh	r5, [r7, #0]
 8012142:	80be      	strh	r6, [r7, #4]
 8012144:	eb04 0c03 	add.w	ip, r4, r3
 8012148:	80fe      	strh	r6, [r7, #6]
 801214a:	d050      	beq.n	80121ee <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801214c:	9b01      	ldr	r3, [sp, #4]
 801214e:	eba3 070c 	sub.w	r7, r3, ip
 8012152:	ebab 0301 	sub.w	r3, fp, r1
 8012156:	443c      	add	r4, r7
 8012158:	9309      	str	r3, [sp, #36]	; 0x24
 801215a:	0164      	lsls	r4, r4, #5
 801215c:	fb94 f8f1 	sdiv	r8, r4, r1
 8012160:	fb01 4418 	mls	r4, r1, r8, r4
 8012164:	2c00      	cmp	r4, #0
 8012166:	bfbc      	itt	lt
 8012168:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801216c:	1864      	addlt	r4, r4, r1
 801216e:	f108 0701 	add.w	r7, r8, #1
 8012172:	9711      	str	r7, [sp, #68]	; 0x44
 8012174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012176:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801217a:	191b      	adds	r3, r3, r4
 801217c:	f8be b004 	ldrh.w	fp, [lr, #4]
 8012180:	bf54      	ite	pl
 8012182:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8012184:	4647      	movmi	r7, r8
 8012186:	9309      	str	r3, [sp, #36]	; 0x24
 8012188:	bf58      	it	pl
 801218a:	1a5b      	subpl	r3, r3, r1
 801218c:	44bb      	add	fp, r7
 801218e:	44bc      	add	ip, r7
 8012190:	bf58      	it	pl
 8012192:	9309      	strpl	r3, [sp, #36]	; 0x24
 8012194:	f8ae b004 	strh.w	fp, [lr, #4]
 8012198:	f8be b006 	ldrh.w	fp, [lr, #6]
 801219c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80121a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80121a2:	f8ae b006 	strh.w	fp, [lr, #6]
 80121a6:	443d      	add	r5, r7
 80121a8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80121ac:	f8be b006 	ldrh.w	fp, [lr, #6]
 80121b0:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80121b4:	ea5b 0307 	orrs.w	r3, fp, r7
 80121b8:	d011      	beq.n	80121de <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80121ba:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80121be:	f1bb 0f00 	cmp.w	fp, #0
 80121c2:	db0c      	blt.n	80121de <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80121c4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80121c6:	45bb      	cmp	fp, r7
 80121c8:	da09      	bge.n	80121de <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80121ca:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80121ce:	45bb      	cmp	fp, r7
 80121d0:	bf3c      	itt	cc
 80121d2:	f10e 0708 	addcc.w	r7, lr, #8
 80121d6:	6107      	strcc	r7, [r0, #16]
 80121d8:	f10b 0701 	add.w	r7, fp, #1
 80121dc:	6087      	str	r7, [r0, #8]
 80121de:	6907      	ldr	r7, [r0, #16]
 80121e0:	4555      	cmp	r5, sl
 80121e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80121e4:	803d      	strh	r5, [r7, #0]
 80121e6:	807b      	strh	r3, [r7, #2]
 80121e8:	80be      	strh	r6, [r7, #4]
 80121ea:	80fe      	strh	r6, [r7, #6]
 80121ec:	d1c2      	bne.n	8012174 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80121ee:	9b01      	ldr	r3, [sp, #4]
 80121f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80121f2:	eba3 0c0c 	sub.w	ip, r3, ip
 80121f6:	6903      	ldr	r3, [r0, #16]
 80121f8:	3720      	adds	r7, #32
 80121fa:	8899      	ldrh	r1, [r3, #4]
 80121fc:	4461      	add	r1, ip
 80121fe:	8099      	strh	r1, [r3, #4]
 8012200:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012202:	1a7f      	subs	r7, r7, r1
 8012204:	88d9      	ldrh	r1, [r3, #6]
 8012206:	fb0c 1c07 	mla	ip, ip, r7, r1
 801220a:	f8a3 c006 	strh.w	ip, [r3, #6]
 801220e:	e613      	b.n	8011e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012210:	f04f 34ff 	mov.w	r4, #4294967295
 8012214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012216:	4249      	negs	r1, r1
 8012218:	940d      	str	r4, [sp, #52]	; 0x34
 801221a:	2400      	movs	r4, #0
 801221c:	437b      	muls	r3, r7
 801221e:	e758      	b.n	80120d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8012220:	9905      	ldr	r1, [sp, #20]
 8012222:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8012226:	f009 0c1f 	and.w	ip, r9, #31
 801222a:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801222e:	f001 011f 	and.w	r1, r1, #31
 8012232:	45f3      	cmp	fp, lr
 8012234:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8012238:	9102      	str	r1, [sp, #8]
 801223a:	9904      	ldr	r1, [sp, #16]
 801223c:	eba1 0406 	sub.w	r4, r1, r6
 8012240:	d108      	bne.n	8012254 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8012242:	9b02      	ldr	r3, [sp, #8]
 8012244:	44a0      	add	r8, r4
 8012246:	449c      	add	ip, r3
 8012248:	f8a7 8004 	strh.w	r8, [r7, #4]
 801224c:	fb04 a40c 	mla	r4, r4, ip, sl
 8012250:	80fc      	strh	r4, [r7, #6]
 8012252:	e461      	b.n	8011b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012254:	9905      	ldr	r1, [sp, #20]
 8012256:	ebb1 0109 	subs.w	r1, r1, r9
 801225a:	bf51      	iteee	pl
 801225c:	f1cc 0520 	rsbpl	r5, ip, #32
 8012260:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012264:	4249      	negmi	r1, r1
 8012266:	2500      	movmi	r5, #0
 8012268:	bf5d      	ittte	pl
 801226a:	436c      	mulpl	r4, r5
 801226c:	2520      	movpl	r5, #32
 801226e:	f04f 0901 	movpl.w	r9, #1
 8012272:	f04f 39ff 	movmi.w	r9, #4294967295
 8012276:	9501      	str	r5, [sp, #4]
 8012278:	9b01      	ldr	r3, [sp, #4]
 801227a:	fb94 f5f1 	sdiv	r5, r4, r1
 801227e:	fb01 4415 	mls	r4, r1, r5, r4
 8012282:	449c      	add	ip, r3
 8012284:	eb0b 0309 	add.w	r3, fp, r9
 8012288:	2c00      	cmp	r4, #0
 801228a:	bfbc      	itt	lt
 801228c:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8012290:	1864      	addlt	r4, r4, r1
 8012292:	44a8      	add	r8, r5
 8012294:	fb05 ac0c 	mla	ip, r5, ip, sl
 8012298:	f8a7 8004 	strh.w	r8, [r7, #4]
 801229c:	f8a7 c006 	strh.w	ip, [r7, #6]
 80122a0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80122a4:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80122a8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80122ac:	ea58 0707 	orrs.w	r7, r8, r7
 80122b0:	d011      	beq.n	80122d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80122b2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80122b6:	f1b8 0f00 	cmp.w	r8, #0
 80122ba:	db0c      	blt.n	80122d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80122bc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80122be:	45b8      	cmp	r8, r7
 80122c0:	da09      	bge.n	80122d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80122c2:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80122c6:	45b8      	cmp	r8, r7
 80122c8:	bf3c      	itt	cc
 80122ca:	f10c 0708 	addcc.w	r7, ip, #8
 80122ce:	6107      	strcc	r7, [r0, #16]
 80122d0:	f108 0701 	add.w	r7, r8, #1
 80122d4:	6087      	str	r7, [r0, #8]
 80122d6:	6907      	ldr	r7, [r0, #16]
 80122d8:	f04f 0c00 	mov.w	ip, #0
 80122dc:	b212      	sxth	r2, r2
 80122de:	459e      	cmp	lr, r3
 80122e0:	803b      	strh	r3, [r7, #0]
 80122e2:	442e      	add	r6, r5
 80122e4:	807a      	strh	r2, [r7, #2]
 80122e6:	f8a7 c004 	strh.w	ip, [r7, #4]
 80122ea:	f8a7 c006 	strh.w	ip, [r7, #6]
 80122ee:	d04b      	beq.n	8012388 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80122f0:	9f04      	ldr	r7, [sp, #16]
 80122f2:	1a64      	subs	r4, r4, r1
 80122f4:	f04f 0a00 	mov.w	sl, #0
 80122f8:	1bbf      	subs	r7, r7, r6
 80122fa:	443d      	add	r5, r7
 80122fc:	016d      	lsls	r5, r5, #5
 80122fe:	fb95 f8f1 	sdiv	r8, r5, r1
 8012302:	fb01 5518 	mls	r5, r1, r8, r5
 8012306:	4565      	cmp	r5, ip
 8012308:	bfbc      	itt	lt
 801230a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801230e:	186d      	addlt	r5, r5, r1
 8012310:	f108 0701 	add.w	r7, r8, #1
 8012314:	9703      	str	r7, [sp, #12]
 8012316:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801231a:	1964      	adds	r4, r4, r5
 801231c:	444b      	add	r3, r9
 801231e:	bf54      	ite	pl
 8012320:	9f03      	ldrpl	r7, [sp, #12]
 8012322:	4647      	movmi	r7, r8
 8012324:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8012328:	bf58      	it	pl
 801232a:	1a64      	subpl	r4, r4, r1
 801232c:	443e      	add	r6, r7
 801232e:	44bb      	add	fp, r7
 8012330:	f8ac b004 	strh.w	fp, [ip, #4]
 8012334:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012338:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801233c:	f8ac b006 	strh.w	fp, [ip, #6]
 8012340:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012344:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012348:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801234c:	ea5b 0707 	orrs.w	r7, fp, r7
 8012350:	d011      	beq.n	8012376 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012352:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8012356:	f1bb 0f00 	cmp.w	fp, #0
 801235a:	db0c      	blt.n	8012376 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801235c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801235e:	45bb      	cmp	fp, r7
 8012360:	da09      	bge.n	8012376 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012362:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8012366:	45bb      	cmp	fp, r7
 8012368:	bf3c      	itt	cc
 801236a:	f10c 0708 	addcc.w	r7, ip, #8
 801236e:	6107      	strcc	r7, [r0, #16]
 8012370:	f10b 0701 	add.w	r7, fp, #1
 8012374:	6087      	str	r7, [r0, #8]
 8012376:	6907      	ldr	r7, [r0, #16]
 8012378:	459e      	cmp	lr, r3
 801237a:	803b      	strh	r3, [r7, #0]
 801237c:	807a      	strh	r2, [r7, #2]
 801237e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8012382:	f8a7 a006 	strh.w	sl, [r7, #6]
 8012386:	d1c6      	bne.n	8012316 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8012388:	9b04      	ldr	r3, [sp, #16]
 801238a:	1b9e      	subs	r6, r3, r6
 801238c:	6903      	ldr	r3, [r0, #16]
 801238e:	889a      	ldrh	r2, [r3, #4]
 8012390:	4432      	add	r2, r6
 8012392:	809a      	strh	r2, [r3, #4]
 8012394:	9a02      	ldr	r2, [sp, #8]
 8012396:	f102 0c20 	add.w	ip, r2, #32
 801239a:	9a01      	ldr	r2, [sp, #4]
 801239c:	ebac 0c02 	sub.w	ip, ip, r2
 80123a0:	88da      	ldrh	r2, [r3, #6]
 80123a2:	fb06 260c 	mla	r6, r6, ip, r2
 80123a6:	80de      	strh	r6, [r3, #6]
 80123a8:	f7ff bbb6 	b.w	8011b18 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080123ac <_ZN8touchgfx7Outline6lineToEii>:
 80123ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80123ae:	079b      	lsls	r3, r3, #30
 80123b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123b2:	460e      	mov	r6, r1
 80123b4:	4615      	mov	r5, r2
 80123b6:	d511      	bpl.n	80123dc <_ZN8touchgfx7Outline6lineToEii+0x30>
 80123b8:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80123bc:	ea86 0701 	eor.w	r7, r6, r1
 80123c0:	ea85 0302 	eor.w	r3, r5, r2
 80123c4:	433b      	orrs	r3, r7
 80123c6:	d009      	beq.n	80123dc <_ZN8touchgfx7Outline6lineToEii+0x30>
 80123c8:	4633      	mov	r3, r6
 80123ca:	9500      	str	r5, [sp, #0]
 80123cc:	f7ff fb4c 	bl	8011a68 <_ZN8touchgfx7Outline10renderLineEiiii>
 80123d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80123d2:	f043 0301 	orr.w	r3, r3, #1
 80123d6:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80123da:	6243      	str	r3, [r0, #36]	; 0x24
 80123dc:	b003      	add	sp, #12
 80123de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123e0 <_ZN8touchgfx7Outline6moveToEii>:
 80123e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80123e4:	4615      	mov	r5, r2
 80123e6:	4604      	mov	r4, r0
 80123e8:	460e      	mov	r6, r1
 80123ea:	079a      	lsls	r2, r3, #30
 80123ec:	d401      	bmi.n	80123f2 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80123ee:	f7ff fb07 	bl	8011a00 <_ZN8touchgfx7Outline5resetEv>
 80123f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123f4:	07db      	lsls	r3, r3, #31
 80123f6:	d504      	bpl.n	8012402 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80123f8:	4620      	mov	r0, r4
 80123fa:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80123fe:	f7ff ffd5 	bl	80123ac <_ZN8touchgfx7Outline6lineToEii>
 8012402:	6923      	ldr	r3, [r4, #16]
 8012404:	1170      	asrs	r0, r6, #5
 8012406:	1169      	asrs	r1, r5, #5
 8012408:	f9b3 2000 	ldrsh.w	r2, [r3]
 801240c:	4290      	cmp	r0, r2
 801240e:	d103      	bne.n	8012418 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8012410:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012414:	4291      	cmp	r1, r2
 8012416:	d01a      	beq.n	801244e <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8012418:	88df      	ldrh	r7, [r3, #6]
 801241a:	889a      	ldrh	r2, [r3, #4]
 801241c:	433a      	orrs	r2, r7
 801241e:	d010      	beq.n	8012442 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012420:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012424:	2a00      	cmp	r2, #0
 8012426:	db0c      	blt.n	8012442 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012428:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801242a:	42ba      	cmp	r2, r7
 801242c:	da09      	bge.n	8012442 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801242e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8012432:	42ba      	cmp	r2, r7
 8012434:	f102 0201 	add.w	r2, r2, #1
 8012438:	bf38      	it	cc
 801243a:	3308      	addcc	r3, #8
 801243c:	60a2      	str	r2, [r4, #8]
 801243e:	bf38      	it	cc
 8012440:	6123      	strcc	r3, [r4, #16]
 8012442:	6923      	ldr	r3, [r4, #16]
 8012444:	2200      	movs	r2, #0
 8012446:	8018      	strh	r0, [r3, #0]
 8012448:	8059      	strh	r1, [r3, #2]
 801244a:	809a      	strh	r2, [r3, #4]
 801244c:	80da      	strh	r2, [r3, #6]
 801244e:	6166      	str	r6, [r4, #20]
 8012450:	6225      	str	r5, [r4, #32]
 8012452:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012458 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8012458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801245c:	b0d0      	sub	sp, #320	; 0x140
 801245e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012462:	466c      	mov	r4, sp
 8012464:	4627      	mov	r7, r4
 8012466:	1a0d      	subs	r5, r1, r0
 8012468:	f100 0308 	add.w	r3, r0, #8
 801246c:	2d48      	cmp	r5, #72	; 0x48
 801246e:	f340 80d5 	ble.w	801261c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012472:	112d      	asrs	r5, r5, #4
 8012474:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012478:	f9b0 9000 	ldrsh.w	r9, [r0]
 801247c:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8012480:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8012484:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012488:	6816      	ldr	r6, [r2, #0]
 801248a:	6006      	str	r6, [r0, #0]
 801248c:	6856      	ldr	r6, [r2, #4]
 801248e:	6046      	str	r6, [r0, #4]
 8012490:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012494:	f8a2 8002 	strh.w	r8, [r2, #2]
 8012498:	f8a2 e004 	strh.w	lr, [r2, #4]
 801249c:	f8a2 c006 	strh.w	ip, [r2, #6]
 80124a0:	f1a1 0208 	sub.w	r2, r1, #8
 80124a4:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80124a8:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80124ac:	4565      	cmp	r5, ip
 80124ae:	db06      	blt.n	80124be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80124b0:	d119      	bne.n	80124e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80124b2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80124b6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80124ba:	42ae      	cmp	r6, r5
 80124bc:	dd13      	ble.n	80124e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80124be:	460e      	mov	r6, r1
 80124c0:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80124c4:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80124c8:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80124cc:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80124d0:	601d      	str	r5, [r3, #0]
 80124d2:	6875      	ldr	r5, [r6, #4]
 80124d4:	605d      	str	r5, [r3, #4]
 80124d6:	f821 9c08 	strh.w	r9, [r1, #-8]
 80124da:	f821 cc06 	strh.w	ip, [r1, #-6]
 80124de:	f821 8c04 	strh.w	r8, [r1, #-4]
 80124e2:	f821 ec02 	strh.w	lr, [r1, #-2]
 80124e6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80124ea:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80124ee:	42ae      	cmp	r6, r5
 80124f0:	db06      	blt.n	8012500 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80124f2:	d116      	bne.n	8012522 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80124f4:	f9b0 c000 	ldrsh.w	ip, [r0]
 80124f8:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80124fc:	45ac      	cmp	ip, r5
 80124fe:	da10      	bge.n	8012522 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012500:	681d      	ldr	r5, [r3, #0]
 8012502:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012506:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801250a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801250e:	6005      	str	r5, [r0, #0]
 8012510:	685d      	ldr	r5, [r3, #4]
 8012512:	f8a0 8008 	strh.w	r8, [r0, #8]
 8012516:	6045      	str	r5, [r0, #4]
 8012518:	8146      	strh	r6, [r0, #10]
 801251a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801251e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8012522:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012526:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801252a:	4565      	cmp	r5, ip
 801252c:	db06      	blt.n	801253c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801252e:	d119      	bne.n	8012564 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012530:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8012534:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012538:	42ae      	cmp	r6, r5
 801253a:	da13      	bge.n	8012564 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801253c:	460e      	mov	r6, r1
 801253e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012542:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8012546:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801254a:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801254e:	6005      	str	r5, [r0, #0]
 8012550:	6875      	ldr	r5, [r6, #4]
 8012552:	6045      	str	r5, [r0, #4]
 8012554:	f821 9c08 	strh.w	r9, [r1, #-8]
 8012558:	f821 cc06 	strh.w	ip, [r1, #-6]
 801255c:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012560:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012564:	3308      	adds	r3, #8
 8012566:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801256a:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801256e:	45e6      	cmp	lr, ip
 8012570:	dbf8      	blt.n	8012564 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012572:	d105      	bne.n	8012580 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012574:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012578:	f9b0 5000 	ldrsh.w	r5, [r0]
 801257c:	42ae      	cmp	r6, r5
 801257e:	dbf1      	blt.n	8012564 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012580:	4615      	mov	r5, r2
 8012582:	3a08      	subs	r2, #8
 8012584:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8012588:	45b4      	cmp	ip, r6
 801258a:	dbf9      	blt.n	8012580 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801258c:	d105      	bne.n	801259a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801258e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012592:	f9b2 6000 	ldrsh.w	r6, [r2]
 8012596:	45b0      	cmp	r8, r6
 8012598:	dbf2      	blt.n	8012580 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801259a:	4293      	cmp	r3, r2
 801259c:	f1a5 0608 	sub.w	r6, r5, #8
 80125a0:	d816      	bhi.n	80125d0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80125a2:	f8d6 c000 	ldr.w	ip, [r6]
 80125a6:	f9b3 a000 	ldrsh.w	sl, [r3]
 80125aa:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80125ae:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80125b2:	f8c3 c000 	str.w	ip, [r3]
 80125b6:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80125ba:	f8c3 c004 	str.w	ip, [r3, #4]
 80125be:	f825 ac08 	strh.w	sl, [r5, #-8]
 80125c2:	f825 ec06 	strh.w	lr, [r5, #-6]
 80125c6:	f825 9c04 	strh.w	r9, [r5, #-4]
 80125ca:	f825 8c02 	strh.w	r8, [r5, #-2]
 80125ce:	e7c9      	b.n	8012564 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80125d0:	f8d6 e000 	ldr.w	lr, [r6]
 80125d4:	f9b0 a000 	ldrsh.w	sl, [r0]
 80125d8:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80125dc:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80125e0:	f8c0 e000 	str.w	lr, [r0]
 80125e4:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80125e8:	1a16      	subs	r6, r2, r0
 80125ea:	f8c0 e004 	str.w	lr, [r0, #4]
 80125ee:	f825 ac08 	strh.w	sl, [r5, #-8]
 80125f2:	f825 cc06 	strh.w	ip, [r5, #-6]
 80125f6:	f825 9c04 	strh.w	r9, [r5, #-4]
 80125fa:	f825 8c02 	strh.w	r8, [r5, #-2]
 80125fe:	1acd      	subs	r5, r1, r3
 8012600:	10ed      	asrs	r5, r5, #3
 8012602:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8012606:	bfb5      	itete	lt
 8012608:	e9c4 0200 	strdlt	r0, r2, [r4]
 801260c:	e9c4 3100 	strdge	r3, r1, [r4]
 8012610:	460a      	movlt	r2, r1
 8012612:	4603      	movge	r3, r0
 8012614:	3408      	adds	r4, #8
 8012616:	4618      	mov	r0, r3
 8012618:	4611      	mov	r1, r2
 801261a:	e724      	b.n	8012466 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801261c:	4299      	cmp	r1, r3
 801261e:	d927      	bls.n	8012670 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8012620:	f1a3 0210 	sub.w	r2, r3, #16
 8012624:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8012628:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801262c:	45ac      	cmp	ip, r5
 801262e:	db06      	blt.n	801263e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8012630:	d11c      	bne.n	801266c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012632:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8012636:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801263a:	42ae      	cmp	r6, r5
 801263c:	da16      	bge.n	801266c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801263e:	4615      	mov	r5, r2
 8012640:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8012644:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8012648:	3a08      	subs	r2, #8
 801264a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801264e:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8012652:	6196      	str	r6, [r2, #24]
 8012654:	42a8      	cmp	r0, r5
 8012656:	686e      	ldr	r6, [r5, #4]
 8012658:	f8a2 9010 	strh.w	r9, [r2, #16]
 801265c:	61d6      	str	r6, [r2, #28]
 801265e:	f8a2 c012 	strh.w	ip, [r2, #18]
 8012662:	f8a2 8014 	strh.w	r8, [r2, #20]
 8012666:	f8a2 e016 	strh.w	lr, [r2, #22]
 801266a:	d1db      	bne.n	8012624 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801266c:	3308      	adds	r3, #8
 801266e:	e7d5      	b.n	801261c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012670:	42bc      	cmp	r4, r7
 8012672:	d903      	bls.n	801267c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8012674:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8012678:	3c08      	subs	r4, #8
 801267a:	e6f4      	b.n	8012466 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801267c:	b050      	add	sp, #320	; 0x140
 801267e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012682 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8012682:	b510      	push	{r4, lr}
 8012684:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012686:	4604      	mov	r4, r0
 8012688:	07da      	lsls	r2, r3, #31
 801268a:	d507      	bpl.n	801269c <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801268c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8012690:	f7ff fe8c 	bl	80123ac <_ZN8touchgfx7Outline6lineToEii>
 8012694:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012696:	f023 0301 	bic.w	r3, r3, #1
 801269a:	6243      	str	r3, [r0, #36]	; 0x24
 801269c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801269e:	079b      	lsls	r3, r3, #30
 80126a0:	d521      	bpl.n	80126e6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80126a2:	6923      	ldr	r3, [r4, #16]
 80126a4:	88d9      	ldrh	r1, [r3, #6]
 80126a6:	889a      	ldrh	r2, [r3, #4]
 80126a8:	430a      	orrs	r2, r1
 80126aa:	d010      	beq.n	80126ce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80126ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80126b0:	2a00      	cmp	r2, #0
 80126b2:	db0c      	blt.n	80126ce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80126b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80126b6:	428a      	cmp	r2, r1
 80126b8:	da09      	bge.n	80126ce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80126ba:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80126be:	4291      	cmp	r1, r2
 80126c0:	f102 0201 	add.w	r2, r2, #1
 80126c4:	bf88      	it	hi
 80126c6:	3308      	addhi	r3, #8
 80126c8:	60a2      	str	r2, [r4, #8]
 80126ca:	bf88      	it	hi
 80126cc:	6123      	strhi	r3, [r4, #16]
 80126ce:	68a1      	ldr	r1, [r4, #8]
 80126d0:	b129      	cbz	r1, 80126de <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80126d2:	6863      	ldr	r3, [r4, #4]
 80126d4:	4299      	cmp	r1, r3
 80126d6:	d802      	bhi.n	80126de <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80126d8:	68e0      	ldr	r0, [r4, #12]
 80126da:	f7ff febd 	bl	8012458 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80126de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126e0:	f023 0302 	bic.w	r3, r3, #2
 80126e4:	6263      	str	r3, [r4, #36]	; 0x24
 80126e6:	68e0      	ldr	r0, [r4, #12]
 80126e8:	bd10      	pop	{r4, pc}
	...

080126ec <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80126ec:	4b02      	ldr	r3, [pc, #8]	; (80126f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80126ee:	6018      	str	r0, [r3, #0]
 80126f0:	4b02      	ldr	r3, [pc, #8]	; (80126fc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80126f2:	6019      	str	r1, [r3, #0]
 80126f4:	4770      	bx	lr
 80126f6:	bf00      	nop
 80126f8:	20027ea0 	.word	0x20027ea0
 80126fc:	20027ea4 	.word	0x20027ea4

08012700 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8012700:	4b01      	ldr	r3, [pc, #4]	; (8012708 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8012702:	6818      	ldr	r0, [r3, #0]
 8012704:	4770      	bx	lr
 8012706:	bf00      	nop
 8012708:	20027ea0 	.word	0x20027ea0

0801270c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801270c:	4b01      	ldr	r3, [pc, #4]	; (8012714 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801270e:	6818      	ldr	r0, [r3, #0]
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop
 8012714:	20027ea4 	.word	0x20027ea4

08012718 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8012718:	b510      	push	{r4, lr}
 801271a:	6803      	ldr	r3, [r0, #0]
 801271c:	460c      	mov	r4, r1
 801271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012720:	4798      	blx	r3
 8012722:	1b03      	subs	r3, r0, r4
 8012724:	4258      	negs	r0, r3
 8012726:	4158      	adcs	r0, r3
 8012728:	bd10      	pop	{r4, pc}
	...

0801272c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801272c:	4b01      	ldr	r3, [pc, #4]	; (8012734 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801272e:	6019      	str	r1, [r3, #0]
 8012730:	4770      	bx	lr
 8012732:	bf00      	nop
 8012734:	20027ea8 	.word	0x20027ea8

08012738 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273c:	4696      	mov	lr, r2
 801273e:	b097      	sub	sp, #92	; 0x5c
 8012740:	4605      	mov	r5, r0
 8012742:	4614      	mov	r4, r2
 8012744:	460e      	mov	r6, r1
 8012746:	461f      	mov	r7, r3
 8012748:	f10d 0c1c 	add.w	ip, sp, #28
 801274c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8012750:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8012754:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8012758:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801275c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012760:	f8de 3000 	ldr.w	r3, [lr]
 8012764:	f104 0e14 	add.w	lr, r4, #20
 8012768:	f8cc 3000 	str.w	r3, [ip]
 801276c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012770:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012774:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012778:	f8de 3000 	ldr.w	r3, [lr]
 801277c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8012780:	f8cc 3000 	str.w	r3, [ip]
 8012784:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8012788:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801278c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012790:	f8de 3000 	ldr.w	r3, [lr]
 8012794:	4631      	mov	r1, r6
 8012796:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012798:	4628      	mov	r0, r5
 801279a:	f8cc 3000 	str.w	r3, [ip]
 801279e:	682b      	ldr	r3, [r5, #0]
 80127a0:	9201      	str	r2, [sp, #4]
 80127a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80127a4:	f8cd 8008 	str.w	r8, [sp, #8]
 80127a8:	9200      	str	r2, [sp, #0]
 80127aa:	aa07      	add	r2, sp, #28
 80127ac:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80127b0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80127b4:	463b      	mov	r3, r7
 80127b6:	47d8      	blx	fp
 80127b8:	46a6      	mov	lr, r4
 80127ba:	f10d 0c1c 	add.w	ip, sp, #28
 80127be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127c6:	f8de 3000 	ldr.w	r3, [lr]
 80127ca:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80127ce:	343c      	adds	r4, #60	; 0x3c
 80127d0:	f8cc 3000 	str.w	r3, [ip]
 80127d4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80127d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127e0:	f8de 3000 	ldr.w	r3, [lr]
 80127e4:	f8cc 3000 	str.w	r3, [ip]
 80127e8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80127ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	4631      	mov	r1, r6
 80127f6:	4628      	mov	r0, r5
 80127f8:	f8cc 3000 	str.w	r3, [ip]
 80127fc:	682b      	ldr	r3, [r5, #0]
 80127fe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012802:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012804:	f8cd 8008 	str.w	r8, [sp, #8]
 8012808:	9201      	str	r2, [sp, #4]
 801280a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801280c:	9200      	str	r2, [sp, #0]
 801280e:	aa07      	add	r2, sp, #28
 8012810:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8012812:	463b      	mov	r3, r7
 8012814:	47a0      	blx	r4
 8012816:	b017      	add	sp, #92	; 0x5c
 8012818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801281c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012820:	b08d      	sub	sp, #52	; 0x34
 8012822:	4688      	mov	r8, r1
 8012824:	f8d3 c000 	ldr.w	ip, [r3]
 8012828:	9916      	ldr	r1, [sp, #88]	; 0x58
 801282a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801282e:	680f      	ldr	r7, [r1, #0]
 8012830:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8012834:	eba7 070c 	sub.w	r7, r7, ip
 8012838:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801283c:	edd3 6a07 	vldr	s13, [r3, #28]
 8012840:	42bc      	cmp	r4, r7
 8012842:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012844:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8012848:	bfa8      	it	ge
 801284a:	463c      	movge	r4, r7
 801284c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012850:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012854:	ee07 4a90 	vmov	s15, r4
 8012858:	eb09 0e0c 	add.w	lr, r9, ip
 801285c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8012860:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012864:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8012868:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801286c:	4571      	cmp	r1, lr
 801286e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8012872:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012876:	ee25 5a27 	vmul.f32	s10, s10, s15
 801287a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801287e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8012882:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801288a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801288e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012892:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012896:	f340 808c 	ble.w	80129b2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801289a:	eba1 060e 	sub.w	r6, r1, lr
 801289e:	fb96 f5f4 	sdiv	r5, r6, r4
 80128a2:	ee07 5a10 	vmov	s14, r5
 80128a6:	2d00      	cmp	r5, #0
 80128a8:	fb04 6615 	mls	r6, r4, r5, r6
 80128ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128b0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80128b4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80128b8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80128bc:	dd12      	ble.n	80128e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80128be:	ee70 6a44 	vsub.f32	s13, s0, s8
 80128c2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80128c6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80128ca:	eef5 6a40 	vcmp.f32	s13, #0.0
 80128ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d2:	bf14      	ite	ne
 80128d4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80128d8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80128dc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80128e0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80128e4:	fb05 f204 	mul.w	r2, r5, r4
 80128e8:	1abf      	subs	r7, r7, r2
 80128ea:	4494      	add	ip, r2
 80128ec:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80128f0:	4411      	add	r1, r2
 80128f2:	eb09 020c 	add.w	r2, r9, ip
 80128f6:	b209      	sxth	r1, r1
 80128f8:	443a      	add	r2, r7
 80128fa:	428a      	cmp	r2, r1
 80128fc:	bfc4      	itt	gt
 80128fe:	eba1 0209 	subgt.w	r2, r1, r9
 8012902:	eba2 070c 	subgt.w	r7, r2, ip
 8012906:	2f00      	cmp	r7, #0
 8012908:	dd50      	ble.n	80129ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801290a:	fb97 f1f4 	sdiv	r1, r7, r4
 801290e:	fb04 7211 	mls	r2, r4, r1, r7
 8012912:	b90a      	cbnz	r2, 8012918 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8012914:	3901      	subs	r1, #1
 8012916:	4622      	mov	r2, r4
 8012918:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801291c:	6840      	ldr	r0, [r0, #4]
 801291e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8012922:	44b6      	add	lr, r6
 8012924:	f8d0 a000 	ldr.w	sl, [r0]
 8012928:	2900      	cmp	r1, #0
 801292a:	bfcc      	ite	gt
 801292c:	46a1      	movgt	r9, r4
 801292e:	4691      	movle	r9, r2
 8012930:	900b      	str	r0, [sp, #44]	; 0x2c
 8012932:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012934:	fb04 e505 	mla	r5, r4, r5, lr
 8012938:	eef0 6a42 	vmov.f32	s13, s4
 801293c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012940:	9008      	str	r0, [sp, #32]
 8012942:	eeb0 7a61 	vmov.f32	s14, s3
 8012946:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012948:	695b      	ldr	r3, [r3, #20]
 801294a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801294e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8012952:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8012956:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012958:	445b      	add	r3, fp
 801295a:	9307      	str	r3, [sp, #28]
 801295c:	ee16 3a90 	vmov	r3, s13
 8012960:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8012964:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012968:	ee21 3a23 	vmul.f32	s6, s2, s7
 801296c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8012970:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012974:	ee17 7a90 	vmov	r7, s15
 8012978:	ee73 7a42 	vsub.f32	s15, s6, s4
 801297c:	fb97 f7f4 	sdiv	r7, r7, r4
 8012980:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012984:	ee17 ca90 	vmov	ip, s15
 8012988:	fb9c fcf4 	sdiv	ip, ip, r4
 801298c:	fb0c 3306 	mla	r3, ip, r6, r3
 8012990:	9302      	str	r3, [sp, #8]
 8012992:	ee17 3a10 	vmov	r3, s14
 8012996:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801299a:	fb07 3706 	mla	r7, r7, r6, r3
 801299e:	eba9 0306 	sub.w	r3, r9, r6
 80129a2:	e9cd 4700 	strd	r4, r7, [sp]
 80129a6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80129aa:	47a0      	blx	r4
 80129ac:	b00d      	add	sp, #52	; 0x34
 80129ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b2:	2500      	movs	r5, #0
 80129b4:	462e      	mov	r6, r5
 80129b6:	e799      	b.n	80128ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080129b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80129b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129bc:	b0db      	sub	sp, #364	; 0x16c
 80129be:	461d      	mov	r5, r3
 80129c0:	4614      	mov	r4, r2
 80129c2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80129c6:	910f      	str	r1, [sp, #60]	; 0x3c
 80129c8:	4629      	mov	r1, r5
 80129ca:	930a      	str	r3, [sp, #40]	; 0x28
 80129cc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80129d0:	9009      	str	r0, [sp, #36]	; 0x24
 80129d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80129d4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80129d8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80129dc:	9310      	str	r3, [sp, #64]	; 0x40
 80129de:	6803      	ldr	r3, [r0, #0]
 80129e0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80129e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80129e6:	47b8      	blx	r7
 80129e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ea:	6058      	str	r0, [r3, #4]
 80129ec:	2800      	cmp	r0, #0
 80129ee:	f000 83a1 	beq.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129f2:	682b      	ldr	r3, [r5, #0]
 80129f4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80129f8:	ed94 7a02 	vldr	s14, [r4, #8]
 80129fc:	9314      	str	r3, [sp, #80]	; 0x50
 80129fe:	686b      	ldr	r3, [r5, #4]
 8012a00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a04:	9315      	str	r3, [sp, #84]	; 0x54
 8012a06:	4bc1      	ldr	r3, [pc, #772]	; (8012d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012a08:	7819      	ldrb	r1, [r3, #0]
 8012a0a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8012a0e:	2900      	cmp	r1, #0
 8012a10:	bf16      	itet	ne
 8012a12:	4619      	movne	r1, r3
 8012a14:	4611      	moveq	r1, r2
 8012a16:	4613      	movne	r3, r2
 8012a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1c:	9116      	str	r1, [sp, #88]	; 0x58
 8012a1e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8012a22:	f240 8387 	bls.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a26:	ed94 7a07 	vldr	s14, [r4, #28]
 8012a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a32:	f240 837f 	bls.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a36:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8012a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a42:	f240 8377 	bls.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a46:	6822      	ldr	r2, [r4, #0]
 8012a48:	4bb1      	ldr	r3, [pc, #708]	; (8012d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	f2c0 8372 	blt.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a50:	49b0      	ldr	r1, [pc, #704]	; (8012d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8012a52:	6963      	ldr	r3, [r4, #20]
 8012a54:	428a      	cmp	r2, r1
 8012a56:	f300 836d 	bgt.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a5a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012a5e:	48ae      	ldr	r0, [pc, #696]	; (8012d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8012a60:	33ff      	adds	r3, #255	; 0xff
 8012a62:	4283      	cmp	r3, r0
 8012a64:	f200 8366 	bhi.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012a6a:	4dac      	ldr	r5, [pc, #688]	; (8012d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8012a6c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012a70:	33ff      	adds	r3, #255	; 0xff
 8012a72:	42ab      	cmp	r3, r5
 8012a74:	f200 835e 	bhi.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a78:	6862      	ldr	r2, [r4, #4]
 8012a7a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8012a7e:	33ff      	adds	r3, #255	; 0xff
 8012a80:	4283      	cmp	r3, r0
 8012a82:	f200 8357 	bhi.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a86:	69a1      	ldr	r1, [r4, #24]
 8012a88:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8012a8c:	33ff      	adds	r3, #255	; 0xff
 8012a8e:	4283      	cmp	r3, r0
 8012a90:	f200 8350 	bhi.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012a96:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8012a9a:	30ff      	adds	r0, #255	; 0xff
 8012a9c:	42a8      	cmp	r0, r5
 8012a9e:	f200 8349 	bhi.w	8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012aa2:	428a      	cmp	r2, r1
 8012aa4:	f280 8110 	bge.w	8012cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	f300 8119 	bgt.w	8012ce0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8012aae:	4299      	cmp	r1, r3
 8012ab0:	f280 811d 	bge.w	8012cee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8012ab4:	2502      	movs	r5, #2
 8012ab6:	2701      	movs	r7, #1
 8012ab8:	46a9      	mov	r9, r5
 8012aba:	46b8      	mov	r8, r7
 8012abc:	f04f 0a00 	mov.w	sl, #0
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	a849      	add	r0, sp, #292	; 0x124
 8012ac4:	f003 fdbe 	bl	8016644 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8012ac8:	4622      	mov	r2, r4
 8012aca:	4653      	mov	r3, sl
 8012acc:	a949      	add	r1, sp, #292	; 0x124
 8012ace:	f8cd 9000 	str.w	r9, [sp]
 8012ad2:	a819      	add	r0, sp, #100	; 0x64
 8012ad4:	f003 fee6 	bl	80168a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012ad8:	4622      	mov	r2, r4
 8012ada:	4653      	mov	r3, sl
 8012adc:	a949      	add	r1, sp, #292	; 0x124
 8012ade:	f8cd 8000 	str.w	r8, [sp]
 8012ae2:	a829      	add	r0, sp, #164	; 0xa4
 8012ae4:	f003 fede 	bl	80168a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012ae8:	4643      	mov	r3, r8
 8012aea:	4622      	mov	r2, r4
 8012aec:	a949      	add	r1, sp, #292	; 0x124
 8012aee:	f8cd 9000 	str.w	r9, [sp]
 8012af2:	a839      	add	r0, sp, #228	; 0xe4
 8012af4:	f003 fed6 	bl	80168a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012af8:	42af      	cmp	r7, r5
 8012afa:	af12      	add	r7, sp, #72	; 0x48
 8012afc:	bfb7      	itett	lt
 8012afe:	2300      	movlt	r3, #0
 8012b00:	2301      	movge	r3, #1
 8012b02:	ad29      	addlt	r5, sp, #164	; 0xa4
 8012b04:	ac19      	addlt	r4, sp, #100	; 0x64
 8012b06:	bfb1      	iteee	lt
 8012b08:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012b0a:	ad19      	addge	r5, sp, #100	; 0x64
 8012b0c:	930e      	strge	r3, [sp, #56]	; 0x38
 8012b0e:	ac29      	addge	r4, sp, #164	; 0xa4
 8012b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b16:	e887 0003 	stmia.w	r7, {r0, r1}
 8012b1a:	b928      	cbnz	r0, 8012b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8012b1c:	4b80      	ldr	r3, [pc, #512]	; (8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8012b1e:	6818      	ldr	r0, [r3, #0]
 8012b20:	6803      	ldr	r3, [r0, #0]
 8012b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b24:	4798      	blx	r3
 8012b26:	6038      	str	r0, [r7, #0]
 8012b28:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012b2a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012b2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012b32:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8012b34:	930c      	str	r3, [sp, #48]	; 0x30
 8012b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b38:	6963      	ldr	r3, [r4, #20]
 8012b3a:	440b      	add	r3, r1
 8012b3c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012b40:	4408      	add	r0, r1
 8012b42:	b200      	sxth	r0, r0
 8012b44:	4283      	cmp	r3, r0
 8012b46:	900d      	str	r0, [sp, #52]	; 0x34
 8012b48:	f280 80dd 	bge.w	8012d06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012b4c:	428b      	cmp	r3, r1
 8012b4e:	da08      	bge.n	8012b62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	dd06      	ble.n	8012b62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012b54:	1acb      	subs	r3, r1, r3
 8012b56:	429a      	cmp	r2, r3
 8012b58:	f2c0 80e4 	blt.w	8012d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f300 80e2 	bgt.w	8012d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8012b62:	6967      	ldr	r7, [r4, #20]
 8012b64:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b6a:	443b      	add	r3, r7
 8012b6c:	461f      	mov	r7, r3
 8012b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b70:	1bdf      	subs	r7, r3, r7
 8012b72:	4297      	cmp	r7, r2
 8012b74:	bfa8      	it	ge
 8012b76:	4617      	movge	r7, r2
 8012b78:	2f00      	cmp	r7, #0
 8012b7a:	f340 8166 	ble.w	8012e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8012b7e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012b80:	6829      	ldr	r1, [r5, #0]
 8012b82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b86:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012b8a:	4411      	add	r1, r2
 8012b8c:	6820      	ldr	r0, [r4, #0]
 8012b8e:	4299      	cmp	r1, r3
 8012b90:	dd1a      	ble.n	8012bc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012b92:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012b96:	4402      	add	r2, r0
 8012b98:	440b      	add	r3, r1
 8012b9a:	b21b      	sxth	r3, r3
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	dc13      	bgt.n	8012bc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012ba0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ba2:	a912      	add	r1, sp, #72	; 0x48
 8012ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	9206      	str	r2, [sp, #24]
 8012bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012bae:	9500      	str	r5, [sp, #0]
 8012bb0:	9205      	str	r2, [sp, #20]
 8012bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bb4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012bb8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012bba:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012bbe:	aa49      	add	r2, sp, #292	; 0x124
 8012bc0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8012bc4:	4623      	mov	r3, r4
 8012bc6:	47c8      	blx	r9
 8012bc8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012bcc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012bd0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bd8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012bdc:	68a1      	ldr	r1, [r4, #8]
 8012bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012be2:	ed94 6a08 	vldr	s12, [r4, #32]
 8012be6:	edd4 6a07 	vldr	s13, [r4, #28]
 8012bea:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012bee:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012bf2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012bf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012bfa:	edc4 6a07 	vstr	s13, [r4, #28]
 8012bfe:	441a      	add	r2, r3
 8012c00:	6963      	ldr	r3, [r4, #20]
 8012c02:	3301      	adds	r3, #1
 8012c04:	6022      	str	r2, [r4, #0]
 8012c06:	6163      	str	r3, [r4, #20]
 8012c08:	69a3      	ldr	r3, [r4, #24]
 8012c0a:	3b01      	subs	r3, #1
 8012c0c:	61a3      	str	r3, [r4, #24]
 8012c0e:	6923      	ldr	r3, [r4, #16]
 8012c10:	440b      	add	r3, r1
 8012c12:	68e1      	ldr	r1, [r4, #12]
 8012c14:	428b      	cmp	r3, r1
 8012c16:	6123      	str	r3, [r4, #16]
 8012c18:	db15      	blt.n	8012c46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8012c1a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012c1e:	3201      	adds	r2, #1
 8012c20:	1a5b      	subs	r3, r3, r1
 8012c22:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012c26:	6022      	str	r2, [r4, #0]
 8012c28:	6123      	str	r3, [r4, #16]
 8012c2a:	edc4 6a07 	vstr	s13, [r4, #28]
 8012c2e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012c32:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012c36:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012c3a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c42:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012c46:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012c4a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012c4e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c56:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012c5a:	68a9      	ldr	r1, [r5, #8]
 8012c5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c60:	ed95 6a08 	vldr	s12, [r5, #32]
 8012c64:	edd5 6a07 	vldr	s13, [r5, #28]
 8012c68:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012c6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012c70:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012c74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c78:	edc5 6a07 	vstr	s13, [r5, #28]
 8012c7c:	441a      	add	r2, r3
 8012c7e:	696b      	ldr	r3, [r5, #20]
 8012c80:	3301      	adds	r3, #1
 8012c82:	602a      	str	r2, [r5, #0]
 8012c84:	616b      	str	r3, [r5, #20]
 8012c86:	69ab      	ldr	r3, [r5, #24]
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	61ab      	str	r3, [r5, #24]
 8012c8c:	692b      	ldr	r3, [r5, #16]
 8012c8e:	440b      	add	r3, r1
 8012c90:	68e9      	ldr	r1, [r5, #12]
 8012c92:	428b      	cmp	r3, r1
 8012c94:	612b      	str	r3, [r5, #16]
 8012c96:	db15      	blt.n	8012cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8012c98:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012c9c:	3201      	adds	r2, #1
 8012c9e:	1a5b      	subs	r3, r3, r1
 8012ca0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012ca4:	602a      	str	r2, [r5, #0]
 8012ca6:	612b      	str	r3, [r5, #16]
 8012ca8:	edc5 6a07 	vstr	s13, [r5, #28]
 8012cac:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012cb0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012cb4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012cb8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cc0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012cc4:	3f01      	subs	r7, #1
 8012cc6:	e757      	b.n	8012b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8012cc8:	4299      	cmp	r1, r3
 8012cca:	dc13      	bgt.n	8012cf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	da14      	bge.n	8012cfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8012cd0:	2502      	movs	r5, #2
 8012cd2:	2703      	movs	r7, #3
 8012cd4:	f04f 0800 	mov.w	r8, #0
 8012cd8:	46a9      	mov	r9, r5
 8012cda:	f04f 0a01 	mov.w	sl, #1
 8012cde:	e6ef      	b.n	8012ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012ce0:	2501      	movs	r5, #1
 8012ce2:	2700      	movs	r7, #0
 8012ce4:	46a9      	mov	r9, r5
 8012ce6:	46b8      	mov	r8, r7
 8012ce8:	f04f 0a02 	mov.w	sl, #2
 8012cec:	e6e8      	b.n	8012ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012cee:	2501      	movs	r5, #1
 8012cf0:	2702      	movs	r7, #2
 8012cf2:	e6e1      	b.n	8012ab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8012cf4:	2500      	movs	r5, #0
 8012cf6:	2701      	movs	r7, #1
 8012cf8:	e7f4      	b.n	8012ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8012cfa:	2702      	movs	r7, #2
 8012cfc:	2503      	movs	r5, #3
 8012cfe:	f04f 0900 	mov.w	r9, #0
 8012d02:	46b8      	mov	r8, r7
 8012d04:	e7e9      	b.n	8012cda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8012d06:	4613      	mov	r3, r2
 8012d08:	e728      	b.n	8012b5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8012d0a:	bf00      	nop
 8012d0c:	20027e90 	.word	0x20027e90
 8012d10:	fffd8f01 	.word	0xfffd8f01
 8012d14:	00027100 	.word	0x00027100
 8012d18:	0004e1ff 	.word	0x0004e1ff
 8012d1c:	0004e1fe 	.word	0x0004e1fe
 8012d20:	20027e98 	.word	0x20027e98
 8012d24:	4613      	mov	r3, r2
 8012d26:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012d28:	469e      	mov	lr, r3
 8012d2a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8012d2c:	469c      	mov	ip, r3
 8012d2e:	9111      	str	r1, [sp, #68]	; 0x44
 8012d30:	f04f 0900 	mov.w	r9, #0
 8012d34:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8012d38:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8012d3c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8012d40:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8012d44:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8012d48:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012d4c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8012d50:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8012d54:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8012d58:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8012d5c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8012d60:	f1bc 0f00 	cmp.w	ip, #0
 8012d64:	d147      	bne.n	8012df6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012d66:	eb03 0c07 	add.w	ip, r3, r7
 8012d6a:	1ad7      	subs	r7, r2, r3
 8012d6c:	f1b9 0f00 	cmp.w	r9, #0
 8012d70:	d009      	beq.n	8012d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012d72:	9029      	str	r0, [sp, #164]	; 0xa4
 8012d74:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8012d78:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8012d7c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8012d80:	912d      	str	r1, [sp, #180]	; 0xb4
 8012d82:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8012d86:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012d88:	f04f 0800 	mov.w	r8, #0
 8012d8c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012d90:	9111      	str	r1, [sp, #68]	; 0x44
 8012d92:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012d96:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8012d9a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012d9e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8012da2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012da6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8012daa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8012dae:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8012db2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8012db6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8012dba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8012dbe:	f1be 0f00 	cmp.w	lr, #0
 8012dc2:	d031      	beq.n	8012e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012dc4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012dc6:	4450      	add	r0, sl
 8012dc8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012dcc:	4431      	add	r1, r6
 8012dce:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012dd2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012dd6:	4549      	cmp	r1, r9
 8012dd8:	db08      	blt.n	8012dec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8012dda:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012dde:	3001      	adds	r0, #1
 8012de0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012de4:	eba1 0109 	sub.w	r1, r1, r9
 8012de8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012dec:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012df0:	f04f 0801 	mov.w	r8, #1
 8012df4:	e7e3      	b.n	8012dbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8012df6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012df8:	4450      	add	r0, sl
 8012dfa:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012dfe:	4431      	add	r1, r6
 8012e00:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012e04:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012e08:	4541      	cmp	r1, r8
 8012e0a:	db08      	blt.n	8012e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8012e0c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012e10:	3001      	adds	r0, #1
 8012e12:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012e16:	eba1 0108 	sub.w	r1, r1, r8
 8012e1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012e1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012e22:	f04f 0901 	mov.w	r9, #1
 8012e26:	e79b      	b.n	8012d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012e28:	449c      	add	ip, r3
 8012e2a:	1aff      	subs	r7, r7, r3
 8012e2c:	f1b8 0f00 	cmp.w	r8, #0
 8012e30:	d009      	beq.n	8012e46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8012e32:	9019      	str	r0, [sp, #100]	; 0x64
 8012e34:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012e38:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012e3c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012e40:	911d      	str	r1, [sp, #116]	; 0x74
 8012e42:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012e46:	1ad2      	subs	r2, r2, r3
 8012e48:	e68b      	b.n	8012b62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e4c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f000 80d1 	beq.w	8012ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012e54:	ad19      	add	r5, sp, #100	; 0x64
 8012e56:	ac39      	add	r4, sp, #228	; 0xe4
 8012e58:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012e5a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012e5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e62:	930c      	str	r3, [sp, #48]	; 0x30
 8012e64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012e66:	6963      	ldr	r3, [r4, #20]
 8012e68:	440b      	add	r3, r1
 8012e6a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012e6e:	4408      	add	r0, r1
 8012e70:	b200      	sxth	r0, r0
 8012e72:	4283      	cmp	r3, r0
 8012e74:	900d      	str	r0, [sp, #52]	; 0x34
 8012e76:	f280 80c1 	bge.w	8012ffc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8012e7a:	428b      	cmp	r3, r1
 8012e7c:	da08      	bge.n	8012e90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012e7e:	2a00      	cmp	r2, #0
 8012e80:	dd06      	ble.n	8012e90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012e82:	1acb      	subs	r3, r1, r3
 8012e84:	429a      	cmp	r2, r3
 8012e86:	f2c0 80bb 	blt.w	8013000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	f300 80b9 	bgt.w	8013002 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012e90:	6967      	ldr	r7, [r4, #20]
 8012e92:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e98:	443b      	add	r3, r7
 8012e9a:	461f      	mov	r7, r3
 8012e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e9e:	1bdf      	subs	r7, r3, r7
 8012ea0:	4297      	cmp	r7, r2
 8012ea2:	bfa8      	it	ge
 8012ea4:	4617      	movge	r7, r2
 8012ea6:	2f00      	cmp	r7, #0
 8012ea8:	f340 813c 	ble.w	8013124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8012eac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012eae:	6829      	ldr	r1, [r5, #0]
 8012eb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012eb4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012eb8:	4411      	add	r1, r2
 8012eba:	6820      	ldr	r0, [r4, #0]
 8012ebc:	4299      	cmp	r1, r3
 8012ebe:	dd1a      	ble.n	8012ef6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012ec0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012ec4:	4402      	add	r2, r0
 8012ec6:	440b      	add	r3, r1
 8012ec8:	b21b      	sxth	r3, r3
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	dc13      	bgt.n	8012ef6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012ece:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ed0:	a912      	add	r1, sp, #72	; 0x48
 8012ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	9206      	str	r2, [sp, #24]
 8012eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012edc:	9500      	str	r5, [sp, #0]
 8012ede:	9205      	str	r2, [sp, #20]
 8012ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ee2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012ee6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012ee8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012eec:	aa49      	add	r2, sp, #292	; 0x124
 8012eee:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8012ef2:	4623      	mov	r3, r4
 8012ef4:	47c8      	blx	r9
 8012ef6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012efa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012efe:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012f02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f06:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012f0a:	68a1      	ldr	r1, [r4, #8]
 8012f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f10:	ed94 6a08 	vldr	s12, [r4, #32]
 8012f14:	edd4 6a07 	vldr	s13, [r4, #28]
 8012f18:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012f1c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012f20:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012f24:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012f28:	edc4 6a07 	vstr	s13, [r4, #28]
 8012f2c:	441a      	add	r2, r3
 8012f2e:	6963      	ldr	r3, [r4, #20]
 8012f30:	3301      	adds	r3, #1
 8012f32:	6022      	str	r2, [r4, #0]
 8012f34:	6163      	str	r3, [r4, #20]
 8012f36:	69a3      	ldr	r3, [r4, #24]
 8012f38:	3b01      	subs	r3, #1
 8012f3a:	61a3      	str	r3, [r4, #24]
 8012f3c:	6923      	ldr	r3, [r4, #16]
 8012f3e:	440b      	add	r3, r1
 8012f40:	68e1      	ldr	r1, [r4, #12]
 8012f42:	428b      	cmp	r3, r1
 8012f44:	6123      	str	r3, [r4, #16]
 8012f46:	db15      	blt.n	8012f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012f48:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012f4c:	3201      	adds	r2, #1
 8012f4e:	1a5b      	subs	r3, r3, r1
 8012f50:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012f54:	6022      	str	r2, [r4, #0]
 8012f56:	6123      	str	r3, [r4, #16]
 8012f58:	edc4 6a07 	vstr	s13, [r4, #28]
 8012f5c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012f60:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012f64:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012f68:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f70:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012f74:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012f78:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012f7c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f84:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012f88:	68a9      	ldr	r1, [r5, #8]
 8012f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f8e:	ed95 6a08 	vldr	s12, [r5, #32]
 8012f92:	edd5 6a07 	vldr	s13, [r5, #28]
 8012f96:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012f9a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012f9e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012fa2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012fa6:	edc5 6a07 	vstr	s13, [r5, #28]
 8012faa:	441a      	add	r2, r3
 8012fac:	696b      	ldr	r3, [r5, #20]
 8012fae:	3301      	adds	r3, #1
 8012fb0:	602a      	str	r2, [r5, #0]
 8012fb2:	616b      	str	r3, [r5, #20]
 8012fb4:	69ab      	ldr	r3, [r5, #24]
 8012fb6:	3b01      	subs	r3, #1
 8012fb8:	61ab      	str	r3, [r5, #24]
 8012fba:	692b      	ldr	r3, [r5, #16]
 8012fbc:	440b      	add	r3, r1
 8012fbe:	68e9      	ldr	r1, [r5, #12]
 8012fc0:	428b      	cmp	r3, r1
 8012fc2:	612b      	str	r3, [r5, #16]
 8012fc4:	db15      	blt.n	8012ff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012fc6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012fca:	3201      	adds	r2, #1
 8012fcc:	1a5b      	subs	r3, r3, r1
 8012fce:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012fd2:	602a      	str	r2, [r5, #0]
 8012fd4:	612b      	str	r3, [r5, #16]
 8012fd6:	edc5 6a07 	vstr	s13, [r5, #28]
 8012fda:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012fde:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012fe2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012fe6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fee:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012ff2:	3f01      	subs	r7, #1
 8012ff4:	e757      	b.n	8012ea6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012ff6:	ad39      	add	r5, sp, #228	; 0xe4
 8012ff8:	ac19      	add	r4, sp, #100	; 0x64
 8012ffa:	e72d      	b.n	8012e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012ffc:	4613      	mov	r3, r2
 8012ffe:	e744      	b.n	8012e8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8013000:	4613      	mov	r3, r2
 8013002:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8013004:	469e      	mov	lr, r3
 8013006:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801300a:	461f      	mov	r7, r3
 801300c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8013010:	f04f 0900 	mov.w	r9, #0
 8013014:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8013018:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801301c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8013020:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8013024:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8013028:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801302a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801302e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8013032:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8013036:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801303a:	960e      	str	r6, [sp, #56]	; 0x38
 801303c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8013040:	2f00      	cmp	r7, #0
 8013042:	d146      	bne.n	80130d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8013044:	449c      	add	ip, r3
 8013046:	1ad7      	subs	r7, r2, r3
 8013048:	f1b9 0f00 	cmp.w	r9, #0
 801304c:	d009      	beq.n	8013062 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801304e:	9039      	str	r0, [sp, #228]	; 0xe4
 8013050:	913d      	str	r1, [sp, #244]	; 0xf4
 8013052:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8013056:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801305a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801305e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8013062:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013064:	f04f 0800 	mov.w	r8, #0
 8013068:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801306c:	910e      	str	r1, [sp, #56]	; 0x38
 801306e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8013072:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8013076:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801307a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801307e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8013082:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8013086:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801308a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801308e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8013092:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8013096:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801309a:	f1be 0f00 	cmp.w	lr, #0
 801309e:	d030      	beq.n	8013102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80130a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80130a2:	4450      	add	r0, sl
 80130a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80130a8:	4431      	add	r1, r6
 80130aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80130ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80130b2:	4549      	cmp	r1, r9
 80130b4:	db08      	blt.n	80130c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80130b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80130ba:	3001      	adds	r0, #1
 80130bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80130c0:	eba1 0109 	sub.w	r1, r1, r9
 80130c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80130c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80130cc:	f04f 0801 	mov.w	r8, #1
 80130d0:	e7e3      	b.n	801309a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80130d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80130d4:	4450      	add	r0, sl
 80130d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80130da:	4431      	add	r1, r6
 80130dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80130e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80130e4:	4541      	cmp	r1, r8
 80130e6:	db08      	blt.n	80130fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80130e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80130ec:	3001      	adds	r0, #1
 80130ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80130f2:	eba1 0108 	sub.w	r1, r1, r8
 80130f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80130fa:	3f01      	subs	r7, #1
 80130fc:	f04f 0901 	mov.w	r9, #1
 8013100:	e79e      	b.n	8013040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8013102:	449c      	add	ip, r3
 8013104:	1aff      	subs	r7, r7, r3
 8013106:	f1b8 0f00 	cmp.w	r8, #0
 801310a:	d009      	beq.n	8013120 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801310c:	9019      	str	r0, [sp, #100]	; 0x64
 801310e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8013112:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8013116:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801311a:	911d      	str	r1, [sp, #116]	; 0x74
 801311c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8013120:	1ad2      	subs	r2, r2, r3
 8013122:	e6b5      	b.n	8012e90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	b923      	cbnz	r3, 8013134 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801312a:	4b04      	ldr	r3, [pc, #16]	; (801313c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801312c:	6818      	ldr	r0, [r3, #0]
 801312e:	6803      	ldr	r3, [r0, #0]
 8013130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013132:	4798      	blx	r3
 8013134:	b05b      	add	sp, #364	; 0x16c
 8013136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801313a:	bf00      	nop
 801313c:	20027e98 	.word	0x20027e98

08013140 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8013140:	b570      	push	{r4, r5, r6, lr}
 8013142:	4604      	mov	r4, r0
 8013144:	2500      	movs	r5, #0
 8013146:	9804      	ldr	r0, [sp, #16]
 8013148:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801314c:	8025      	strh	r5, [r4, #0]
 801314e:	6061      	str	r1, [r4, #4]
 8013150:	7223      	strb	r3, [r4, #8]
 8013152:	7266      	strb	r6, [r4, #9]
 8013154:	60e0      	str	r0, [r4, #12]
 8013156:	8222      	strh	r2, [r4, #16]
 8013158:	8265      	strh	r5, [r4, #18]
 801315a:	82a5      	strh	r5, [r4, #20]
 801315c:	82e5      	strh	r5, [r4, #22]
 801315e:	8325      	strh	r5, [r4, #24]
 8013160:	8365      	strh	r5, [r4, #26]
 8013162:	83a5      	strh	r5, [r4, #28]
 8013164:	77a5      	strb	r5, [r4, #30]
 8013166:	b32e      	cbz	r6, 80131b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8013168:	6803      	ldr	r3, [r0, #0]
 801316a:	695b      	ldr	r3, [r3, #20]
 801316c:	4798      	blx	r3
 801316e:	4606      	mov	r6, r0
 8013170:	b300      	cbz	r0, 80131b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8013172:	68e0      	ldr	r0, [r4, #12]
 8013174:	4631      	mov	r1, r6
 8013176:	6803      	ldr	r3, [r0, #0]
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	4798      	blx	r3
 801317c:	4605      	mov	r5, r0
 801317e:	b1c8      	cbz	r0, 80131b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8013180:	7b43      	ldrb	r3, [r0, #13]
 8013182:	7a82      	ldrb	r2, [r0, #10]
 8013184:	005b      	lsls	r3, r3, #1
 8013186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801318a:	4313      	orrs	r3, r2
 801318c:	83a3      	strh	r3, [r4, #28]
 801318e:	7a63      	ldrb	r3, [r4, #9]
 8013190:	2b04      	cmp	r3, #4
 8013192:	d10f      	bne.n	80131b4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8013194:	68e0      	ldr	r0, [r4, #12]
 8013196:	462a      	mov	r2, r5
 8013198:	4631      	mov	r1, r6
 801319a:	6803      	ldr	r3, [r0, #0]
 801319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801319e:	4798      	blx	r3
 80131a0:	7b6b      	ldrb	r3, [r5, #13]
 80131a2:	005b      	lsls	r3, r3, #1
 80131a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80131a8:	7aab      	ldrb	r3, [r5, #10]
 80131aa:	4313      	orrs	r3, r2
 80131ac:	4418      	add	r0, r3
 80131ae:	8ba3      	ldrh	r3, [r4, #28]
 80131b0:	4418      	add	r0, r3
 80131b2:	83a0      	strh	r0, [r4, #28]
 80131b4:	4620      	mov	r0, r4
 80131b6:	bd70      	pop	{r4, r5, r6, pc}

080131b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80131b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131bc:	2400      	movs	r4, #0
 80131be:	b085      	sub	sp, #20
 80131c0:	4681      	mov	r9, r0
 80131c2:	4688      	mov	r8, r1
 80131c4:	4692      	mov	sl, r2
 80131c6:	469b      	mov	fp, r3
 80131c8:	4627      	mov	r7, r4
 80131ca:	4625      	mov	r5, r4
 80131cc:	4626      	mov	r6, r4
 80131ce:	4554      	cmp	r4, sl
 80131d0:	da2a      	bge.n	8013228 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80131d2:	2300      	movs	r3, #0
 80131d4:	9303      	str	r3, [sp, #12]
 80131d6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80131da:	429d      	cmp	r5, r3
 80131dc:	d004      	beq.n	80131e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80131de:	f242 030b 	movw	r3, #8203	; 0x200b
 80131e2:	429d      	cmp	r5, r3
 80131e4:	bf18      	it	ne
 80131e6:	462f      	movne	r7, r5
 80131e8:	ab03      	add	r3, sp, #12
 80131ea:	4642      	mov	r2, r8
 80131ec:	4659      	mov	r1, fp
 80131ee:	4648      	mov	r0, r9
 80131f0:	f003 f83e 	bl	8016270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80131f4:	4605      	mov	r5, r0
 80131f6:	b1b8      	cbz	r0, 8013228 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80131f8:	280a      	cmp	r0, #10
 80131fa:	d015      	beq.n	8013228 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80131fc:	9a03      	ldr	r2, [sp, #12]
 80131fe:	b18a      	cbz	r2, 8013224 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8013200:	7b50      	ldrb	r0, [r2, #13]
 8013202:	4639      	mov	r1, r7
 8013204:	7a93      	ldrb	r3, [r2, #10]
 8013206:	0040      	lsls	r0, r0, #1
 8013208:	8895      	ldrh	r5, [r2, #4]
 801320a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801320e:	4303      	orrs	r3, r0
 8013210:	4640      	mov	r0, r8
 8013212:	9301      	str	r3, [sp, #4]
 8013214:	f8d8 3000 	ldr.w	r3, [r8]
 8013218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801321a:	4798      	blx	r3
 801321c:	9b01      	ldr	r3, [sp, #4]
 801321e:	4418      	add	r0, r3
 8013220:	4406      	add	r6, r0
 8013222:	b2b6      	uxth	r6, r6
 8013224:	3401      	adds	r4, #1
 8013226:	e7d2      	b.n	80131ce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8013228:	4630      	mov	r0, r6
 801322a:	b005      	add	sp, #20
 801322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013230 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8013230:	2a02      	cmp	r2, #2
 8013232:	b530      	push	{r4, r5, lr}
 8013234:	d011      	beq.n	801325a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8013236:	2a03      	cmp	r2, #3
 8013238:	d01c      	beq.n	8013274 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801323a:	2a01      	cmp	r2, #1
 801323c:	d10c      	bne.n	8013258 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801323e:	888b      	ldrh	r3, [r1, #4]
 8013240:	8801      	ldrh	r1, [r0, #0]
 8013242:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013246:	1a5b      	subs	r3, r3, r1
 8013248:	8844      	ldrh	r4, [r0, #2]
 801324a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801324e:	1a9b      	subs	r3, r3, r2
 8013250:	8004      	strh	r4, [r0, #0]
 8013252:	8081      	strh	r1, [r0, #4]
 8013254:	8043      	strh	r3, [r0, #2]
 8013256:	80c2      	strh	r2, [r0, #6]
 8013258:	bd30      	pop	{r4, r5, pc}
 801325a:	88cb      	ldrh	r3, [r1, #6]
 801325c:	8842      	ldrh	r2, [r0, #2]
 801325e:	1a9b      	subs	r3, r3, r2
 8013260:	88c2      	ldrh	r2, [r0, #6]
 8013262:	1a9b      	subs	r3, r3, r2
 8013264:	888a      	ldrh	r2, [r1, #4]
 8013266:	8801      	ldrh	r1, [r0, #0]
 8013268:	8043      	strh	r3, [r0, #2]
 801326a:	1a52      	subs	r2, r2, r1
 801326c:	8881      	ldrh	r1, [r0, #4]
 801326e:	1a52      	subs	r2, r2, r1
 8013270:	8002      	strh	r2, [r0, #0]
 8013272:	e7f1      	b.n	8013258 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8013274:	88cb      	ldrh	r3, [r1, #6]
 8013276:	8841      	ldrh	r1, [r0, #2]
 8013278:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801327c:	1a5b      	subs	r3, r3, r1
 801327e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013282:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8013286:	1a9b      	subs	r3, r3, r2
 8013288:	8045      	strh	r5, [r0, #2]
 801328a:	8082      	strh	r2, [r0, #4]
 801328c:	8003      	strh	r3, [r0, #0]
 801328e:	80c4      	strh	r4, [r0, #6]
 8013290:	e7e2      	b.n	8013258 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08013292 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8013292:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013296:	b09f      	sub	sp, #124	; 0x7c
 8013298:	9116      	str	r1, [sp, #88]	; 0x58
 801329a:	9317      	str	r3, [sp, #92]	; 0x5c
 801329c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801329e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80132a0:	8809      	ldrh	r1, [r1, #0]
 80132a2:	889b      	ldrh	r3, [r3, #4]
 80132a4:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80132a8:	440b      	add	r3, r1
 80132aa:	9212      	str	r2, [sp, #72]	; 0x48
 80132ac:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80132b0:	b21b      	sxth	r3, r3
 80132b2:	9011      	str	r0, [sp, #68]	; 0x44
 80132b4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80132b8:	9310      	str	r3, [sp, #64]	; 0x40
 80132ba:	f8d8 3000 	ldr.w	r3, [r8]
 80132be:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 80132c2:	7a59      	ldrb	r1, [r3, #9]
 80132c4:	7a1b      	ldrb	r3, [r3, #8]
 80132c6:	9114      	str	r1, [sp, #80]	; 0x50
 80132c8:	9315      	str	r3, [sp, #84]	; 0x54
 80132ca:	2a00      	cmp	r2, #0
 80132cc:	d06a      	beq.n	80133a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80132ce:	f898 3010 	ldrb.w	r3, [r8, #16]
 80132d2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80132d4:	2b04      	cmp	r3, #4
 80132d6:	bf14      	ite	ne
 80132d8:	2301      	movne	r3, #1
 80132da:	2302      	moveq	r3, #2
 80132dc:	4413      	add	r3, r2
 80132de:	f04f 0900 	mov.w	r9, #0
 80132e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80132e4:	464c      	mov	r4, r9
 80132e6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80132ea:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80132ee:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80132f2:	4293      	cmp	r3, r2
 80132f4:	f280 808f 	bge.w	8013416 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80132f8:	2300      	movs	r3, #0
 80132fa:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80132fe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8013302:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013306:	429c      	cmp	r4, r3
 8013308:	d006      	beq.n	8013318 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801330a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801330c:	f242 020b 	movw	r2, #8203	; 0x200b
 8013310:	4294      	cmp	r4, r2
 8013312:	bf18      	it	ne
 8013314:	4623      	movne	r3, r4
 8013316:	930d      	str	r3, [sp, #52]	; 0x34
 8013318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801331a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801331c:	f8d8 2000 	ldr.w	r2, [r8]
 8013320:	428b      	cmp	r3, r1
 8013322:	db41      	blt.n	80133a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8013324:	6813      	ldr	r3, [r2, #0]
 8013326:	4610      	mov	r0, r2
 8013328:	695b      	ldr	r3, [r3, #20]
 801332a:	4798      	blx	r3
 801332c:	4604      	mov	r4, r0
 801332e:	f8d8 0000 	ldr.w	r0, [r8]
 8013332:	aa1d      	add	r2, sp, #116	; 0x74
 8013334:	4621      	mov	r1, r4
 8013336:	6803      	ldr	r3, [r0, #0]
 8013338:	689e      	ldr	r6, [r3, #8]
 801333a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801333e:	47b0      	blx	r6
 8013340:	901c      	str	r0, [sp, #112]	; 0x70
 8013342:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013346:	429c      	cmp	r4, r3
 8013348:	f000 80ea 	beq.w	8013520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801334c:	f242 030b 	movw	r3, #8203	; 0x200b
 8013350:	429c      	cmp	r4, r3
 8013352:	f000 80e5 	beq.w	8013520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8013356:	2c00      	cmp	r4, #0
 8013358:	f000 80f7 	beq.w	801354a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801335c:	2c0a      	cmp	r4, #10
 801335e:	d060      	beq.n	8013422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8013360:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013362:	b36a      	cbz	r2, 80133c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8013364:	8894      	ldrh	r4, [r2, #4]
 8013366:	f1bb 0f00 	cmp.w	fp, #0
 801336a:	d03b      	beq.n	80133e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801336c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8013370:	f1bb 0f01 	cmp.w	fp, #1
 8013374:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8013378:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801337c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8013380:	ea49 0903 	orr.w	r9, r9, r3
 8013384:	d134      	bne.n	80133f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8013386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013388:	eba5 0509 	sub.w	r5, r5, r9
 801338c:	2b00      	cmp	r3, #0
 801338e:	d14f      	bne.n	8013430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8013390:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013392:	eb09 0305 	add.w	r3, r9, r5
 8013396:	4413      	add	r3, r2
 8013398:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801339a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801339e:	4293      	cmp	r3, r2
 80133a0:	da51      	bge.n	8013446 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80133a2:	e038      	b.n	8013416 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80133a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80133a6:	e79a      	b.n	80132de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80133a8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80133ac:	4659      	mov	r1, fp
 80133ae:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80133b0:	9301      	str	r3, [sp, #4]
 80133b2:	ab1d      	add	r3, sp, #116	; 0x74
 80133b4:	9300      	str	r3, [sp, #0]
 80133b6:	ab1c      	add	r3, sp, #112	; 0x70
 80133b8:	f002 ffa3 	bl	8016302 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80133bc:	4604      	mov	r4, r0
 80133be:	e7c0      	b.n	8013342 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80133c0:	f8d8 0000 	ldr.w	r0, [r8]
 80133c4:	6803      	ldr	r3, [r0, #0]
 80133c6:	691b      	ldr	r3, [r3, #16]
 80133c8:	4798      	blx	r3
 80133ca:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80133ce:	4298      	cmp	r0, r3
 80133d0:	f000 80a6 	beq.w	8013520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80133d4:	f242 030b 	movw	r3, #8203	; 0x200b
 80133d8:	4298      	cmp	r0, r3
 80133da:	f000 80a1 	beq.w	8013520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80133de:	f1bb 0f00 	cmp.w	fp, #0
 80133e2:	d100      	bne.n	80133e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80133e4:	444d      	add	r5, r9
 80133e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80133e8:	2a00      	cmp	r2, #0
 80133ea:	d1bf      	bne.n	801336c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80133ec:	4691      	mov	r9, r2
 80133ee:	e097      	b.n	8013520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80133f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 80ab 	beq.w	801354e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80133f8:	f1bb 0f00 	cmp.w	fp, #0
 80133fc:	d118      	bne.n	8013430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80133fe:	f8d8 0000 	ldr.w	r0, [r8]
 8013402:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013404:	6803      	ldr	r3, [r0, #0]
 8013406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013408:	4798      	blx	r3
 801340a:	4405      	add	r5, r0
 801340c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801340e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013410:	1aeb      	subs	r3, r5, r3
 8013412:	4293      	cmp	r3, r2
 8013414:	dd17      	ble.n	8013446 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8013416:	2c00      	cmp	r4, #0
 8013418:	f000 8097 	beq.w	801354a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801341c:	2c0a      	cmp	r4, #10
 801341e:	f040 8085 	bne.w	801352c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8013422:	240a      	movs	r4, #10
 8013424:	fab4 f084 	clz	r0, r4
 8013428:	0940      	lsrs	r0, r0, #5
 801342a:	b01f      	add	sp, #124	; 0x7c
 801342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013430:	f8d8 0000 	ldr.w	r0, [r8]
 8013434:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013436:	6803      	ldr	r3, [r0, #0]
 8013438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801343a:	4798      	blx	r3
 801343c:	f1bb 0f01 	cmp.w	fp, #1
 8013440:	eba5 0500 	sub.w	r5, r5, r0
 8013444:	d0a4      	beq.n	8013390 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8013446:	981c      	ldr	r0, [sp, #112]	; 0x70
 8013448:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801344a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801344e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013452:	7b43      	ldrb	r3, [r0, #13]
 8013454:	4429      	add	r1, r5
 8013456:	015b      	lsls	r3, r3, #5
 8013458:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801345c:	7983      	ldrb	r3, [r0, #6]
 801345e:	4313      	orrs	r3, r2
 8013460:	440b      	add	r3, r1
 8013462:	42b3      	cmp	r3, r6
 8013464:	db5c      	blt.n	8013520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8013466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013468:	4299      	cmp	r1, r3
 801346a:	da59      	bge.n	8013520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801346c:	f8d8 0000 	ldr.w	r0, [r8]
 8013470:	42ae      	cmp	r6, r5
 8013472:	6803      	ldr	r3, [r0, #0]
 8013474:	bfcc      	ite	gt
 8013476:	1b76      	subgt	r6, r6, r5
 8013478:	2600      	movle	r6, #0
 801347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347c:	bfc8      	it	gt
 801347e:	b2b6      	uxthgt	r6, r6
 8013480:	4798      	blx	r3
 8013482:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013484:	7b5a      	ldrb	r2, [r3, #13]
 8013486:	00d1      	lsls	r1, r2, #3
 8013488:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801348c:	7a19      	ldrb	r1, [r3, #8]
 801348e:	4339      	orrs	r1, r7
 8013490:	0657      	lsls	r7, r2, #25
 8013492:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8013494:	bf48      	it	mi
 8013496:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801349a:	4407      	add	r7, r0
 801349c:	bf48      	it	mi
 801349e:	b209      	sxthmi	r1, r1
 80134a0:	1a7f      	subs	r7, r7, r1
 80134a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80134a4:	b2bf      	uxth	r7, r7
 80134a6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80134aa:	fa0f fa87 	sxth.w	sl, r7
 80134ae:	4551      	cmp	r1, sl
 80134b0:	dd3a      	ble.n	8013528 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80134b2:	0112      	lsls	r2, r2, #4
 80134b4:	79d8      	ldrb	r0, [r3, #7]
 80134b6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80134ba:	4302      	orrs	r2, r0
 80134bc:	4492      	add	sl, r2
 80134be:	4551      	cmp	r1, sl
 80134c0:	dc2e      	bgt.n	8013520 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80134c2:	1bcf      	subs	r7, r1, r7
 80134c4:	468a      	mov	sl, r1
 80134c6:	b2bf      	uxth	r7, r7
 80134c8:	9319      	str	r3, [sp, #100]	; 0x64
 80134ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80134cc:	f8d8 0000 	ldr.w	r0, [r8]
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	6801      	ldr	r1, [r0, #0]
 80134d4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80134d6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80134d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80134da:	9218      	str	r2, [sp, #96]	; 0x60
 80134dc:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80134de:	4788      	blx	r1
 80134e0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80134e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80134e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80134e8:	f898 100e 	ldrb.w	r1, [r8, #14]
 80134ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80134ee:	910a      	str	r1, [sp, #40]	; 0x28
 80134f0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80134f4:	9109      	str	r1, [sp, #36]	; 0x24
 80134f6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80134fa:	9305      	str	r3, [sp, #20]
 80134fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80134fe:	9206      	str	r2, [sp, #24]
 8013500:	e9cd a601 	strd	sl, r6, [sp, #4]
 8013504:	442e      	add	r6, r5
 8013506:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801350a:	b236      	sxth	r6, r6
 801350c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801350e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8013512:	9600      	str	r6, [sp, #0]
 8013514:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013516:	681a      	ldr	r2, [r3, #0]
 8013518:	9811      	ldr	r0, [sp, #68]	; 0x44
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801351e:	47b0      	blx	r6
 8013520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013522:	3301      	adds	r3, #1
 8013524:	930e      	str	r3, [sp, #56]	; 0x38
 8013526:	e6e2      	b.n	80132ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8013528:	2700      	movs	r7, #0
 801352a:	e7cd      	b.n	80134c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801352c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801352e:	3501      	adds	r5, #1
 8013530:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013532:	429d      	cmp	r5, r3
 8013534:	f6bf af76 	bge.w	8013424 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8013538:	4659      	mov	r1, fp
 801353a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801353c:	f7f2 fd84 	bl	8006048 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013540:	4604      	mov	r4, r0
 8013542:	b110      	cbz	r0, 801354a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8013544:	280a      	cmp	r0, #10
 8013546:	d1f2      	bne.n	801352e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8013548:	e76b      	b.n	8013422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801354a:	2400      	movs	r4, #0
 801354c:	e76a      	b.n	8013424 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801354e:	f1bb 0f00 	cmp.w	fp, #0
 8013552:	f43f af5b 	beq.w	801340c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8013556:	e776      	b.n	8013446 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08013558 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8013558:	b530      	push	{r4, r5, lr}
 801355a:	8a44      	ldrh	r4, [r0, #18]
 801355c:	8ac5      	ldrh	r5, [r0, #22]
 801355e:	82c3      	strh	r3, [r0, #22]
 8013560:	442c      	add	r4, r5
 8013562:	1ae4      	subs	r4, r4, r3
 8013564:	8b03      	ldrh	r3, [r0, #24]
 8013566:	8244      	strh	r4, [r0, #18]
 8013568:	8a84      	ldrh	r4, [r0, #20]
 801356a:	4422      	add	r2, r4
 801356c:	440c      	add	r4, r1
 801356e:	1a59      	subs	r1, r3, r1
 8013570:	8342      	strh	r2, [r0, #26]
 8013572:	8284      	strh	r4, [r0, #20]
 8013574:	8301      	strh	r1, [r0, #24]
 8013576:	bd30      	pop	{r4, r5, pc}

08013578 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8013578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801357c:	7a43      	ldrb	r3, [r0, #9]
 801357e:	b087      	sub	sp, #28
 8013580:	4604      	mov	r4, r0
 8013582:	460f      	mov	r7, r1
 8013584:	1eda      	subs	r2, r3, #3
 8013586:	b2d2      	uxtb	r2, r2
 8013588:	2900      	cmp	r1, #0
 801358a:	d036      	beq.n	80135fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801358c:	2a01      	cmp	r2, #1
 801358e:	d932      	bls.n	80135f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8013590:	1e58      	subs	r0, r3, #1
 8013592:	f1d0 0b00 	rsbs	fp, r0, #0
 8013596:	eb4b 0b00 	adc.w	fp, fp, r0
 801359a:	1e99      	subs	r1, r3, #2
 801359c:	424b      	negs	r3, r1
 801359e:	414b      	adcs	r3, r1
 80135a0:	9303      	str	r3, [sp, #12]
 80135a2:	2300      	movs	r3, #0
 80135a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80135a8:	2500      	movs	r5, #0
 80135aa:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80135ae:	46a9      	mov	r9, r5
 80135b0:	8265      	strh	r5, [r4, #18]
 80135b2:	82a5      	strh	r5, [r4, #20]
 80135b4:	2300      	movs	r3, #0
 80135b6:	9305      	str	r3, [sp, #20]
 80135b8:	8823      	ldrh	r3, [r4, #0]
 80135ba:	2b20      	cmp	r3, #32
 80135bc:	d02b      	beq.n	8013616 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80135be:	eba3 020a 	sub.w	r2, r3, sl
 80135c2:	4256      	negs	r6, r2
 80135c4:	4156      	adcs	r6, r2
 80135c6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d004      	beq.n	80135d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80135ce:	4553      	cmp	r3, sl
 80135d0:	bf16      	itet	ne
 80135d2:	4699      	movne	r9, r3
 80135d4:	2601      	moveq	r6, #1
 80135d6:	2600      	movne	r6, #0
 80135d8:	ab05      	add	r3, sp, #20
 80135da:	68e2      	ldr	r2, [r4, #12]
 80135dc:	7a21      	ldrb	r1, [r4, #8]
 80135de:	6860      	ldr	r0, [r4, #4]
 80135e0:	f002 fe46 	bl	8016270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80135e4:	8020      	strh	r0, [r4, #0]
 80135e6:	b9c8      	cbnz	r0, 801361c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80135e8:	8b22      	ldrh	r2, [r4, #24]
 80135ea:	2300      	movs	r3, #0
 80135ec:	4611      	mov	r1, r2
 80135ee:	4620      	mov	r0, r4
 80135f0:	f7ff ffb2 	bl	8013558 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80135f4:	e066      	b.n	80136c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80135f6:	468b      	mov	fp, r1
 80135f8:	e7cf      	b.n	801359a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80135fa:	3b01      	subs	r3, #1
 80135fc:	2a01      	cmp	r2, #1
 80135fe:	9103      	str	r1, [sp, #12]
 8013600:	468b      	mov	fp, r1
 8013602:	bf8c      	ite	hi
 8013604:	2200      	movhi	r2, #0
 8013606:	2201      	movls	r2, #1
 8013608:	2b01      	cmp	r3, #1
 801360a:	9202      	str	r2, [sp, #8]
 801360c:	bf8c      	ite	hi
 801360e:	2300      	movhi	r3, #0
 8013610:	2301      	movls	r3, #1
 8013612:	9301      	str	r3, [sp, #4]
 8013614:	e7c8      	b.n	80135a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8013616:	4699      	mov	r9, r3
 8013618:	2601      	movs	r6, #1
 801361a:	e7dd      	b.n	80135d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801361c:	8ae3      	ldrh	r3, [r4, #22]
 801361e:	280a      	cmp	r0, #10
 8013620:	f103 0301 	add.w	r3, r3, #1
 8013624:	82e3      	strh	r3, [r4, #22]
 8013626:	d0df      	beq.n	80135e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8013628:	9a05      	ldr	r2, [sp, #20]
 801362a:	bb42      	cbnz	r2, 801367e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801362c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013630:	4298      	cmp	r0, r3
 8013632:	d001      	beq.n	8013638 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8013634:	4550      	cmp	r0, sl
 8013636:	d1bd      	bne.n	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013638:	8823      	ldrh	r3, [r4, #0]
 801363a:	8b21      	ldrh	r1, [r4, #24]
 801363c:	2b20      	cmp	r3, #32
 801363e:	d001      	beq.n	8013644 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8013640:	4553      	cmp	r3, sl
 8013642:	d131      	bne.n	80136a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8013644:	2e00      	cmp	r6, #0
 8013646:	bf0a      	itet	eq
 8013648:	460d      	moveq	r5, r1
 801364a:	4630      	movne	r0, r6
 801364c:	2001      	moveq	r0, #1
 801364e:	440a      	add	r2, r1
 8013650:	8aa3      	ldrh	r3, [r4, #20]
 8013652:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8013656:	b292      	uxth	r2, r2
 8013658:	8322      	strh	r2, [r4, #24]
 801365a:	4413      	add	r3, r2
 801365c:	2f00      	cmp	r7, #0
 801365e:	d03a      	beq.n	80136d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8013660:	f1bb 0f00 	cmp.w	fp, #0
 8013664:	d102      	bne.n	801366c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8013666:	9903      	ldr	r1, [sp, #12]
 8013668:	b301      	cbz	r1, 80136ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801366a:	b1f8      	cbz	r0, 80136ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801366c:	8ba1      	ldrh	r1, [r4, #28]
 801366e:	4419      	add	r1, r3
 8013670:	458c      	cmp	ip, r1
 8013672:	da2a      	bge.n	80136ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8013674:	8a61      	ldrh	r1, [r4, #18]
 8013676:	b341      	cbz	r1, 80136ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8013678:	4563      	cmp	r3, ip
 801367a:	dd9b      	ble.n	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801367c:	e01c      	b.n	80136b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801367e:	8893      	ldrh	r3, [r2, #4]
 8013680:	4649      	mov	r1, r9
 8013682:	8023      	strh	r3, [r4, #0]
 8013684:	f892 800d 	ldrb.w	r8, [r2, #13]
 8013688:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801368c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8013690:	f892 800a 	ldrb.w	r8, [r2, #10]
 8013694:	ea48 0800 	orr.w	r8, r8, r0
 8013698:	68e0      	ldr	r0, [r4, #12]
 801369a:	6803      	ldr	r3, [r0, #0]
 801369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801369e:	4798      	blx	r3
 80136a0:	eb08 0200 	add.w	r2, r8, r0
 80136a4:	b292      	uxth	r2, r2
 80136a6:	e7c7      	b.n	8013638 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80136a8:	2000      	movs	r0, #0
 80136aa:	e7d0      	b.n	801364e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80136ac:	4563      	cmp	r3, ip
 80136ae:	dd81      	ble.n	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80136b0:	8a63      	ldrh	r3, [r4, #18]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	f43f af7e 	beq.w	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80136b8:	2301      	movs	r3, #1
 80136ba:	8ba2      	ldrh	r2, [r4, #28]
 80136bc:	77a3      	strb	r3, [r4, #30]
 80136be:	8b63      	ldrh	r3, [r4, #26]
 80136c0:	4413      	add	r3, r2
 80136c2:	8363      	strh	r3, [r4, #26]
 80136c4:	b007      	add	sp, #28
 80136c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ca:	2300      	movs	r3, #0
 80136cc:	4611      	mov	r1, r2
 80136ce:	4620      	mov	r0, r4
 80136d0:	f7ff ff42 	bl	8013558 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80136d4:	e76e      	b.n	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80136d6:	4563      	cmp	r3, ip
 80136d8:	dd14      	ble.n	8013704 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80136da:	9b02      	ldr	r3, [sp, #8]
 80136dc:	b113      	cbz	r3, 80136e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80136de:	2301      	movs	r3, #1
 80136e0:	460a      	mov	r2, r1
 80136e2:	e783      	b.n	80135ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80136e4:	9b01      	ldr	r3, [sp, #4]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f43f af64 	beq.w	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80136ec:	2800      	cmp	r0, #0
 80136ee:	f47f af61 	bne.w	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80136f2:	b116      	cbz	r6, 80136fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80136f4:	2301      	movs	r3, #1
 80136f6:	462a      	mov	r2, r5
 80136f8:	e779      	b.n	80135ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80136fa:	8a63      	ldrh	r3, [r4, #18]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f43f af59 	beq.w	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013702:	e7df      	b.n	80136c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8013704:	2800      	cmp	r0, #0
 8013706:	f47f af55 	bne.w	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801370a:	2e00      	cmp	r6, #0
 801370c:	f43f af52 	beq.w	80135b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013710:	2301      	movs	r3, #1
 8013712:	462a      	mov	r2, r5
 8013714:	e7db      	b.n	80136ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08013716 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8013716:	b530      	push	{r4, r5, lr}
 8013718:	4605      	mov	r5, r0
 801371a:	b08b      	sub	sp, #44	; 0x2c
 801371c:	b191      	cbz	r1, 8013744 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801371e:	2401      	movs	r4, #1
 8013720:	e9cd 3100 	strd	r3, r1, [sp]
 8013724:	4613      	mov	r3, r2
 8013726:	4601      	mov	r1, r0
 8013728:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801372c:	a802      	add	r0, sp, #8
 801372e:	f7ff fd07 	bl	8013140 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8013732:	2100      	movs	r1, #0
 8013734:	a802      	add	r0, sp, #8
 8013736:	f7ff ff1f 	bl	8013578 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801373a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801373e:	b163      	cbz	r3, 801375a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8013740:	3401      	adds	r4, #1
 8013742:	e7f6      	b.n	8013732 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8013744:	2401      	movs	r4, #1
 8013746:	f002 fe5f 	bl	8016408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801374a:	280a      	cmp	r0, #10
 801374c:	4628      	mov	r0, r5
 801374e:	bf08      	it	eq
 8013750:	3401      	addeq	r4, #1
 8013752:	f002 fe59 	bl	8016408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013756:	2800      	cmp	r0, #0
 8013758:	d1f7      	bne.n	801374a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801375a:	b2a0      	uxth	r0, r4
 801375c:	b00b      	add	sp, #44	; 0x2c
 801375e:	bd30      	pop	{r4, r5, pc}

08013760 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8013760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013764:	b0e5      	sub	sp, #404	; 0x194
 8013766:	4689      	mov	r9, r1
 8013768:	461c      	mov	r4, r3
 801376a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801376e:	900a      	str	r0, [sp, #40]	; 0x28
 8013770:	f1ba 0f00 	cmp.w	sl, #0
 8013774:	f000 80b4 	beq.w	80138e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	2b00      	cmp	r3, #0
 801377c:	f000 80b0 	beq.w	80138e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013780:	7ba3      	ldrb	r3, [r4, #14]
 8013782:	2b00      	cmp	r3, #0
 8013784:	f000 80ac 	beq.w	80138e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013788:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801378c:	6810      	ldr	r0, [r2, #0]
 801378e:	6851      	ldr	r1, [r2, #4]
 8013790:	2500      	movs	r5, #0
 8013792:	4643      	mov	r3, r8
 8013794:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8013798:	950f      	str	r5, [sp, #60]	; 0x3c
 801379a:	af19      	add	r7, sp, #100	; 0x64
 801379c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80137a0:	79a2      	ldrb	r2, [r4, #6]
 80137a2:	c303      	stmia	r3!, {r0, r1}
 80137a4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80137a8:	a90f      	add	r1, sp, #60	; 0x3c
 80137aa:	4640      	mov	r0, r8
 80137ac:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80137b0:	f7ff fd3e 	bl	8013230 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80137b4:	a90f      	add	r1, sp, #60	; 0x3c
 80137b6:	79a2      	ldrb	r2, [r4, #6]
 80137b8:	4608      	mov	r0, r1
 80137ba:	f7ff fd39 	bl	8013230 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80137be:	4638      	mov	r0, r7
 80137c0:	f002 f9f5 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 80137c4:	6820      	ldr	r0, [r4, #0]
 80137c6:	6803      	ldr	r3, [r0, #0]
 80137c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137ca:	4798      	blx	r3
 80137cc:	4606      	mov	r6, r0
 80137ce:	6820      	ldr	r0, [r4, #0]
 80137d0:	6803      	ldr	r3, [r0, #0]
 80137d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137d4:	4798      	blx	r3
 80137d6:	4633      	mov	r3, r6
 80137d8:	9000      	str	r0, [sp, #0]
 80137da:	4651      	mov	r1, sl
 80137dc:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80137de:	4638      	mov	r0, r7
 80137e0:	f002 fa40 	bl	8015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80137e4:	7923      	ldrb	r3, [r4, #4]
 80137e6:	6820      	ldr	r0, [r4, #0]
 80137e8:	9308      	str	r3, [sp, #32]
 80137ea:	6803      	ldr	r3, [r0, #0]
 80137ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137ee:	4798      	blx	r3
 80137f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137f4:	181e      	adds	r6, r3, r0
 80137f6:	42ae      	cmp	r6, r5
 80137f8:	dd06      	ble.n	8013808 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80137fa:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80137fe:	4282      	cmp	r2, r0
 8013800:	bfa4      	itt	ge
 8013802:	189d      	addge	r5, r3, r2
 8013804:	fb95 f5f6 	sdivge	r5, r5, r6
 8013808:	a832      	add	r0, sp, #200	; 0xc8
 801380a:	f002 f9d0 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 801380e:	7c23      	ldrb	r3, [r4, #16]
 8013810:	b17b      	cbz	r3, 8013832 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8013812:	6820      	ldr	r0, [r4, #0]
 8013814:	6803      	ldr	r3, [r0, #0]
 8013816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013818:	4798      	blx	r3
 801381a:	4683      	mov	fp, r0
 801381c:	6820      	ldr	r0, [r4, #0]
 801381e:	6803      	ldr	r3, [r0, #0]
 8013820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013822:	4798      	blx	r3
 8013824:	465b      	mov	r3, fp
 8013826:	9000      	str	r0, [sp, #0]
 8013828:	4651      	mov	r1, sl
 801382a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801382c:	a832      	add	r0, sp, #200	; 0xc8
 801382e:	f002 fa19 	bl	8015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013832:	7be1      	ldrb	r1, [r4, #15]
 8013834:	a811      	add	r0, sp, #68	; 0x44
 8013836:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801383a:	7963      	ldrb	r3, [r4, #5]
 801383c:	1a52      	subs	r2, r2, r1
 801383e:	7c21      	ldrb	r1, [r4, #16]
 8013840:	9101      	str	r1, [sp, #4]
 8013842:	b292      	uxth	r2, r2
 8013844:	6821      	ldr	r1, [r4, #0]
 8013846:	9100      	str	r1, [sp, #0]
 8013848:	a932      	add	r1, sp, #200	; 0xc8
 801384a:	f7ff fc79 	bl	8013140 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801384e:	7c23      	ldrb	r3, [r4, #16]
 8013850:	b9bb      	cbnz	r3, 8013882 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8013852:	fa1f fa86 	uxth.w	sl, r6
 8013856:	2d00      	cmp	r5, #0
 8013858:	dd45      	ble.n	80138e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801385a:	4638      	mov	r0, r7
 801385c:	f002 fdd4 	bl	8016408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013860:	2800      	cmp	r0, #0
 8013862:	d03d      	beq.n	80138e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013864:	280a      	cmp	r0, #10
 8013866:	d1f6      	bne.n	8013856 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8013868:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801386c:	3d01      	subs	r5, #1
 801386e:	4453      	add	r3, sl
 8013870:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8013874:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8013878:	eba3 030a 	sub.w	r3, r3, sl
 801387c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8013880:	e7e9      	b.n	8013856 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8013882:	0073      	lsls	r3, r6, #1
 8013884:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8013888:	fa1f fa86 	uxth.w	sl, r6
 801388c:	9309      	str	r3, [sp, #36]	; 0x24
 801388e:	2d00      	cmp	r5, #0
 8013890:	dd29      	ble.n	80138e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8013892:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013896:	a811      	add	r0, sp, #68	; 0x44
 8013898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801389a:	428b      	cmp	r3, r1
 801389c:	bfd4      	ite	le
 801389e:	2100      	movle	r1, #0
 80138a0:	2101      	movgt	r1, #1
 80138a2:	f7ff fe69 	bl	8013578 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80138a6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80138aa:	3b01      	subs	r3, #1
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	455b      	cmp	r3, fp
 80138b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80138b2:	d005      	beq.n	80138c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 80138b4:	7961      	ldrb	r1, [r4, #5]
 80138b6:	4638      	mov	r0, r7
 80138b8:	f7f2 fbc6 	bl	8006048 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80138bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138be:	e7f4      	b.n	80138aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 80138c0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80138c4:	3d01      	subs	r5, #1
 80138c6:	4453      	add	r3, sl
 80138c8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80138cc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80138d0:	eba3 030a 	sub.w	r3, r3, sl
 80138d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80138d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d1d6      	bne.n	801388e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80138e0:	b065      	add	sp, #404	; 0x194
 80138e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e6:	0075      	lsls	r5, r6, #1
 80138e8:	f04f 0a00 	mov.w	sl, #0
 80138ec:	7c23      	ldrb	r3, [r4, #16]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d066      	beq.n	80139c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80138f2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80138f6:	a811      	add	r0, sp, #68	; 0x44
 80138f8:	428d      	cmp	r5, r1
 80138fa:	bfd4      	ite	le
 80138fc:	2100      	movle	r1, #0
 80138fe:	2101      	movgt	r1, #1
 8013900:	f7ff fe3a 	bl	8013578 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8013904:	9b08      	ldr	r3, [sp, #32]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d055      	beq.n	80139b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801390a:	f894 b010 	ldrb.w	fp, [r4, #16]
 801390e:	2264      	movs	r2, #100	; 0x64
 8013910:	4639      	mov	r1, r7
 8013912:	a84b      	add	r0, sp, #300	; 0x12c
 8013914:	f011 fc8a 	bl	802522c <memcpy>
 8013918:	f1bb 0f00 	cmp.w	fp, #0
 801391c:	d058      	beq.n	80139d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801391e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8013922:	7922      	ldrb	r2, [r4, #4]
 8013924:	2a01      	cmp	r2, #1
 8013926:	d13c      	bne.n	80139a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8013928:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801392c:	1ac0      	subs	r0, r0, r3
 801392e:	2302      	movs	r3, #2
 8013930:	fb90 f0f3 	sdiv	r0, r0, r3
 8013934:	b200      	sxth	r0, r0
 8013936:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801393a:	4418      	add	r0, r3
 801393c:	7c23      	ldrb	r3, [r4, #16]
 801393e:	b200      	sxth	r0, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	d03a      	beq.n	80139ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8013944:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8013948:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801394c:	9000      	str	r0, [sp, #0]
 801394e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8013952:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013954:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8013958:	e9cd a703 	strd	sl, r7, [sp, #12]
 801395c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8013960:	464a      	mov	r2, r9
 8013962:	2100      	movs	r1, #0
 8013964:	f7ff fc95 	bl	8013292 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8013968:	2800      	cmp	r0, #0
 801396a:	d1b9      	bne.n	80138e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801396c:	b2b2      	uxth	r2, r6
 801396e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8013972:	4611      	mov	r1, r2
 8013974:	4413      	add	r3, r2
 8013976:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801397a:	b21b      	sxth	r3, r3
 801397c:	1a52      	subs	r2, r2, r1
 801397e:	7c21      	ldrb	r1, [r4, #16]
 8013980:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8013984:	b212      	sxth	r2, r2
 8013986:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801398a:	b109      	cbz	r1, 8013990 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801398c:	42b2      	cmp	r2, r6
 801398e:	dba7      	blt.n	80138e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013990:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8013994:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8013998:	440a      	add	r2, r1
 801399a:	b212      	sxth	r2, r2
 801399c:	4293      	cmp	r3, r2
 801399e:	dda5      	ble.n	80138ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 80139a0:	e79e      	b.n	80138e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80139a2:	2a02      	cmp	r2, #2
 80139a4:	d105      	bne.n	80139b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80139a6:	7be2      	ldrb	r2, [r4, #15]
 80139a8:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 80139ac:	1a80      	subs	r0, r0, r2
 80139ae:	1ac0      	subs	r0, r0, r3
 80139b0:	e7c0      	b.n	8013934 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 80139b2:	2000      	movs	r0, #0
 80139b4:	e7bf      	b.n	8013936 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80139b6:	7be0      	ldrb	r0, [r4, #15]
 80139b8:	e7bd      	b.n	8013936 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80139ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80139be:	e7c3      	b.n	8013948 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 80139c0:	9b08      	ldr	r3, [sp, #32]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d0f7      	beq.n	80139b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80139c6:	2264      	movs	r2, #100	; 0x64
 80139c8:	4639      	mov	r1, r7
 80139ca:	a84b      	add	r0, sp, #300	; 0x12c
 80139cc:	f011 fc2e 	bl	802522c <memcpy>
 80139d0:	2300      	movs	r3, #0
 80139d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80139d6:	6821      	ldr	r1, [r4, #0]
 80139d8:	a84b      	add	r0, sp, #300	; 0x12c
 80139da:	f7ff fbed 	bl	80131b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80139de:	b203      	sxth	r3, r0
 80139e0:	e79f      	b.n	8013922 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080139e2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80139e2:	2b03      	cmp	r3, #3
 80139e4:	d818      	bhi.n	8013a18 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80139e6:	e8df f003 	tbb	[pc, r3]
 80139ea:	0602      	.short	0x0602
 80139ec:	130d      	.short	0x130d
 80139ee:	f9b0 2000 	ldrsh.w	r2, [r0]
 80139f2:	1850      	adds	r0, r2, r1
 80139f4:	4770      	bx	lr
 80139f6:	8803      	ldrh	r3, [r0, #0]
 80139f8:	8880      	ldrh	r0, [r0, #4]
 80139fa:	4418      	add	r0, r3
 80139fc:	b200      	sxth	r0, r0
 80139fe:	1a80      	subs	r0, r0, r2
 8013a00:	3801      	subs	r0, #1
 8013a02:	4770      	bx	lr
 8013a04:	8803      	ldrh	r3, [r0, #0]
 8013a06:	8880      	ldrh	r0, [r0, #4]
 8013a08:	4418      	add	r0, r3
 8013a0a:	b200      	sxth	r0, r0
 8013a0c:	1a40      	subs	r0, r0, r1
 8013a0e:	e7f7      	b.n	8013a00 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8013a10:	f9b0 0000 	ldrsh.w	r0, [r0]
 8013a14:	4410      	add	r0, r2
 8013a16:	4770      	bx	lr
 8013a18:	2000      	movs	r0, #0
 8013a1a:	4770      	bx	lr

08013a1c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013a1c:	2b03      	cmp	r3, #3
 8013a1e:	d817      	bhi.n	8013a50 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8013a20:	e8df f003 	tbb	[pc, r3]
 8013a24:	10090602 	.word	0x10090602
 8013a28:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013a2c:	1850      	adds	r0, r2, r1
 8013a2e:	4770      	bx	lr
 8013a30:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013a34:	e7fa      	b.n	8013a2c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8013a36:	8843      	ldrh	r3, [r0, #2]
 8013a38:	88c0      	ldrh	r0, [r0, #6]
 8013a3a:	4418      	add	r0, r3
 8013a3c:	b200      	sxth	r0, r0
 8013a3e:	1a80      	subs	r0, r0, r2
 8013a40:	3801      	subs	r0, #1
 8013a42:	4770      	bx	lr
 8013a44:	8843      	ldrh	r3, [r0, #2]
 8013a46:	88c0      	ldrh	r0, [r0, #6]
 8013a48:	4418      	add	r0, r3
 8013a4a:	b200      	sxth	r0, r0
 8013a4c:	1a40      	subs	r0, r0, r1
 8013a4e:	e7f7      	b.n	8013a40 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8013a50:	2000      	movs	r0, #0
 8013a52:	4770      	bx	lr

08013a54 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8013a54:	4b01      	ldr	r3, [pc, #4]	; (8013a5c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8013a56:	2200      	movs	r2, #0
 8013a58:	601a      	str	r2, [r3, #0]
 8013a5a:	4770      	bx	lr
 8013a5c:	20027ea8 	.word	0x20027ea8

08013a60 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8013a60:	4603      	mov	r3, r0
 8013a62:	b1c8      	cbz	r0, 8013a98 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8013a64:	0c02      	lsrs	r2, r0, #16
 8013a66:	0412      	lsls	r2, r2, #16
 8013a68:	b9a2      	cbnz	r2, 8013a94 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8013a6a:	0403      	lsls	r3, r0, #16
 8013a6c:	2010      	movs	r0, #16
 8013a6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013a72:	bf04      	itt	eq
 8013a74:	021b      	lsleq	r3, r3, #8
 8013a76:	3008      	addeq	r0, #8
 8013a78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013a7c:	bf04      	itt	eq
 8013a7e:	011b      	lsleq	r3, r3, #4
 8013a80:	3004      	addeq	r0, #4
 8013a82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013a86:	bf04      	itt	eq
 8013a88:	009b      	lsleq	r3, r3, #2
 8013a8a:	3002      	addeq	r0, #2
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	db04      	blt.n	8013a9a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013a90:	3001      	adds	r0, #1
 8013a92:	4770      	bx	lr
 8013a94:	2000      	movs	r0, #0
 8013a96:	e7ea      	b.n	8013a6e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8013a98:	2020      	movs	r0, #32
 8013a9a:	4770      	bx	lr

08013a9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8013a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa0:	b087      	sub	sp, #28
 8013aa2:	4681      	mov	r9, r0
 8013aa4:	4698      	mov	r8, r3
 8013aa6:	4610      	mov	r0, r2
 8013aa8:	460d      	mov	r5, r1
 8013aaa:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8013aae:	b981      	cbnz	r1, 8013ad2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8013ab0:	b14b      	cbz	r3, 8013ac6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8013ab2:	460b      	mov	r3, r1
 8013ab4:	464a      	mov	r2, r9
 8013ab6:	4641      	mov	r1, r8
 8013ab8:	e9cd 4700 	strd	r4, r7, [sp]
 8013abc:	f7ff ffee 	bl	8013a9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013ac0:	b007      	add	sp, #28
 8013ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8013aca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013ace:	603b      	str	r3, [r7, #0]
 8013ad0:	e7f6      	b.n	8013ac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8013ad2:	fa32 fa01 	lsrs.w	sl, r2, r1
 8013ad6:	d107      	bne.n	8013ae8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8013ad8:	fb09 f602 	mul.w	r6, r9, r2
 8013adc:	fbb6 f0f4 	udiv	r0, r6, r4
 8013ae0:	fb04 6610 	mls	r6, r4, r0, r6
 8013ae4:	603e      	str	r6, [r7, #0]
 8013ae6:	e7eb      	b.n	8013ac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8013ae8:	2601      	movs	r6, #1
 8013aea:	fa09 fb01 	lsl.w	fp, r9, r1
 8013aee:	408e      	lsls	r6, r1
 8013af0:	fbbb f3f4 	udiv	r3, fp, r4
 8013af4:	3e01      	subs	r6, #1
 8013af6:	9302      	str	r3, [sp, #8]
 8013af8:	fb0a f303 	mul.w	r3, sl, r3
 8013afc:	4016      	ands	r6, r2
 8013afe:	9303      	str	r3, [sp, #12]
 8013b00:	4630      	mov	r0, r6
 8013b02:	f7ff ffad 	bl	8013a60 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013b06:	464a      	mov	r2, r9
 8013b08:	460b      	mov	r3, r1
 8013b0a:	4601      	mov	r1, r0
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	e9cd 4700 	strd	r4, r7, [sp]
 8013b12:	f7ff ffc3 	bl	8013a9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013b16:	9b02      	ldr	r3, [sp, #8]
 8013b18:	4606      	mov	r6, r0
 8013b1a:	eb05 0108 	add.w	r1, r5, r8
 8013b1e:	fb04 bb13 	mls	fp, r4, r3, fp
 8013b22:	4658      	mov	r0, fp
 8013b24:	f7ff ff9c 	bl	8013a60 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013b28:	ab05      	add	r3, sp, #20
 8013b2a:	465a      	mov	r2, fp
 8013b2c:	e9cd 4300 	strd	r4, r3, [sp]
 8013b30:	4603      	mov	r3, r0
 8013b32:	4650      	mov	r0, sl
 8013b34:	f7ff ffb2 	bl	8013a9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013b38:	6839      	ldr	r1, [r7, #0]
 8013b3a:	9a05      	ldr	r2, [sp, #20]
 8013b3c:	9b03      	ldr	r3, [sp, #12]
 8013b3e:	4411      	add	r1, r2
 8013b40:	fbb1 f2f4 	udiv	r2, r1, r4
 8013b44:	18d3      	adds	r3, r2, r3
 8013b46:	fb04 1412 	mls	r4, r4, r2, r1
 8013b4a:	441e      	add	r6, r3
 8013b4c:	603c      	str	r4, [r7, #0]
 8013b4e:	4430      	add	r0, r6
 8013b50:	e7b6      	b.n	8013ac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08013b52 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8013b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b56:	b085      	sub	sp, #20
 8013b58:	f1b0 0900 	subs.w	r9, r0, #0
 8013b5c:	461d      	mov	r5, r3
 8013b5e:	4617      	mov	r7, r2
 8013b60:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013b62:	bfbb      	ittet	lt
 8013b64:	f1c9 0900 	rsblt	r9, r9, #0
 8013b68:	f04f 36ff 	movlt.w	r6, #4294967295
 8013b6c:	2601      	movge	r6, #1
 8013b6e:	6823      	ldrlt	r3, [r4, #0]
 8013b70:	bfbc      	itt	lt
 8013b72:	425b      	neglt	r3, r3
 8013b74:	6023      	strlt	r3, [r4, #0]
 8013b76:	2a00      	cmp	r2, #0
 8013b78:	da04      	bge.n	8013b84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8013b7a:	6823      	ldr	r3, [r4, #0]
 8013b7c:	4257      	negs	r7, r2
 8013b7e:	4276      	negs	r6, r6
 8013b80:	425b      	negs	r3, r3
 8013b82:	6023      	str	r3, [r4, #0]
 8013b84:	2d00      	cmp	r5, #0
 8013b86:	4638      	mov	r0, r7
 8013b88:	bfba      	itte	lt
 8013b8a:	426d      	neglt	r5, r5
 8013b8c:	f04f 38ff 	movlt.w	r8, #4294967295
 8013b90:	f04f 0801 	movge.w	r8, #1
 8013b94:	f7ff ff64 	bl	8013a60 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013b98:	ab03      	add	r3, sp, #12
 8013b9a:	463a      	mov	r2, r7
 8013b9c:	e9cd 5300 	strd	r5, r3, [sp]
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	4648      	mov	r0, r9
 8013ba4:	f7ff ff7a 	bl	8013a9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013ba8:	6823      	ldr	r3, [r4, #0]
 8013baa:	9a03      	ldr	r2, [sp, #12]
 8013bac:	4546      	cmp	r6, r8
 8013bae:	441a      	add	r2, r3
 8013bb0:	fb92 f3f5 	sdiv	r3, r2, r5
 8013bb4:	4418      	add	r0, r3
 8013bb6:	fb05 2313 	mls	r3, r5, r3, r2
 8013bba:	bf18      	it	ne
 8013bbc:	4240      	negne	r0, r0
 8013bbe:	1c72      	adds	r2, r6, #1
 8013bc0:	6023      	str	r3, [r4, #0]
 8013bc2:	d105      	bne.n	8013bd0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	f1c3 0200 	rsb	r2, r3, #0
 8013bca:	db0b      	blt.n	8013be4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8013bcc:	6022      	str	r2, [r4, #0]
 8013bce:	e006      	b.n	8013bde <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013bd0:	2e01      	cmp	r6, #1
 8013bd2:	d104      	bne.n	8013bde <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	da02      	bge.n	8013bde <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013bd8:	442b      	add	r3, r5
 8013bda:	3801      	subs	r0, #1
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	b005      	add	sp, #20
 8013be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013be4:	3801      	subs	r0, #1
 8013be6:	1b52      	subs	r2, r2, r5
 8013be8:	e7f0      	b.n	8013bcc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08013bec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8013bec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013bf0:	4c1c      	ldr	r4, [pc, #112]	; (8013c64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	6807      	ldr	r7, [r0, #0]
 8013bf6:	69a3      	ldr	r3, [r4, #24]
 8013bf8:	b92b      	cbnz	r3, 8013c06 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8013bfa:	6840      	ldr	r0, [r0, #4]
 8013bfc:	e9c5 7000 	strd	r7, r0, [r5]
 8013c00:	b004      	add	sp, #16
 8013c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c06:	f04f 0802 	mov.w	r8, #2
 8013c0a:	68a2      	ldr	r2, [r4, #8]
 8013c0c:	ae04      	add	r6, sp, #16
 8013c0e:	6820      	ldr	r0, [r4, #0]
 8013c10:	fb93 f1f8 	sdiv	r1, r3, r8
 8013c14:	440a      	add	r2, r1
 8013c16:	69e1      	ldr	r1, [r4, #28]
 8013c18:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013c1c:	463a      	mov	r2, r7
 8013c1e:	9600      	str	r6, [sp, #0]
 8013c20:	f7ff ff97 	bl	8013b52 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013c24:	69a3      	ldr	r3, [r4, #24]
 8013c26:	4607      	mov	r7, r0
 8013c28:	686a      	ldr	r2, [r5, #4]
 8013c2a:	6a21      	ldr	r1, [r4, #32]
 8013c2c:	9600      	str	r6, [sp, #0]
 8013c2e:	6860      	ldr	r0, [r4, #4]
 8013c30:	f7ff ff8f 	bl	8013b52 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013c34:	69a3      	ldr	r3, [r4, #24]
 8013c36:	6962      	ldr	r2, [r4, #20]
 8013c38:	4407      	add	r7, r0
 8013c3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013c3c:	9600      	str	r6, [sp, #0]
 8013c3e:	68e0      	ldr	r0, [r4, #12]
 8013c40:	fb93 f8f8 	sdiv	r8, r3, r8
 8013c44:	4442      	add	r2, r8
 8013c46:	9203      	str	r2, [sp, #12]
 8013c48:	682a      	ldr	r2, [r5, #0]
 8013c4a:	f7ff ff82 	bl	8013b52 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013c4e:	4680      	mov	r8, r0
 8013c50:	9600      	str	r6, [sp, #0]
 8013c52:	69a3      	ldr	r3, [r4, #24]
 8013c54:	686a      	ldr	r2, [r5, #4]
 8013c56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013c58:	6920      	ldr	r0, [r4, #16]
 8013c5a:	f7ff ff7a 	bl	8013b52 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013c5e:	4440      	add	r0, r8
 8013c60:	e7cc      	b.n	8013bfc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8013c62:	bf00      	nop
 8013c64:	20027eac 	.word	0x20027eac

08013c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8013c68:	4b07      	ldr	r3, [pc, #28]	; (8013c88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8013c6a:	781b      	ldrb	r3, [r3, #0]
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d109      	bne.n	8013c84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8013c70:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013c74:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013c78:	8003      	strh	r3, [r0, #0]
 8013c7a:	4b04      	ldr	r3, [pc, #16]	; (8013c8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8013c7c:	881b      	ldrh	r3, [r3, #0]
 8013c7e:	3b01      	subs	r3, #1
 8013c80:	1a9b      	subs	r3, r3, r2
 8013c82:	800b      	strh	r3, [r1, #0]
 8013c84:	4770      	bx	lr
 8013c86:	bf00      	nop
 8013c88:	20027e90 	.word	0x20027e90
 8013c8c:	20027e8c 	.word	0x20027e8c

08013c90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013c90:	4b07      	ldr	r3, [pc, #28]	; (8013cb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8013c92:	b510      	push	{r4, lr}
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	2b01      	cmp	r3, #1
 8013c98:	d108      	bne.n	8013cac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8013c9a:	4b06      	ldr	r3, [pc, #24]	; (8013cb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8013c9c:	880c      	ldrh	r4, [r1, #0]
 8013c9e:	881b      	ldrh	r3, [r3, #0]
 8013ca0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013ca4:	3b01      	subs	r3, #1
 8013ca6:	1b1b      	subs	r3, r3, r4
 8013ca8:	8003      	strh	r3, [r0, #0]
 8013caa:	800a      	strh	r2, [r1, #0]
 8013cac:	bd10      	pop	{r4, pc}
 8013cae:	bf00      	nop
 8013cb0:	20027e90 	.word	0x20027e90
 8013cb4:	20027e8c 	.word	0x20027e8c

08013cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8013cb8:	4b0a      	ldr	r3, [pc, #40]	; (8013ce4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8013cba:	b510      	push	{r4, lr}
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d10e      	bne.n	8013ce0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8013cc2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013cc6:	8843      	ldrh	r3, [r0, #2]
 8013cc8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013ccc:	18ca      	adds	r2, r1, r3
 8013cce:	4b06      	ldr	r3, [pc, #24]	; (8013ce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8013cd0:	8044      	strh	r4, [r0, #2]
 8013cd2:	881b      	ldrh	r3, [r3, #0]
 8013cd4:	1a9b      	subs	r3, r3, r2
 8013cd6:	8003      	strh	r3, [r0, #0]
 8013cd8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013cdc:	8081      	strh	r1, [r0, #4]
 8013cde:	80c3      	strh	r3, [r0, #6]
 8013ce0:	bd10      	pop	{r4, pc}
 8013ce2:	bf00      	nop
 8013ce4:	20027e90 	.word	0x20027e90
 8013ce8:	20027e8c 	.word	0x20027e8c

08013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8013cec:	4b08      	ldr	r3, [pc, #32]	; (8013d10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d10c      	bne.n	8013d0e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013cf4:	8803      	ldrh	r3, [r0, #0]
 8013cf6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013cfa:	8842      	ldrh	r2, [r0, #2]
 8013cfc:	8002      	strh	r2, [r0, #0]
 8013cfe:	185a      	adds	r2, r3, r1
 8013d00:	4b04      	ldr	r3, [pc, #16]	; (8013d14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013d02:	881b      	ldrh	r3, [r3, #0]
 8013d04:	1a9b      	subs	r3, r3, r2
 8013d06:	8043      	strh	r3, [r0, #2]
 8013d08:	88c3      	ldrh	r3, [r0, #6]
 8013d0a:	80c1      	strh	r1, [r0, #6]
 8013d0c:	8083      	strh	r3, [r0, #4]
 8013d0e:	4770      	bx	lr
 8013d10:	20027e90 	.word	0x20027e90
 8013d14:	20027e8c 	.word	0x20027e8c

08013d18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013d18:	4b07      	ldr	r3, [pc, #28]	; (8013d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8013d1a:	b510      	push	{r4, lr}
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	2b01      	cmp	r3, #1
 8013d20:	d108      	bne.n	8013d34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8013d22:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013d26:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013d2a:	8003      	strh	r3, [r0, #0]
 8013d2c:	8893      	ldrh	r3, [r2, #4]
 8013d2e:	3b01      	subs	r3, #1
 8013d30:	1b1b      	subs	r3, r3, r4
 8013d32:	800b      	strh	r3, [r1, #0]
 8013d34:	bd10      	pop	{r4, pc}
 8013d36:	bf00      	nop
 8013d38:	20027e90 	.word	0x20027e90

08013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8013d3c:	4b0b      	ldr	r3, [pc, #44]	; (8013d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d111      	bne.n	8013d68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8013d44:	680b      	ldr	r3, [r1, #0]
 8013d46:	ed90 7a00 	vldr	s14, [r0]
 8013d4a:	6003      	str	r3, [r0, #0]
 8013d4c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8013d50:	eddf 6a07 	vldr	s13, [pc, #28]	; 8013d70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8013d54:	ee07 3a90 	vmov	s15, r3
 8013d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d64:	edc1 7a00 	vstr	s15, [r1]
 8013d68:	4770      	bx	lr
 8013d6a:	bf00      	nop
 8013d6c:	20027e90 	.word	0x20027e90
 8013d70:	38d1b717 	.word	0x38d1b717

08013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013d74:	4b0a      	ldr	r3, [pc, #40]	; (8013da0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8013d76:	460a      	mov	r2, r1
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	d10d      	bne.n	8013d9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013d80:	8881      	ldrh	r1, [r0, #4]
 8013d82:	8803      	ldrh	r3, [r0, #0]
 8013d84:	440b      	add	r3, r1
 8013d86:	4601      	mov	r1, r0
 8013d88:	3b01      	subs	r3, #1
 8013d8a:	f821 3b02 	strh.w	r3, [r1], #2
 8013d8e:	f7ff ffc3 	bl	8013d18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013d92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013d96:	88c2      	ldrh	r2, [r0, #6]
 8013d98:	80c3      	strh	r3, [r0, #6]
 8013d9a:	8082      	strh	r2, [r0, #4]
 8013d9c:	bd10      	pop	{r4, pc}
 8013d9e:	bf00      	nop
 8013da0:	20027e90 	.word	0x20027e90

08013da4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8013da4:	b570      	push	{r4, r5, r6, lr}
 8013da6:	2300      	movs	r3, #0
 8013da8:	4c0a      	ldr	r4, [pc, #40]	; (8013dd4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8013daa:	4605      	mov	r5, r0
 8013dac:	460e      	mov	r6, r1
 8013dae:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8013db2:	6820      	ldr	r0, [r4, #0]
 8013db4:	b110      	cbz	r0, 8013dbc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8013db6:	6803      	ldr	r3, [r0, #0]
 8013db8:	695b      	ldr	r3, [r3, #20]
 8013dba:	4798      	blx	r3
 8013dbc:	6026      	str	r6, [r4, #0]
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	6833      	ldr	r3, [r6, #0]
 8013dc2:	68db      	ldr	r3, [r3, #12]
 8013dc4:	4798      	blx	r3
 8013dc6:	682b      	ldr	r3, [r5, #0]
 8013dc8:	4628      	mov	r0, r5
 8013dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dd0:	4718      	bx	r3
 8013dd2:	bf00      	nop
 8013dd4:	20027edc 	.word	0x20027edc

08013dd8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8013dd8:	4b06      	ldr	r3, [pc, #24]	; (8013df4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8013dda:	2100      	movs	r1, #0
 8013ddc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013de0:	4b05      	ldr	r3, [pc, #20]	; (8013df8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8013de2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8013de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013dea:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8013dee:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8013df2:	4770      	bx	lr
 8013df4:	20027e8c 	.word	0x20027e8c
 8013df8:	20027e8e 	.word	0x20027e8e

08013dfc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8013dfc:	4b03      	ldr	r3, [pc, #12]	; (8013e0c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8013dfe:	6818      	ldr	r0, [r3, #0]
 8013e00:	b110      	cbz	r0, 8013e08 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8013e02:	6803      	ldr	r3, [r0, #0]
 8013e04:	699b      	ldr	r3, [r3, #24]
 8013e06:	4718      	bx	r3
 8013e08:	4770      	bx	lr
 8013e0a:	bf00      	nop
 8013e0c:	20027edc 	.word	0x20027edc

08013e10 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8013e10:	4770      	bx	lr
	...

08013e14 <_ZN8touchgfx11Application4drawEv>:
 8013e14:	4b09      	ldr	r3, [pc, #36]	; (8013e3c <_ZN8touchgfx11Application4drawEv+0x28>)
 8013e16:	b507      	push	{r0, r1, r2, lr}
 8013e18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	4b08      	ldr	r3, [pc, #32]	; (8013e40 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8013e20:	9100      	str	r1, [sp, #0]
 8013e22:	4669      	mov	r1, sp
 8013e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e28:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013e2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e30:	6803      	ldr	r3, [r0, #0]
 8013e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e34:	4798      	blx	r3
 8013e36:	b003      	add	sp, #12
 8013e38:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e3c:	20027e8c 	.word	0x20027e8c
 8013e40:	20027e8e 	.word	0x20027e8e

08013e44 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8013e44:	4b03      	ldr	r3, [pc, #12]	; (8013e54 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8013e46:	6818      	ldr	r0, [r3, #0]
 8013e48:	b110      	cbz	r0, 8013e50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8013e4a:	6803      	ldr	r3, [r0, #0]
 8013e4c:	69db      	ldr	r3, [r3, #28]
 8013e4e:	4718      	bx	r3
 8013e50:	4770      	bx	lr
 8013e52:	bf00      	nop
 8013e54:	20027edc 	.word	0x20027edc

08013e58 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013e58:	4b03      	ldr	r3, [pc, #12]	; (8013e68 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8013e5a:	6818      	ldr	r0, [r3, #0]
 8013e5c:	b110      	cbz	r0, 8013e64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8013e5e:	6803      	ldr	r3, [r0, #0]
 8013e60:	6a1b      	ldr	r3, [r3, #32]
 8013e62:	4718      	bx	r3
 8013e64:	4770      	bx	lr
 8013e66:	bf00      	nop
 8013e68:	20027edc 	.word	0x20027edc

08013e6c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8013e72:	4770      	bx	lr

08013e74 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013e74:	4b03      	ldr	r3, [pc, #12]	; (8013e84 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013e76:	6818      	ldr	r0, [r3, #0]
 8013e78:	b110      	cbz	r0, 8013e80 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8013e7a:	6803      	ldr	r3, [r0, #0]
 8013e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e7e:	4718      	bx	r3
 8013e80:	4770      	bx	lr
 8013e82:	bf00      	nop
 8013e84:	20027edc 	.word	0x20027edc

08013e88 <_ZN8touchgfx11Application15handleTickEventEv>:
 8013e88:	b570      	push	{r4, r5, r6, lr}
 8013e8a:	4d32      	ldr	r5, [pc, #200]	; (8013f54 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	6828      	ldr	r0, [r5, #0]
 8013e90:	b140      	cbz	r0, 8013ea4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013e92:	7a03      	ldrb	r3, [r0, #8]
 8013e94:	b933      	cbnz	r3, 8013ea4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013e96:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8013e9a:	6803      	ldr	r3, [r0, #0]
 8013e9c:	689b      	ldr	r3, [r3, #8]
 8013e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ea2:	4718      	bx	r3
 8013ea4:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8013ea8:	b97b      	cbnz	r3, 8013eca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013eaa:	b170      	cbz	r0, 8013eca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013eac:	7a03      	ldrb	r3, [r0, #8]
 8013eae:	b163      	cbz	r3, 8013eca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013eb0:	4b29      	ldr	r3, [pc, #164]	; (8013f58 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8013eb2:	6818      	ldr	r0, [r3, #0]
 8013eb4:	b110      	cbz	r0, 8013ebc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8013eb6:	6803      	ldr	r3, [r0, #0]
 8013eb8:	691b      	ldr	r3, [r3, #16]
 8013eba:	4798      	blx	r3
 8013ebc:	6828      	ldr	r0, [r5, #0]
 8013ebe:	6803      	ldr	r3, [r0, #0]
 8013ec0:	68db      	ldr	r3, [r3, #12]
 8013ec2:	4798      	blx	r3
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8013eca:	2500      	movs	r5, #0
 8013ecc:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8013ed0:	42a8      	cmp	r0, r5
 8013ed2:	dd0c      	ble.n	8013eee <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8013ed4:	1963      	adds	r3, r4, r5
 8013ed6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8013eda:	b132      	cbz	r2, 8013eea <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8013edc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8013ee0:	4413      	add	r3, r2
 8013ee2:	6858      	ldr	r0, [r3, #4]
 8013ee4:	6803      	ldr	r3, [r0, #0]
 8013ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ee8:	4798      	blx	r3
 8013eea:	3501      	adds	r5, #1
 8013eec:	e7ee      	b.n	8013ecc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8013eee:	2300      	movs	r3, #0
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	4298      	cmp	r0, r3
 8013ef4:	d015      	beq.n	8013f22 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8013ef6:	18e1      	adds	r1, r4, r3
 8013ef8:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8013efc:	b16d      	cbz	r5, 8013f1a <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d00a      	beq.n	8013f18 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8013f02:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8013f06:	4431      	add	r1, r6
 8013f08:	684e      	ldr	r6, [r1, #4]
 8013f0a:	b291      	uxth	r1, r2
 8013f0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8013f10:	604e      	str	r6, [r1, #4]
 8013f12:	18a1      	adds	r1, r4, r2
 8013f14:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8013f18:	3201      	adds	r2, #1
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	e7e9      	b.n	8013ef2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8013f1e:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8013f22:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8013f26:	4295      	cmp	r5, r2
 8013f28:	dd0d      	ble.n	8013f46 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8013f2a:	1e6b      	subs	r3, r5, #1
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8013f32:	4618      	mov	r0, r3
 8013f34:	3104      	adds	r1, #4
 8013f36:	4285      	cmp	r5, r0
 8013f38:	ddf1      	ble.n	8013f1e <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8013f3a:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8013f3e:	3001      	adds	r0, #1
 8013f40:	f841 6c04 	str.w	r6, [r1, #-4]
 8013f44:	e7f7      	b.n	8013f36 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8013f46:	4b04      	ldr	r3, [pc, #16]	; (8013f58 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8013f48:	6818      	ldr	r0, [r3, #0]
 8013f4a:	b110      	cbz	r0, 8013f52 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8013f4c:	6803      	ldr	r3, [r0, #0]
 8013f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f50:	e7a5      	b.n	8013e9e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8013f52:	bd70      	pop	{r4, r5, r6, pc}
 8013f54:	20027ee0 	.word	0x20027ee0
 8013f58:	20027edc 	.word	0x20027edc

08013f5c <_ZN8touchgfx11ApplicationD1Ev>:
 8013f5c:	4770      	bx	lr

08013f5e <_ZN8touchgfx11ApplicationD0Ev>:
 8013f5e:	b510      	push	{r4, lr}
 8013f60:	4604      	mov	r4, r0
 8013f62:	f44f 719c 	mov.w	r1, #312	; 0x138
 8013f66:	f010 ff02 	bl	8024d6e <_ZdlPvj>
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	bd10      	pop	{r4, pc}

08013f6e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013f6e:	b510      	push	{r4, lr}
 8013f70:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013f74:	888a      	ldrh	r2, [r1, #4]
 8013f76:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013f7a:	4422      	add	r2, r4
 8013f7c:	b212      	sxth	r2, r2
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	da15      	bge.n	8013fae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013f82:	8882      	ldrh	r2, [r0, #4]
 8013f84:	4413      	add	r3, r2
 8013f86:	b21b      	sxth	r3, r3
 8013f88:	429c      	cmp	r4, r3
 8013f8a:	da10      	bge.n	8013fae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013f8c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013f90:	88c9      	ldrh	r1, [r1, #6]
 8013f92:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013f96:	4419      	add	r1, r3
 8013f98:	b209      	sxth	r1, r1
 8013f9a:	428a      	cmp	r2, r1
 8013f9c:	da07      	bge.n	8013fae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013f9e:	88c0      	ldrh	r0, [r0, #6]
 8013fa0:	4410      	add	r0, r2
 8013fa2:	b200      	sxth	r0, r0
 8013fa4:	4283      	cmp	r3, r0
 8013fa6:	bfac      	ite	ge
 8013fa8:	2000      	movge	r0, #0
 8013faa:	2001      	movlt	r0, #1
 8013fac:	bd10      	pop	{r4, pc}
 8013fae:	2000      	movs	r0, #0
 8013fb0:	e7fc      	b.n	8013fac <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08013fb2 <_ZN8touchgfx4Rect10restrictToEss>:
 8013fb2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	b510      	push	{r4, lr}
 8013fba:	da04      	bge.n	8013fc6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8013fbc:	8884      	ldrh	r4, [r0, #4]
 8013fbe:	4423      	add	r3, r4
 8013fc0:	8083      	strh	r3, [r0, #4]
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	8003      	strh	r3, [r0, #0]
 8013fc6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013fca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013fce:	1b09      	subs	r1, r1, r4
 8013fd0:	428b      	cmp	r3, r1
 8013fd2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013fd6:	bfc8      	it	gt
 8013fd8:	8081      	strhgt	r1, [r0, #4]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	da04      	bge.n	8013fe8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8013fde:	88c1      	ldrh	r1, [r0, #6]
 8013fe0:	440b      	add	r3, r1
 8013fe2:	80c3      	strh	r3, [r0, #6]
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	8043      	strh	r3, [r0, #2]
 8013fe8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013fec:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013ff0:	1a52      	subs	r2, r2, r1
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	bfc8      	it	gt
 8013ff6:	80c2      	strhgt	r2, [r0, #6]
 8013ff8:	bd10      	pop	{r4, pc}
	...

08013ffc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8013ffc:	4b10      	ldr	r3, [pc, #64]	; (8014040 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8013ffe:	b510      	push	{r4, lr}
 8014000:	460c      	mov	r4, r1
 8014002:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014006:	4b0f      	ldr	r3, [pc, #60]	; (8014044 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014008:	4620      	mov	r0, r4
 801400a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801400e:	f7ff ffd0 	bl	8013fb2 <_ZN8touchgfx4Rect10restrictToEss>
 8014012:	4b0d      	ldr	r3, [pc, #52]	; (8014048 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8014014:	6818      	ldr	r0, [r3, #0]
 8014016:	b190      	cbz	r0, 801403e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014018:	6803      	ldr	r3, [r0, #0]
 801401a:	4621      	mov	r1, r4
 801401c:	689b      	ldr	r3, [r3, #8]
 801401e:	4798      	blx	r3
 8014020:	4b0a      	ldr	r3, [pc, #40]	; (801404c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8014022:	6818      	ldr	r0, [r3, #0]
 8014024:	b118      	cbz	r0, 801402e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8014026:	6803      	ldr	r3, [r0, #0]
 8014028:	4621      	mov	r1, r4
 801402a:	689b      	ldr	r3, [r3, #8]
 801402c:	4798      	blx	r3
 801402e:	4b08      	ldr	r3, [pc, #32]	; (8014050 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014030:	4621      	mov	r1, r4
 8014032:	6818      	ldr	r0, [r3, #0]
 8014034:	6803      	ldr	r3, [r0, #0]
 8014036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801403a:	69db      	ldr	r3, [r3, #28]
 801403c:	4718      	bx	r3
 801403e:	bd10      	pop	{r4, pc}
 8014040:	20027e8e 	.word	0x20027e8e
 8014044:	20027e8c 	.word	0x20027e8c
 8014048:	20027edc 	.word	0x20027edc
 801404c:	20027ed8 	.word	0x20027ed8
 8014050:	20027e98 	.word	0x20027e98

08014054 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8014054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014056:	4606      	mov	r6, r0
 8014058:	4608      	mov	r0, r1
 801405a:	460f      	mov	r7, r1
 801405c:	f7fa ff6f 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014060:	b9e8      	cbnz	r0, 801409e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014062:	f9b7 5000 	ldrsh.w	r5, [r7]
 8014066:	f9b6 4000 	ldrsh.w	r4, [r6]
 801406a:	42a5      	cmp	r5, r4
 801406c:	db17      	blt.n	801409e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801406e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014072:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014076:	429a      	cmp	r2, r3
 8014078:	db11      	blt.n	801409e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801407a:	88b9      	ldrh	r1, [r7, #4]
 801407c:	440d      	add	r5, r1
 801407e:	88b1      	ldrh	r1, [r6, #4]
 8014080:	440c      	add	r4, r1
 8014082:	b22d      	sxth	r5, r5
 8014084:	b224      	sxth	r4, r4
 8014086:	42a5      	cmp	r5, r4
 8014088:	dc09      	bgt.n	801409e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801408a:	88f8      	ldrh	r0, [r7, #6]
 801408c:	4410      	add	r0, r2
 801408e:	88f2      	ldrh	r2, [r6, #6]
 8014090:	4413      	add	r3, r2
 8014092:	b200      	sxth	r0, r0
 8014094:	b21b      	sxth	r3, r3
 8014096:	4298      	cmp	r0, r3
 8014098:	bfcc      	ite	gt
 801409a:	2000      	movgt	r0, #0
 801409c:	2001      	movle	r0, #1
 801409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080140a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80140a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140a2:	4604      	mov	r4, r0
 80140a4:	4608      	mov	r0, r1
 80140a6:	460d      	mov	r5, r1
 80140a8:	f7fa ff49 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 80140ac:	b978      	cbnz	r0, 80140ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80140ae:	4620      	mov	r0, r4
 80140b0:	f7fa ff45 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 80140b4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80140b8:	b150      	cbz	r0, 80140d0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80140ba:	8026      	strh	r6, [r4, #0]
 80140bc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80140c0:	8063      	strh	r3, [r4, #2]
 80140c2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80140c6:	80a3      	strh	r3, [r4, #4]
 80140c8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80140cc:	80e3      	strh	r3, [r4, #6]
 80140ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140d0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80140d4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80140d8:	42b1      	cmp	r1, r6
 80140da:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80140de:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80140e2:	460f      	mov	r7, r1
 80140e4:	88ed      	ldrh	r5, [r5, #6]
 80140e6:	bfa8      	it	ge
 80140e8:	4637      	movge	r7, r6
 80140ea:	4293      	cmp	r3, r2
 80140ec:	4618      	mov	r0, r3
 80140ee:	4466      	add	r6, ip
 80140f0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80140f4:	bfa8      	it	ge
 80140f6:	4610      	movge	r0, r2
 80140f8:	442a      	add	r2, r5
 80140fa:	88e5      	ldrh	r5, [r4, #6]
 80140fc:	4461      	add	r1, ip
 80140fe:	b236      	sxth	r6, r6
 8014100:	8027      	strh	r7, [r4, #0]
 8014102:	442b      	add	r3, r5
 8014104:	b209      	sxth	r1, r1
 8014106:	b212      	sxth	r2, r2
 8014108:	8060      	strh	r0, [r4, #2]
 801410a:	b21b      	sxth	r3, r3
 801410c:	428e      	cmp	r6, r1
 801410e:	bfac      	ite	ge
 8014110:	ebc7 0106 	rsbge	r1, r7, r6
 8014114:	ebc7 0101 	rsblt	r1, r7, r1
 8014118:	429a      	cmp	r2, r3
 801411a:	bfac      	ite	ge
 801411c:	ebc0 0202 	rsbge	r2, r0, r2
 8014120:	ebc0 0203 	rsblt	r2, r0, r3
 8014124:	80a1      	strh	r1, [r4, #4]
 8014126:	80e2      	strh	r2, [r4, #6]
 8014128:	e7d1      	b.n	80140ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801412c <_ZN8touchgfx11Application11getInstanceEv>:
 801412c:	4b01      	ldr	r3, [pc, #4]	; (8014134 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801412e:	6818      	ldr	r0, [r3, #0]
 8014130:	4770      	bx	lr
 8014132:	bf00      	nop
 8014134:	20027eec 	.word	0x20027eec

08014138 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8014138:	b570      	push	{r4, r5, r6, lr}
 801413a:	2200      	movs	r2, #0
 801413c:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8014140:	1d04      	adds	r4, r0, #4
 8014142:	b295      	uxth	r5, r2
 8014144:	429d      	cmp	r5, r3
 8014146:	d20e      	bcs.n	8014166 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8014148:	f854 6b04 	ldr.w	r6, [r4], #4
 801414c:	4615      	mov	r5, r2
 801414e:	3201      	adds	r2, #1
 8014150:	428e      	cmp	r6, r1
 8014152:	d1f6      	bne.n	8014142 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8014154:	4428      	add	r0, r5
 8014156:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801415a:	2bff      	cmp	r3, #255	; 0xff
 801415c:	d002      	beq.n	8014164 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801415e:	3301      	adds	r3, #1
 8014160:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8014164:	bd70      	pop	{r4, r5, r6, pc}
 8014166:	18c2      	adds	r2, r0, r3
 8014168:	2b20      	cmp	r3, #32
 801416a:	f04f 0401 	mov.w	r4, #1
 801416e:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8014172:	bf1f      	itttt	ne
 8014174:	191a      	addne	r2, r3, r4
 8014176:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 801417a:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 801417e:	6041      	strne	r1, [r0, #4]
 8014180:	e7f0      	b.n	8014164 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>

08014182 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8014182:	b570      	push	{r4, r5, r6, lr}
 8014184:	2300      	movs	r3, #0
 8014186:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801418a:	1d04      	adds	r4, r0, #4
 801418c:	b29a      	uxth	r2, r3
 801418e:	4296      	cmp	r6, r2
 8014190:	d90a      	bls.n	80141a8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8014192:	f854 2b04 	ldr.w	r2, [r4], #4
 8014196:	428a      	cmp	r2, r1
 8014198:	d107      	bne.n	80141aa <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801419a:	18c5      	adds	r5, r0, r3
 801419c:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 80141a0:	b11a      	cbz	r2, 80141aa <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80141a2:	3a01      	subs	r2, #1
 80141a4:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 80141a8:	bd70      	pop	{r4, r5, r6, pc}
 80141aa:	3301      	adds	r3, #1
 80141ac:	e7ee      	b.n	801418c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

080141ae <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80141ae:	2300      	movs	r3, #0
 80141b0:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80141b4:	30a8      	adds	r0, #168	; 0xa8
 80141b6:	f820 3c24 	strh.w	r3, [r0, #-36]
 80141ba:	f802 3b01 	strb.w	r3, [r2], #1
 80141be:	4282      	cmp	r2, r0
 80141c0:	d1fb      	bne.n	80141ba <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80141c2:	4770      	bx	lr

080141c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80141c4:	4603      	mov	r3, r0
 80141c6:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80141ca:	2200      	movs	r2, #0
 80141cc:	801a      	strh	r2, [r3, #0]
 80141ce:	3308      	adds	r3, #8
 80141d0:	f823 2c06 	strh.w	r2, [r3, #-6]
 80141d4:	f823 2c04 	strh.w	r2, [r3, #-4]
 80141d8:	f823 2c02 	strh.w	r2, [r3, #-2]
 80141dc:	428b      	cmp	r3, r1
 80141de:	d1f5      	bne.n	80141cc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80141e0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80141e4:	4770      	bx	lr
	...

080141e8 <_ZN8touchgfx11ApplicationC1Ev>:
 80141e8:	b570      	push	{r4, r5, r6, lr}
 80141ea:	4b19      	ldr	r3, [pc, #100]	; (8014250 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80141ec:	2500      	movs	r5, #0
 80141ee:	4604      	mov	r4, r0
 80141f0:	30a8      	adds	r0, #168	; 0xa8
 80141f2:	f840 3ca8 	str.w	r3, [r0, #-168]
 80141f6:	f820 5c24 	strh.w	r5, [r0, #-36]
 80141fa:	f7ff ffe3 	bl	80141c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80141fe:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8014202:	f7ff ffdf 	bl	80141c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014206:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801420a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801420e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8014212:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8014216:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801421a:	490e      	ldr	r1, [pc, #56]	; (8014254 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801421c:	480e      	ldr	r0, [pc, #56]	; (8014258 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801421e:	f00e fd33 	bl	8022c88 <CRC_Lock>
 8014222:	4e0e      	ldr	r6, [pc, #56]	; (801425c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8014224:	4b0e      	ldr	r3, [pc, #56]	; (8014260 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8014226:	b158      	cbz	r0, 8014240 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8014228:	801d      	strh	r5, [r3, #0]
 801422a:	2300      	movs	r3, #0
 801422c:	4a0d      	ldr	r2, [pc, #52]	; (8014264 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801422e:	4620      	mov	r0, r4
 8014230:	6013      	str	r3, [r2, #0]
 8014232:	4a0d      	ldr	r2, [pc, #52]	; (8014268 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8014234:	6033      	str	r3, [r6, #0]
 8014236:	6013      	str	r3, [r2, #0]
 8014238:	f7ff ffb9 	bl	80141ae <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801423c:	4620      	mov	r0, r4
 801423e:	bd70      	pop	{r4, r5, r6, pc}
 8014240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014244:	2002      	movs	r0, #2
 8014246:	801a      	strh	r2, [r3, #0]
 8014248:	6030      	str	r0, [r6, #0]
 801424a:	f001 fb09 	bl	8015860 <_ZN8touchgfx6Screen4drawEv>
 801424e:	e7ec      	b.n	801422a <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8014250:	08029e6c 	.word	0x08029e6c
 8014254:	b5e8b5cd 	.word	0xb5e8b5cd
 8014258:	f407a5c2 	.word	0xf407a5c2
 801425c:	20027edc 	.word	0x20027edc
 8014260:	20000070 	.word	0x20000070
 8014264:	20027eec 	.word	0x20027eec
 8014268:	20027ee0 	.word	0x20027ee0

0801426c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801426c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8014270:	3b01      	subs	r3, #1
 8014272:	b29b      	uxth	r3, r3
 8014274:	428b      	cmp	r3, r1
 8014276:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801427a:	b510      	push	{r4, lr}
 801427c:	d908      	bls.n	8014290 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801427e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8014282:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801428c:	685a      	ldr	r2, [r3, #4]
 801428e:	6062      	str	r2, [r4, #4]
 8014290:	bd10      	pop	{r4, pc}
	...

08014294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8014294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014298:	b08f      	sub	sp, #60	; 0x3c
 801429a:	4b94      	ldr	r3, [pc, #592]	; (80144ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801429c:	4683      	mov	fp, r0
 801429e:	ac0a      	add	r4, sp, #40	; 0x28
 80142a0:	e884 0006 	stmia.w	r4, {r1, r2}
 80142a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80142a8:	4620      	mov	r0, r4
 80142aa:	4b91      	ldr	r3, [pc, #580]	; (80144f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 80142ac:	f9b3 1000 	ldrsh.w	r1, [r3]
 80142b0:	f7ff fe7f 	bl	8013fb2 <_ZN8touchgfx4Rect10restrictToEss>
 80142b4:	4620      	mov	r0, r4
 80142b6:	f7fa fe42 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d16a      	bne.n	8014394 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80142be:	9403      	str	r4, [sp, #12]
 80142c0:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80142c4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80142c8:	2400      	movs	r4, #0
 80142ca:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80142ce:	9301      	str	r3, [sp, #4]
 80142d0:	36a0      	adds	r6, #160	; 0xa0
 80142d2:	42a5      	cmp	r5, r4
 80142d4:	d00d      	beq.n	80142f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80142d6:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80142da:	9803      	ldr	r0, [sp, #12]
 80142dc:	f7ff feba 	bl	8014054 <_ZNK8touchgfx4Rect8includesERKS0_>
 80142e0:	b128      	cbz	r0, 80142ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80142e2:	1e69      	subs	r1, r5, #1
 80142e4:	9801      	ldr	r0, [sp, #4]
 80142e6:	1b09      	subs	r1, r1, r4
 80142e8:	b289      	uxth	r1, r1
 80142ea:	f7ff ffbf 	bl	801426c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80142ee:	3401      	adds	r4, #1
 80142f0:	e7ef      	b.n	80142d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80142f2:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80142f6:	1e7b      	subs	r3, r7, #1
 80142f8:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80142fc:	9704      	str	r7, [sp, #16]
 80142fe:	9302      	str	r3, [sp, #8]
 8014300:	2400      	movs	r4, #0
 8014302:	4655      	mov	r5, sl
 8014304:	9705      	str	r7, [sp, #20]
 8014306:	4626      	mov	r6, r4
 8014308:	9b05      	ldr	r3, [sp, #20]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d078      	beq.n	8014400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801430e:	9903      	ldr	r1, [sp, #12]
 8014310:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8014314:	f7ff fe2b 	bl	8013f6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014318:	b360      	cbz	r0, 8014374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801431a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801431e:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8014322:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8014326:	45e6      	cmp	lr, ip
 8014328:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801432c:	db35      	blt.n	801439a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801432e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8014332:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8014336:	4472      	add	r2, lr
 8014338:	4463      	add	r3, ip
 801433a:	b212      	sxth	r2, r2
 801433c:	b21b      	sxth	r3, r3
 801433e:	429a      	cmp	r2, r3
 8014340:	dc2b      	bgt.n	801439a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014342:	fa1f f288 	uxth.w	r2, r8
 8014346:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801434a:	45c1      	cmp	r9, r8
 801434c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8014350:	4413      	add	r3, r2
 8014352:	fa1f fc89 	uxth.w	ip, r9
 8014356:	b29b      	uxth	r3, r3
 8014358:	fa0f fe83 	sxth.w	lr, r3
 801435c:	db0f      	blt.n	801437e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801435e:	eba3 030c 	sub.w	r3, r3, ip
 8014362:	1ac9      	subs	r1, r1, r3
 8014364:	b209      	sxth	r1, r1
 8014366:	2900      	cmp	r1, #0
 8014368:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801436c:	dd12      	ble.n	8014394 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801436e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8014372:	4604      	mov	r4, r0
 8014374:	9b05      	ldr	r3, [sp, #20]
 8014376:	3d08      	subs	r5, #8
 8014378:	3b01      	subs	r3, #1
 801437a:	9305      	str	r3, [sp, #20]
 801437c:	e7c4      	b.n	8014308 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801437e:	4461      	add	r1, ip
 8014380:	b209      	sxth	r1, r1
 8014382:	4571      	cmp	r1, lr
 8014384:	dc3a      	bgt.n	80143fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8014386:	eba2 020c 	sub.w	r2, r2, ip
 801438a:	b212      	sxth	r2, r2
 801438c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8014390:	2a00      	cmp	r2, #0
 8014392:	dcee      	bgt.n	8014372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014394:	b00f      	add	sp, #60	; 0x3c
 8014396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801439a:	45c1      	cmp	r9, r8
 801439c:	db2e      	blt.n	80143fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801439e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80143a2:	4499      	add	r9, r3
 80143a4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80143a8:	4498      	add	r8, r3
 80143aa:	fa0f f989 	sxth.w	r9, r9
 80143ae:	fa0f f888 	sxth.w	r8, r8
 80143b2:	45c1      	cmp	r9, r8
 80143b4:	dc22      	bgt.n	80143fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80143b6:	fa1f f28c 	uxth.w	r2, ip
 80143ba:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80143be:	45e6      	cmp	lr, ip
 80143c0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80143c4:	4413      	add	r3, r2
 80143c6:	fa1f f88e 	uxth.w	r8, lr
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	fa0f f983 	sxth.w	r9, r3
 80143d0:	db0a      	blt.n	80143e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 80143d2:	eba3 0308 	sub.w	r3, r3, r8
 80143d6:	1ac9      	subs	r1, r1, r3
 80143d8:	b209      	sxth	r1, r1
 80143da:	2900      	cmp	r1, #0
 80143dc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80143e0:	ddd8      	ble.n	8014394 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80143e2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80143e6:	e7c4      	b.n	8014372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80143e8:	4441      	add	r1, r8
 80143ea:	b209      	sxth	r1, r1
 80143ec:	4549      	cmp	r1, r9
 80143ee:	dc05      	bgt.n	80143fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80143f0:	eba2 0208 	sub.w	r2, r2, r8
 80143f4:	b212      	sxth	r2, r2
 80143f6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80143fa:	e7c9      	b.n	8014390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80143fc:	4606      	mov	r6, r0
 80143fe:	e7b9      	b.n	8014374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8014400:	2c00      	cmp	r4, #0
 8014402:	f47f af7d 	bne.w	8014300 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8014406:	2e00      	cmp	r6, #0
 8014408:	f000 81e1 	beq.w	80147ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801440c:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8014410:	4655      	mov	r5, sl
 8014412:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8014416:	b2b9      	uxth	r1, r7
 8014418:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801441c:	b2b3      	uxth	r3, r6
 801441e:	9105      	str	r1, [sp, #20]
 8014420:	9805      	ldr	r0, [sp, #20]
 8014422:	441a      	add	r2, r3
 8014424:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8014428:	b292      	uxth	r2, r2
 801442a:	4401      	add	r1, r0
 801442c:	fa0f f882 	sxth.w	r8, r2
 8014430:	b289      	uxth	r1, r1
 8014432:	9106      	str	r1, [sp, #24]
 8014434:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8014438:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801443c:	9b04      	ldr	r3, [sp, #16]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d058      	beq.n	80144f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8014442:	9903      	ldr	r1, [sp, #12]
 8014444:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8014448:	f7ff fd91 	bl	8013f6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801444c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014450:	b1d8      	cbz	r0, 801448a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8014452:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8014456:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801445a:	4576      	cmp	r6, lr
 801445c:	dc26      	bgt.n	80144ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801445e:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8014462:	44f4      	add	ip, lr
 8014464:	fa0f fc8c 	sxth.w	ip, ip
 8014468:	45e0      	cmp	r8, ip
 801446a:	db1f      	blt.n	80144ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801446c:	428f      	cmp	r7, r1
 801446e:	fa1f fc81 	uxth.w	ip, r1
 8014472:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8014476:	dc0f      	bgt.n	8014498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8014478:	9806      	ldr	r0, [sp, #24]
 801447a:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801447e:	eba0 0c0c 	sub.w	ip, r0, ip
 8014482:	eba1 010c 	sub.w	r1, r1, ip
 8014486:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801448a:	4620      	mov	r0, r4
 801448c:	9904      	ldr	r1, [sp, #16]
 801448e:	3d08      	subs	r5, #8
 8014490:	4604      	mov	r4, r0
 8014492:	3901      	subs	r1, #1
 8014494:	9104      	str	r1, [sp, #16]
 8014496:	e7cf      	b.n	8014438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8014498:	4461      	add	r1, ip
 801449a:	b209      	sxth	r1, r1
 801449c:	4549      	cmp	r1, r9
 801449e:	dcf5      	bgt.n	801448c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80144a0:	9905      	ldr	r1, [sp, #20]
 80144a2:	eba1 0c0c 	sub.w	ip, r1, ip
 80144a6:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80144aa:	e7ee      	b.n	801448a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80144ac:	428f      	cmp	r7, r1
 80144ae:	dced      	bgt.n	801448c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80144b0:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80144b4:	4461      	add	r1, ip
 80144b6:	b209      	sxth	r1, r1
 80144b8:	4589      	cmp	r9, r1
 80144ba:	dbe7      	blt.n	801448c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80144bc:	4576      	cmp	r6, lr
 80144be:	fa1f fc8e 	uxth.w	ip, lr
 80144c2:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80144c6:	dc08      	bgt.n	80144da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80144c8:	eba2 0c0c 	sub.w	ip, r2, ip
 80144cc:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80144d0:	eba1 010c 	sub.w	r1, r1, ip
 80144d4:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80144d8:	e7d7      	b.n	801448a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80144da:	4461      	add	r1, ip
 80144dc:	b209      	sxth	r1, r1
 80144de:	4588      	cmp	r8, r1
 80144e0:	dbd4      	blt.n	801448c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80144e2:	eba3 0c0c 	sub.w	ip, r3, ip
 80144e6:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80144ea:	e7ce      	b.n	801448a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80144ec:	20027e8e 	.word	0x20027e8e
 80144f0:	20027e8c 	.word	0x20027e8c
 80144f4:	2c00      	cmp	r4, #0
 80144f6:	f000 816a 	beq.w	80147ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80144fa:	9b02      	ldr	r3, [sp, #8]
 80144fc:	3301      	adds	r3, #1
 80144fe:	f000 8166 	beq.w	80147ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8014502:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8014506:	9803      	ldr	r0, [sp, #12]
 8014508:	4621      	mov	r1, r4
 801450a:	f7ff fda3 	bl	8014054 <_ZNK8touchgfx4Rect8includesERKS0_>
 801450e:	b120      	cbz	r0, 801451a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8014510:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014514:	9801      	ldr	r0, [sp, #4]
 8014516:	f7ff fea9 	bl	801426c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801451a:	9903      	ldr	r1, [sp, #12]
 801451c:	4620      	mov	r0, r4
 801451e:	f7ff fd26 	bl	8013f6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014522:	2800      	cmp	r0, #0
 8014524:	f000 809b 	beq.w	801465e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8014528:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801452c:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8014530:	b281      	uxth	r1, r0
 8014532:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8014536:	9309      	str	r3, [sp, #36]	; 0x24
 8014538:	eb01 0c03 	add.w	ip, r1, r3
 801453c:	b2ab      	uxth	r3, r5
 801453e:	4285      	cmp	r5, r0
 8014540:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8014544:	fa1f f98c 	uxth.w	r9, ip
 8014548:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801454c:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8014550:	eb03 040c 	add.w	r4, r3, ip
 8014554:	b2a4      	uxth	r4, r4
 8014556:	9405      	str	r4, [sp, #20]
 8014558:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801455c:	9404      	str	r4, [sp, #16]
 801455e:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8014562:	f340 809a 	ble.w	801469a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8014566:	1a5b      	subs	r3, r3, r1
 8014568:	4596      	cmp	lr, r2
 801456a:	fa0f f589 	sxth.w	r5, r9
 801456e:	b29b      	uxth	r3, r3
 8014570:	b21e      	sxth	r6, r3
 8014572:	dd2e      	ble.n	80145d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8014574:	9f02      	ldr	r7, [sp, #8]
 8014576:	fa1f fe8e 	uxth.w	lr, lr
 801457a:	b292      	uxth	r2, r2
 801457c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8014580:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014584:	9f04      	ldr	r7, [sp, #16]
 8014586:	ebae 0102 	sub.w	r1, lr, r2
 801458a:	4486      	add	lr, r0
 801458c:	1b7f      	subs	r7, r7, r5
 801458e:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8014592:	b289      	uxth	r1, r1
 8014594:	442a      	add	r2, r5
 8014596:	fa0f fe8e 	sxth.w	lr, lr
 801459a:	b20c      	sxth	r4, r1
 801459c:	b212      	sxth	r2, r2
 801459e:	4367      	muls	r7, r4
 80145a0:	ebae 0202 	sub.w	r2, lr, r2
 80145a4:	4372      	muls	r2, r6
 80145a6:	4297      	cmp	r7, r2
 80145a8:	db09      	blt.n	80145be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 80145aa:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 80145ae:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80145b2:	449c      	add	ip, r3
 80145b4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80145b8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80145bc:	e680      	b.n	80142c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80145be:	4401      	add	r1, r0
 80145c0:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80145c4:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 80145c8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80145cc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80145d0:	e676      	b.n	80142c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80145d2:	9f04      	ldr	r7, [sp, #16]
 80145d4:	42bd      	cmp	r5, r7
 80145d6:	da27      	bge.n	8014628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 80145d8:	9902      	ldr	r1, [sp, #8]
 80145da:	1b7f      	subs	r7, r7, r5
 80145dc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80145e0:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 80145e4:	eb04 010e 	add.w	r1, r4, lr
 80145e8:	fa1f f881 	uxth.w	r8, r1
 80145ec:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 80145f0:	4411      	add	r1, r2
 80145f2:	fa0f f988 	sxth.w	r9, r8
 80145f6:	eba2 020e 	sub.w	r2, r2, lr
 80145fa:	eba1 0108 	sub.w	r1, r1, r8
 80145fe:	4372      	muls	r2, r6
 8014600:	b289      	uxth	r1, r1
 8014602:	fa0f f881 	sxth.w	r8, r1
 8014606:	fb08 f707 	mul.w	r7, r8, r7
 801460a:	42ba      	cmp	r2, r7
 801460c:	dc06      	bgt.n	801461c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801460e:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8014612:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8014616:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801461a:	e7ca      	b.n	80145b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801461c:	4421      	add	r1, r4
 801461e:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8014622:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8014626:	e64b      	b.n	80142c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014628:	9d05      	ldr	r5, [sp, #20]
 801462a:	2c06      	cmp	r4, #6
 801462c:	eba9 0505 	sub.w	r5, r9, r5
 8014630:	b2ad      	uxth	r5, r5
 8014632:	fa0f fe85 	sxth.w	lr, r5
 8014636:	d818      	bhi.n	801466a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8014638:	9b04      	ldr	r3, [sp, #16]
 801463a:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801463e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8014642:	1c63      	adds	r3, r4, #1
 8014644:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8014648:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801464c:	9b01      	ldr	r3, [sp, #4]
 801464e:	9d01      	ldr	r5, [sp, #4]
 8014650:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014654:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8014658:	805a      	strh	r2, [r3, #2]
 801465a:	809e      	strh	r6, [r3, #4]
 801465c:	80d9      	strh	r1, [r3, #6]
 801465e:	9b02      	ldr	r3, [sp, #8]
 8014660:	f1aa 0a08 	sub.w	sl, sl, #8
 8014664:	3b01      	subs	r3, #1
 8014666:	9302      	str	r3, [sp, #8]
 8014668:	e747      	b.n	80144fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801466a:	9a02      	ldr	r2, [sp, #8]
 801466c:	45b6      	cmp	lr, r6
 801466e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014672:	db0d      	blt.n	8014690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8014674:	449c      	add	ip, r3
 8014676:	445a      	add	r2, fp
 8014678:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801467c:	fa1f fc8c 	uxth.w	ip, ip
 8014680:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8014684:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8014688:	448c      	add	ip, r1
 801468a:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801468e:	e617      	b.n	80142c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014690:	445a      	add	r2, fp
 8014692:	44ac      	add	ip, r5
 8014694:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8014698:	e78e      	b.n	80145b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801469a:	fa1f f18e 	uxth.w	r1, lr
 801469e:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80146a2:	b293      	uxth	r3, r2
 80146a4:	4596      	cmp	lr, r2
 80146a6:	eb01 0806 	add.w	r8, r1, r6
 80146aa:	9306      	str	r3, [sp, #24]
 80146ac:	fa1f f888 	uxth.w	r8, r8
 80146b0:	9f06      	ldr	r7, [sp, #24]
 80146b2:	fa0f f388 	sxth.w	r3, r8
 80146b6:	9307      	str	r3, [sp, #28]
 80146b8:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 80146bc:	443b      	add	r3, r7
 80146be:	b29b      	uxth	r3, r3
 80146c0:	9308      	str	r3, [sp, #32]
 80146c2:	da25      	bge.n	8014710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80146c4:	9905      	ldr	r1, [sp, #20]
 80146c6:	eba3 0308 	sub.w	r3, r3, r8
 80146ca:	eba2 020e 	sub.w	r2, r2, lr
 80146ce:	1b40      	subs	r0, r0, r5
 80146d0:	eba9 0401 	sub.w	r4, r9, r1
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	b2a4      	uxth	r4, r4
 80146d8:	b219      	sxth	r1, r3
 80146da:	fa0f f984 	sxth.w	r9, r4
 80146de:	4348      	muls	r0, r1
 80146e0:	fb09 f202 	mul.w	r2, r9, r2
 80146e4:	4282      	cmp	r2, r0
 80146e6:	9a02      	ldr	r2, [sp, #8]
 80146e8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80146ec:	445a      	add	r2, fp
 80146ee:	dc06      	bgt.n	80146fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 80146f0:	9b07      	ldr	r3, [sp, #28]
 80146f2:	44a4      	add	ip, r4
 80146f4:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 80146f8:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 80146fc:	e75c      	b.n	80145b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80146fe:	9904      	ldr	r1, [sp, #16]
 8014700:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8014704:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8014708:	4433      	add	r3, r6
 801470a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801470e:	e5d7      	b.n	80142c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014710:	9f06      	ldr	r7, [sp, #24]
 8014712:	9b04      	ldr	r3, [sp, #16]
 8014714:	1bc9      	subs	r1, r1, r7
 8014716:	fa0f f789 	sxth.w	r7, r9
 801471a:	b289      	uxth	r1, r1
 801471c:	429f      	cmp	r7, r3
 801471e:	fa0f fe81 	sxth.w	lr, r1
 8014722:	dd22      	ble.n	801476a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8014724:	9a05      	ldr	r2, [sp, #20]
 8014726:	1b40      	subs	r0, r0, r5
 8014728:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801472c:	eba9 0202 	sub.w	r2, r9, r2
 8014730:	9d07      	ldr	r5, [sp, #28]
 8014732:	fb0e f000 	mul.w	r0, lr, r0
 8014736:	b292      	uxth	r2, r2
 8014738:	eba5 0a03 	sub.w	sl, r5, r3
 801473c:	9b02      	ldr	r3, [sp, #8]
 801473e:	b214      	sxth	r4, r2
 8014740:	00db      	lsls	r3, r3, #3
 8014742:	fb04 fa0a 	mul.w	sl, r4, sl
 8014746:	445b      	add	r3, fp
 8014748:	4550      	cmp	r0, sl
 801474a:	db03      	blt.n	8014754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801474c:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8014750:	4494      	add	ip, r2
 8014752:	e731      	b.n	80145b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8014754:	9a04      	ldr	r2, [sp, #16]
 8014756:	4431      	add	r1, r6
 8014758:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801475c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8014760:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8014764:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014768:	e75b      	b.n	8014622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801476a:	9b08      	ldr	r3, [sp, #32]
 801476c:	2c06      	cmp	r4, #6
 801476e:	eba3 0308 	sub.w	r3, r3, r8
 8014772:	b29b      	uxth	r3, r3
 8014774:	b21d      	sxth	r5, r3
 8014776:	d813      	bhi.n	80147a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8014778:	9b07      	ldr	r3, [sp, #28]
 801477a:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801477e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8014782:	1c63      	adds	r3, r4, #1
 8014784:	9901      	ldr	r1, [sp, #4]
 8014786:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801478a:	9b01      	ldr	r3, [sp, #4]
 801478c:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8014790:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014794:	805a      	strh	r2, [r3, #2]
 8014796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014798:	f8a3 e006 	strh.w	lr, [r3, #6]
 801479c:	809a      	strh	r2, [r3, #4]
 801479e:	e75e      	b.n	801465e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80147a0:	9802      	ldr	r0, [sp, #8]
 80147a2:	4575      	cmp	r5, lr
 80147a4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80147a8:	db0d      	blt.n	80147c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 80147aa:	4431      	add	r1, r6
 80147ac:	9b06      	ldr	r3, [sp, #24]
 80147ae:	4458      	add	r0, fp
 80147b0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80147b4:	b289      	uxth	r1, r1
 80147b6:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 80147ba:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80147be:	4419      	add	r1, r3
 80147c0:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 80147c4:	e57c      	b.n	80142c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80147c6:	4458      	add	r0, fp
 80147c8:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 80147cc:	e79c      	b.n	8014708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 80147ce:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 80147d2:	2e07      	cmp	r6, #7
 80147d4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80147d8:	d812      	bhi.n	8014800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 80147da:	1c75      	adds	r5, r6, #1
 80147dc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80147e0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80147e4:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 80147e8:	9d01      	ldr	r5, [sp, #4]
 80147ea:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80147ee:	442c      	add	r4, r5
 80147f0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80147f4:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80147f8:	8061      	strh	r1, [r4, #2]
 80147fa:	80a2      	strh	r2, [r4, #4]
 80147fc:	80e3      	strh	r3, [r4, #6]
 80147fe:	e5c9      	b.n	8014394 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014800:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8014804:	3e01      	subs	r6, #1
 8014806:	445c      	add	r4, fp
 8014808:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801480c:	f04f 37ff 	mov.w	r7, #4294967295
 8014810:	2500      	movs	r5, #0
 8014812:	9305      	str	r3, [sp, #20]
 8014814:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8014818:	1e72      	subs	r2, r6, #1
 801481a:	9302      	str	r3, [sp, #8]
 801481c:	4691      	mov	r9, r2
 801481e:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8014822:	9304      	str	r3, [sp, #16]
 8014824:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8014828:	f1b9 3fff 	cmp.w	r9, #4294967295
 801482c:	6818      	ldr	r0, [r3, #0]
 801482e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014832:	9207      	str	r2, [sp, #28]
 8014834:	bf16      	itet	ne
 8014836:	9905      	ldrne	r1, [sp, #20]
 8014838:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801483c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8014840:	9306      	str	r3, [sp, #24]
 8014842:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014846:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801484a:	fb18 f801 	smulbb	r8, r8, r1
 801484e:	6859      	ldr	r1, [r3, #4]
 8014850:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014854:	4671      	mov	r1, lr
 8014856:	a80c      	add	r0, sp, #48	; 0x30
 8014858:	f7ff fc22 	bl	80140a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801485c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8014860:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8014864:	f04f 0c08 	mov.w	ip, #8
 8014868:	9b04      	ldr	r3, [sp, #16]
 801486a:	9a02      	ldr	r2, [sp, #8]
 801486c:	fb10 f001 	smulbb	r0, r0, r1
 8014870:	fb02 8803 	mla	r8, r2, r3, r8
 8014874:	eba0 0108 	sub.w	r1, r0, r8
 8014878:	fb90 f0fc 	sdiv	r0, r0, ip
 801487c:	4288      	cmp	r0, r1
 801487e:	dc20      	bgt.n	80148c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8014880:	4551      	cmp	r1, sl
 8014882:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014886:	da03      	bge.n	8014890 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8014888:	b1d9      	cbz	r1, 80148c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801488a:	468a      	mov	sl, r1
 801488c:	464f      	mov	r7, r9
 801488e:	4635      	mov	r5, r6
 8014890:	f109 39ff 	add.w	r9, r9, #4294967295
 8014894:	f119 0f02 	cmn.w	r9, #2
 8014898:	d1c6      	bne.n	8014828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801489a:	4616      	mov	r6, r2
 801489c:	3201      	adds	r2, #1
 801489e:	f1a4 0408 	sub.w	r4, r4, #8
 80148a2:	d1b7      	bne.n	8014814 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 80148a4:	9b01      	ldr	r3, [sp, #4]
 80148a6:	b2ac      	uxth	r4, r5
 80148a8:	00ed      	lsls	r5, r5, #3
 80148aa:	1958      	adds	r0, r3, r5
 80148ac:	1c7b      	adds	r3, r7, #1
 80148ae:	d10b      	bne.n	80148c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 80148b0:	4601      	mov	r1, r0
 80148b2:	9803      	ldr	r0, [sp, #12]
 80148b4:	f7ff fbf4 	bl	80140a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80148b8:	4621      	mov	r1, r4
 80148ba:	9801      	ldr	r0, [sp, #4]
 80148bc:	f7ff fcd6 	bl	801426c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80148c0:	e4fe      	b.n	80142c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80148c2:	464f      	mov	r7, r9
 80148c4:	4635      	mov	r5, r6
 80148c6:	e7ed      	b.n	80148a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80148c8:	9b01      	ldr	r3, [sp, #4]
 80148ca:	00ff      	lsls	r7, r7, #3
 80148cc:	445d      	add	r5, fp
 80148ce:	19d9      	adds	r1, r3, r7
 80148d0:	445f      	add	r7, fp
 80148d2:	f7ff fbe5 	bl	80140a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80148d6:	9b03      	ldr	r3, [sp, #12]
 80148d8:	cb03      	ldmia	r3!, {r0, r1}
 80148da:	9b03      	ldr	r3, [sp, #12]
 80148dc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80148e0:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80148e4:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 80148e8:	6869      	ldr	r1, [r5, #4]
 80148ea:	c303      	stmia	r3!, {r0, r1}
 80148ec:	e7e4      	b.n	80148b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80148ee:	bf00      	nop

080148f0 <_ZN8touchgfx11Application10invalidateEv>:
 80148f0:	4b09      	ldr	r3, [pc, #36]	; (8014918 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80148f2:	b082      	sub	sp, #8
 80148f4:	2100      	movs	r1, #0
 80148f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80148fa:	4b08      	ldr	r3, [pc, #32]	; (801491c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80148fc:	9100      	str	r1, [sp, #0]
 80148fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014902:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014906:	f8ad 3006 	strh.w	r3, [sp, #6]
 801490a:	ab02      	add	r3, sp, #8
 801490c:	e913 0006 	ldmdb	r3, {r1, r2}
 8014910:	b002      	add	sp, #8
 8014912:	f7ff bcbf 	b.w	8014294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014916:	bf00      	nop
 8014918:	20027e8c 	.word	0x20027e8c
 801491c:	20027e8e 	.word	0x20027e8e

08014920 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8014920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014924:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8014928:	b09b      	sub	sp, #108	; 0x6c
 801492a:	4604      	mov	r4, r0
 801492c:	4630      	mov	r0, r6
 801492e:	f7fa fb06 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014932:	4605      	mov	r5, r0
 8014934:	b940      	cbnz	r0, 8014948 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8014936:	4620      	mov	r0, r4
 8014938:	e896 0006 	ldmia.w	r6, {r1, r2}
 801493c:	f7ff fcaa 	bl	8014294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014940:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8014944:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8014948:	4bc8      	ldr	r3, [pc, #800]	; (8014c6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d03e      	beq.n	80149ce <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8014950:	4dc7      	ldr	r5, [pc, #796]	; (8014c70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8014952:	4628      	mov	r0, r5
 8014954:	f7fa faf3 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014958:	4606      	mov	r6, r0
 801495a:	2800      	cmp	r0, #0
 801495c:	d137      	bne.n	80149ce <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801495e:	4628      	mov	r0, r5
 8014960:	f7ff f9aa 	bl	8013cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014964:	6829      	ldr	r1, [r5, #0]
 8014966:	686a      	ldr	r2, [r5, #4]
 8014968:	4620      	mov	r0, r4
 801496a:	f7ff fc93 	bl	8014294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801496e:	802e      	strh	r6, [r5, #0]
 8014970:	806e      	strh	r6, [r5, #2]
 8014972:	80ae      	strh	r6, [r5, #4]
 8014974:	80ee      	strh	r6, [r5, #6]
 8014976:	ae09      	add	r6, sp, #36	; 0x24
 8014978:	4630      	mov	r0, r6
 801497a:	f7ff fc23 	bl	80141c4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801497e:	4abd      	ldr	r2, [pc, #756]	; (8014c74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8014980:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8014984:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8014988:	8815      	ldrh	r5, [r2, #0]
 801498a:	9202      	str	r2, [sp, #8]
 801498c:	462b      	mov	r3, r5
 801498e:	429f      	cmp	r7, r3
 8014990:	d924      	bls.n	80149dc <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8014992:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8014996:	2907      	cmp	r1, #7
 8014998:	d816      	bhi.n	80149c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801499a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801499e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80149a2:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 80149a6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80149aa:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80149ae:	1c4a      	adds	r2, r1, #1
 80149b0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80149b4:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80149b8:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80149bc:	f8a2 9002 	strh.w	r9, [r2, #2]
 80149c0:	f8a2 e004 	strh.w	lr, [r2, #4]
 80149c4:	f8a2 c006 	strh.w	ip, [r2, #6]
 80149c8:	3301      	adds	r3, #1
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	e7df      	b.n	801498e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80149ce:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d1cf      	bne.n	8014976 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80149d6:	b01b      	add	sp, #108	; 0x6c
 80149d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149dc:	462f      	mov	r7, r5
 80149de:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80149e2:	42bb      	cmp	r3, r7
 80149e4:	d90b      	bls.n	80149fe <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80149e6:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80149ea:	3701      	adds	r7, #1
 80149ec:	4620      	mov	r0, r4
 80149ee:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80149f2:	b2bf      	uxth	r7, r7
 80149f4:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80149f8:	f7ff fc4c 	bl	8014294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80149fc:	e7ef      	b.n	80149de <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80149fe:	4a9e      	ldr	r2, [pc, #632]	; (8014c78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8014a00:	6813      	ldr	r3, [r2, #0]
 8014a02:	4690      	mov	r8, r2
 8014a04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a08:	2b01      	cmp	r3, #1
 8014a0a:	f040 80e4 	bne.w	8014bd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8014a0e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8014a12:	4629      	mov	r1, r5
 8014a14:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8014a18:	2500      	movs	r5, #0
 8014a1a:	33aa      	adds	r3, #170	; 0xaa
 8014a1c:	428f      	cmp	r7, r1
 8014a1e:	f103 0308 	add.w	r3, r3, #8
 8014a22:	dd0a      	ble.n	8014a3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8014a24:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8014a28:	3101      	adds	r1, #1
 8014a2a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8014a2e:	4402      	add	r2, r0
 8014a30:	b212      	sxth	r2, r2
 8014a32:	4295      	cmp	r5, r2
 8014a34:	bfb8      	it	lt
 8014a36:	4615      	movlt	r5, r2
 8014a38:	e7f0      	b.n	8014a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8014a3a:	4b90      	ldr	r3, [pc, #576]	; (8014c7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8014a3c:	f8df b238 	ldr.w	fp, [pc, #568]	; 8014c78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8014a40:	881b      	ldrh	r3, [r3, #0]
 8014a42:	46d8      	mov	r8, fp
 8014a44:	2b0f      	cmp	r3, #15
 8014a46:	bf8c      	ite	hi
 8014a48:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8014a4c:	f04f 0a01 	movls.w	sl, #1
 8014a50:	2300      	movs	r3, #0
 8014a52:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8014a56:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8014a5a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014a5e:	4438      	add	r0, r7
 8014a60:	b207      	sxth	r7, r0
 8014a62:	f8db 0000 	ldr.w	r0, [fp]
 8014a66:	42bd      	cmp	r5, r7
 8014a68:	6803      	ldr	r3, [r0, #0]
 8014a6a:	f340 8084 	ble.w	8014b76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8014a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014a72:	4798      	blx	r3
 8014a74:	eb07 030a 	add.w	r3, r7, sl
 8014a78:	4298      	cmp	r0, r3
 8014a7a:	da07      	bge.n	8014a8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8014a7c:	4285      	cmp	r5, r0
 8014a7e:	dd05      	ble.n	8014a8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8014a80:	4287      	cmp	r7, r0
 8014a82:	dd6d      	ble.n	8014b60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8014a84:	2f00      	cmp	r7, #0
 8014a86:	dd6b      	ble.n	8014b60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8014a88:	4628      	mov	r0, r5
 8014a8a:	e004      	b.n	8014a96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8014a8c:	4287      	cmp	r7, r0
 8014a8e:	dcfb      	bgt.n	8014a88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8014a90:	42a8      	cmp	r0, r5
 8014a92:	bfa8      	it	ge
 8014a94:	4628      	movge	r0, r5
 8014a96:	4b7a      	ldr	r3, [pc, #488]	; (8014c80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8014a98:	1bc0      	subs	r0, r0, r7
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aa4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014aa8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014aac:	9b02      	ldr	r3, [sp, #8]
 8014aae:	f8ad 001a 	strh.w	r0, [sp, #26]
 8014ab2:	881f      	ldrh	r7, [r3, #0]
 8014ab4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8014ab8:	42bb      	cmp	r3, r7
 8014aba:	d9cc      	bls.n	8014a56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8014abc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8014ac0:	ab07      	add	r3, sp, #28
 8014ac2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8014ac6:	6851      	ldr	r1, [r2, #4]
 8014ac8:	c303      	stmia	r3!, {r0, r1}
 8014aca:	a905      	add	r1, sp, #20
 8014acc:	a807      	add	r0, sp, #28
 8014ace:	f7ff fa4e 	bl	8013f6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d04c      	beq.n	8014b70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8014ad6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8014ada:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8014ade:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8014ae2:	4686      	mov	lr, r0
 8014ae4:	4290      	cmp	r0, r2
 8014ae6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8014aea:	4448      	add	r0, r9
 8014aec:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8014af0:	bfb8      	it	lt
 8014af2:	4696      	movlt	lr, r2
 8014af4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014af8:	444a      	add	r2, r9
 8014afa:	b280      	uxth	r0, r0
 8014afc:	4299      	cmp	r1, r3
 8014afe:	468c      	mov	ip, r1
 8014b00:	b292      	uxth	r2, r2
 8014b02:	9303      	str	r3, [sp, #12]
 8014b04:	bfb8      	it	lt
 8014b06:	469c      	movlt	ip, r3
 8014b08:	b203      	sxth	r3, r0
 8014b0a:	fa0f f982 	sxth.w	r9, r2
 8014b0e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8014b12:	f8ad c01e 	strh.w	ip, [sp, #30]
 8014b16:	454b      	cmp	r3, r9
 8014b18:	bfb8      	it	lt
 8014b1a:	4602      	movlt	r2, r0
 8014b1c:	9b03      	ldr	r3, [sp, #12]
 8014b1e:	eba2 020e 	sub.w	r2, r2, lr
 8014b22:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014b26:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8014b2a:	4411      	add	r1, r2
 8014b2c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014b30:	4413      	add	r3, r2
 8014b32:	b289      	uxth	r1, r1
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	b208      	sxth	r0, r1
 8014b38:	b21a      	sxth	r2, r3
 8014b3a:	4290      	cmp	r0, r2
 8014b3c:	bfb8      	it	lt
 8014b3e:	460b      	movlt	r3, r1
 8014b40:	eba3 030c 	sub.w	r3, r3, ip
 8014b44:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014b48:	a807      	add	r0, sp, #28
 8014b4a:	f7fa f9f8 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014b4e:	b920      	cbnz	r0, 8014b5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8014b50:	6823      	ldr	r3, [r4, #0]
 8014b52:	a907      	add	r1, sp, #28
 8014b54:	4620      	mov	r0, r4
 8014b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b58:	4798      	blx	r3
 8014b5a:	3701      	adds	r7, #1
 8014b5c:	b2bf      	uxth	r7, r7
 8014b5e:	e7a9      	b.n	8014ab4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8014b60:	f8d8 0000 	ldr.w	r0, [r8]
 8014b64:	2101      	movs	r1, #1
 8014b66:	6803      	ldr	r3, [r0, #0]
 8014b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014b6c:	4798      	blx	r3
 8014b6e:	e772      	b.n	8014a56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8014b70:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8014b74:	e7e8      	b.n	8014b48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8014b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b78:	4798      	blx	r3
 8014b7a:	4b42      	ldr	r3, [pc, #264]	; (8014c84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f43f af29 	beq.w	80149d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8014b84:	2300      	movs	r3, #0
 8014b86:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8014b8a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8014b8e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8014b92:	9b02      	ldr	r3, [sp, #8]
 8014b94:	881b      	ldrh	r3, [r3, #0]
 8014b96:	429d      	cmp	r5, r3
 8014b98:	f67f af1d 	bls.w	80149d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8014b9c:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8014ba0:	2907      	cmp	r1, #7
 8014ba2:	d815      	bhi.n	8014bd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8014ba4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8014ba8:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8014bac:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8014bb0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8014bb4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8014bb8:	1c4a      	adds	r2, r1, #1
 8014bba:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8014bbe:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8014bc2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8014bc6:	f8a2 e002 	strh.w	lr, [r2, #2]
 8014bca:	f8a2 c004 	strh.w	ip, [r2, #4]
 8014bce:	80d7      	strh	r7, [r2, #6]
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	e7df      	b.n	8014b96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8014bd6:	2b02      	cmp	r3, #2
 8014bd8:	f040 8135 	bne.w	8014e46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8014bdc:	4b2a      	ldr	r3, [pc, #168]	; (8014c88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8014bde:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8014be2:	781b      	ldrb	r3, [r3, #0]
 8014be4:	2b01      	cmp	r3, #1
 8014be6:	f000 809c 	beq.w	8014d22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8014bea:	9b02      	ldr	r3, [sp, #8]
 8014bec:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8014bf0:	f8b3 b000 	ldrh.w	fp, [r3]
 8014bf4:	f10b 0b01 	add.w	fp, fp, #1
 8014bf8:	fa1f fb8b 	uxth.w	fp, fp
 8014bfc:	2a00      	cmp	r2, #0
 8014bfe:	d0bc      	beq.n	8014b7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014c00:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8014c04:	4659      	mov	r1, fp
 8014c06:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8014c0a:	f04f 0800 	mov.w	r8, #0
 8014c0e:	441d      	add	r5, r3
 8014c10:	b22d      	sxth	r5, r5
 8014c12:	b28b      	uxth	r3, r1
 8014c14:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	f240 80c0 	bls.w	8014d9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8014c1e:	4427      	add	r7, r4
 8014c20:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8014c24:	4608      	mov	r0, r1
 8014c26:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8014c2a:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8014c2e:	4563      	cmp	r3, ip
 8014c30:	f340 80a2 	ble.w	8014d78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8014c34:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8014c38:	4465      	add	r5, ip
 8014c3a:	b22d      	sxth	r5, r5
 8014c3c:	429d      	cmp	r5, r3
 8014c3e:	bfa8      	it	ge
 8014c40:	461d      	movge	r5, r3
 8014c42:	3101      	adds	r1, #1
 8014c44:	4680      	mov	r8, r0
 8014c46:	e7e4      	b.n	8014c12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8014c48:	d10b      	bne.n	8014c62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8014c4a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8014c4e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8014c52:	458c      	cmp	ip, r1
 8014c54:	bfb4      	ite	lt
 8014c56:	469c      	movlt	ip, r3
 8014c58:	46bc      	movge	ip, r7
 8014c5a:	4572      	cmp	r2, lr
 8014c5c:	bfb8      	it	lt
 8014c5e:	4672      	movlt	r2, lr
 8014c60:	e087      	b.n	8014d72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8014c62:	428a      	cmp	r2, r1
 8014c64:	46bc      	mov	ip, r7
 8014c66:	bfb8      	it	lt
 8014c68:	460a      	movlt	r2, r1
 8014c6a:	e082      	b.n	8014d72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8014c6c:	20027ed8 	.word	0x20027ed8
 8014c70:	20027ee4 	.word	0x20027ee4
 8014c74:	20000070 	.word	0x20000070
 8014c78:	20027e98 	.word	0x20027e98
 8014c7c:	20027e8e 	.word	0x20027e8e
 8014c80:	20027e8c 	.word	0x20027e8c
 8014c84:	20027e96 	.word	0x20027e96
 8014c88:	20027e90 	.word	0x20027e90
 8014c8c:	1961      	adds	r1, r4, r5
 8014c8e:	ab07      	add	r3, sp, #28
 8014c90:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8014c94:	6849      	ldr	r1, [r1, #4]
 8014c96:	c303      	stmia	r3!, {r0, r1}
 8014c98:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014c9c:	a807      	add	r0, sp, #28
 8014c9e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014ca2:	2b13      	cmp	r3, #19
 8014ca4:	440b      	add	r3, r1
 8014ca6:	bfd8      	it	le
 8014ca8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8014cac:	1a9b      	subs	r3, r3, r2
 8014cae:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014cb2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014cb6:	f7ff f819 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014cba:	a807      	add	r0, sp, #28
 8014cbc:	f7fa f93f 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014cc0:	bb78      	cbnz	r0, 8014d22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8014cc2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8014cc6:	4425      	add	r5, r4
 8014cc8:	f8d8 0000 	ldr.w	r0, [r8]
 8014ccc:	f1bc 0f14 	cmp.w	ip, #20
 8014cd0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014cd4:	f8d0 e000 	ldr.w	lr, [r0]
 8014cd8:	bfa8      	it	ge
 8014cda:	f04f 0c14 	movge.w	ip, #20
 8014cde:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014ce2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014ce6:	fa1f fc8c 	uxth.w	ip, ip
 8014cea:	f8cd c000 	str.w	ip, [sp]
 8014cee:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8014cf2:	47d0      	blx	sl
 8014cf4:	4682      	mov	sl, r0
 8014cf6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014cfa:	a807      	add	r0, sp, #28
 8014cfc:	f7fe ffdc 	bl	8013cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014d00:	6823      	ldr	r3, [r4, #0]
 8014d02:	4620      	mov	r0, r4
 8014d04:	a907      	add	r1, sp, #28
 8014d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d08:	4798      	blx	r3
 8014d0a:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8014d0e:	eba0 000a 	sub.w	r0, r0, sl
 8014d12:	b200      	sxth	r0, r0
 8014d14:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8014d18:	b918      	cbnz	r0, 8014d22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8014d1a:	b2b9      	uxth	r1, r7
 8014d1c:	4648      	mov	r0, r9
 8014d1e:	f7ff faa5 	bl	801426c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014d22:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8014d26:	f1bb 0f00 	cmp.w	fp, #0
 8014d2a:	f43f af26 	beq.w	8014b7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014d2e:	9b02      	ldr	r3, [sp, #8]
 8014d30:	2700      	movs	r7, #0
 8014d32:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8014d36:	881b      	ldrh	r3, [r3, #0]
 8014d38:	3301      	adds	r3, #1
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	b299      	uxth	r1, r3
 8014d3e:	00fd      	lsls	r5, r7, #3
 8014d40:	458b      	cmp	fp, r1
 8014d42:	d9a3      	bls.n	8014c8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8014d44:	4425      	add	r5, r4
 8014d46:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8014d4a:	469c      	mov	ip, r3
 8014d4c:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8014d50:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8014d54:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8014d58:	4408      	add	r0, r1
 8014d5a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8014d5e:	4471      	add	r1, lr
 8014d60:	b200      	sxth	r0, r0
 8014d62:	b209      	sxth	r1, r1
 8014d64:	4288      	cmp	r0, r1
 8014d66:	f6bf af6f 	bge.w	8014c48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8014d6a:	4586      	cmp	lr, r0
 8014d6c:	4672      	mov	r2, lr
 8014d6e:	bfb8      	it	lt
 8014d70:	4602      	movlt	r2, r0
 8014d72:	3301      	adds	r3, #1
 8014d74:	4667      	mov	r7, ip
 8014d76:	e7e1      	b.n	8014d3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8014d78:	d10c      	bne.n	8014d94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8014d7a:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8014d7e:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8014d82:	4287      	cmp	r7, r0
 8014d84:	bfb4      	ite	lt
 8014d86:	4608      	movlt	r0, r1
 8014d88:	4640      	movge	r0, r8
 8014d8a:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8014d8e:	443b      	add	r3, r7
 8014d90:	b21b      	sxth	r3, r3
 8014d92:	e753      	b.n	8014c3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8014d94:	4565      	cmp	r5, ip
 8014d96:	4640      	mov	r0, r8
 8014d98:	bfa8      	it	ge
 8014d9a:	4665      	movge	r5, ip
 8014d9c:	e751      	b.n	8014c42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8014d9e:	eb09 0007 	add.w	r0, r9, r7
 8014da2:	4427      	add	r7, r4
 8014da4:	9203      	str	r2, [sp, #12]
 8014da6:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8014daa:	f1ba 0f13 	cmp.w	sl, #19
 8014dae:	bfde      	ittt	le
 8014db0:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8014db4:	4455      	addle	r5, sl
 8014db6:	b22d      	sxthle	r5, r5
 8014db8:	f7fa f8c1 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014dbc:	9a03      	ldr	r2, [sp, #12]
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	f47f af1c 	bne.w	8014bfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8014dc4:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8014dc8:	fa1f fa8a 	uxth.w	sl, sl
 8014dcc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014dd0:	1aad      	subs	r5, r5, r2
 8014dd2:	4829      	ldr	r0, [pc, #164]	; (8014e78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8014dd4:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8014dd8:	2d14      	cmp	r5, #20
 8014dda:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8014dde:	6800      	ldr	r0, [r0, #0]
 8014de0:	bfa8      	it	ge
 8014de2:	2514      	movge	r5, #20
 8014de4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014de8:	f8ad 201e 	strh.w	r2, [sp, #30]
 8014dec:	b289      	uxth	r1, r1
 8014dee:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014df2:	b2ad      	uxth	r5, r5
 8014df4:	f8d0 c000 	ldr.w	ip, [r0]
 8014df8:	b292      	uxth	r2, r2
 8014dfa:	4555      	cmp	r5, sl
 8014dfc:	bf94      	ite	ls
 8014dfe:	9500      	strls	r5, [sp, #0]
 8014e00:	f8cd a000 	strhi.w	sl, [sp]
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8014e0a:	47a8      	blx	r5
 8014e0c:	6823      	ldr	r3, [r4, #0]
 8014e0e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014e12:	a907      	add	r1, sp, #28
 8014e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e16:	4620      	mov	r0, r4
 8014e18:	4798      	blx	r3
 8014e1a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014e1e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8014e22:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8014e26:	1a5b      	subs	r3, r3, r1
 8014e28:	440a      	add	r2, r1
 8014e2a:	b21b      	sxth	r3, r3
 8014e2c:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8014e30:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f47f aed8 	bne.w	8014bea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8014e3a:	fa1f f188 	uxth.w	r1, r8
 8014e3e:	4648      	mov	r0, r9
 8014e40:	f7ff fa14 	bl	801426c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014e44:	e6d1      	b.n	8014bea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8014e46:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8014e4a:	42ab      	cmp	r3, r5
 8014e4c:	f67f ae95 	bls.w	8014b7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014e50:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8014e54:	ab07      	add	r3, sp, #28
 8014e56:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8014e5a:	6851      	ldr	r1, [r2, #4]
 8014e5c:	c303      	stmia	r3!, {r0, r1}
 8014e5e:	a807      	add	r0, sp, #28
 8014e60:	f7fa f86d 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014e64:	b920      	cbnz	r0, 8014e70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8014e66:	6823      	ldr	r3, [r4, #0]
 8014e68:	a907      	add	r1, sp, #28
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e6e:	4798      	blx	r3
 8014e70:	3501      	adds	r5, #1
 8014e72:	b2ad      	uxth	r5, r5
 8014e74:	e7e7      	b.n	8014e46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8014e76:	bf00      	nop
 8014e78:	20027e98 	.word	0x20027e98

08014e7c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8014e7c:	4b03      	ldr	r3, [pc, #12]	; (8014e8c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8014e7e:	2200      	movs	r2, #0
 8014e80:	801a      	strh	r2, [r3, #0]
 8014e82:	805a      	strh	r2, [r3, #2]
 8014e84:	809a      	strh	r2, [r3, #4]
 8014e86:	80da      	strh	r2, [r3, #6]
 8014e88:	4770      	bx	lr
 8014e8a:	bf00      	nop
 8014e8c:	20027ee4 	.word	0x20027ee4

08014e90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8014e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e94:	b09d      	sub	sp, #116	; 0x74
 8014e96:	4606      	mov	r6, r0
 8014e98:	4614      	mov	r4, r2
 8014e9a:	468a      	mov	sl, r1
 8014e9c:	a803      	add	r0, sp, #12
 8014e9e:	461d      	mov	r5, r3
 8014ea0:	f000 fe85 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 8014ea4:	6833      	ldr	r3, [r6, #0]
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8014eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eae:	4798      	blx	r3
 8014eb0:	6833      	ldr	r3, [r6, #0]
 8014eb2:	4607      	mov	r7, r0
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014eb8:	4798      	blx	r3
 8014eba:	462a      	mov	r2, r5
 8014ebc:	2500      	movs	r5, #0
 8014ebe:	4621      	mov	r1, r4
 8014ec0:	9000      	str	r0, [sp, #0]
 8014ec2:	463b      	mov	r3, r7
 8014ec4:	462c      	mov	r4, r5
 8014ec6:	46a9      	mov	r9, r5
 8014ec8:	46a8      	mov	r8, r5
 8014eca:	a803      	add	r0, sp, #12
 8014ecc:	f000 feca 	bl	8015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	9302      	str	r3, [sp, #8]
 8014ed4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014ed8:	429c      	cmp	r4, r3
 8014eda:	d002      	beq.n	8014ee2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8014edc:	455c      	cmp	r4, fp
 8014ede:	bf18      	it	ne
 8014ee0:	4625      	movne	r5, r4
 8014ee2:	ab02      	add	r3, sp, #8
 8014ee4:	4632      	mov	r2, r6
 8014ee6:	4651      	mov	r1, sl
 8014ee8:	a803      	add	r0, sp, #12
 8014eea:	f001 f9c1 	bl	8016270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014eee:	4604      	mov	r4, r0
 8014ef0:	b108      	cbz	r0, 8014ef6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8014ef2:	280a      	cmp	r0, #10
 8014ef4:	d10a      	bne.n	8014f0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8014ef6:	45c1      	cmp	r9, r8
 8014ef8:	bf38      	it	cc
 8014efa:	46c1      	movcc	r9, r8
 8014efc:	f04f 0800 	mov.w	r8, #0
 8014f00:	2c00      	cmp	r4, #0
 8014f02:	d1e5      	bne.n	8014ed0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014f04:	4648      	mov	r0, r9
 8014f06:	b01d      	add	sp, #116	; 0x74
 8014f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0c:	9a02      	ldr	r2, [sp, #8]
 8014f0e:	2a00      	cmp	r2, #0
 8014f10:	d0de      	beq.n	8014ed0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014f12:	7b57      	ldrb	r7, [r2, #13]
 8014f14:	4629      	mov	r1, r5
 8014f16:	6833      	ldr	r3, [r6, #0]
 8014f18:	007f      	lsls	r7, r7, #1
 8014f1a:	8894      	ldrh	r4, [r2, #4]
 8014f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f1e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8014f22:	7a97      	ldrb	r7, [r2, #10]
 8014f24:	4307      	orrs	r7, r0
 8014f26:	4630      	mov	r0, r6
 8014f28:	4798      	blx	r3
 8014f2a:	4438      	add	r0, r7
 8014f2c:	4480      	add	r8, r0
 8014f2e:	fa1f f888 	uxth.w	r8, r8
 8014f32:	e7e5      	b.n	8014f00 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08014f34 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8014f34:	b508      	push	{r3, lr}
 8014f36:	6803      	ldr	r3, [r0, #0]
 8014f38:	68db      	ldr	r3, [r3, #12]
 8014f3a:	4798      	blx	r3
 8014f3c:	b128      	cbz	r0, 8014f4a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8014f3e:	7b43      	ldrb	r3, [r0, #13]
 8014f40:	7a80      	ldrb	r0, [r0, #10]
 8014f42:	005b      	lsls	r3, r3, #1
 8014f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f48:	4318      	orrs	r0, r3
 8014f4a:	bd08      	pop	{r3, pc}

08014f4c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8014f4c:	b40e      	push	{r1, r2, r3}
 8014f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f50:	b09e      	sub	sp, #120	; 0x78
 8014f52:	4605      	mov	r5, r0
 8014f54:	ab23      	add	r3, sp, #140	; 0x8c
 8014f56:	a805      	add	r0, sp, #20
 8014f58:	f853 4b04 	ldr.w	r4, [r3], #4
 8014f5c:	9303      	str	r3, [sp, #12]
 8014f5e:	f000 fe26 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 8014f62:	682b      	ldr	r3, [r5, #0]
 8014f64:	4628      	mov	r0, r5
 8014f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f68:	4798      	blx	r3
 8014f6a:	682b      	ldr	r3, [r5, #0]
 8014f6c:	4606      	mov	r6, r0
 8014f6e:	4628      	mov	r0, r5
 8014f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f72:	4798      	blx	r3
 8014f74:	4633      	mov	r3, r6
 8014f76:	4621      	mov	r1, r4
 8014f78:	ae1e      	add	r6, sp, #120	; 0x78
 8014f7a:	2400      	movs	r4, #0
 8014f7c:	9000      	str	r0, [sp, #0]
 8014f7e:	9a03      	ldr	r2, [sp, #12]
 8014f80:	a805      	add	r0, sp, #20
 8014f82:	f000 fe6f 	bl	8015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014f86:	f846 4d68 	str.w	r4, [r6, #-104]!
 8014f8a:	462a      	mov	r2, r5
 8014f8c:	4633      	mov	r3, r6
 8014f8e:	4621      	mov	r1, r4
 8014f90:	a805      	add	r0, sp, #20
 8014f92:	f001 f96d 	bl	8016270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014f96:	b300      	cbz	r0, 8014fda <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8014f98:	280a      	cmp	r0, #10
 8014f9a:	d01a      	beq.n	8014fd2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8014f9c:	9f04      	ldr	r7, [sp, #16]
 8014f9e:	b1c7      	cbz	r7, 8014fd2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8014fa0:	7b78      	ldrb	r0, [r7, #13]
 8014fa2:	7a3b      	ldrb	r3, [r7, #8]
 8014fa4:	00c1      	lsls	r1, r0, #3
 8014fa6:	88aa      	ldrh	r2, [r5, #4]
 8014fa8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014fac:	4319      	orrs	r1, r3
 8014fae:	0643      	lsls	r3, r0, #25
 8014fb0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8014fb4:	bf48      	it	mi
 8014fb6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8014fba:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014fbe:	bf48      	it	mi
 8014fc0:	b219      	sxthmi	r1, r3
 8014fc2:	79fb      	ldrb	r3, [r7, #7]
 8014fc4:	4303      	orrs	r3, r0
 8014fc6:	4413      	add	r3, r2
 8014fc8:	1a5b      	subs	r3, r3, r1
 8014fca:	b29b      	uxth	r3, r3
 8014fcc:	42a3      	cmp	r3, r4
 8014fce:	bfc8      	it	gt
 8014fd0:	b21c      	sxthgt	r4, r3
 8014fd2:	4633      	mov	r3, r6
 8014fd4:	462a      	mov	r2, r5
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	e7da      	b.n	8014f90 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8014fda:	b2a0      	uxth	r0, r4
 8014fdc:	b01e      	add	sp, #120	; 0x78
 8014fde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014fe2:	b003      	add	sp, #12
 8014fe4:	4770      	bx	lr

08014fe6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8014fe6:	b40e      	push	{r1, r2, r3}
 8014fe8:	b570      	push	{r4, r5, r6, lr}
 8014fea:	b09d      	sub	sp, #116	; 0x74
 8014fec:	4604      	mov	r4, r0
 8014fee:	ab21      	add	r3, sp, #132	; 0x84
 8014ff0:	a803      	add	r0, sp, #12
 8014ff2:	f853 5b04 	ldr.w	r5, [r3], #4
 8014ff6:	9302      	str	r3, [sp, #8]
 8014ff8:	f000 fdd9 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 8014ffc:	6823      	ldr	r3, [r4, #0]
 8014ffe:	4620      	mov	r0, r4
 8015000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015002:	4798      	blx	r3
 8015004:	6823      	ldr	r3, [r4, #0]
 8015006:	4606      	mov	r6, r0
 8015008:	4620      	mov	r0, r4
 801500a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801500c:	2401      	movs	r4, #1
 801500e:	4798      	blx	r3
 8015010:	4633      	mov	r3, r6
 8015012:	9000      	str	r0, [sp, #0]
 8015014:	4629      	mov	r1, r5
 8015016:	9a02      	ldr	r2, [sp, #8]
 8015018:	a803      	add	r0, sp, #12
 801501a:	f000 fe23 	bl	8015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801501e:	a803      	add	r0, sp, #12
 8015020:	f001 f9f2 	bl	8016408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015024:	b2a3      	uxth	r3, r4
 8015026:	b138      	cbz	r0, 8015038 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8015028:	280a      	cmp	r0, #10
 801502a:	a803      	add	r0, sp, #12
 801502c:	bf04      	itt	eq
 801502e:	3301      	addeq	r3, #1
 8015030:	b21c      	sxtheq	r4, r3
 8015032:	f001 f9e9 	bl	8016408 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015036:	e7f5      	b.n	8015024 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8015038:	4618      	mov	r0, r3
 801503a:	b01d      	add	sp, #116	; 0x74
 801503c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015040:	b003      	add	sp, #12
 8015042:	4770      	bx	lr

08015044 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8015044:	b40e      	push	{r1, r2, r3}
 8015046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015048:	b09e      	sub	sp, #120	; 0x78
 801504a:	4604      	mov	r4, r0
 801504c:	ab23      	add	r3, sp, #140	; 0x8c
 801504e:	a805      	add	r0, sp, #20
 8015050:	f853 5b04 	ldr.w	r5, [r3], #4
 8015054:	9303      	str	r3, [sp, #12]
 8015056:	f000 fdaa 	bl	8015bae <_ZN8touchgfx12TextProviderC1Ev>
 801505a:	6823      	ldr	r3, [r4, #0]
 801505c:	4620      	mov	r0, r4
 801505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015060:	4798      	blx	r3
 8015062:	6823      	ldr	r3, [r4, #0]
 8015064:	4606      	mov	r6, r0
 8015066:	4620      	mov	r0, r4
 8015068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801506a:	4798      	blx	r3
 801506c:	4633      	mov	r3, r6
 801506e:	4629      	mov	r1, r5
 8015070:	9000      	str	r0, [sp, #0]
 8015072:	9a03      	ldr	r2, [sp, #12]
 8015074:	a805      	add	r0, sp, #20
 8015076:	f000 fdf5 	bl	8015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801507a:	ad1e      	add	r5, sp, #120	; 0x78
 801507c:	2100      	movs	r1, #0
 801507e:	26ff      	movs	r6, #255	; 0xff
 8015080:	4622      	mov	r2, r4
 8015082:	a805      	add	r0, sp, #20
 8015084:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015088:	462b      	mov	r3, r5
 801508a:	f001 f8f1 	bl	8016270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801508e:	b1d8      	cbz	r0, 80150c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8015090:	280a      	cmp	r0, #10
 8015092:	d012      	beq.n	80150ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8015094:	9804      	ldr	r0, [sp, #16]
 8015096:	b180      	cbz	r0, 80150ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8015098:	7b47      	ldrb	r7, [r0, #13]
 801509a:	7922      	ldrb	r2, [r4, #4]
 801509c:	00fb      	lsls	r3, r7, #3
 801509e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80150a2:	7a03      	ldrb	r3, [r0, #8]
 80150a4:	430b      	orrs	r3, r1
 80150a6:	0679      	lsls	r1, r7, #25
 80150a8:	bf44      	itt	mi
 80150aa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80150ae:	b21b      	sxthmi	r3, r3
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	429e      	cmp	r6, r3
 80150b6:	bf28      	it	cs
 80150b8:	461e      	movcs	r6, r3
 80150ba:	462b      	mov	r3, r5
 80150bc:	4622      	mov	r2, r4
 80150be:	2100      	movs	r1, #0
 80150c0:	a805      	add	r0, sp, #20
 80150c2:	f001 f8d5 	bl	8016270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80150c6:	e7e2      	b.n	801508e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80150c8:	4630      	mov	r0, r6
 80150ca:	b01e      	add	sp, #120	; 0x78
 80150cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80150d0:	b003      	add	sp, #12
 80150d2:	4770      	bx	lr

080150d4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80150d4:	b513      	push	{r0, r1, r4, lr}
 80150d6:	6803      	ldr	r3, [r0, #0]
 80150d8:	2400      	movs	r4, #0
 80150da:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80150de:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80150e2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80150e6:	4669      	mov	r1, sp
 80150e8:	691b      	ldr	r3, [r3, #16]
 80150ea:	9400      	str	r4, [sp, #0]
 80150ec:	f8ad 2006 	strh.w	r2, [sp, #6]
 80150f0:	4798      	blx	r3
 80150f2:	b002      	add	sp, #8
 80150f4:	bd10      	pop	{r4, pc}

080150f6 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80150f6:	b538      	push	{r3, r4, r5, lr}
 80150f8:	680b      	ldr	r3, [r1, #0]
 80150fa:	460c      	mov	r4, r1
 80150fc:	4605      	mov	r5, r0
 80150fe:	68db      	ldr	r3, [r3, #12]
 8015100:	4798      	blx	r3
 8015102:	6823      	ldr	r3, [r4, #0]
 8015104:	4620      	mov	r0, r4
 8015106:	4629      	mov	r1, r5
 8015108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801510a:	4798      	blx	r3
 801510c:	4628      	mov	r0, r5
 801510e:	bd38      	pop	{r3, r4, r5, pc}

08015110 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015110:	b410      	push	{r4}
 8015112:	880a      	ldrh	r2, [r1, #0]
 8015114:	8884      	ldrh	r4, [r0, #4]
 8015116:	4422      	add	r2, r4
 8015118:	800a      	strh	r2, [r1, #0]
 801511a:	884a      	ldrh	r2, [r1, #2]
 801511c:	88c4      	ldrh	r4, [r0, #6]
 801511e:	4422      	add	r2, r4
 8015120:	804a      	strh	r2, [r1, #2]
 8015122:	6940      	ldr	r0, [r0, #20]
 8015124:	b120      	cbz	r0, 8015130 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015126:	6803      	ldr	r3, [r0, #0]
 8015128:	f85d 4b04 	ldr.w	r4, [sp], #4
 801512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801512e:	4718      	bx	r3
 8015130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015134:	4770      	bx	lr

08015136 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8015136:	b570      	push	{r4, r5, r6, lr}
 8015138:	8882      	ldrh	r2, [r0, #4]
 801513a:	460c      	mov	r4, r1
 801513c:	880b      	ldrh	r3, [r1, #0]
 801513e:	4605      	mov	r5, r0
 8015140:	4413      	add	r3, r2
 8015142:	800b      	strh	r3, [r1, #0]
 8015144:	884b      	ldrh	r3, [r1, #2]
 8015146:	88c2      	ldrh	r2, [r0, #6]
 8015148:	4413      	add	r3, r2
 801514a:	804b      	strh	r3, [r1, #2]
 801514c:	1d01      	adds	r1, r0, #4
 801514e:	4620      	mov	r0, r4
 8015150:	f7f9 feb2 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8015154:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015158:	2b00      	cmp	r3, #0
 801515a:	dd0b      	ble.n	8015174 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801515c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015160:	2b00      	cmp	r3, #0
 8015162:	dd07      	ble.n	8015174 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015164:	6968      	ldr	r0, [r5, #20]
 8015166:	b128      	cbz	r0, 8015174 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015168:	6803      	ldr	r3, [r0, #0]
 801516a:	4621      	mov	r1, r4
 801516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801516e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015172:	4718      	bx	r3
 8015174:	bd70      	pop	{r4, r5, r6, pc}
	...

08015178 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015178:	b570      	push	{r4, r5, r6, lr}
 801517a:	8882      	ldrh	r2, [r0, #4]
 801517c:	460c      	mov	r4, r1
 801517e:	880b      	ldrh	r3, [r1, #0]
 8015180:	4605      	mov	r5, r0
 8015182:	4413      	add	r3, r2
 8015184:	800b      	strh	r3, [r1, #0]
 8015186:	884b      	ldrh	r3, [r1, #2]
 8015188:	88c2      	ldrh	r2, [r0, #6]
 801518a:	4413      	add	r3, r2
 801518c:	804b      	strh	r3, [r1, #2]
 801518e:	1d01      	adds	r1, r0, #4
 8015190:	4620      	mov	r0, r4
 8015192:	f7f9 fe91 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8015196:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	dd18      	ble.n	80151d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801519e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	dd14      	ble.n	80151d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80151a6:	6968      	ldr	r0, [r5, #20]
 80151a8:	b128      	cbz	r0, 80151b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80151aa:	6803      	ldr	r3, [r0, #0]
 80151ac:	4621      	mov	r1, r4
 80151ae:	691b      	ldr	r3, [r3, #16]
 80151b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151b4:	4718      	bx	r3
 80151b6:	4b07      	ldr	r3, [pc, #28]	; (80151d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	3304      	adds	r3, #4
 80151bc:	429d      	cmp	r5, r3
 80151be:	d107      	bne.n	80151d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80151c0:	f7fe ffb4 	bl	801412c <_ZN8touchgfx11Application11getInstanceEv>
 80151c4:	6821      	ldr	r1, [r4, #0]
 80151c6:	6862      	ldr	r2, [r4, #4]
 80151c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151cc:	f7ff b862 	b.w	8014294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80151d0:	bd70      	pop	{r4, r5, r6, pc}
 80151d2:	bf00      	nop
 80151d4:	20027edc 	.word	0x20027edc

080151d8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80151d8:	b570      	push	{r4, r5, r6, lr}
 80151da:	4604      	mov	r4, r0
 80151dc:	4616      	mov	r6, r2
 80151de:	460d      	mov	r5, r1
 80151e0:	b901      	cbnz	r1, 80151e4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80151e2:	b192      	cbz	r2, 801520a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80151e4:	6823      	ldr	r3, [r4, #0]
 80151e6:	4620      	mov	r0, r4
 80151e8:	699b      	ldr	r3, [r3, #24]
 80151ea:	4798      	blx	r3
 80151ec:	88e2      	ldrh	r2, [r4, #6]
 80151ee:	88a1      	ldrh	r1, [r4, #4]
 80151f0:	4620      	mov	r0, r4
 80151f2:	4432      	add	r2, r6
 80151f4:	4429      	add	r1, r5
 80151f6:	b212      	sxth	r2, r2
 80151f8:	b209      	sxth	r1, r1
 80151fa:	f7ef fea9 	bl	8004f50 <_ZN8touchgfx8Drawable5setXYEss>
 80151fe:	6823      	ldr	r3, [r4, #0]
 8015200:	4620      	mov	r0, r4
 8015202:	699b      	ldr	r3, [r3, #24]
 8015204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015208:	4718      	bx	r3
 801520a:	bd70      	pop	{r4, r5, r6, pc}

0801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801520c:	b510      	push	{r4, lr}
 801520e:	2300      	movs	r3, #0
 8015210:	4604      	mov	r4, r0
 8015212:	4608      	mov	r0, r1
 8015214:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8015218:	8023      	strh	r3, [r4, #0]
 801521a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801521e:	8063      	strh	r3, [r4, #2]
 8015220:	6803      	ldr	r3, [r0, #0]
 8015222:	80a1      	strh	r1, [r4, #4]
 8015224:	4621      	mov	r1, r4
 8015226:	80e2      	strh	r2, [r4, #6]
 8015228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801522a:	4798      	blx	r3
 801522c:	4620      	mov	r0, r4
 801522e:	bd10      	pop	{r4, pc}

08015230 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8015230:	b530      	push	{r4, r5, lr}
 8015232:	8083      	strh	r3, [r0, #4]
 8015234:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015238:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801523c:	7183      	strb	r3, [r0, #6]
 801523e:	79c3      	ldrb	r3, [r0, #7]
 8015240:	6101      	str	r1, [r0, #16]
 8015242:	f365 0306 	bfi	r3, r5, #0, #7
 8015246:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801524a:	8282      	strh	r2, [r0, #20]
 801524c:	f365 13c7 	bfi	r3, r5, #7, #1
 8015250:	71c3      	strb	r3, [r0, #7]
 8015252:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8015256:	7203      	strb	r3, [r0, #8]
 8015258:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801525c:	7243      	strb	r3, [r0, #9]
 801525e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015262:	8143      	strh	r3, [r0, #10]
 8015264:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8015268:	8183      	strh	r3, [r0, #12]
 801526a:	4b01      	ldr	r3, [pc, #4]	; (8015270 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801526c:	6003      	str	r3, [r0, #0]
 801526e:	bd30      	pop	{r4, r5, pc}
 8015270:	08029f20 	.word	0x08029f20

08015274 <_ZNK8touchgfx9ConstFont4findEt>:
 8015274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015276:	6904      	ldr	r4, [r0, #16]
 8015278:	b3bc      	cbz	r4, 80152ea <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801527a:	88a3      	ldrh	r3, [r4, #4]
 801527c:	8a82      	ldrh	r2, [r0, #20]
 801527e:	1acb      	subs	r3, r1, r3
 8015280:	f102 32ff 	add.w	r2, r2, #4294967295
 8015284:	d431      	bmi.n	80152ea <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015286:	4293      	cmp	r3, r2
 8015288:	dd0c      	ble.n	80152a4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801528a:	230e      	movs	r3, #14
 801528c:	fb03 4302 	mla	r3, r3, r2, r4
 8015290:	889b      	ldrh	r3, [r3, #4]
 8015292:	1a5b      	subs	r3, r3, r1
 8015294:	1ad3      	subs	r3, r2, r3
 8015296:	429a      	cmp	r2, r3
 8015298:	db27      	blt.n	80152ea <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801529a:	2b00      	cmp	r3, #0
 801529c:	bfbc      	itt	lt
 801529e:	2302      	movlt	r3, #2
 80152a0:	fb92 f3f3 	sdivlt	r3, r2, r3
 80152a4:	2500      	movs	r5, #0
 80152a6:	260e      	movs	r6, #14
 80152a8:	4295      	cmp	r5, r2
 80152aa:	dc1e      	bgt.n	80152ea <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80152ac:	fb06 4003 	mla	r0, r6, r3, r4
 80152b0:	8887      	ldrh	r7, [r0, #4]
 80152b2:	42b9      	cmp	r1, r7
 80152b4:	d01a      	beq.n	80152ec <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80152b6:	d20d      	bcs.n	80152d4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80152b8:	1e5a      	subs	r2, r3, #1
 80152ba:	4295      	cmp	r5, r2
 80152bc:	dc15      	bgt.n	80152ea <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80152be:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80152c2:	1a5b      	subs	r3, r3, r1
 80152c4:	1ad3      	subs	r3, r2, r3
 80152c6:	429a      	cmp	r2, r3
 80152c8:	db0f      	blt.n	80152ea <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80152ca:	429d      	cmp	r5, r3
 80152cc:	ddec      	ble.n	80152a8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80152ce:	1953      	adds	r3, r2, r5
 80152d0:	105b      	asrs	r3, r3, #1
 80152d2:	e7e9      	b.n	80152a8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80152d4:	1c5d      	adds	r5, r3, #1
 80152d6:	42aa      	cmp	r2, r5
 80152d8:	db07      	blt.n	80152ea <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80152da:	8a43      	ldrh	r3, [r0, #18]
 80152dc:	1acb      	subs	r3, r1, r3
 80152de:	442b      	add	r3, r5
 80152e0:	429d      	cmp	r5, r3
 80152e2:	dc02      	bgt.n	80152ea <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80152e4:	429a      	cmp	r2, r3
 80152e6:	dadf      	bge.n	80152a8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80152e8:	e7f1      	b.n	80152ce <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80152ea:	2000      	movs	r0, #0
 80152ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080152ee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80152ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152f0:	4604      	mov	r4, r0
 80152f2:	4617      	mov	r7, r2
 80152f4:	461e      	mov	r6, r3
 80152f6:	b911      	cbnz	r1, 80152fe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80152f8:	2500      	movs	r5, #0
 80152fa:	4628      	mov	r0, r5
 80152fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152fe:	290a      	cmp	r1, #10
 8015300:	d0fa      	beq.n	80152f8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015302:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8015306:	4291      	cmp	r1, r2
 8015308:	d0f6      	beq.n	80152f8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801530a:	f242 020b 	movw	r2, #8203	; 0x200b
 801530e:	4291      	cmp	r1, r2
 8015310:	d0f2      	beq.n	80152f8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015312:	f7ff ffaf 	bl	8015274 <_ZNK8touchgfx9ConstFont4findEt>
 8015316:	4605      	mov	r5, r0
 8015318:	b950      	cbnz	r0, 8015330 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801531a:	6823      	ldr	r3, [r4, #0]
 801531c:	4620      	mov	r0, r4
 801531e:	691b      	ldr	r3, [r3, #16]
 8015320:	4798      	blx	r3
 8015322:	4601      	mov	r1, r0
 8015324:	4620      	mov	r0, r4
 8015326:	f7ff ffa5 	bl	8015274 <_ZNK8touchgfx9ConstFont4findEt>
 801532a:	4605      	mov	r5, r0
 801532c:	2800      	cmp	r0, #0
 801532e:	d0e3      	beq.n	80152f8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015330:	6823      	ldr	r3, [r4, #0]
 8015332:	4629      	mov	r1, r5
 8015334:	4620      	mov	r0, r4
 8015336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015338:	4798      	blx	r3
 801533a:	6038      	str	r0, [r7, #0]
 801533c:	6823      	ldr	r3, [r4, #0]
 801533e:	4620      	mov	r0, r4
 8015340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015342:	4798      	blx	r3
 8015344:	7030      	strb	r0, [r6, #0]
 8015346:	e7d8      	b.n	80152fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08015348 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8015348:	b538      	push	{r3, r4, r5, lr}
 801534a:	4605      	mov	r5, r0
 801534c:	f002 f932 	bl	80175b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015350:	4604      	mov	r4, r0
 8015352:	4628      	mov	r0, r5
 8015354:	f002 f872 	bl	801743c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015358:	2800      	cmp	r0, #0
 801535a:	bf14      	ite	ne
 801535c:	2002      	movne	r0, #2
 801535e:	2000      	moveq	r0, #0
 8015360:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8015364:	b280      	uxth	r0, r0
 8015366:	bd38      	pop	{r3, r4, r5, pc}

08015368 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8015368:	b538      	push	{r3, r4, r5, lr}
 801536a:	4605      	mov	r5, r0
 801536c:	f002 f922 	bl	80175b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015370:	4604      	mov	r4, r0
 8015372:	4628      	mov	r0, r5
 8015374:	f002 f862 	bl	801743c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015378:	2800      	cmp	r0, #0
 801537a:	bf14      	ite	ne
 801537c:	2002      	movne	r0, #2
 801537e:	2000      	moveq	r0, #0
 8015380:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8015384:	f040 0001 	orr.w	r0, r0, #1
 8015388:	b280      	uxth	r0, r0
 801538a:	bd38      	pop	{r3, r4, r5, pc}

0801538c <_ZN8touchgfx4clzuEm>:
 801538c:	4603      	mov	r3, r0
 801538e:	b1c8      	cbz	r0, 80153c4 <_ZN8touchgfx4clzuEm+0x38>
 8015390:	0c02      	lsrs	r2, r0, #16
 8015392:	0412      	lsls	r2, r2, #16
 8015394:	b9a2      	cbnz	r2, 80153c0 <_ZN8touchgfx4clzuEm+0x34>
 8015396:	0403      	lsls	r3, r0, #16
 8015398:	2010      	movs	r0, #16
 801539a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801539e:	bf04      	itt	eq
 80153a0:	021b      	lsleq	r3, r3, #8
 80153a2:	3008      	addeq	r0, #8
 80153a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80153a8:	bf04      	itt	eq
 80153aa:	011b      	lsleq	r3, r3, #4
 80153ac:	3004      	addeq	r0, #4
 80153ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80153b2:	bf04      	itt	eq
 80153b4:	009b      	lsleq	r3, r3, #2
 80153b6:	3002      	addeq	r0, #2
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	db04      	blt.n	80153c6 <_ZN8touchgfx4clzuEm+0x3a>
 80153bc:	3001      	adds	r0, #1
 80153be:	4770      	bx	lr
 80153c0:	2000      	movs	r0, #0
 80153c2:	e7ea      	b.n	801539a <_ZN8touchgfx4clzuEm+0xe>
 80153c4:	2020      	movs	r0, #32
 80153c6:	4770      	bx	lr

080153c8 <_ZN8touchgfx7muldivuEmmmRm>:
 80153c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153cc:	4680      	mov	r8, r0
 80153ce:	460f      	mov	r7, r1
 80153d0:	4615      	mov	r5, r2
 80153d2:	461e      	mov	r6, r3
 80153d4:	f7ff ffda 	bl	801538c <_ZN8touchgfx4clzuEm>
 80153d8:	b998      	cbnz	r0, 8015402 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 80153da:	4608      	mov	r0, r1
 80153dc:	f7ff ffd6 	bl	801538c <_ZN8touchgfx4clzuEm>
 80153e0:	2800      	cmp	r0, #0
 80153e2:	dd08      	ble.n	80153f6 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 80153e4:	4633      	mov	r3, r6
 80153e6:	462a      	mov	r2, r5
 80153e8:	4641      	mov	r1, r8
 80153ea:	4638      	mov	r0, r7
 80153ec:	f7ff ffec 	bl	80153c8 <_ZN8touchgfx7muldivuEmmmRm>
 80153f0:	b003      	add	sp, #12
 80153f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f6:	f04f 33ff 	mov.w	r3, #4294967295
 80153fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80153fe:	6033      	str	r3, [r6, #0]
 8015400:	e7f6      	b.n	80153f0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8015402:	fa31 f900 	lsrs.w	r9, r1, r0
 8015406:	fb01 f308 	mul.w	r3, r1, r8
 801540a:	d105      	bne.n	8015418 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801540c:	fbb3 f0f5 	udiv	r0, r3, r5
 8015410:	fb05 3510 	mls	r5, r5, r0, r3
 8015414:	6035      	str	r5, [r6, #0]
 8015416:	e7eb      	b.n	80153f0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8015418:	2301      	movs	r3, #1
 801541a:	fa08 fb00 	lsl.w	fp, r8, r0
 801541e:	462a      	mov	r2, r5
 8015420:	4641      	mov	r1, r8
 8015422:	fa03 f000 	lsl.w	r0, r3, r0
 8015426:	4633      	mov	r3, r6
 8015428:	fbbb faf5 	udiv	sl, fp, r5
 801542c:	3801      	subs	r0, #1
 801542e:	fb09 f40a 	mul.w	r4, r9, sl
 8015432:	4038      	ands	r0, r7
 8015434:	f7ff ffc8 	bl	80153c8 <_ZN8touchgfx7muldivuEmmmRm>
 8015438:	462a      	mov	r2, r5
 801543a:	4607      	mov	r7, r0
 801543c:	ab01      	add	r3, sp, #4
 801543e:	fb05 b11a 	mls	r1, r5, sl, fp
 8015442:	4648      	mov	r0, r9
 8015444:	f7ff ffc0 	bl	80153c8 <_ZN8touchgfx7muldivuEmmmRm>
 8015448:	9b01      	ldr	r3, [sp, #4]
 801544a:	6832      	ldr	r2, [r6, #0]
 801544c:	441a      	add	r2, r3
 801544e:	fbb2 f3f5 	udiv	r3, r2, r5
 8015452:	441c      	add	r4, r3
 8015454:	fb05 2513 	mls	r5, r5, r3, r2
 8015458:	443c      	add	r4, r7
 801545a:	4420      	add	r0, r4
 801545c:	e7da      	b.n	8015414 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801545e <_ZN8touchgfx6muldivElllRl>:
 801545e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015460:	2800      	cmp	r0, #0
 8015462:	461e      	mov	r6, r3
 8015464:	bfba      	itte	lt
 8015466:	4240      	neglt	r0, r0
 8015468:	f04f 34ff 	movlt.w	r4, #4294967295
 801546c:	2401      	movge	r4, #1
 801546e:	2900      	cmp	r1, #0
 8015470:	bfbc      	itt	lt
 8015472:	4249      	neglt	r1, r1
 8015474:	4264      	neglt	r4, r4
 8015476:	2a00      	cmp	r2, #0
 8015478:	bfb6      	itet	lt
 801547a:	4265      	neglt	r5, r4
 801547c:	4625      	movge	r5, r4
 801547e:	4252      	neglt	r2, r2
 8015480:	4288      	cmp	r0, r1
 8015482:	bfc2      	ittt	gt
 8015484:	4603      	movgt	r3, r0
 8015486:	4608      	movgt	r0, r1
 8015488:	4619      	movgt	r1, r3
 801548a:	ab01      	add	r3, sp, #4
 801548c:	f7ff ff9c 	bl	80153c8 <_ZN8touchgfx7muldivuEmmmRm>
 8015490:	9b01      	ldr	r3, [sp, #4]
 8015492:	4368      	muls	r0, r5
 8015494:	435c      	muls	r4, r3
 8015496:	6034      	str	r4, [r6, #0]
 8015498:	b002      	add	sp, #8
 801549a:	bd70      	pop	{r4, r5, r6, pc}

0801549c <_ZN8touchgfx6muldivElll>:
 801549c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801549e:	4606      	mov	r6, r0
 80154a0:	ab01      	add	r3, sp, #4
 80154a2:	460d      	mov	r5, r1
 80154a4:	4614      	mov	r4, r2
 80154a6:	f7ff ffda 	bl	801545e <_ZN8touchgfx6muldivElllRl>
 80154aa:	2e00      	cmp	r6, #0
 80154ac:	db20      	blt.n	80154f0 <_ZN8touchgfx6muldivElll+0x54>
 80154ae:	bf14      	ite	ne
 80154b0:	2301      	movne	r3, #1
 80154b2:	2300      	moveq	r3, #0
 80154b4:	2d00      	cmp	r5, #0
 80154b6:	db1e      	blt.n	80154f6 <_ZN8touchgfx6muldivElll+0x5a>
 80154b8:	bf14      	ite	ne
 80154ba:	2201      	movne	r2, #1
 80154bc:	2200      	moveq	r2, #0
 80154be:	2c00      	cmp	r4, #0
 80154c0:	fb03 f202 	mul.w	r2, r3, r2
 80154c4:	db1a      	blt.n	80154fc <_ZN8touchgfx6muldivElll+0x60>
 80154c6:	bf14      	ite	ne
 80154c8:	2301      	movne	r3, #1
 80154ca:	2300      	moveq	r3, #0
 80154cc:	4353      	muls	r3, r2
 80154ce:	2b01      	cmp	r3, #1
 80154d0:	d117      	bne.n	8015502 <_ZN8touchgfx6muldivElll+0x66>
 80154d2:	2c00      	cmp	r4, #0
 80154d4:	9b01      	ldr	r3, [sp, #4]
 80154d6:	bfb8      	it	lt
 80154d8:	4264      	neglt	r4, r4
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f104 0401 	add.w	r4, r4, #1
 80154e0:	bfb8      	it	lt
 80154e2:	425b      	neglt	r3, r3
 80154e4:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80154e8:	db00      	blt.n	80154ec <_ZN8touchgfx6muldivElll+0x50>
 80154ea:	3001      	adds	r0, #1
 80154ec:	b002      	add	sp, #8
 80154ee:	bd70      	pop	{r4, r5, r6, pc}
 80154f0:	f04f 33ff 	mov.w	r3, #4294967295
 80154f4:	e7de      	b.n	80154b4 <_ZN8touchgfx6muldivElll+0x18>
 80154f6:	f04f 32ff 	mov.w	r2, #4294967295
 80154fa:	e7e0      	b.n	80154be <_ZN8touchgfx6muldivElll+0x22>
 80154fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015500:	e7e4      	b.n	80154cc <_ZN8touchgfx6muldivElll+0x30>
 8015502:	3301      	adds	r3, #1
 8015504:	d1f2      	bne.n	80154ec <_ZN8touchgfx6muldivElll+0x50>
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	2c00      	cmp	r4, #0
 801550a:	bfb8      	it	lt
 801550c:	4264      	neglt	r4, r4
 801550e:	2b00      	cmp	r3, #0
 8015510:	bfb8      	it	lt
 8015512:	425b      	neglt	r3, r3
 8015514:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8015518:	bfc8      	it	gt
 801551a:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801551e:	e7e5      	b.n	80154ec <_ZN8touchgfx6muldivElll+0x50>

08015520 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8015520:	2000      	movs	r0, #0
 8015522:	4770      	bx	lr

08015524 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8015524:	2001      	movs	r0, #1
 8015526:	4770      	bx	lr

08015528 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8015528:	2002      	movs	r0, #2
 801552a:	4770      	bx	lr

0801552c <_ZN8touchgfx6ScreenD1Ev>:
 801552c:	4770      	bx	lr

0801552e <_ZN8touchgfx12GestureEventD1Ev>:
 801552e:	4770      	bx	lr

08015530 <_ZN8touchgfx9DragEventD1Ev>:
 8015530:	4770      	bx	lr

08015532 <_ZN8touchgfx10ClickEventD1Ev>:
 8015532:	4770      	bx	lr

08015534 <_ZN8touchgfx10ClickEventD0Ev>:
 8015534:	b510      	push	{r4, lr}
 8015536:	4604      	mov	r4, r0
 8015538:	210c      	movs	r1, #12
 801553a:	f00f fc18 	bl	8024d6e <_ZdlPvj>
 801553e:	4620      	mov	r0, r4
 8015540:	bd10      	pop	{r4, pc}

08015542 <_ZN8touchgfx9DragEventD0Ev>:
 8015542:	b510      	push	{r4, lr}
 8015544:	4604      	mov	r4, r0
 8015546:	2110      	movs	r1, #16
 8015548:	f00f fc11 	bl	8024d6e <_ZdlPvj>
 801554c:	4620      	mov	r0, r4
 801554e:	bd10      	pop	{r4, pc}

08015550 <_ZN8touchgfx12GestureEventD0Ev>:
 8015550:	b510      	push	{r4, lr}
 8015552:	4604      	mov	r4, r0
 8015554:	210c      	movs	r1, #12
 8015556:	f00f fc0a 	bl	8024d6e <_ZdlPvj>
 801555a:	4620      	mov	r0, r4
 801555c:	bd10      	pop	{r4, pc}

0801555e <_ZN8touchgfx6ScreenD0Ev>:
 801555e:	b510      	push	{r4, lr}
 8015560:	4604      	mov	r4, r0
 8015562:	213c      	movs	r1, #60	; 0x3c
 8015564:	f00f fc03 	bl	8024d6e <_ZdlPvj>
 8015568:	4620      	mov	r0, r4
 801556a:	bd10      	pop	{r4, pc}

0801556c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801556c:	b530      	push	{r4, r5, lr}
 801556e:	460d      	mov	r5, r1
 8015570:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8015572:	b087      	sub	sp, #28
 8015574:	4604      	mov	r4, r0
 8015576:	b301      	cbz	r1, 80155ba <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8015578:	a801      	add	r0, sp, #4
 801557a:	f7ff fe47 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801557e:	892a      	ldrh	r2, [r5, #8]
 8015580:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015584:	7928      	ldrb	r0, [r5, #4]
 8015586:	1ad2      	subs	r2, r2, r3
 8015588:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801558a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801558e:	441a      	add	r2, r3
 8015590:	896b      	ldrh	r3, [r5, #10]
 8015592:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8015596:	f88d 0010 	strb.w	r0, [sp, #16]
 801559a:	1b5b      	subs	r3, r3, r5
 801559c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801559e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80155a0:	442b      	add	r3, r5
 80155a2:	4d07      	ldr	r5, [pc, #28]	; (80155c0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80155a4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80155a8:	a903      	add	r1, sp, #12
 80155aa:	9503      	str	r5, [sp, #12]
 80155ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80155b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80155b4:	6803      	ldr	r3, [r0, #0]
 80155b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155b8:	4798      	blx	r3
 80155ba:	b007      	add	sp, #28
 80155bc:	bd30      	pop	{r4, r5, pc}
 80155be:	bf00      	nop
 80155c0:	08029fa0 	.word	0x08029fa0

080155c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80155c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80155ca:	b08a      	sub	sp, #40	; 0x28
 80155cc:	4604      	mov	r4, r0
 80155ce:	460d      	mov	r5, r1
 80155d0:	b113      	cbz	r3, 80155d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80155d2:	790b      	ldrb	r3, [r1, #4]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d044      	beq.n	8015662 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80155d8:	f104 0804 	add.w	r8, r4, #4
 80155dc:	a803      	add	r0, sp, #12
 80155de:	4641      	mov	r1, r8
 80155e0:	f7ff fe14 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80155e4:	792b      	ldrb	r3, [r5, #4]
 80155e6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80155ea:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80155ee:	b983      	cbnz	r3, 8015612 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80155f0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80155f4:	892a      	ldrh	r2, [r5, #8]
 80155f6:	88e9      	ldrh	r1, [r5, #6]
 80155f8:	4640      	mov	r0, r8
 80155fa:	1b92      	subs	r2, r2, r6
 80155fc:	9301      	str	r3, [sp, #4]
 80155fe:	1bc9      	subs	r1, r1, r7
 8015600:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8015604:	b212      	sxth	r2, r2
 8015606:	9300      	str	r3, [sp, #0]
 8015608:	b209      	sxth	r1, r1
 801560a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801560e:	f7f9 fb71 	bl	800ecf4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8015612:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015614:	b329      	cbz	r1, 8015662 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015616:	a805      	add	r0, sp, #20
 8015618:	f7ff fdf8 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801561c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015620:	792b      	ldrb	r3, [r5, #4]
 8015622:	a907      	add	r1, sp, #28
 8015624:	1abf      	subs	r7, r7, r2
 8015626:	88ea      	ldrh	r2, [r5, #6]
 8015628:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801562a:	4417      	add	r7, r2
 801562c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801562e:	f88d 3020 	strb.w	r3, [sp, #32]
 8015632:	4417      	add	r7, r2
 8015634:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015638:	1ab6      	subs	r6, r6, r2
 801563a:	892a      	ldrh	r2, [r5, #8]
 801563c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8015640:	4416      	add	r6, r2
 8015642:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015644:	4416      	add	r6, r2
 8015646:	4a08      	ldr	r2, [pc, #32]	; (8015668 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8015648:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801564c:	2600      	movs	r6, #0
 801564e:	9207      	str	r2, [sp, #28]
 8015650:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8015654:	6803      	ldr	r3, [r0, #0]
 8015656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015658:	4798      	blx	r3
 801565a:	792b      	ldrb	r3, [r5, #4]
 801565c:	b10b      	cbz	r3, 8015662 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801565e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8015662:	b00a      	add	sp, #40	; 0x28
 8015664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015668:	08029f78 	.word	0x08029f78

0801566c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015670:	460c      	mov	r4, r1
 8015672:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8015674:	b088      	sub	sp, #32
 8015676:	4605      	mov	r5, r0
 8015678:	2900      	cmp	r1, #0
 801567a:	d06d      	beq.n	8015758 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801567c:	4668      	mov	r0, sp
 801567e:	f7ff fdc5 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015682:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8015684:	88e3      	ldrh	r3, [r4, #6]
 8015686:	f9bd 8000 	ldrsh.w	r8, [sp]
 801568a:	440b      	add	r3, r1
 801568c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8015690:	b21b      	sxth	r3, r3
 8015692:	4543      	cmp	r3, r8
 8015694:	db31      	blt.n	80156fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015696:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801569a:	44c4      	add	ip, r8
 801569c:	fa0f fc8c 	sxth.w	ip, ip
 80156a0:	4563      	cmp	r3, ip
 80156a2:	da2a      	bge.n	80156fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80156a4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80156a6:	8926      	ldrh	r6, [r4, #8]
 80156a8:	4416      	add	r6, r2
 80156aa:	b236      	sxth	r6, r6
 80156ac:	42be      	cmp	r6, r7
 80156ae:	db24      	blt.n	80156fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80156b0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80156b4:	4438      	add	r0, r7
 80156b6:	b200      	sxth	r0, r0
 80156b8:	4286      	cmp	r6, r0
 80156ba:	da1e      	bge.n	80156fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80156bc:	8963      	ldrh	r3, [r4, #10]
 80156be:	4419      	add	r1, r3
 80156c0:	b209      	sxth	r1, r1
 80156c2:	4541      	cmp	r1, r8
 80156c4:	db08      	blt.n	80156d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80156c6:	4561      	cmp	r1, ip
 80156c8:	da06      	bge.n	80156d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80156ca:	89a3      	ldrh	r3, [r4, #12]
 80156cc:	441a      	add	r2, r3
 80156ce:	b212      	sxth	r2, r2
 80156d0:	42ba      	cmp	r2, r7
 80156d2:	db01      	blt.n	80156d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80156d4:	4282      	cmp	r2, r0
 80156d6:	db10      	blt.n	80156fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80156d8:	4b21      	ldr	r3, [pc, #132]	; (8015760 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80156da:	a904      	add	r1, sp, #16
 80156dc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80156de:	9304      	str	r3, [sp, #16]
 80156e0:	2302      	movs	r3, #2
 80156e2:	f88d 3014 	strb.w	r3, [sp, #20]
 80156e6:	2300      	movs	r3, #0
 80156e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80156f0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80156f4:	6803      	ldr	r3, [r0, #0]
 80156f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156f8:	4798      	blx	r3
 80156fa:	1d29      	adds	r1, r5, #4
 80156fc:	a802      	add	r0, sp, #8
 80156fe:	f7ff fd85 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015702:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015706:	88e0      	ldrh	r0, [r4, #6]
 8015708:	eba3 0808 	sub.w	r8, r3, r8
 801570c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015710:	7921      	ldrb	r1, [r4, #4]
 8015712:	fa1f f888 	uxth.w	r8, r8
 8015716:	1bdf      	subs	r7, r3, r7
 8015718:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801571c:	b2bb      	uxth	r3, r7
 801571e:	4440      	add	r0, r8
 8015720:	8922      	ldrh	r2, [r4, #8]
 8015722:	8967      	ldrh	r7, [r4, #10]
 8015724:	4460      	add	r0, ip
 8015726:	89a4      	ldrh	r4, [r4, #12]
 8015728:	441a      	add	r2, r3
 801572a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801572c:	44b8      	add	r8, r7
 801572e:	4423      	add	r3, r4
 8015730:	f8ad 0016 	strh.w	r0, [sp, #22]
 8015734:	4432      	add	r2, r6
 8015736:	44e0      	add	r8, ip
 8015738:	4433      	add	r3, r6
 801573a:	4c0a      	ldr	r4, [pc, #40]	; (8015764 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801573c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801573e:	f88d 1014 	strb.w	r1, [sp, #20]
 8015742:	a904      	add	r1, sp, #16
 8015744:	9404      	str	r4, [sp, #16]
 8015746:	f8ad 2018 	strh.w	r2, [sp, #24]
 801574a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801574e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015752:	6803      	ldr	r3, [r0, #0]
 8015754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015756:	4798      	blx	r3
 8015758:	b008      	add	sp, #32
 801575a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801575e:	bf00      	nop
 8015760:	08029f78 	.word	0x08029f78
 8015764:	08029f8c 	.word	0x08029f8c

08015768 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801576a:	4604      	mov	r4, r0
 801576c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8015770:	3201      	adds	r2, #1
 8015772:	d112      	bne.n	801579a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8015774:	2500      	movs	r5, #0
 8015776:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801577a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801577e:	6803      	ldr	r3, [r0, #0]
 8015780:	9500      	str	r5, [sp, #0]
 8015782:	466d      	mov	r5, sp
 8015784:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015788:	f8ad 2006 	strh.w	r2, [sp, #6]
 801578c:	4629      	mov	r1, r5
 801578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015790:	4798      	blx	r3
 8015792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015796:	e884 0003 	stmia.w	r4, {r0, r1}
 801579a:	4620      	mov	r0, r4
 801579c:	b003      	add	sp, #12
 801579e:	bd30      	pop	{r4, r5, pc}

080157a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80157a0:	b513      	push	{r0, r1, r4, lr}
 80157a2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80157a6:	4604      	mov	r4, r0
 80157a8:	3301      	adds	r3, #1
 80157aa:	d109      	bne.n	80157c0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80157ac:	4601      	mov	r1, r0
 80157ae:	4668      	mov	r0, sp
 80157b0:	f7ff fd2c 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80157b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80157b8:	8423      	strh	r3, [r4, #32]
 80157ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80157be:	8463      	strh	r3, [r4, #34]	; 0x22
 80157c0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80157c4:	b002      	add	sp, #8
 80157c6:	bd10      	pop	{r4, pc}

080157c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80157c8:	b513      	push	{r0, r1, r4, lr}
 80157ca:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80157ce:	4604      	mov	r4, r0
 80157d0:	3301      	adds	r3, #1
 80157d2:	d109      	bne.n	80157e8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80157d4:	4601      	mov	r1, r0
 80157d6:	4668      	mov	r0, sp
 80157d8:	f7ff fd18 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80157dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80157e0:	8423      	strh	r3, [r4, #32]
 80157e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80157e6:	8463      	strh	r3, [r4, #34]	; 0x22
 80157e8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80157ec:	b002      	add	sp, #8
 80157ee:	bd10      	pop	{r4, pc}

080157f0 <_ZN8touchgfx6ScreenC1Ev>:
 80157f0:	b570      	push	{r4, r5, r6, lr}
 80157f2:	4b17      	ldr	r3, [pc, #92]	; (8015850 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80157f4:	4605      	mov	r5, r0
 80157f6:	4a17      	ldr	r2, [pc, #92]	; (8015854 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80157f8:	2101      	movs	r1, #1
 80157fa:	f845 3b04 	str.w	r3, [r5], #4
 80157fe:	2300      	movs	r3, #0
 8015800:	6042      	str	r2, [r0, #4]
 8015802:	4604      	mov	r4, r0
 8015804:	8103      	strh	r3, [r0, #8]
 8015806:	8143      	strh	r3, [r0, #10]
 8015808:	8183      	strh	r3, [r0, #12]
 801580a:	81c3      	strh	r3, [r0, #14]
 801580c:	8203      	strh	r3, [r0, #16]
 801580e:	8243      	strh	r3, [r0, #18]
 8015810:	8283      	strh	r3, [r0, #20]
 8015812:	82c3      	strh	r3, [r0, #22]
 8015814:	6203      	str	r3, [r0, #32]
 8015816:	8483      	strh	r3, [r0, #36]	; 0x24
 8015818:	84c3      	strh	r3, [r0, #38]	; 0x26
 801581a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801581e:	6343      	str	r3, [r0, #52]	; 0x34
 8015820:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8015824:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015828:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801582c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8015830:	4b09      	ldr	r3, [pc, #36]	; (8015858 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8015832:	4628      	mov	r0, r5
 8015834:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015838:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801583a:	4a08      	ldr	r2, [pc, #32]	; (801585c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801583c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015840:	4798      	blx	r3
 8015842:	6863      	ldr	r3, [r4, #4]
 8015844:	4628      	mov	r0, r5
 8015846:	4631      	mov	r1, r6
 8015848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801584a:	4798      	blx	r3
 801584c:	4620      	mov	r0, r4
 801584e:	bd70      	pop	{r4, r5, r6, pc}
 8015850:	08029fb4 	.word	0x08029fb4
 8015854:	080298a0 	.word	0x080298a0
 8015858:	20027e8e 	.word	0x20027e8e
 801585c:	20027e8c 	.word	0x20027e8c

08015860 <_ZN8touchgfx6Screen4drawEv>:
 8015860:	4b09      	ldr	r3, [pc, #36]	; (8015888 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8015862:	b507      	push	{r0, r1, r2, lr}
 8015864:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015868:	2100      	movs	r1, #0
 801586a:	4b08      	ldr	r3, [pc, #32]	; (801588c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801586c:	9100      	str	r1, [sp, #0]
 801586e:	4669      	mov	r1, sp
 8015870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015874:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015878:	f8ad 3006 	strh.w	r3, [sp, #6]
 801587c:	6803      	ldr	r3, [r0, #0]
 801587e:	689b      	ldr	r3, [r3, #8]
 8015880:	4798      	blx	r3
 8015882:	b003      	add	sp, #12
 8015884:	f85d fb04 	ldr.w	pc, [sp], #4
 8015888:	20027e8c 	.word	0x20027e8c
 801588c:	20027e8e 	.word	0x20027e8e

08015890 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8015890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015894:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015898:	b089      	sub	sp, #36	; 0x24
 801589a:	4680      	mov	r8, r0
 801589c:	460c      	mov	r4, r1
 801589e:	2b00      	cmp	r3, #0
 80158a0:	4615      	mov	r5, r2
 80158a2:	dd0e      	ble.n	80158c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80158a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	dd0a      	ble.n	80158c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80158ac:	4628      	mov	r0, r5
 80158ae:	f7ff ff5b 	bl	8015768 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80158b2:	4621      	mov	r1, r4
 80158b4:	f7fe fb5b 	bl	8013f6e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80158b8:	69eb      	ldr	r3, [r5, #28]
 80158ba:	b928      	cbnz	r0, 80158c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80158bc:	461d      	mov	r5, r3
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d1f4      	bne.n	80158ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80158c2:	b009      	add	sp, #36	; 0x24
 80158c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c8:	ae04      	add	r6, sp, #16
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	f000 80b5 	beq.w	8015a3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80158d0:	682b      	ldr	r3, [r5, #0]
 80158d2:	4629      	mov	r1, r5
 80158d4:	a802      	add	r0, sp, #8
 80158d6:	68db      	ldr	r3, [r3, #12]
 80158d8:	4798      	blx	r3
 80158da:	4628      	mov	r0, r5
 80158dc:	f7ff ff60 	bl	80157a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80158e0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80158e4:	4407      	add	r7, r0
 80158e6:	4628      	mov	r0, r5
 80158e8:	f7ff ff6e 	bl	80157c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80158ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80158f0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80158f4:	b23f      	sxth	r7, r7
 80158f6:	4418      	add	r0, r3
 80158f8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80158fc:	4621      	mov	r1, r4
 80158fe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015902:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015906:	4630      	mov	r0, r6
 8015908:	f8ad 3016 	strh.w	r3, [sp, #22]
 801590c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8015910:	f7f9 fad2 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8015914:	4628      	mov	r0, r5
 8015916:	f7ff ff27 	bl	8015768 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801591a:	ab06      	add	r3, sp, #24
 801591c:	4602      	mov	r2, r0
 801591e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015922:	e883 0003 	stmia.w	r3, {r0, r1}
 8015926:	4611      	mov	r1, r2
 8015928:	4618      	mov	r0, r3
 801592a:	f7f9 fac5 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 801592e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015932:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015936:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801593a:	4299      	cmp	r1, r3
 801593c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8015940:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8015944:	d10b      	bne.n	801595e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015946:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801594a:	4552      	cmp	r2, sl
 801594c:	d107      	bne.n	801595e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801594e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015952:	455a      	cmp	r2, fp
 8015954:	d103      	bne.n	801595e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015956:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801595a:	454a      	cmp	r2, r9
 801595c:	d06d      	beq.n	8015a3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801595e:	f1bb 0f00 	cmp.w	fp, #0
 8015962:	dd65      	ble.n	8015a30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015964:	f1b9 0f00 	cmp.w	r9, #0
 8015968:	dd62      	ble.n	8015a30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801596a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801596e:	fa1f f08a 	uxth.w	r0, sl
 8015972:	4552      	cmp	r2, sl
 8015974:	9000      	str	r0, [sp, #0]
 8015976:	da12      	bge.n	801599e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8015978:	9301      	str	r3, [sp, #4]
 801597a:	9b00      	ldr	r3, [sp, #0]
 801597c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015980:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015984:	1a9a      	subs	r2, r3, r2
 8015986:	f8ad 1010 	strh.w	r1, [sp, #16]
 801598a:	4631      	mov	r1, r6
 801598c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015990:	4640      	mov	r0, r8
 8015992:	f8ad 2016 	strh.w	r2, [sp, #22]
 8015996:	69ea      	ldr	r2, [r5, #28]
 8015998:	f7ff ff7a 	bl	8015890 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801599c:	9b01      	ldr	r3, [sp, #4]
 801599e:	f9b4 2000 	ldrsh.w	r2, [r4]
 80159a2:	b29f      	uxth	r7, r3
 80159a4:	429a      	cmp	r2, r3
 80159a6:	da0d      	bge.n	80159c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80159a8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80159ac:	1aba      	subs	r2, r7, r2
 80159ae:	f8ad a012 	strh.w	sl, [sp, #18]
 80159b2:	4631      	mov	r1, r6
 80159b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80159b8:	4640      	mov	r0, r8
 80159ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 80159be:	69ea      	ldr	r2, [r5, #28]
 80159c0:	f7ff ff66 	bl	8015890 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80159c4:	8822      	ldrh	r2, [r4, #0]
 80159c6:	445f      	add	r7, fp
 80159c8:	88a3      	ldrh	r3, [r4, #4]
 80159ca:	b2bf      	uxth	r7, r7
 80159cc:	4413      	add	r3, r2
 80159ce:	b23a      	sxth	r2, r7
 80159d0:	b29b      	uxth	r3, r3
 80159d2:	b219      	sxth	r1, r3
 80159d4:	4291      	cmp	r1, r2
 80159d6:	dd0d      	ble.n	80159f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80159d8:	1bdb      	subs	r3, r3, r7
 80159da:	f8ad 2010 	strh.w	r2, [sp, #16]
 80159de:	f8ad a012 	strh.w	sl, [sp, #18]
 80159e2:	4631      	mov	r1, r6
 80159e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80159e8:	4640      	mov	r0, r8
 80159ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 80159ee:	69ea      	ldr	r2, [r5, #28]
 80159f0:	f7ff ff4e 	bl	8015890 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80159f4:	88e2      	ldrh	r2, [r4, #6]
 80159f6:	8863      	ldrh	r3, [r4, #2]
 80159f8:	4413      	add	r3, r2
 80159fa:	9a00      	ldr	r2, [sp, #0]
 80159fc:	444a      	add	r2, r9
 80159fe:	b29b      	uxth	r3, r3
 8015a00:	fa1f f982 	uxth.w	r9, r2
 8015a04:	b219      	sxth	r1, r3
 8015a06:	fa0f f289 	sxth.w	r2, r9
 8015a0a:	428a      	cmp	r2, r1
 8015a0c:	da15      	bge.n	8015a3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015a0e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015a12:	eba3 0309 	sub.w	r3, r3, r9
 8015a16:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015a1a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8015a1e:	4631      	mov	r1, r6
 8015a20:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015a24:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015a28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015a2c:	69ea      	ldr	r2, [r5, #28]
 8015a2e:	e001      	b.n	8015a34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8015a30:	69ea      	ldr	r2, [r5, #28]
 8015a32:	4621      	mov	r1, r4
 8015a34:	4640      	mov	r0, r8
 8015a36:	f7ff ff2b 	bl	8015890 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	f7ff fe94 	bl	8015768 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015a40:	6861      	ldr	r1, [r4, #4]
 8015a42:	4602      	mov	r2, r0
 8015a44:	4633      	mov	r3, r6
 8015a46:	6820      	ldr	r0, [r4, #0]
 8015a48:	c303      	stmia	r3!, {r0, r1}
 8015a4a:	4611      	mov	r1, r2
 8015a4c:	4630      	mov	r0, r6
 8015a4e:	f7f9 fa33 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8015a52:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	f77f af33 	ble.w	80158c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015a5c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	f77f af2e 	ble.w	80158c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015a66:	4628      	mov	r0, r5
 8015a68:	f7ff fe9a 	bl	80157a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015a6c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015a70:	1a18      	subs	r0, r3, r0
 8015a72:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015a76:	4628      	mov	r0, r5
 8015a78:	f7ff fea6 	bl	80157c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8015a7c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015a80:	4631      	mov	r1, r6
 8015a82:	1a18      	subs	r0, r3, r0
 8015a84:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015a88:	4628      	mov	r0, r5
 8015a8a:	682b      	ldr	r3, [r5, #0]
 8015a8c:	689b      	ldr	r3, [r3, #8]
 8015a8e:	4798      	blx	r3
 8015a90:	e717      	b.n	80158c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08015a92 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8015a92:	b570      	push	{r4, r5, r6, lr}
 8015a94:	1d06      	adds	r6, r0, #4
 8015a96:	b086      	sub	sp, #24
 8015a98:	460c      	mov	r4, r1
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	4631      	mov	r1, r6
 8015a9e:	4605      	mov	r5, r0
 8015aa0:	a802      	add	r0, sp, #8
 8015aa2:	9301      	str	r3, [sp, #4]
 8015aa4:	f7ff fbb2 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015aa8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015aac:	8822      	ldrh	r2, [r4, #0]
 8015aae:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8015ab2:	1ad2      	subs	r2, r2, r3
 8015ab4:	8863      	ldrh	r3, [r4, #2]
 8015ab6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015aba:	1a5b      	subs	r3, r3, r1
 8015abc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8015ac0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015ac4:	aa01      	add	r2, sp, #4
 8015ac6:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015aca:	4630      	mov	r0, r6
 8015acc:	f8ad 1016 	strh.w	r1, [sp, #22]
 8015ad0:	a904      	add	r1, sp, #16
 8015ad2:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015ad6:	f7f9 fac7 	bl	800f068 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8015ada:	9a01      	ldr	r2, [sp, #4]
 8015adc:	b11a      	cbz	r2, 8015ae6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8015ade:	4621      	mov	r1, r4
 8015ae0:	4628      	mov	r0, r5
 8015ae2:	f7ff fed5 	bl	8015890 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015ae6:	b006      	add	sp, #24
 8015ae8:	bd70      	pop	{r4, r5, r6, pc}

08015aea <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8015aea:	4602      	mov	r2, r0
 8015aec:	b530      	push	{r4, r5, lr}
 8015aee:	4604      	mov	r4, r0
 8015af0:	b085      	sub	sp, #20
 8015af2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8015af6:	460d      	mov	r5, r1
 8015af8:	466b      	mov	r3, sp
 8015afa:	6851      	ldr	r1, [r2, #4]
 8015afc:	c303      	stmia	r3!, {r0, r1}
 8015afe:	4629      	mov	r1, r5
 8015b00:	4668      	mov	r0, sp
 8015b02:	f7f9 f9d9 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8015b06:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015b0a:	b12b      	cbz	r3, 8015b18 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8015b0c:	4669      	mov	r1, sp
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f7ff ffbf 	bl	8015a92 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8015b14:	b005      	add	sp, #20
 8015b16:	bd30      	pop	{r4, r5, pc}
 8015b18:	3404      	adds	r4, #4
 8015b1a:	a802      	add	r0, sp, #8
 8015b1c:	4621      	mov	r1, r4
 8015b1e:	f7ff fb75 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015b22:	f8bd 3000 	ldrh.w	r3, [sp]
 8015b26:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8015b2a:	4669      	mov	r1, sp
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	1a9b      	subs	r3, r3, r2
 8015b30:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8015b34:	f8ad 3000 	strh.w	r3, [sp]
 8015b38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015b3c:	1a9b      	subs	r3, r3, r2
 8015b3e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015b42:	f7f9 fa58 	bl	800eff6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8015b46:	e7e5      	b.n	8015b14 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08015b48 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8015b48:	460b      	mov	r3, r1
 8015b4a:	680a      	ldr	r2, [r1, #0]
 8015b4c:	1d01      	adds	r1, r0, #4
 8015b4e:	6992      	ldr	r2, [r2, #24]
 8015b50:	4618      	mov	r0, r3
 8015b52:	4710      	bx	r2

08015b54 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8015b54:	4298      	cmp	r0, r3
 8015b56:	d200      	bcs.n	8015b5a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8015b58:	b913      	cbnz	r3, 8015b60 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8015b5a:	440a      	add	r2, r1
 8015b5c:	b210      	sxth	r0, r2
 8015b5e:	4770      	bx	lr
 8015b60:	ee07 2a90 	vmov	s15, r2
 8015b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015b68:	ee07 0a90 	vmov	s15, r0
 8015b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b74:	ee07 3a10 	vmov	s14, r3
 8015b78:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015b7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015b80:	ee07 1a90 	vmov	s15, r1
 8015b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b98:	bfcc      	ite	gt
 8015b9a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8015b9e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8015ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015ba6:	ee17 3a90 	vmov	r3, s15
 8015baa:	b218      	sxth	r0, r3
 8015bac:	4770      	bx	lr

08015bae <_ZN8touchgfx12TextProviderC1Ev>:
 8015bae:	b538      	push	{r3, r4, r5, lr}
 8015bb0:	2500      	movs	r5, #0
 8015bb2:	2302      	movs	r3, #2
 8015bb4:	4604      	mov	r4, r0
 8015bb6:	220e      	movs	r2, #14
 8015bb8:	7403      	strb	r3, [r0, #16]
 8015bba:	4629      	mov	r1, r5
 8015bbc:	6145      	str	r5, [r0, #20]
 8015bbe:	7605      	strb	r5, [r0, #24]
 8015bc0:	83c5      	strh	r5, [r0, #30]
 8015bc2:	8405      	strh	r5, [r0, #32]
 8015bc4:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015bc6:	8705      	strh	r5, [r0, #56]	; 0x38
 8015bc8:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8015bca:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8015bce:	e9c0 5500 	strd	r5, r5, [r0]
 8015bd2:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8015bd6:	304c      	adds	r0, #76	; 0x4c
 8015bd8:	f00f fb36 	bl	8025248 <memset>
 8015bdc:	2301      	movs	r3, #1
 8015bde:	4620      	mov	r0, r4
 8015be0:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8015be4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015be8:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8015bec:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8015bf0:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8015bf4:	f7f0 fa6a 	bl	80060cc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	bd38      	pop	{r3, r4, r5, pc}

08015bfc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8015bfc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015bfe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015c02:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8015c04:	fab0 f080 	clz	r0, r0
 8015c08:	0940      	lsrs	r0, r0, #5
 8015c0a:	4770      	bx	lr

08015c0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8015c0c:	b530      	push	{r4, r5, lr}
 8015c0e:	2500      	movs	r5, #0
 8015c10:	2401      	movs	r4, #1
 8015c12:	6843      	ldr	r3, [r0, #4]
 8015c14:	b913      	cbnz	r3, 8015c1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8015c16:	6803      	ldr	r3, [r0, #0]
 8015c18:	b313      	cbz	r3, 8015c60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015c1a:	6043      	str	r3, [r0, #4]
 8015c1c:	7e03      	ldrb	r3, [r0, #24]
 8015c1e:	b143      	cbz	r3, 8015c32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8015c20:	6943      	ldr	r3, [r0, #20]
 8015c22:	b12b      	cbz	r3, 8015c30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015c24:	881a      	ldrh	r2, [r3, #0]
 8015c26:	b11a      	cbz	r2, 8015c30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015c28:	1c9a      	adds	r2, r3, #2
 8015c2a:	6142      	str	r2, [r0, #20]
 8015c2c:	8818      	ldrh	r0, [r3, #0]
 8015c2e:	bd30      	pop	{r4, r5, pc}
 8015c30:	7605      	strb	r5, [r0, #24]
 8015c32:	6843      	ldr	r3, [r0, #4]
 8015c34:	8819      	ldrh	r1, [r3, #0]
 8015c36:	b199      	cbz	r1, 8015c60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015c38:	1c9a      	adds	r2, r3, #2
 8015c3a:	2902      	cmp	r1, #2
 8015c3c:	6042      	str	r2, [r0, #4]
 8015c3e:	d1f5      	bne.n	8015c2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8015c40:	7c03      	ldrb	r3, [r0, #16]
 8015c42:	2b01      	cmp	r3, #1
 8015c44:	d8e5      	bhi.n	8015c12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015c46:	1c5a      	adds	r2, r3, #1
 8015c48:	3302      	adds	r3, #2
 8015c4a:	7402      	strb	r2, [r0, #16]
 8015c4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8015c50:	6143      	str	r3, [r0, #20]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d0dd      	beq.n	8015c12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015c56:	881b      	ldrh	r3, [r3, #0]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d0da      	beq.n	8015c12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015c5c:	7604      	strb	r4, [r0, #24]
 8015c5e:	e7d8      	b.n	8015c12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015c60:	2000      	movs	r0, #0
 8015c62:	e7e4      	b.n	8015c2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8015c64:	6001      	str	r1, [r0, #0]
 8015c66:	2100      	movs	r1, #0
 8015c68:	b430      	push	{r4, r5}
 8015c6a:	6041      	str	r1, [r0, #4]
 8015c6c:	6815      	ldr	r5, [r2, #0]
 8015c6e:	6085      	str	r5, [r0, #8]
 8015c70:	6852      	ldr	r2, [r2, #4]
 8015c72:	6443      	str	r3, [r0, #68]	; 0x44
 8015c74:	9b02      	ldr	r3, [sp, #8]
 8015c76:	60c2      	str	r2, [r0, #12]
 8015c78:	7401      	strb	r1, [r0, #16]
 8015c7a:	6141      	str	r1, [r0, #20]
 8015c7c:	7601      	strb	r1, [r0, #24]
 8015c7e:	8701      	strh	r1, [r0, #56]	; 0x38
 8015c80:	8401      	strh	r1, [r0, #32]
 8015c82:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8015c86:	6483      	str	r3, [r0, #72]	; 0x48
 8015c88:	bc30      	pop	{r4, r5}
 8015c8a:	f7f0 ba1f 	b.w	80060cc <_ZN8touchgfx12TextProvider18initializeInternalEv>

08015c8e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8015c8e:	b408      	push	{r3}
 8015c90:	b510      	push	{r4, lr}
 8015c92:	b085      	sub	sp, #20
 8015c94:	ac07      	add	r4, sp, #28
 8015c96:	f854 3b04 	ldr.w	r3, [r4], #4
 8015c9a:	9300      	str	r3, [sp, #0]
 8015c9c:	4613      	mov	r3, r2
 8015c9e:	4622      	mov	r2, r4
 8015ca0:	9403      	str	r4, [sp, #12]
 8015ca2:	f7ff ffdf 	bl	8015c64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015ca6:	b005      	add	sp, #20
 8015ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cac:	b001      	add	sp, #4
 8015cae:	4770      	bx	lr

08015cb0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8015cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cb2:	4605      	mov	r5, r0
 8015cb4:	4608      	mov	r0, r1
 8015cb6:	b1f1      	cbz	r1, 8015cf6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8015cb8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8015cbc:	460b      	mov	r3, r1
 8015cbe:	f101 0708 	add.w	r7, r1, #8
 8015cc2:	4622      	mov	r2, r4
 8015cc4:	6818      	ldr	r0, [r3, #0]
 8015cc6:	3308      	adds	r3, #8
 8015cc8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015ccc:	4626      	mov	r6, r4
 8015cce:	42bb      	cmp	r3, r7
 8015cd0:	c603      	stmia	r6!, {r0, r1}
 8015cd2:	4634      	mov	r4, r6
 8015cd4:	d1f6      	bne.n	8015cc4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8015cd6:	6818      	ldr	r0, [r3, #0]
 8015cd8:	6030      	str	r0, [r6, #0]
 8015cda:	4610      	mov	r0, r2
 8015cdc:	889b      	ldrh	r3, [r3, #4]
 8015cde:	80b3      	strh	r3, [r6, #4]
 8015ce0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8015ce4:	015b      	lsls	r3, r3, #5
 8015ce6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015cea:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8015cee:	430b      	orrs	r3, r1
 8015cf0:	425b      	negs	r3, r3
 8015cf2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8015cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015cf8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8015cf8:	b538      	push	{r3, r4, r5, lr}
 8015cfa:	460c      	mov	r4, r1
 8015cfc:	6811      	ldr	r1, [r2, #0]
 8015cfe:	4610      	mov	r0, r2
 8015d00:	68cd      	ldr	r5, [r1, #12]
 8015d02:	4619      	mov	r1, r3
 8015d04:	47a8      	blx	r5
 8015d06:	2800      	cmp	r0, #0
 8015d08:	bf08      	it	eq
 8015d0a:	4620      	moveq	r0, r4
 8015d0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08015d10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8015d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d12:	4604      	mov	r4, r0
 8015d14:	4615      	mov	r5, r2
 8015d16:	4608      	mov	r0, r1
 8015d18:	b93a      	cbnz	r2, 8015d2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8015d1a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8015d1e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8015d22:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015d26:	4628      	mov	r0, r5
 8015d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d2a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8015d2e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8015d32:	8893      	ldrh	r3, [r2, #4]
 8015d34:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8015d38:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015d3c:	79ee      	ldrb	r6, [r5, #7]
 8015d3e:	4316      	orrs	r6, r2
 8015d40:	19da      	adds	r2, r3, r7
 8015d42:	b291      	uxth	r1, r2
 8015d44:	b2b7      	uxth	r7, r6
 8015d46:	291d      	cmp	r1, #29
 8015d48:	d87b      	bhi.n	8015e42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	10f6      	asrs	r6, r6, #3
 8015d4e:	408a      	lsls	r2, r1
 8015d50:	4974      	ldr	r1, [pc, #464]	; (8015f24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8015d52:	420a      	tst	r2, r1
 8015d54:	d12e      	bne.n	8015db4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8015d56:	f412 7f60 	tst.w	r2, #896	; 0x380
 8015d5a:	d072      	beq.n	8015e42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8015d5c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8015d60:	462b      	mov	r3, r5
 8015d62:	f105 0e08 	add.w	lr, r5, #8
 8015d66:	4615      	mov	r5, r2
 8015d68:	6818      	ldr	r0, [r3, #0]
 8015d6a:	3308      	adds	r3, #8
 8015d6c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015d70:	4694      	mov	ip, r2
 8015d72:	4573      	cmp	r3, lr
 8015d74:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015d78:	4662      	mov	r2, ip
 8015d7a:	d1f5      	bne.n	8015d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8015d7c:	6818      	ldr	r0, [r3, #0]
 8015d7e:	f8cc 0000 	str.w	r0, [ip]
 8015d82:	889b      	ldrh	r3, [r3, #4]
 8015d84:	f8ac 3004 	strh.w	r3, [ip, #4]
 8015d88:	b2b3      	uxth	r3, r6
 8015d8a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015d8e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8015d92:	1aca      	subs	r2, r1, r3
 8015d94:	1bcf      	subs	r7, r1, r7
 8015d96:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8015d9a:	b292      	uxth	r2, r2
 8015d9c:	1afb      	subs	r3, r7, r3
 8015d9e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8015da2:	10d2      	asrs	r2, r2, #3
 8015da4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8015da8:	4302      	orrs	r2, r0
 8015daa:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8015dae:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8015db2:	e7b8      	b.n	8015d26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8015db4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015db6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015dba:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8015dbc:	f640 6333 	movw	r3, #3635	; 0xe33
 8015dc0:	4299      	cmp	r1, r3
 8015dc2:	d110      	bne.n	8015de6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8015dc4:	6803      	ldr	r3, [r0, #0]
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	4798      	blx	r3
 8015dca:	7b41      	ldrb	r1, [r0, #13]
 8015dcc:	00cb      	lsls	r3, r1, #3
 8015dce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015dd2:	7a03      	ldrb	r3, [r0, #8]
 8015dd4:	0648      	lsls	r0, r1, #25
 8015dd6:	ea43 0302 	orr.w	r3, r3, r2
 8015dda:	bf44      	itt	mi
 8015ddc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015de0:	b21b      	sxthmi	r3, r3
 8015de2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015de6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8015dea:	462a      	mov	r2, r5
 8015dec:	f105 0c08 	add.w	ip, r5, #8
 8015df0:	443b      	add	r3, r7
 8015df2:	4433      	add	r3, r6
 8015df4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8015df8:	b29b      	uxth	r3, r3
 8015dfa:	4635      	mov	r5, r6
 8015dfc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015e00:	6810      	ldr	r0, [r2, #0]
 8015e02:	3208      	adds	r2, #8
 8015e04:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8015e08:	4637      	mov	r7, r6
 8015e0a:	4562      	cmp	r2, ip
 8015e0c:	c703      	stmia	r7!, {r0, r1}
 8015e0e:	463e      	mov	r6, r7
 8015e10:	d1f6      	bne.n	8015e00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8015e12:	6810      	ldr	r0, [r2, #0]
 8015e14:	6038      	str	r0, [r7, #0]
 8015e16:	8892      	ldrh	r2, [r2, #4]
 8015e18:	80ba      	strh	r2, [r7, #4]
 8015e1a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015e1e:	10db      	asrs	r3, r3, #3
 8015e20:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015e24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015e2c:	4313      	orrs	r3, r2
 8015e2e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8015e32:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8015e36:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8015e3a:	1a9b      	subs	r3, r3, r2
 8015e3c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8015e40:	e771      	b.n	8015d26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8015e42:	f023 0204 	bic.w	r2, r3, #4
 8015e46:	f640 611b 	movw	r1, #3611	; 0xe1b
 8015e4a:	428a      	cmp	r2, r1
 8015e4c:	d003      	beq.n	8015e56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8015e4e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8015e52:	4293      	cmp	r3, r2
 8015e54:	d120      	bne.n	8015e98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8015e56:	3b01      	subs	r3, #1
 8015e58:	4602      	mov	r2, r0
 8015e5a:	4629      	mov	r1, r5
 8015e5c:	4620      	mov	r0, r4
 8015e5e:	b29b      	uxth	r3, r3
 8015e60:	f7ff ff4a 	bl	8015cf8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015e64:	7b41      	ldrb	r1, [r0, #13]
 8015e66:	00cb      	lsls	r3, r1, #3
 8015e68:	0649      	lsls	r1, r1, #25
 8015e6a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015e6e:	7a03      	ldrb	r3, [r0, #8]
 8015e70:	ea43 0302 	orr.w	r3, r3, r2
 8015e74:	bf44      	itt	mi
 8015e76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015e7a:	b21b      	sxthmi	r3, r3
 8015e7c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015e80:	7b6b      	ldrb	r3, [r5, #13]
 8015e82:	7aaa      	ldrb	r2, [r5, #10]
 8015e84:	005b      	lsls	r3, r3, #1
 8015e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e8a:	4313      	orrs	r3, r2
 8015e8c:	115a      	asrs	r2, r3, #5
 8015e8e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8015e92:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015e96:	e035      	b.n	8015f04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8015e98:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8015e9c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8015ea0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8015ea4:	7a2a      	ldrb	r2, [r5, #8]
 8015ea6:	ea42 0201 	orr.w	r2, r2, r1
 8015eaa:	f640 6109 	movw	r1, #3593	; 0xe09
 8015eae:	bf1c      	itt	ne
 8015eb0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8015eb4:	b212      	sxthne	r2, r2
 8015eb6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8015eba:	f023 0210 	bic.w	r2, r3, #16
 8015ebe:	428a      	cmp	r2, r1
 8015ec0:	d003      	beq.n	8015eca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8015ec2:	f640 6213 	movw	r2, #3603	; 0xe13
 8015ec6:	4293      	cmp	r3, r2
 8015ec8:	d129      	bne.n	8015f1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8015eca:	7b6e      	ldrb	r6, [r5, #13]
 8015ecc:	4629      	mov	r1, r5
 8015ece:	0076      	lsls	r6, r6, #1
 8015ed0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015ed4:	7aae      	ldrb	r6, [r5, #10]
 8015ed6:	4316      	orrs	r6, r2
 8015ed8:	f640 6213 	movw	r2, #3603	; 0xe13
 8015edc:	4293      	cmp	r3, r2
 8015ede:	4602      	mov	r2, r0
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	bf16      	itet	ne
 8015ee4:	f103 33ff 	addne.w	r3, r3, #4294967295
 8015ee8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8015eec:	b29b      	uxthne	r3, r3
 8015eee:	f7ff ff03 	bl	8015cf8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015ef2:	7b43      	ldrb	r3, [r0, #13]
 8015ef4:	7a82      	ldrb	r2, [r0, #10]
 8015ef6:	005b      	lsls	r3, r3, #1
 8015ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015efc:	4313      	orrs	r3, r2
 8015efe:	1af6      	subs	r6, r6, r3
 8015f00:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8015f04:	7b69      	ldrb	r1, [r5, #13]
 8015f06:	00cb      	lsls	r3, r1, #3
 8015f08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015f0c:	7a2b      	ldrb	r3, [r5, #8]
 8015f0e:	4313      	orrs	r3, r2
 8015f10:	064a      	lsls	r2, r1, #25
 8015f12:	bf44      	itt	mi
 8015f14:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015f18:	b21b      	sxthmi	r3, r3
 8015f1a:	1bdb      	subs	r3, r3, r7
 8015f1c:	e747      	b.n	8015dae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8015f1e:	2300      	movs	r3, #0
 8015f20:	e7b7      	b.n	8015e92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8015f22:	bf00      	nop
 8015f24:	3fc00079 	.word	0x3fc00079

08015f28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8015f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	b942      	cbnz	r2, 8015f42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015f34:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8015f38:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8015f3c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015f40:	e047      	b.n	8015fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015f42:	7b51      	ldrb	r1, [r2, #13]
 8015f44:	8893      	ldrh	r3, [r2, #4]
 8015f46:	010d      	lsls	r5, r1, #4
 8015f48:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8015f4c:	79d5      	ldrb	r5, [r2, #7]
 8015f4e:	4305      	orrs	r5, r0
 8015f50:	2d04      	cmp	r5, #4
 8015f52:	bfcc      	ite	gt
 8015f54:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8015f58:	f04f 0e01 	movle.w	lr, #1
 8015f5c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8015f60:	f200 80ab 	bhi.w	80160ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8015f64:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8015f68:	4283      	cmp	r3, r0
 8015f6a:	d216      	bcs.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015f6c:	f240 605b 	movw	r0, #1627	; 0x65b
 8015f70:	4283      	cmp	r3, r0
 8015f72:	d859      	bhi.n	8016028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8015f74:	f240 6057 	movw	r0, #1623	; 0x657
 8015f78:	4283      	cmp	r3, r0
 8015f7a:	d20e      	bcs.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015f7c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8015f80:	d24a      	bcs.n	8016018 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8015f82:	f240 604e 	movw	r0, #1614	; 0x64e
 8015f86:	4283      	cmp	r3, r0
 8015f88:	d207      	bcs.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015f8a:	f240 601a 	movw	r0, #1562	; 0x61a
 8015f8e:	4283      	cmp	r3, r0
 8015f90:	d02a      	beq.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015f92:	d821      	bhi.n	8015fd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8015f94:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8015f98:	d35b      	bcc.n	8016052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015f9a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8015f9e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015fa2:	f040 80d0 	bne.w	8016146 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015fa6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8015faa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015fae:	f040 80ca 	bne.w	8016146 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015fb2:	00cb      	lsls	r3, r1, #3
 8015fb4:	0649      	lsls	r1, r1, #25
 8015fb6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015fba:	7a13      	ldrb	r3, [r2, #8]
 8015fbc:	ea43 0300 	orr.w	r3, r3, r0
 8015fc0:	bf44      	itt	mi
 8015fc2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015fc6:	b21b      	sxthmi	r3, r3
 8015fc8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015fcc:	1b5d      	subs	r5, r3, r5
 8015fce:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015fd2:	4610      	mov	r0, r2
 8015fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fd8:	f240 604b 	movw	r0, #1611	; 0x64b
 8015fdc:	4283      	cmp	r3, r0
 8015fde:	d338      	bcc.n	8016052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015fe0:	f240 604c 	movw	r0, #1612	; 0x64c
 8015fe4:	4283      	cmp	r3, r0
 8015fe6:	d9d8      	bls.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015fe8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8015fec:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8015ff0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015ff4:	f040 80f3 	bne.w	80161de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015ff8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015ffc:	f040 80ef 	bne.w	80161de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016000:	00cb      	lsls	r3, r1, #3
 8016002:	064e      	lsls	r6, r1, #25
 8016004:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016008:	7a13      	ldrb	r3, [r2, #8]
 801600a:	ea43 0300 	orr.w	r3, r3, r0
 801600e:	bf44      	itt	mi
 8016010:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016014:	b21b      	sxthmi	r3, r3
 8016016:	e7d9      	b.n	8015fcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016018:	f240 6054 	movw	r0, #1620	; 0x654
 801601c:	4283      	cmp	r3, r0
 801601e:	d8e3      	bhi.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016020:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016024:	d9e0      	bls.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016026:	e7b8      	b.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016028:	f240 6074 	movw	r0, #1652	; 0x674
 801602c:	4283      	cmp	r3, r0
 801602e:	d0b4      	beq.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016030:	d82d      	bhi.n	801608e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016032:	f240 605e 	movw	r0, #1630	; 0x65e
 8016036:	4283      	cmp	r3, r0
 8016038:	d804      	bhi.n	8016044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801603a:	f240 605d 	movw	r0, #1629	; 0x65d
 801603e:	4283      	cmp	r3, r0
 8016040:	d3d2      	bcc.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016042:	e7aa      	b.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016044:	f240 605f 	movw	r0, #1631	; 0x65f
 8016048:	4283      	cmp	r3, r0
 801604a:	d0cd      	beq.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801604c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8016050:	d0a3      	beq.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016052:	00cb      	lsls	r3, r1, #3
 8016054:	0649      	lsls	r1, r1, #25
 8016056:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801605a:	7a13      	ldrb	r3, [r2, #8]
 801605c:	ea43 0300 	orr.w	r3, r3, r0
 8016060:	bf44      	itt	mi
 8016062:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016066:	b21b      	sxthmi	r3, r3
 8016068:	1b5d      	subs	r5, r3, r5
 801606a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801606e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016072:	7b53      	ldrb	r3, [r2, #13]
 8016074:	015b      	lsls	r3, r3, #5
 8016076:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801607a:	7993      	ldrb	r3, [r2, #6]
 801607c:	430b      	orrs	r3, r1
 801607e:	2105      	movs	r1, #5
 8016080:	005b      	lsls	r3, r3, #1
 8016082:	fb93 f3f1 	sdiv	r3, r3, r1
 8016086:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801608a:	440b      	add	r3, r1
 801608c:	e756      	b.n	8015f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801608e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8016092:	4283      	cmp	r3, r0
 8016094:	d809      	bhi.n	80160aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016096:	f240 60df 	movw	r0, #1759	; 0x6df
 801609a:	4283      	cmp	r3, r0
 801609c:	f4bf af7d 	bcs.w	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80160a0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80160a4:	2b05      	cmp	r3, #5
 80160a6:	d8d4      	bhi.n	8016052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80160a8:	e777      	b.n	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80160aa:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80160ae:	4283      	cmp	r3, r0
 80160b0:	d09a      	beq.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80160b2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80160b6:	4283      	cmp	r3, r0
 80160b8:	e7ca      	b.n	8016050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80160ba:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80160be:	d22b      	bcs.n	8016118 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80160c0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80160c4:	4283      	cmp	r3, r0
 80160c6:	d28f      	bcs.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80160c8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80160cc:	4283      	cmp	r3, r0
 80160ce:	d816      	bhi.n	80160fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80160d0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80160d4:	4283      	cmp	r3, r0
 80160d6:	f4bf af60 	bcs.w	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80160da:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80160de:	4283      	cmp	r3, r0
 80160e0:	d80a      	bhi.n	80160f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80160e2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80160e6:	4283      	cmp	r3, r0
 80160e8:	f4bf af57 	bcs.w	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80160ec:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80160f0:	4283      	cmp	r3, r0
 80160f2:	f43f af79 	beq.w	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80160f6:	e7ac      	b.n	8016052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80160f8:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80160fc:	e7f8      	b.n	80160f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80160fe:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8016102:	4283      	cmp	r3, r0
 8016104:	d802      	bhi.n	801610c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016106:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801610a:	e798      	b.n	801603e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801610c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8016110:	4283      	cmp	r3, r0
 8016112:	f47f af42 	bne.w	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016116:	e767      	b.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016118:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801611c:	4283      	cmp	r3, r0
 801611e:	f43f af63 	beq.w	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016122:	d802      	bhi.n	801612a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016124:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8016128:	e7f2      	b.n	8016110 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801612a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801612e:	4283      	cmp	r3, r0
 8016130:	d805      	bhi.n	801613e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8016132:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8016136:	4283      	cmp	r3, r0
 8016138:	f4ff af2f 	bcc.w	8015f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801613c:	e754      	b.n	8015fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801613e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8016142:	4283      	cmp	r3, r0
 8016144:	e7af      	b.n	80160a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016146:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801614a:	4617      	mov	r7, r2
 801614c:	f102 0808 	add.w	r8, r2, #8
 8016150:	4666      	mov	r6, ip
 8016152:	6838      	ldr	r0, [r7, #0]
 8016154:	3708      	adds	r7, #8
 8016156:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801615a:	46e6      	mov	lr, ip
 801615c:	4547      	cmp	r7, r8
 801615e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016162:	46f4      	mov	ip, lr
 8016164:	d1f5      	bne.n	8016152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8016166:	6838      	ldr	r0, [r7, #0]
 8016168:	f8ce 0000 	str.w	r0, [lr]
 801616c:	88b9      	ldrh	r1, [r7, #4]
 801616e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8016172:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8016176:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801617a:	d009      	beq.n	8016190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801617c:	7b51      	ldrb	r1, [r2, #13]
 801617e:	7992      	ldrb	r2, [r2, #6]
 8016180:	0149      	lsls	r1, r1, #5
 8016182:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016186:	4311      	orrs	r1, r2
 8016188:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801618c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016190:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016194:	b2ad      	uxth	r5, r5
 8016196:	d00d      	beq.n	80161b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8016198:	442b      	add	r3, r5
 801619a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801619e:	b29b      	uxth	r3, r3
 80161a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80161a4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80161a8:	10db      	asrs	r3, r3, #3
 80161aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80161ae:	4313      	orrs	r3, r2
 80161b0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80161b4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80161b8:	00cb      	lsls	r3, r1, #3
 80161ba:	064f      	lsls	r7, r1, #25
 80161bc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80161c0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80161c4:	ea43 0302 	orr.w	r3, r3, r2
 80161c8:	bf44      	itt	mi
 80161ca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80161ce:	b21b      	sxthmi	r3, r3
 80161d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80161d4:	1b5b      	subs	r3, r3, r5
 80161d6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80161da:	4632      	mov	r2, r6
 80161dc:	e6f9      	b.n	8015fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80161de:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80161e2:	4617      	mov	r7, r2
 80161e4:	f102 0908 	add.w	r9, r2, #8
 80161e8:	4666      	mov	r6, ip
 80161ea:	6838      	ldr	r0, [r7, #0]
 80161ec:	3708      	adds	r7, #8
 80161ee:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80161f2:	46e0      	mov	r8, ip
 80161f4:	454f      	cmp	r7, r9
 80161f6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80161fa:	46c4      	mov	ip, r8
 80161fc:	d1f5      	bne.n	80161ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80161fe:	6838      	ldr	r0, [r7, #0]
 8016200:	f8c8 0000 	str.w	r0, [r8]
 8016204:	88b9      	ldrh	r1, [r7, #4]
 8016206:	f8a8 1004 	strh.w	r1, [r8, #4]
 801620a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801620e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016212:	d009      	beq.n	8016228 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8016214:	7b51      	ldrb	r1, [r2, #13]
 8016216:	7992      	ldrb	r2, [r2, #6]
 8016218:	0149      	lsls	r1, r1, #5
 801621a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801621e:	4311      	orrs	r1, r2
 8016220:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016224:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016228:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801622c:	d00e      	beq.n	801624c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801622e:	eba3 030e 	sub.w	r3, r3, lr
 8016232:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016236:	b29b      	uxth	r3, r3
 8016238:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801623c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016240:	10db      	asrs	r3, r3, #3
 8016242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016246:	4313      	orrs	r3, r2
 8016248:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801624c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8016250:	00cb      	lsls	r3, r1, #3
 8016252:	0648      	lsls	r0, r1, #25
 8016254:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016258:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801625c:	ea43 0302 	orr.w	r3, r3, r2
 8016260:	bf44      	itt	mi
 8016262:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016266:	b21b      	sxthmi	r3, r3
 8016268:	1b5d      	subs	r5, r3, r5
 801626a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801626e:	e7b4      	b.n	80161da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016274:	461e      	mov	r6, r3
 8016276:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8016278:	4604      	mov	r4, r0
 801627a:	4617      	mov	r7, r2
 801627c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016280:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8016284:	f7ef fee0 	bl	8006048 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016288:	4605      	mov	r5, r0
 801628a:	b918      	cbnz	r0, 8016294 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801628c:	6030      	str	r0, [r6, #0]
 801628e:	4628      	mov	r0, r5
 8016290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016294:	683b      	ldr	r3, [r7, #0]
 8016296:	4601      	mov	r1, r0
 8016298:	4638      	mov	r0, r7
 801629a:	68db      	ldr	r3, [r3, #12]
 801629c:	4798      	blx	r3
 801629e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80162a2:	4602      	mov	r2, r0
 80162a4:	6030      	str	r0, [r6, #0]
 80162a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80162aa:	d213      	bcs.n	80162d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80162ac:	4643      	mov	r3, r8
 80162ae:	4639      	mov	r1, r7
 80162b0:	4620      	mov	r0, r4
 80162b2:	f7ff fe39 	bl	8015f28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80162b6:	6030      	str	r0, [r6, #0]
 80162b8:	6833      	ldr	r3, [r6, #0]
 80162ba:	b143      	cbz	r3, 80162ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80162bc:	7b5a      	ldrb	r2, [r3, #13]
 80162be:	7a9b      	ldrb	r3, [r3, #10]
 80162c0:	0052      	lsls	r2, r2, #1
 80162c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80162c6:	4313      	orrs	r3, r2
 80162c8:	bf0c      	ite	eq
 80162ca:	2301      	moveq	r3, #1
 80162cc:	2300      	movne	r3, #0
 80162ce:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80162d2:	e7dc      	b.n	801628e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80162d4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80162d8:	b29b      	uxth	r3, r3
 80162da:	2b7f      	cmp	r3, #127	; 0x7f
 80162dc:	d804      	bhi.n	80162e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80162de:	4639      	mov	r1, r7
 80162e0:	4620      	mov	r0, r4
 80162e2:	f7ff fd15 	bl	8015d10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80162e6:	e7e6      	b.n	80162b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80162e8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d0e3      	beq.n	80162b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80162f0:	f640 1302 	movw	r3, #2306	; 0x902
 80162f4:	429d      	cmp	r5, r3
 80162f6:	d1df      	bne.n	80162b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80162f8:	4601      	mov	r1, r0
 80162fa:	4620      	mov	r0, r4
 80162fc:	f7ff fcd8 	bl	8015cb0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016300:	e7d9      	b.n	80162b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08016302 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8016302:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016306:	461e      	mov	r6, r3
 8016308:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801630a:	4604      	mov	r4, r0
 801630c:	4617      	mov	r7, r2
 801630e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016312:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8016316:	f7ef fe97 	bl	8006048 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801631a:	4605      	mov	r5, r0
 801631c:	b918      	cbnz	r0, 8016326 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801631e:	6030      	str	r0, [r6, #0]
 8016320:	4628      	mov	r0, r5
 8016322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	4601      	mov	r1, r0
 801632a:	4638      	mov	r0, r7
 801632c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8016330:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016334:	47c8      	blx	r9
 8016336:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801633a:	4602      	mov	r2, r0
 801633c:	6030      	str	r0, [r6, #0]
 801633e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016342:	d213      	bcs.n	801636c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8016344:	4643      	mov	r3, r8
 8016346:	4639      	mov	r1, r7
 8016348:	4620      	mov	r0, r4
 801634a:	f7ff fded 	bl	8015f28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801634e:	6030      	str	r0, [r6, #0]
 8016350:	6833      	ldr	r3, [r6, #0]
 8016352:	b143      	cbz	r3, 8016366 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8016354:	7b5a      	ldrb	r2, [r3, #13]
 8016356:	7a9b      	ldrb	r3, [r3, #10]
 8016358:	0052      	lsls	r2, r2, #1
 801635a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801635e:	4313      	orrs	r3, r2
 8016360:	bf0c      	ite	eq
 8016362:	2301      	moveq	r3, #1
 8016364:	2300      	movne	r3, #0
 8016366:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801636a:	e7d9      	b.n	8016320 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801636c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8016370:	b29b      	uxth	r3, r3
 8016372:	2b7f      	cmp	r3, #127	; 0x7f
 8016374:	d804      	bhi.n	8016380 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8016376:	4639      	mov	r1, r7
 8016378:	4620      	mov	r0, r4
 801637a:	f7ff fcc9 	bl	8015d10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801637e:	e7e6      	b.n	801634e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8016380:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8016384:	2b00      	cmp	r3, #0
 8016386:	d0e3      	beq.n	8016350 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016388:	f640 1302 	movw	r3, #2306	; 0x902
 801638c:	429d      	cmp	r5, r3
 801638e:	d1df      	bne.n	8016350 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8016390:	4601      	mov	r1, r0
 8016392:	4620      	mov	r0, r4
 8016394:	f7ff fc8c 	bl	8015cb0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016398:	e7d9      	b.n	801634e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801639a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801639a:	b510      	push	{r4, lr}
 801639c:	4604      	mov	r4, r0
 801639e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80163a2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80163a4:	b1e1      	cbz	r1, 80163e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80163a6:	2b0a      	cmp	r3, #10
 80163a8:	d02d      	beq.n	8016406 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80163aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80163ac:	3901      	subs	r1, #1
 80163ae:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80163b2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80163b4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80163b8:	1c51      	adds	r1, r2, #1
 80163ba:	b289      	uxth	r1, r1
 80163bc:	2901      	cmp	r1, #1
 80163be:	bf8a      	itet	hi
 80163c0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80163c4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80163c6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80163c8:	1c5a      	adds	r2, r3, #1
 80163ca:	8722      	strh	r2, [r4, #56]	; 0x38
 80163cc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80163ce:	4413      	add	r3, r2
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	2b09      	cmp	r3, #9
 80163d4:	bf88      	it	hi
 80163d6:	3b0a      	subhi	r3, #10
 80163d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80163dc:	8458      	strh	r0, [r3, #34]	; 0x22
 80163de:	e7de      	b.n	801639e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80163e0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80163e2:	2b0a      	cmp	r3, #10
 80163e4:	d00f      	beq.n	8016406 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80163e6:	4620      	mov	r0, r4
 80163e8:	f7ff fc10 	bl	8015c0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80163ec:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80163ee:	1c5a      	adds	r2, r3, #1
 80163f0:	8722      	strh	r2, [r4, #56]	; 0x38
 80163f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80163f4:	4413      	add	r3, r2
 80163f6:	b29b      	uxth	r3, r3
 80163f8:	2b09      	cmp	r3, #9
 80163fa:	bf88      	it	hi
 80163fc:	3b0a      	subhi	r3, #10
 80163fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016402:	8458      	strh	r0, [r3, #34]	; 0x22
 8016404:	e7ec      	b.n	80163e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016406:	bd10      	pop	{r4, pc}

08016408 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8016408:	b538      	push	{r3, r4, r5, lr}
 801640a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801640c:	4604      	mov	r4, r0
 801640e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8016412:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8016414:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8016416:	3a01      	subs	r2, #1
 8016418:	8702      	strh	r2, [r0, #56]	; 0x38
 801641a:	1c5a      	adds	r2, r3, #1
 801641c:	b292      	uxth	r2, r2
 801641e:	2a09      	cmp	r2, #9
 8016420:	bf8a      	itet	hi
 8016422:	3b09      	subhi	r3, #9
 8016424:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8016426:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8016428:	f7ff ffb7 	bl	801639a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801642c:	8c23      	ldrh	r3, [r4, #32]
 801642e:	2b01      	cmp	r3, #1
 8016430:	bf9c      	itt	ls
 8016432:	3301      	addls	r3, #1
 8016434:	8423      	strhls	r3, [r4, #32]
 8016436:	8be3      	ldrh	r3, [r4, #30]
 8016438:	b90b      	cbnz	r3, 801643e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801643a:	2302      	movs	r3, #2
 801643c:	83e3      	strh	r3, [r4, #30]
 801643e:	8be3      	ldrh	r3, [r4, #30]
 8016440:	4628      	mov	r0, r5
 8016442:	3b01      	subs	r3, #1
 8016444:	b29b      	uxth	r3, r3
 8016446:	83e3      	strh	r3, [r4, #30]
 8016448:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801644c:	8365      	strh	r5, [r4, #26]
 801644e:	bd38      	pop	{r3, r4, r5, pc}

08016450 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8016450:	428a      	cmp	r2, r1
 8016452:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016456:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8016458:	d932      	bls.n	80164c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801645a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801645c:	1a54      	subs	r4, r2, r1
 801645e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8016462:	19ee      	adds	r6, r5, r7
 8016464:	fa1f fe84 	uxth.w	lr, r4
 8016468:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801646c:	3e01      	subs	r6, #1
 801646e:	b2b4      	uxth	r4, r6
 8016470:	eba4 090e 	sub.w	r9, r4, lr
 8016474:	fa1f f989 	uxth.w	r9, r9
 8016478:	2c09      	cmp	r4, #9
 801647a:	4626      	mov	r6, r4
 801647c:	bf88      	it	hi
 801647e:	f1a4 060a 	subhi.w	r6, r4, #10
 8016482:	f1bc 0f00 	cmp.w	ip, #0
 8016486:	f104 34ff 	add.w	r4, r4, #4294967295
 801648a:	bf08      	it	eq
 801648c:	f04f 0c02 	moveq.w	ip, #2
 8016490:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016494:	b2a4      	uxth	r4, r4
 8016496:	f10c 3cff 	add.w	ip, ip, #4294967295
 801649a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801649e:	454c      	cmp	r4, r9
 80164a0:	fa1f fc8c 	uxth.w	ip, ip
 80164a4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80164a8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80164ac:	d1e4      	bne.n	8016478 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80164ae:	eba5 050e 	sub.w	r5, r5, lr
 80164b2:	eb0e 0408 	add.w	r4, lr, r8
 80164b6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80164ba:	8705      	strh	r5, [r0, #56]	; 0x38
 80164bc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80164c0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80164c2:	250a      	movs	r5, #10
 80164c4:	1a64      	subs	r4, r4, r1
 80164c6:	4439      	add	r1, r7
 80164c8:	b289      	uxth	r1, r1
 80164ca:	8704      	strh	r4, [r0, #56]	; 0x38
 80164cc:	2909      	cmp	r1, #9
 80164ce:	bf88      	it	hi
 80164d0:	390a      	subhi	r1, #10
 80164d2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80164d4:	b18a      	cbz	r2, 80164fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80164d6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80164d8:	3a01      	subs	r2, #1
 80164da:	3101      	adds	r1, #1
 80164dc:	b292      	uxth	r2, r2
 80164de:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80164e2:	8701      	strh	r1, [r0, #56]	; 0x38
 80164e4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80164e6:	b901      	cbnz	r1, 80164ea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80164e8:	86c5      	strh	r5, [r0, #54]	; 0x36
 80164ea:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80164ec:	3901      	subs	r1, #1
 80164ee:	b289      	uxth	r1, r1
 80164f0:	86c1      	strh	r1, [r0, #54]	; 0x36
 80164f2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80164f6:	844c      	strh	r4, [r1, #34]	; 0x22
 80164f8:	e7ec      	b.n	80164d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80164fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164fe:	f7ff bf4c 	b.w	801639a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08016502 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016502:	b570      	push	{r4, r5, r6, lr}
 8016504:	2500      	movs	r5, #0
 8016506:	4295      	cmp	r5, r2
 8016508:	d011      	beq.n	801652e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801650a:	8bc4      	ldrh	r4, [r0, #30]
 801650c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8016510:	4414      	add	r4, r2
 8016512:	3c01      	subs	r4, #1
 8016514:	1b64      	subs	r4, r4, r5
 8016516:	b2a4      	uxth	r4, r4
 8016518:	2c01      	cmp	r4, #1
 801651a:	bf88      	it	hi
 801651c:	3c02      	subhi	r4, #2
 801651e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016522:	8b64      	ldrh	r4, [r4, #26]
 8016524:	42b4      	cmp	r4, r6
 8016526:	d117      	bne.n	8016558 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8016528:	3501      	adds	r5, #1
 801652a:	b2ad      	uxth	r5, r5
 801652c:	e7eb      	b.n	8016506 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801652e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016532:	2400      	movs	r4, #0
 8016534:	4413      	add	r3, r2
 8016536:	b2a2      	uxth	r2, r4
 8016538:	429a      	cmp	r2, r3
 801653a:	da0f      	bge.n	801655c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801653c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801653e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8016542:	3401      	adds	r4, #1
 8016544:	4432      	add	r2, r6
 8016546:	b292      	uxth	r2, r2
 8016548:	2a09      	cmp	r2, #9
 801654a:	bf88      	it	hi
 801654c:	3a0a      	subhi	r2, #10
 801654e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8016552:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8016554:	42aa      	cmp	r2, r5
 8016556:	d0ee      	beq.n	8016536 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8016558:	2000      	movs	r0, #0
 801655a:	bd70      	pop	{r4, r5, r6, pc}
 801655c:	2001      	movs	r0, #1
 801655e:	e7fc      	b.n	801655a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08016560 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8016560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016564:	4605      	mov	r5, r0
 8016566:	4616      	mov	r6, r2
 8016568:	1c8c      	adds	r4, r1, #2
 801656a:	8809      	ldrh	r1, [r1, #0]
 801656c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8016570:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016574:	42b3      	cmp	r3, r6
 8016576:	d124      	bne.n	80165c2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8016578:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801657c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8016580:	f001 070f 	and.w	r7, r1, #15
 8016584:	4652      	mov	r2, sl
 8016586:	f8cd 8000 	str.w	r8, [sp]
 801658a:	464b      	mov	r3, r9
 801658c:	4621      	mov	r1, r4
 801658e:	4628      	mov	r0, r5
 8016590:	f7ff ffb7 	bl	8016502 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016594:	4683      	mov	fp, r0
 8016596:	b168      	cbz	r0, 80165b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016598:	eb0a 0109 	add.w	r1, sl, r9
 801659c:	463a      	mov	r2, r7
 801659e:	4628      	mov	r0, r5
 80165a0:	4441      	add	r1, r8
 80165a2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80165a6:	4649      	mov	r1, r9
 80165a8:	f7ff ff52 	bl	8016450 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80165ac:	4658      	mov	r0, fp
 80165ae:	b003      	add	sp, #12
 80165b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165b4:	eb07 010a 	add.w	r1, r7, sl
 80165b8:	4449      	add	r1, r9
 80165ba:	4441      	add	r1, r8
 80165bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80165c0:	e7d2      	b.n	8016568 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80165c2:	f04f 0b00 	mov.w	fp, #0
 80165c6:	e7f1      	b.n	80165ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080165c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80165c8:	b570      	push	{r4, r5, r6, lr}
 80165ca:	8810      	ldrh	r0, [r2, #0]
 80165cc:	4298      	cmp	r0, r3
 80165ce:	d817      	bhi.n	8016600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80165d0:	1e48      	subs	r0, r1, #1
 80165d2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80165d6:	4298      	cmp	r0, r3
 80165d8:	d312      	bcc.n	8016600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80165da:	2400      	movs	r4, #0
 80165dc:	428c      	cmp	r4, r1
 80165de:	d20f      	bcs.n	8016600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80165e0:	1860      	adds	r0, r4, r1
 80165e2:	1040      	asrs	r0, r0, #1
 80165e4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80165e8:	0085      	lsls	r5, r0, #2
 80165ea:	42b3      	cmp	r3, r6
 80165ec:	d902      	bls.n	80165f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80165ee:	3001      	adds	r0, #1
 80165f0:	b284      	uxth	r4, r0
 80165f2:	e7f3      	b.n	80165dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80165f4:	d201      	bcs.n	80165fa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80165f6:	b281      	uxth	r1, r0
 80165f8:	e7f0      	b.n	80165dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80165fa:	442a      	add	r2, r5
 80165fc:	8850      	ldrh	r0, [r2, #2]
 80165fe:	bd70      	pop	{r4, r5, r6, pc}
 8016600:	2000      	movs	r0, #0
 8016602:	e7fc      	b.n	80165fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08016604 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8016604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016608:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801660a:	4604      	mov	r4, r0
 801660c:	260b      	movs	r6, #11
 801660e:	886f      	ldrh	r7, [r5, #2]
 8016610:	087f      	lsrs	r7, r7, #1
 8016612:	3e01      	subs	r6, #1
 8016614:	d013      	beq.n	801663e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8016616:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8016618:	462a      	mov	r2, r5
 801661a:	4639      	mov	r1, r7
 801661c:	4620      	mov	r0, r4
 801661e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016622:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8016626:	4643      	mov	r3, r8
 8016628:	f7ff ffce 	bl	80165c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801662c:	b138      	cbz	r0, 801663e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801662e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8016632:	4642      	mov	r2, r8
 8016634:	4620      	mov	r0, r4
 8016636:	f7ff ff93 	bl	8016560 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801663a:	2800      	cmp	r0, #0
 801663c:	d1e9      	bne.n	8016612 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016644 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8016644:	b570      	push	{r4, r5, r6, lr}
 8016646:	694a      	ldr	r2, [r1, #20]
 8016648:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801664a:	684b      	ldr	r3, [r1, #4]
 801664c:	1b54      	subs	r4, r2, r5
 801664e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8016650:	f000 8106 	beq.w	8016860 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8016654:	1b9b      	subs	r3, r3, r6
 8016656:	d003      	beq.n	8016660 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016658:	4363      	muls	r3, r4
 801665a:	2210      	movs	r2, #16
 801665c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016660:	680c      	ldr	r4, [r1, #0]
 8016662:	698a      	ldr	r2, [r1, #24]
 8016664:	1b65      	subs	r5, r4, r5
 8016666:	f000 80fd 	beq.w	8016864 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801666a:	1b92      	subs	r2, r2, r6
 801666c:	d003      	beq.n	8016676 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801666e:	436a      	muls	r2, r5
 8016670:	2410      	movs	r4, #16
 8016672:	fb92 f2f4 	sdiv	r2, r2, r4
 8016676:	1a9b      	subs	r3, r3, r2
 8016678:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80168a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801667c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016680:	460a      	mov	r2, r1
 8016682:	ee07 3a90 	vmov	s15, r3
 8016686:	f100 040c 	add.w	r4, r0, #12
 801668a:	4603      	mov	r3, r0
 801668c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016690:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016694:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8016698:	eeb1 6a43 	vneg.f32	s12, s6
 801669c:	edd2 7a02 	vldr	s15, [r2, #8]
 80166a0:	3214      	adds	r2, #20
 80166a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80166a6:	ece3 6a01 	vstmia	r3!, {s13}
 80166aa:	429c      	cmp	r4, r3
 80166ac:	ed52 7a02 	vldr	s15, [r2, #-8]
 80166b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80166b4:	edc3 7a02 	vstr	s15, [r3, #8]
 80166b8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80166bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80166c0:	edc3 7a05 	vstr	s15, [r3, #20]
 80166c4:	d1ea      	bne.n	801669c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80166c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80166c8:	698b      	ldr	r3, [r1, #24]
 80166ca:	edd0 4a02 	vldr	s9, [r0, #8]
 80166ce:	1a9b      	subs	r3, r3, r2
 80166d0:	edd0 3a00 	vldr	s7, [r0]
 80166d4:	edd0 6a01 	vldr	s13, [r0, #4]
 80166d8:	ee07 3a90 	vmov	s15, r3
 80166dc:	684b      	ldr	r3, [r1, #4]
 80166de:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80166e2:	ed90 5a05 	vldr	s10, [r0, #20]
 80166e6:	1a9b      	subs	r3, r3, r2
 80166e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166ec:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80166f0:	ed90 2a03 	vldr	s4, [r0, #12]
 80166f4:	ee07 3a10 	vmov	s14, r3
 80166f8:	edd0 5a04 	vldr	s11, [r0, #16]
 80166fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016700:	ed90 1a07 	vldr	s2, [r0, #28]
 8016704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016708:	edd0 2a06 	vldr	s5, [r0, #24]
 801670c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8016710:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8016714:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016718:	ee32 5a45 	vsub.f32	s10, s4, s10
 801671c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016720:	ee67 7a83 	vmul.f32	s15, s15, s6
 8016724:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8016728:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801672a:	694a      	ldr	r2, [r1, #20]
 801672c:	1b13      	subs	r3, r2, r4
 801672e:	ee07 3a10 	vmov	s14, r3
 8016732:	680b      	ldr	r3, [r1, #0]
 8016734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016738:	1b1b      	subs	r3, r3, r4
 801673a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801673e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8016742:	ee07 3a10 	vmov	s14, r3
 8016746:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801674a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801674e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016752:	ee64 4a86 	vmul.f32	s9, s9, s12
 8016756:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801675a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801675c:	698b      	ldr	r3, [r1, #24]
 801675e:	1a9b      	subs	r3, r3, r2
 8016760:	ee06 3a90 	vmov	s13, r3
 8016764:	684b      	ldr	r3, [r1, #4]
 8016766:	1a9b      	subs	r3, r3, r2
 8016768:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801676c:	ee07 3a10 	vmov	s14, r3
 8016770:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016774:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016778:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801677c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016780:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016784:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016788:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801678c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801678e:	694a      	ldr	r2, [r1, #20]
 8016790:	1b13      	subs	r3, r2, r4
 8016792:	ee07 3a10 	vmov	s14, r3
 8016796:	680b      	ldr	r3, [r1, #0]
 8016798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801679c:	1b1b      	subs	r3, r3, r4
 801679e:	ee27 7a04 	vmul.f32	s14, s14, s8
 80167a2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80167a6:	ee07 3a10 	vmov	s14, r3
 80167aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80167ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 80167b2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80167b6:	edd0 5a08 	vldr	s11, [r0, #32]
 80167ba:	ee31 1a65 	vsub.f32	s2, s2, s11
 80167be:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80167c2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80167c6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80167ca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80167cc:	698b      	ldr	r3, [r1, #24]
 80167ce:	1a9b      	subs	r3, r3, r2
 80167d0:	ee07 3a10 	vmov	s14, r3
 80167d4:	684b      	ldr	r3, [r1, #4]
 80167d6:	1a9b      	subs	r3, r3, r2
 80167d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80167dc:	ee01 3a90 	vmov	s3, r3
 80167e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80167e4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80167e8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80167ec:	ee61 1a84 	vmul.f32	s3, s3, s8
 80167f0:	eea1 7a21 	vfma.f32	s14, s2, s3
 80167f4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80167f8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80167fc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80167fe:	694a      	ldr	r2, [r1, #20]
 8016800:	1b13      	subs	r3, r2, r4
 8016802:	ee03 3a10 	vmov	s6, r3
 8016806:	680b      	ldr	r3, [r1, #0]
 8016808:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801680c:	1b1b      	subs	r3, r3, r4
 801680e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8016812:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8016816:	ee03 3a10 	vmov	s6, r3
 801681a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801681e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8016822:	eee1 5a04 	vfma.f32	s11, s2, s8
 8016826:	ee25 6a86 	vmul.f32	s12, s11, s12
 801682a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801682e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8016832:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8016836:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801683a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801683e:	dd13      	ble.n	8016868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8016840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016844:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8016848:	63c3      	str	r3, [r0, #60]	; 0x3c
 801684a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801684e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016856:	dd15      	ble.n	8016884 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8016858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801685c:	6403      	str	r3, [r0, #64]	; 0x40
 801685e:	bd70      	pop	{r4, r5, r6, pc}
 8016860:	4623      	mov	r3, r4
 8016862:	e6fd      	b.n	8016660 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016864:	462a      	mov	r2, r5
 8016866:	e706      	b.n	8016676 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016868:	d502      	bpl.n	8016870 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801686a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801686e:	e7e9      	b.n	8016844 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8016870:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016874:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016878:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016880:	dade      	bge.n	8016840 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8016882:	e7f2      	b.n	801686a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016884:	d502      	bpl.n	801688c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8016886:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801688a:	e7e7      	b.n	801685c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801688c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8016890:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016894:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689c:	dadc      	bge.n	8016858 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801689e:	e7f2      	b.n	8016886 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80168a0:	3d800000 	.word	0x3d800000

080168a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80168a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168a8:	2714      	movs	r7, #20
 80168aa:	435f      	muls	r7, r3
 80168ac:	eb02 0c07 	add.w	ip, r2, r7
 80168b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80168b4:	f115 0e0f 	adds.w	lr, r5, #15
 80168b8:	f100 80a2 	bmi.w	8016a00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80168bc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80168c0:	9c08      	ldr	r4, [sp, #32]
 80168c2:	2614      	movs	r6, #20
 80168c4:	f8c0 e014 	str.w	lr, [r0, #20]
 80168c8:	4366      	muls	r6, r4
 80168ca:	eb02 0806 	add.w	r8, r2, r6
 80168ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80168d2:	f115 040f 	adds.w	r4, r5, #15
 80168d6:	f100 809f 	bmi.w	8016a18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80168da:	1124      	asrs	r4, r4, #4
 80168dc:	eba4 040e 	sub.w	r4, r4, lr
 80168e0:	6184      	str	r4, [r0, #24]
 80168e2:	2c00      	cmp	r4, #0
 80168e4:	f000 808a 	beq.w	80169fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80168e8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80168ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80168f0:	5995      	ldr	r5, [r2, r6]
 80168f2:	eba4 0809 	sub.w	r8, r4, r9
 80168f6:	59d4      	ldr	r4, [r2, r7]
 80168f8:	eba5 0a04 	sub.w	sl, r5, r4
 80168fc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8016900:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8016904:	fb0e fe05 	mul.w	lr, lr, r5
 8016908:	fb0a ee19 	mls	lr, sl, r9, lr
 801690c:	fb08 e404 	mla	r4, r8, r4, lr
 8016910:	3c01      	subs	r4, #1
 8016912:	19a4      	adds	r4, r4, r6
 8016914:	f100 808c 	bmi.w	8016a30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8016918:	fb94 fef6 	sdiv	lr, r4, r6
 801691c:	fb06 441e 	mls	r4, r6, lr, r4
 8016920:	f8c0 e000 	str.w	lr, [r0]
 8016924:	6104      	str	r4, [r0, #16]
 8016926:	2d00      	cmp	r5, #0
 8016928:	f2c0 8095 	blt.w	8016a56 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801692c:	fb95 f4f6 	sdiv	r4, r5, r6
 8016930:	fb06 5514 	mls	r5, r6, r4, r5
 8016934:	6044      	str	r4, [r0, #4]
 8016936:	6085      	str	r5, [r0, #8]
 8016938:	60c6      	str	r6, [r0, #12]
 801693a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801693e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8016942:	6945      	ldr	r5, [r0, #20]
 8016944:	59d2      	ldr	r2, [r2, r7]
 8016946:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801694a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8016a78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801694e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8016952:	ee07 4a10 	vmov	s14, r4
 8016956:	6804      	ldr	r4, [r0, #0]
 8016958:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801695c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016960:	ee07 2a90 	vmov	s15, r2
 8016964:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801696c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016970:	edd3 6a00 	vldr	s13, [r3]
 8016974:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016978:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801697c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016980:	edc0 6a07 	vstr	s13, [r0, #28]
 8016984:	edd0 6a01 	vldr	s13, [r0, #4]
 8016988:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801698c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016990:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8016994:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016998:	ed80 6a08 	vstr	s12, [r0, #32]
 801699c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801699e:	6242      	str	r2, [r0, #36]	; 0x24
 80169a0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80169a4:	ed93 6a03 	vldr	s12, [r3, #12]
 80169a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80169ac:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80169b0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80169b4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80169b8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80169bc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80169c0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80169c4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 80169c8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80169ca:	6302      	str	r2, [r0, #48]	; 0x30
 80169cc:	ed93 6a06 	vldr	s12, [r3, #24]
 80169d0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80169d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80169d8:	eeb0 7a46 	vmov.f32	s14, s12
 80169dc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80169e0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80169e4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80169e8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80169ec:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80169f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80169f4:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80169f8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80169fa:	63c3      	str	r3, [r0, #60]	; 0x3c
 80169fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a00:	2410      	movs	r4, #16
 8016a02:	f1c5 0501 	rsb	r5, r5, #1
 8016a06:	fb9e fef4 	sdiv	lr, lr, r4
 8016a0a:	f015 050f 	ands.w	r5, r5, #15
 8016a0e:	bf18      	it	ne
 8016a10:	2501      	movne	r5, #1
 8016a12:	ebae 0e05 	sub.w	lr, lr, r5
 8016a16:	e753      	b.n	80168c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8016a18:	f04f 0910 	mov.w	r9, #16
 8016a1c:	f1c5 0501 	rsb	r5, r5, #1
 8016a20:	fb94 f4f9 	sdiv	r4, r4, r9
 8016a24:	f015 050f 	ands.w	r5, r5, #15
 8016a28:	bf18      	it	ne
 8016a2a:	2501      	movne	r5, #1
 8016a2c:	1b64      	subs	r4, r4, r5
 8016a2e:	e755      	b.n	80168dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8016a30:	4264      	negs	r4, r4
 8016a32:	fb94 fef6 	sdiv	lr, r4, r6
 8016a36:	f1ce 0800 	rsb	r8, lr, #0
 8016a3a:	fb06 441e 	mls	r4, r6, lr, r4
 8016a3e:	f8c0 8000 	str.w	r8, [r0]
 8016a42:	6104      	str	r4, [r0, #16]
 8016a44:	2c00      	cmp	r4, #0
 8016a46:	f43f af6e 	beq.w	8016926 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8016a4a:	ea6f 0e0e 	mvn.w	lr, lr
 8016a4e:	1b34      	subs	r4, r6, r4
 8016a50:	f8c0 e000 	str.w	lr, [r0]
 8016a54:	e766      	b.n	8016924 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8016a56:	426d      	negs	r5, r5
 8016a58:	fb95 f4f6 	sdiv	r4, r5, r6
 8016a5c:	f1c4 0e00 	rsb	lr, r4, #0
 8016a60:	fb06 5514 	mls	r5, r6, r4, r5
 8016a64:	f8c0 e004 	str.w	lr, [r0, #4]
 8016a68:	6085      	str	r5, [r0, #8]
 8016a6a:	2d00      	cmp	r5, #0
 8016a6c:	f43f af64 	beq.w	8016938 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8016a70:	43e4      	mvns	r4, r4
 8016a72:	1b75      	subs	r5, r6, r5
 8016a74:	6044      	str	r4, [r0, #4]
 8016a76:	e75e      	b.n	8016936 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8016a78:	3d800000 	.word	0x3d800000

08016a7c <_ZN8touchgfx7Unicode6strlenEPKt>:
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	b148      	cbz	r0, 8016a94 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8016a80:	2300      	movs	r3, #0
 8016a82:	b298      	uxth	r0, r3
 8016a84:	3301      	adds	r3, #1
 8016a86:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016a8a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8016a8e:	2900      	cmp	r1, #0
 8016a90:	d1f7      	bne.n	8016a82 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8016a92:	4770      	bx	lr
 8016a94:	4770      	bx	lr

08016a96 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8016a96:	b530      	push	{r4, r5, lr}
 8016a98:	4604      	mov	r4, r0
 8016a9a:	b159      	cbz	r1, 8016ab4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8016a9c:	b148      	cbz	r0, 8016ab2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	b298      	uxth	r0, r3
 8016aa2:	4282      	cmp	r2, r0
 8016aa4:	d905      	bls.n	8016ab2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8016aa6:	5ccd      	ldrb	r5, [r1, r3]
 8016aa8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8016aac:	3301      	adds	r3, #1
 8016aae:	2d00      	cmp	r5, #0
 8016ab0:	d1f6      	bne.n	8016aa0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8016ab2:	bd30      	pop	{r4, r5, pc}
 8016ab4:	4608      	mov	r0, r1
 8016ab6:	e7fc      	b.n	8016ab2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08016ab8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8016ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aba:	468c      	mov	ip, r1
 8016abc:	b08b      	sub	sp, #44	; 0x2c
 8016abe:	2100      	movs	r1, #0
 8016ac0:	ae01      	add	r6, sp, #4
 8016ac2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8016ac6:	211f      	movs	r1, #31
 8016ac8:	fbb0 f7f3 	udiv	r7, r0, r3
 8016acc:	fb03 0517 	mls	r5, r3, r7, r0
 8016ad0:	4638      	mov	r0, r7
 8016ad2:	b2ec      	uxtb	r4, r5
 8016ad4:	2d09      	cmp	r5, #9
 8016ad6:	bfd4      	ite	le
 8016ad8:	3430      	addle	r4, #48	; 0x30
 8016ada:	3457      	addgt	r4, #87	; 0x57
 8016adc:	b2e4      	uxtb	r4, r4
 8016ade:	558c      	strb	r4, [r1, r6]
 8016ae0:	1e4c      	subs	r4, r1, #1
 8016ae2:	b92f      	cbnz	r7, 8016af0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8016ae4:	4431      	add	r1, r6
 8016ae6:	4660      	mov	r0, ip
 8016ae8:	f7ff ffd5 	bl	8016a96 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8016aec:	b00b      	add	sp, #44	; 0x2c
 8016aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016af0:	4621      	mov	r1, r4
 8016af2:	e7e9      	b.n	8016ac8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08016af4 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8016af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016af6:	4607      	mov	r7, r0
 8016af8:	b08b      	sub	sp, #44	; 0x2c
 8016afa:	4608      	mov	r0, r1
 8016afc:	b341      	cbz	r1, 8016b50 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8016afe:	1e99      	subs	r1, r3, #2
 8016b00:	2922      	cmp	r1, #34	; 0x22
 8016b02:	d825      	bhi.n	8016b50 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8016b04:	2100      	movs	r1, #0
 8016b06:	463c      	mov	r4, r7
 8016b08:	261f      	movs	r6, #31
 8016b0a:	f10d 0c04 	add.w	ip, sp, #4
 8016b0e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8016b12:	1e71      	subs	r1, r6, #1
 8016b14:	fb94 fef3 	sdiv	lr, r4, r3
 8016b18:	fb03 441e 	mls	r4, r3, lr, r4
 8016b1c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8016b20:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8016b24:	b2ec      	uxtb	r4, r5
 8016b26:	2d09      	cmp	r5, #9
 8016b28:	bfd4      	ite	le
 8016b2a:	3430      	addle	r4, #48	; 0x30
 8016b2c:	3457      	addgt	r4, #87	; 0x57
 8016b2e:	b2e4      	uxtb	r4, r4
 8016b30:	f80c 4006 	strb.w	r4, [ip, r6]
 8016b34:	4674      	mov	r4, lr
 8016b36:	b96c      	cbnz	r4, 8016b54 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8016b38:	2f00      	cmp	r7, #0
 8016b3a:	da05      	bge.n	8016b48 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8016b3c:	ab0a      	add	r3, sp, #40	; 0x28
 8016b3e:	4419      	add	r1, r3
 8016b40:	232d      	movs	r3, #45	; 0x2d
 8016b42:	f801 3c24 	strb.w	r3, [r1, #-36]
 8016b46:	1eb1      	subs	r1, r6, #2
 8016b48:	3101      	adds	r1, #1
 8016b4a:	4461      	add	r1, ip
 8016b4c:	f7ff ffa3 	bl	8016a96 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8016b50:	b00b      	add	sp, #44	; 0x2c
 8016b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b54:	460e      	mov	r6, r1
 8016b56:	e7dc      	b.n	8016b12 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08016b58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8016b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b5c:	b085      	sub	sp, #20
 8016b5e:	4691      	mov	r9, r2
 8016b60:	6802      	ldr	r2, [r0, #0]
 8016b62:	4688      	mov	r8, r1
 8016b64:	461c      	mov	r4, r3
 8016b66:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8016b6a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016b6e:	4683      	mov	fp, r0
 8016b70:	4610      	mov	r0, r2
 8016b72:	9103      	str	r1, [sp, #12]
 8016b74:	9302      	str	r3, [sp, #8]
 8016b76:	9201      	str	r2, [sp, #4]
 8016b78:	f7ff ff80 	bl	8016a7c <_ZN8touchgfx7Unicode6strlenEPKt>
 8016b7c:	f1b8 0f00 	cmp.w	r8, #0
 8016b80:	bf0c      	ite	eq
 8016b82:	4684      	moveq	ip, r0
 8016b84:	f100 0c01 	addne.w	ip, r0, #1
 8016b88:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8016b8c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8016b90:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016b92:	fa1f fc8c 	uxth.w	ip, ip
 8016b96:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016b98:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8016b9c:	9903      	ldr	r1, [sp, #12]
 8016b9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016ba2:	d041      	beq.n	8016c28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8016ba4:	d834      	bhi.n	8016c10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8016ba6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8016baa:	d059      	beq.n	8016c60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8016bac:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8016bb0:	d03a      	beq.n	8016c28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8016bb2:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8016bb6:	d034      	beq.n	8016c22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8016bb8:	2400      	movs	r4, #0
 8016bba:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8016bbe:	3a01      	subs	r2, #1
 8016bc0:	b169      	cbz	r1, 8016bde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016bc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016bc4:	458c      	cmp	ip, r1
 8016bc6:	da09      	bge.n	8016bdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8016bc8:	eba1 010c 	sub.w	r1, r1, ip
 8016bcc:	b289      	uxth	r1, r1
 8016bce:	b933      	cbnz	r3, 8016bde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016bd0:	2e00      	cmp	r6, #0
 8016bd2:	d051      	beq.n	8016c78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	d04f      	beq.n	8016c78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8016bd8:	440c      	add	r4, r1
 8016bda:	b2a4      	uxth	r4, r4
 8016bdc:	2100      	movs	r1, #0
 8016bde:	682b      	ldr	r3, [r5, #0]
 8016be0:	4293      	cmp	r3, r2
 8016be2:	da07      	bge.n	8016bf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8016be4:	f1b8 0f00 	cmp.w	r8, #0
 8016be8:	d004      	beq.n	8016bf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8016bea:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8016bee:	682b      	ldr	r3, [r5, #0]
 8016bf0:	3301      	adds	r3, #1
 8016bf2:	602b      	str	r3, [r5, #0]
 8016bf4:	2730      	movs	r7, #48	; 0x30
 8016bf6:	2c00      	cmp	r4, #0
 8016bf8:	d04e      	beq.n	8016c98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8016bfa:	682e      	ldr	r6, [r5, #0]
 8016bfc:	3c01      	subs	r4, #1
 8016bfe:	42b2      	cmp	r2, r6
 8016c00:	b2a4      	uxth	r4, r4
 8016c02:	dd49      	ble.n	8016c98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8016c04:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8016c08:	682b      	ldr	r3, [r5, #0]
 8016c0a:	3301      	adds	r3, #1
 8016c0c:	602b      	str	r3, [r5, #0]
 8016c0e:	e7f2      	b.n	8016bf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8016c10:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8016c14:	d01d      	beq.n	8016c52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8016c16:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8016c1a:	d002      	beq.n	8016c22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8016c1c:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8016c20:	e7c9      	b.n	8016bb6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8016c22:	4684      	mov	ip, r0
 8016c24:	f04f 0800 	mov.w	r8, #0
 8016c28:	2c00      	cmp	r4, #0
 8016c2a:	d0c6      	beq.n	8016bba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016c2c:	b947      	cbnz	r7, 8016c40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8016c2e:	2801      	cmp	r0, #1
 8016c30:	d106      	bne.n	8016c40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8016c32:	8814      	ldrh	r4, [r2, #0]
 8016c34:	2c30      	cmp	r4, #48	; 0x30
 8016c36:	bf02      	ittt	eq
 8016c38:	3202      	addeq	r2, #2
 8016c3a:	4638      	moveq	r0, r7
 8016c3c:	f8cb 2000 	streq.w	r2, [fp]
 8016c40:	45bc      	cmp	ip, r7
 8016c42:	da14      	bge.n	8016c6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8016c44:	b2bf      	uxth	r7, r7
 8016c46:	eba7 040c 	sub.w	r4, r7, ip
 8016c4a:	46bc      	mov	ip, r7
 8016c4c:	b2a4      	uxth	r4, r4
 8016c4e:	2600      	movs	r6, #0
 8016c50:	e7b3      	b.n	8016bba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016c52:	4684      	mov	ip, r0
 8016c54:	b16c      	cbz	r4, 8016c72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8016c56:	42b8      	cmp	r0, r7
 8016c58:	dd00      	ble.n	8016c5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8016c5a:	b2b8      	uxth	r0, r7
 8016c5c:	2400      	movs	r4, #0
 8016c5e:	e003      	b.n	8016c68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8016c60:	f04f 0c01 	mov.w	ip, #1
 8016c64:	2400      	movs	r4, #0
 8016c66:	4660      	mov	r0, ip
 8016c68:	4626      	mov	r6, r4
 8016c6a:	46a0      	mov	r8, r4
 8016c6c:	e7a5      	b.n	8016bba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016c6e:	2400      	movs	r4, #0
 8016c70:	e7ed      	b.n	8016c4e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8016c72:	4626      	mov	r6, r4
 8016c74:	46a0      	mov	r8, r4
 8016c76:	e7a0      	b.n	8016bba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016c78:	2900      	cmp	r1, #0
 8016c7a:	d0b0      	beq.n	8016bde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016c7c:	2720      	movs	r7, #32
 8016c7e:	682e      	ldr	r6, [r5, #0]
 8016c80:	2900      	cmp	r1, #0
 8016c82:	d0ac      	beq.n	8016bde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016c84:	3901      	subs	r1, #1
 8016c86:	4296      	cmp	r6, r2
 8016c88:	b289      	uxth	r1, r1
 8016c8a:	daa7      	bge.n	8016bdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8016c8c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8016c90:	682b      	ldr	r3, [r5, #0]
 8016c92:	3301      	adds	r3, #1
 8016c94:	602b      	str	r3, [r5, #0]
 8016c96:	e7f2      	b.n	8016c7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8016c98:	b188      	cbz	r0, 8016cbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8016c9a:	682b      	ldr	r3, [r5, #0]
 8016c9c:	3801      	subs	r0, #1
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	b280      	uxth	r0, r0
 8016ca2:	dd0c      	ble.n	8016cbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8016ca4:	f8db 3000 	ldr.w	r3, [fp]
 8016ca8:	1c9c      	adds	r4, r3, #2
 8016caa:	f8cb 4000 	str.w	r4, [fp]
 8016cae:	881c      	ldrh	r4, [r3, #0]
 8016cb0:	682b      	ldr	r3, [r5, #0]
 8016cb2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8016cb6:	682b      	ldr	r3, [r5, #0]
 8016cb8:	3301      	adds	r3, #1
 8016cba:	602b      	str	r3, [r5, #0]
 8016cbc:	e7ec      	b.n	8016c98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8016cbe:	2620      	movs	r6, #32
 8016cc0:	b151      	cbz	r1, 8016cd8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8016cc2:	6828      	ldr	r0, [r5, #0]
 8016cc4:	3901      	subs	r1, #1
 8016cc6:	4282      	cmp	r2, r0
 8016cc8:	b289      	uxth	r1, r1
 8016cca:	dd05      	ble.n	8016cd8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8016ccc:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8016cd0:	682b      	ldr	r3, [r5, #0]
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	602b      	str	r3, [r5, #0]
 8016cd6:	e7f3      	b.n	8016cc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8016cd8:	b005      	add	sp, #20
 8016cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016cde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8016cde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ce2:	2400      	movs	r4, #0
 8016ce4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8016ce8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8016cec:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8016cf0:	8014      	strh	r4, [r2, #0]
 8016cf2:	701c      	strb	r4, [r3, #0]
 8016cf4:	f888 4000 	strb.w	r4, [r8]
 8016cf8:	f88c 4000 	strb.w	r4, [ip]
 8016cfc:	f88e 4000 	strb.w	r4, [lr]
 8016d00:	703c      	strb	r4, [r7, #0]
 8016d02:	6804      	ldr	r4, [r0, #0]
 8016d04:	b1a4      	cbz	r4, 8016d30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8016d06:	8824      	ldrh	r4, [r4, #0]
 8016d08:	f04f 0901 	mov.w	r9, #1
 8016d0c:	b314      	cbz	r4, 8016d54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016d0e:	2c2b      	cmp	r4, #43	; 0x2b
 8016d10:	d001      	beq.n	8016d16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8016d12:	2c20      	cmp	r4, #32
 8016d14:	d110      	bne.n	8016d38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8016d16:	8014      	strh	r4, [r2, #0]
 8016d18:	6804      	ldr	r4, [r0, #0]
 8016d1a:	b10c      	cbz	r4, 8016d20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8016d1c:	3402      	adds	r4, #2
 8016d1e:	6004      	str	r4, [r0, #0]
 8016d20:	680c      	ldr	r4, [r1, #0]
 8016d22:	b10c      	cbz	r4, 8016d28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8016d24:	3401      	adds	r4, #1
 8016d26:	600c      	str	r4, [r1, #0]
 8016d28:	6804      	ldr	r4, [r0, #0]
 8016d2a:	b17c      	cbz	r4, 8016d4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8016d2c:	8824      	ldrh	r4, [r4, #0]
 8016d2e:	e7ed      	b.n	8016d0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8016d30:	680c      	ldr	r4, [r1, #0]
 8016d32:	b17c      	cbz	r4, 8016d54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016d34:	7824      	ldrb	r4, [r4, #0]
 8016d36:	e7e7      	b.n	8016d08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8016d38:	2c2d      	cmp	r4, #45	; 0x2d
 8016d3a:	d102      	bne.n	8016d42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8016d3c:	f883 9000 	strb.w	r9, [r3]
 8016d40:	e7ea      	b.n	8016d18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8016d42:	2c23      	cmp	r4, #35	; 0x23
 8016d44:	d107      	bne.n	8016d56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8016d46:	f888 9000 	strb.w	r9, [r8]
 8016d4a:	e7e5      	b.n	8016d18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8016d4c:	680c      	ldr	r4, [r1, #0]
 8016d4e:	b10c      	cbz	r4, 8016d54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016d50:	7824      	ldrb	r4, [r4, #0]
 8016d52:	e7db      	b.n	8016d0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8016d54:	2400      	movs	r4, #0
 8016d56:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016d5a:	2b09      	cmp	r3, #9
 8016d5c:	d901      	bls.n	8016d62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8016d5e:	2c2a      	cmp	r4, #42	; 0x2a
 8016d60:	d122      	bne.n	8016da8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016d62:	2301      	movs	r3, #1
 8016d64:	2c30      	cmp	r4, #48	; 0x30
 8016d66:	f88e 3000 	strb.w	r3, [lr]
 8016d6a:	d10d      	bne.n	8016d88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8016d6c:	f88c 3000 	strb.w	r3, [ip]
 8016d70:	6803      	ldr	r3, [r0, #0]
 8016d72:	b10b      	cbz	r3, 8016d78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8016d74:	3302      	adds	r3, #2
 8016d76:	6003      	str	r3, [r0, #0]
 8016d78:	680b      	ldr	r3, [r1, #0]
 8016d7a:	b10b      	cbz	r3, 8016d80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8016d7c:	3301      	adds	r3, #1
 8016d7e:	600b      	str	r3, [r1, #0]
 8016d80:	6803      	ldr	r3, [r0, #0]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d02f      	beq.n	8016de6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8016d86:	881c      	ldrh	r4, [r3, #0]
 8016d88:	2c2a      	cmp	r4, #42	; 0x2a
 8016d8a:	d135      	bne.n	8016df8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8016d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d90:	6033      	str	r3, [r6, #0]
 8016d92:	6803      	ldr	r3, [r0, #0]
 8016d94:	b10b      	cbz	r3, 8016d9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8016d96:	3302      	adds	r3, #2
 8016d98:	6003      	str	r3, [r0, #0]
 8016d9a:	680b      	ldr	r3, [r1, #0]
 8016d9c:	b10b      	cbz	r3, 8016da2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8016d9e:	3301      	adds	r3, #1
 8016da0:	600b      	str	r3, [r1, #0]
 8016da2:	6803      	ldr	r3, [r0, #0]
 8016da4:	b31b      	cbz	r3, 8016dee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8016da6:	881c      	ldrh	r4, [r3, #0]
 8016da8:	2c2e      	cmp	r4, #46	; 0x2e
 8016daa:	d11a      	bne.n	8016de2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016dac:	2301      	movs	r3, #1
 8016dae:	703b      	strb	r3, [r7, #0]
 8016db0:	6803      	ldr	r3, [r0, #0]
 8016db2:	b10b      	cbz	r3, 8016db8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8016db4:	3302      	adds	r3, #2
 8016db6:	6003      	str	r3, [r0, #0]
 8016db8:	680b      	ldr	r3, [r1, #0]
 8016dba:	b10b      	cbz	r3, 8016dc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	600b      	str	r3, [r1, #0]
 8016dc0:	6803      	ldr	r3, [r0, #0]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d036      	beq.n	8016e34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8016dc6:	881b      	ldrh	r3, [r3, #0]
 8016dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8016dca:	d137      	bne.n	8016e3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8016dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8016dd0:	602b      	str	r3, [r5, #0]
 8016dd2:	6803      	ldr	r3, [r0, #0]
 8016dd4:	b10b      	cbz	r3, 8016dda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8016dd6:	3302      	adds	r3, #2
 8016dd8:	6003      	str	r3, [r0, #0]
 8016dda:	680b      	ldr	r3, [r1, #0]
 8016ddc:	b10b      	cbz	r3, 8016de2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016dde:	3301      	adds	r3, #1
 8016de0:	600b      	str	r3, [r1, #0]
 8016de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016de6:	680c      	ldr	r4, [r1, #0]
 8016de8:	b134      	cbz	r4, 8016df8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8016dea:	7824      	ldrb	r4, [r4, #0]
 8016dec:	e7cc      	b.n	8016d88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8016dee:	680b      	ldr	r3, [r1, #0]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d0f6      	beq.n	8016de2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016df4:	781c      	ldrb	r4, [r3, #0]
 8016df6:	e7d7      	b.n	8016da8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016df8:	2300      	movs	r3, #0
 8016dfa:	220a      	movs	r2, #10
 8016dfc:	6033      	str	r3, [r6, #0]
 8016dfe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016e02:	fa1f f38c 	uxth.w	r3, ip
 8016e06:	2b09      	cmp	r3, #9
 8016e08:	d8ce      	bhi.n	8016da8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016e0a:	6833      	ldr	r3, [r6, #0]
 8016e0c:	fb02 c303 	mla	r3, r2, r3, ip
 8016e10:	6033      	str	r3, [r6, #0]
 8016e12:	6803      	ldr	r3, [r0, #0]
 8016e14:	b10b      	cbz	r3, 8016e1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8016e16:	3302      	adds	r3, #2
 8016e18:	6003      	str	r3, [r0, #0]
 8016e1a:	680b      	ldr	r3, [r1, #0]
 8016e1c:	b10b      	cbz	r3, 8016e22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8016e1e:	3301      	adds	r3, #1
 8016e20:	600b      	str	r3, [r1, #0]
 8016e22:	6803      	ldr	r3, [r0, #0]
 8016e24:	b10b      	cbz	r3, 8016e2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8016e26:	881c      	ldrh	r4, [r3, #0]
 8016e28:	e7e9      	b.n	8016dfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016e2a:	680c      	ldr	r4, [r1, #0]
 8016e2c:	2c00      	cmp	r4, #0
 8016e2e:	d0e6      	beq.n	8016dfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016e30:	7824      	ldrb	r4, [r4, #0]
 8016e32:	e7e4      	b.n	8016dfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016e34:	680b      	ldr	r3, [r1, #0]
 8016e36:	b10b      	cbz	r3, 8016e3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8016e38:	781b      	ldrb	r3, [r3, #0]
 8016e3a:	e7c5      	b.n	8016dc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	240a      	movs	r4, #10
 8016e40:	602a      	str	r2, [r5, #0]
 8016e42:	3b30      	subs	r3, #48	; 0x30
 8016e44:	682a      	ldr	r2, [r5, #0]
 8016e46:	b29e      	uxth	r6, r3
 8016e48:	2e09      	cmp	r6, #9
 8016e4a:	d813      	bhi.n	8016e74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8016e4c:	fb04 3302 	mla	r3, r4, r2, r3
 8016e50:	602b      	str	r3, [r5, #0]
 8016e52:	6803      	ldr	r3, [r0, #0]
 8016e54:	b10b      	cbz	r3, 8016e5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8016e56:	3302      	adds	r3, #2
 8016e58:	6003      	str	r3, [r0, #0]
 8016e5a:	680b      	ldr	r3, [r1, #0]
 8016e5c:	b10b      	cbz	r3, 8016e62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8016e5e:	3301      	adds	r3, #1
 8016e60:	600b      	str	r3, [r1, #0]
 8016e62:	6803      	ldr	r3, [r0, #0]
 8016e64:	b10b      	cbz	r3, 8016e6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8016e66:	881b      	ldrh	r3, [r3, #0]
 8016e68:	e7eb      	b.n	8016e42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016e6a:	680b      	ldr	r3, [r1, #0]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d0e8      	beq.n	8016e42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016e70:	781b      	ldrb	r3, [r3, #0]
 8016e72:	e7e6      	b.n	8016e42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016e74:	2a06      	cmp	r2, #6
 8016e76:	bfa8      	it	ge
 8016e78:	2206      	movge	r2, #6
 8016e7a:	602a      	str	r2, [r5, #0]
 8016e7c:	e7b1      	b.n	8016de2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08016e7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8016e7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e82:	b0a3      	sub	sp, #140	; 0x8c
 8016e84:	2600      	movs	r6, #0
 8016e86:	4607      	mov	r7, r0
 8016e88:	4688      	mov	r8, r1
 8016e8a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8016e8e:	4631      	mov	r1, r6
 8016e90:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8016e92:	4648      	mov	r0, r9
 8016e94:	960d      	str	r6, [sp, #52]	; 0x34
 8016e96:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8016e9a:	2242      	movs	r2, #66	; 0x42
 8016e9c:	f00e f9d4 	bl	8025248 <memset>
 8016ea0:	b15f      	cbz	r7, 8016eba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8016ea2:	f108 3aff 	add.w	sl, r8, #4294967295
 8016ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016eaa:	b152      	cbz	r2, 8016ec2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8016eac:	8812      	ldrh	r2, [r2, #0]
 8016eae:	b10a      	cbz	r2, 8016eb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016eb0:	459a      	cmp	sl, r3
 8016eb2:	dc2e      	bgt.n	8016f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016eba:	4638      	mov	r0, r7
 8016ebc:	b023      	add	sp, #140	; 0x8c
 8016ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ec2:	9a08      	ldr	r2, [sp, #32]
 8016ec4:	2a00      	cmp	r2, #0
 8016ec6:	d0f5      	beq.n	8016eb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016ec8:	7812      	ldrb	r2, [r2, #0]
 8016eca:	e7f0      	b.n	8016eae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8016ecc:	2d00      	cmp	r5, #0
 8016ece:	d0ea      	beq.n	8016ea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016ed0:	782a      	ldrb	r2, [r5, #0]
 8016ed2:	b142      	cbz	r2, 8016ee6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8016ed4:	2a25      	cmp	r2, #37	; 0x25
 8016ed6:	d001      	beq.n	8016edc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8016ed8:	459a      	cmp	sl, r3
 8016eda:	dc08      	bgt.n	8016eee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8016edc:	f1bb 0f00 	cmp.w	fp, #0
 8016ee0:	d121      	bne.n	8016f26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8016ee2:	2d00      	cmp	r5, #0
 8016ee4:	d0df      	beq.n	8016ea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016ee6:	782a      	ldrb	r2, [r5, #0]
 8016ee8:	f04f 0b00 	mov.w	fp, #0
 8016eec:	e01d      	b.n	8016f2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8016eee:	f1bb 0f00 	cmp.w	fp, #0
 8016ef2:	d077      	beq.n	8016fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8016ef4:	f8bb 2000 	ldrh.w	r2, [fp]
 8016ef8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016efc:	f1bb 0f00 	cmp.w	fp, #0
 8016f00:	d002      	beq.n	8016f08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8016f02:	f10b 0202 	add.w	r2, fp, #2
 8016f06:	9209      	str	r2, [sp, #36]	; 0x24
 8016f08:	b10d      	cbz	r5, 8016f0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8016f0a:	3501      	adds	r5, #1
 8016f0c:	9508      	str	r5, [sp, #32]
 8016f0e:	3301      	adds	r3, #1
 8016f10:	930d      	str	r3, [sp, #52]	; 0x34
 8016f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f14:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8016f18:	f1bb 0f00 	cmp.w	fp, #0
 8016f1c:	d0d6      	beq.n	8016ecc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8016f1e:	f8bb 2000 	ldrh.w	r2, [fp]
 8016f22:	2a00      	cmp	r2, #0
 8016f24:	d1d6      	bne.n	8016ed4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8016f26:	f8bb 2000 	ldrh.w	r2, [fp]
 8016f2a:	2a00      	cmp	r2, #0
 8016f2c:	d0bb      	beq.n	8016ea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016f2e:	459a      	cmp	sl, r3
 8016f30:	ddb9      	ble.n	8016ea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016f32:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8016f36:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8016f3a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8016f3e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8016f42:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8016f46:	960e      	str	r6, [sp, #56]	; 0x38
 8016f48:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8016f4c:	960f      	str	r6, [sp, #60]	; 0x3c
 8016f4e:	f1bb 0f00 	cmp.w	fp, #0
 8016f52:	d002      	beq.n	8016f5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8016f54:	f10b 0302 	add.w	r3, fp, #2
 8016f58:	9309      	str	r3, [sp, #36]	; 0x24
 8016f5a:	b10d      	cbz	r5, 8016f60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8016f5c:	1c6b      	adds	r3, r5, #1
 8016f5e:	9308      	str	r3, [sp, #32]
 8016f60:	ab0f      	add	r3, sp, #60	; 0x3c
 8016f62:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8016f66:	a908      	add	r1, sp, #32
 8016f68:	a809      	add	r0, sp, #36	; 0x24
 8016f6a:	9305      	str	r3, [sp, #20]
 8016f6c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8016f70:	9304      	str	r3, [sp, #16]
 8016f72:	ab0e      	add	r3, sp, #56	; 0x38
 8016f74:	9303      	str	r3, [sp, #12]
 8016f76:	ab0c      	add	r3, sp, #48	; 0x30
 8016f78:	9302      	str	r3, [sp, #8]
 8016f7a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8016f7e:	9301      	str	r3, [sp, #4]
 8016f80:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8016f84:	9300      	str	r3, [sp, #0]
 8016f86:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8016f8a:	f7ff fea8 	bl	8016cde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8016f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	bfbf      	itttt	lt
 8016f94:	6823      	ldrlt	r3, [r4, #0]
 8016f96:	3404      	addlt	r4, #4
 8016f98:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016f9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016f9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	bfbe      	ittt	lt
 8016fa4:	6823      	ldrlt	r3, [r4, #0]
 8016fa6:	3404      	addlt	r4, #4
 8016fa8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016fac:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8016fb0:	bfb8      	it	lt
 8016fb2:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8016fb4:	b1d9      	cbz	r1, 8016fee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8016fb6:	880b      	ldrh	r3, [r1, #0]
 8016fb8:	2b69      	cmp	r3, #105	; 0x69
 8016fba:	d01f      	beq.n	8016ffc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016fbc:	d82f      	bhi.n	801701e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8016fbe:	2b58      	cmp	r3, #88	; 0x58
 8016fc0:	d01c      	beq.n	8016ffc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016fc2:	d818      	bhi.n	8016ff6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8016fc4:	2b25      	cmp	r3, #37	; 0x25
 8016fc6:	d034      	beq.n	8017032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8016fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fca:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8016fce:	f1bb 0f00 	cmp.w	fp, #0
 8016fd2:	f000 80b7 	beq.w	8017144 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8016fd6:	f8bb 5000 	ldrh.w	r5, [fp]
 8016fda:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8016fde:	3301      	adds	r3, #1
 8016fe0:	930d      	str	r3, [sp, #52]	; 0x34
 8016fe2:	e029      	b.n	8017038 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016fe4:	b10d      	cbz	r5, 8016fea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8016fe6:	782a      	ldrb	r2, [r5, #0]
 8016fe8:	e786      	b.n	8016ef8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016fea:	462a      	mov	r2, r5
 8016fec:	e784      	b.n	8016ef8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016fee:	2a00      	cmp	r2, #0
 8016ff0:	d0ea      	beq.n	8016fc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016ff2:	7813      	ldrb	r3, [r2, #0]
 8016ff4:	e7e0      	b.n	8016fb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8016ff6:	3b63      	subs	r3, #99	; 0x63
 8016ff8:	2b01      	cmp	r3, #1
 8016ffa:	d8e5      	bhi.n	8016fc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016ffc:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8017000:	b329      	cbz	r1, 801704e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8017002:	880b      	ldrh	r3, [r1, #0]
 8017004:	2b69      	cmp	r3, #105	; 0x69
 8017006:	d063      	beq.n	80170d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017008:	d825      	bhi.n	8017056 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801700a:	2b63      	cmp	r3, #99	; 0x63
 801700c:	d038      	beq.n	8017080 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801700e:	2b64      	cmp	r3, #100	; 0x64
 8017010:	d05e      	beq.n	80170d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017012:	2b58      	cmp	r3, #88	; 0x58
 8017014:	d07a      	beq.n	801710c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8017016:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801701a:	4625      	mov	r5, r4
 801701c:	e036      	b.n	801708c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801701e:	2b73      	cmp	r3, #115	; 0x73
 8017020:	d0ec      	beq.n	8016ffc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017022:	d802      	bhi.n	801702a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8017024:	2b6f      	cmp	r3, #111	; 0x6f
 8017026:	d1cf      	bne.n	8016fc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017028:	e7e8      	b.n	8016ffc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801702a:	2b75      	cmp	r3, #117	; 0x75
 801702c:	d0e6      	beq.n	8016ffc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801702e:	2b78      	cmp	r3, #120	; 0x78
 8017030:	e7f9      	b.n	8017026 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8017032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017034:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8017038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801703a:	b10b      	cbz	r3, 8017040 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801703c:	3302      	adds	r3, #2
 801703e:	9309      	str	r3, [sp, #36]	; 0x24
 8017040:	9b08      	ldr	r3, [sp, #32]
 8017042:	2b00      	cmp	r3, #0
 8017044:	f43f af2f 	beq.w	8016ea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017048:	3301      	adds	r3, #1
 801704a:	9308      	str	r3, [sp, #32]
 801704c:	e72b      	b.n	8016ea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801704e:	2a00      	cmp	r2, #0
 8017050:	d0e1      	beq.n	8017016 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017052:	7813      	ldrb	r3, [r2, #0]
 8017054:	e7d6      	b.n	8017004 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8017056:	2b73      	cmp	r3, #115	; 0x73
 8017058:	d036      	beq.n	80170c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801705a:	d807      	bhi.n	801706c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801705c:	2b6f      	cmp	r3, #111	; 0x6f
 801705e:	d1da      	bne.n	8017016 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017060:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017062:	1d25      	adds	r5, r4, #4
 8017064:	2308      	movs	r3, #8
 8017066:	eba8 0202 	sub.w	r2, r8, r2
 801706a:	e049      	b.n	8017100 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801706c:	2b75      	cmp	r3, #117	; 0x75
 801706e:	d042      	beq.n	80170f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8017070:	2b78      	cmp	r3, #120	; 0x78
 8017072:	d1d0      	bne.n	8017016 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8017074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017076:	1d25      	adds	r5, r4, #4
 8017078:	2310      	movs	r3, #16
 801707a:	eba8 0202 	sub.w	r2, r8, r2
 801707e:	e03f      	b.n	8017100 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8017080:	6823      	ldr	r3, [r4, #0]
 8017082:	1d25      	adds	r5, r4, #4
 8017084:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8017088:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801708c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801708e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8017092:	2b00      	cmp	r3, #0
 8017094:	d051      	beq.n	801713a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8017096:	881a      	ldrh	r2, [r3, #0]
 8017098:	a80d      	add	r0, sp, #52	; 0x34
 801709a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801709e:	462c      	mov	r4, r5
 80170a0:	9005      	str	r0, [sp, #20]
 80170a2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80170a6:	9004      	str	r0, [sp, #16]
 80170a8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80170aa:	9003      	str	r0, [sp, #12]
 80170ac:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80170b0:	9002      	str	r0, [sp, #8]
 80170b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80170b4:	9001      	str	r0, [sp, #4]
 80170b6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80170ba:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80170be:	9000      	str	r0, [sp, #0]
 80170c0:	a810      	add	r0, sp, #64	; 0x40
 80170c2:	f7ff fd49 	bl	8016b58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80170c6:	e7b7      	b.n	8017038 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80170c8:	1d25      	adds	r5, r4, #4
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	9310      	str	r3, [sp, #64]	; 0x40
 80170ce:	e7dd      	b.n	801708c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80170d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80170d2:	230a      	movs	r3, #10
 80170d4:	4649      	mov	r1, r9
 80170d6:	6820      	ldr	r0, [r4, #0]
 80170d8:	eba8 0202 	sub.w	r2, r8, r2
 80170dc:	1d25      	adds	r5, r4, #4
 80170de:	b292      	uxth	r2, r2
 80170e0:	f7ff fd08 	bl	8016af4 <_ZN8touchgfx7Unicode4itoaElPtti>
 80170e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80170e8:	2b2d      	cmp	r3, #45	; 0x2d
 80170ea:	d1cf      	bne.n	801708c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80170ec:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80170f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170f2:	3302      	adds	r3, #2
 80170f4:	e7ea      	b.n	80170cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 80170f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80170f8:	1d25      	adds	r5, r4, #4
 80170fa:	230a      	movs	r3, #10
 80170fc:	eba8 0202 	sub.w	r2, r8, r2
 8017100:	b292      	uxth	r2, r2
 8017102:	4649      	mov	r1, r9
 8017104:	6820      	ldr	r0, [r4, #0]
 8017106:	f7ff fcd7 	bl	8016ab8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801710a:	e7bf      	b.n	801708c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801710c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801710e:	2310      	movs	r3, #16
 8017110:	4649      	mov	r1, r9
 8017112:	6820      	ldr	r0, [r4, #0]
 8017114:	eba8 0202 	sub.w	r2, r8, r2
 8017118:	1d25      	adds	r5, r4, #4
 801711a:	b292      	uxth	r2, r2
 801711c:	f7ff fccc 	bl	8016ab8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8017120:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8017124:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8017128:	2b00      	cmp	r3, #0
 801712a:	d0af      	beq.n	801708c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801712c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8017130:	2919      	cmp	r1, #25
 8017132:	d8f7      	bhi.n	8017124 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8017134:	3b20      	subs	r3, #32
 8017136:	8013      	strh	r3, [r2, #0]
 8017138:	e7f4      	b.n	8017124 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801713a:	9a08      	ldr	r2, [sp, #32]
 801713c:	2a00      	cmp	r2, #0
 801713e:	d0ab      	beq.n	8017098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8017140:	7812      	ldrb	r2, [r2, #0]
 8017142:	e7a9      	b.n	8017098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8017144:	2d00      	cmp	r5, #0
 8017146:	f43f af48 	beq.w	8016fda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801714a:	782d      	ldrb	r5, [r5, #0]
 801714c:	e745      	b.n	8016fda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801714e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801714e:	b507      	push	{r0, r1, r2, lr}
 8017150:	9300      	str	r3, [sp, #0]
 8017152:	4613      	mov	r3, r2
 8017154:	2200      	movs	r2, #0
 8017156:	f7ff fe92 	bl	8016e7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801715a:	b003      	add	sp, #12
 801715c:	f85d fb04 	ldr.w	pc, [sp], #4

08017160 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8017160:	b40c      	push	{r2, r3}
 8017162:	b507      	push	{r0, r1, r2, lr}
 8017164:	ab04      	add	r3, sp, #16
 8017166:	f853 2b04 	ldr.w	r2, [r3], #4
 801716a:	9301      	str	r3, [sp, #4]
 801716c:	f7ff ffef 	bl	801714e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8017170:	b003      	add	sp, #12
 8017172:	f85d eb04 	ldr.w	lr, [sp], #4
 8017176:	b002      	add	sp, #8
 8017178:	4770      	bx	lr
	...

0801717c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801717c:	4b01      	ldr	r3, [pc, #4]	; (8017184 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801717e:	6018      	str	r0, [r3, #0]
 8017180:	4770      	bx	lr
 8017182:	bf00      	nop
 8017184:	20027f00 	.word	0x20027f00

08017188 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017188:	4b06      	ldr	r3, [pc, #24]	; (80171a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801718a:	881a      	ldrh	r2, [r3, #0]
 801718c:	4282      	cmp	r2, r0
 801718e:	d807      	bhi.n	80171a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017190:	4b05      	ldr	r3, [pc, #20]	; (80171a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8017192:	881b      	ldrh	r3, [r3, #0]
 8017194:	4413      	add	r3, r2
 8017196:	4298      	cmp	r0, r3
 8017198:	bfac      	ite	ge
 801719a:	2000      	movge	r0, #0
 801719c:	2001      	movlt	r0, #1
 801719e:	4770      	bx	lr
 80171a0:	2000      	movs	r0, #0
 80171a2:	4770      	bx	lr
 80171a4:	20027f20 	.word	0x20027f20
 80171a8:	20027f24 	.word	0x20027f24

080171ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80171ac:	b508      	push	{r3, lr}
 80171ae:	4601      	mov	r1, r0
 80171b0:	f7ff ffea 	bl	8017188 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80171b4:	b118      	cbz	r0, 80171be <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80171b6:	4b02      	ldr	r3, [pc, #8]	; (80171c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80171be:	bd08      	pop	{r3, pc}
 80171c0:	20027f04 	.word	0x20027f04

080171c4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80171c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171c6:	4c24      	ldr	r4, [pc, #144]	; (8017258 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80171c8:	6823      	ldr	r3, [r4, #0]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d042      	beq.n	8017254 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80171ce:	4a23      	ldr	r2, [pc, #140]	; (801725c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80171d0:	4d23      	ldr	r5, [pc, #140]	; (8017260 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80171d2:	8811      	ldrh	r1, [r2, #0]
 80171d4:	f8b5 c000 	ldrh.w	ip, [r5]
 80171d8:	4822      	ldr	r0, [pc, #136]	; (8017264 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80171da:	4461      	add	r1, ip
 80171dc:	1c4a      	adds	r2, r1, #1
 80171de:	008f      	lsls	r7, r1, #2
 80171e0:	f022 0201 	bic.w	r2, r2, #1
 80171e4:	19de      	adds	r6, r3, r7
 80171e6:	0412      	lsls	r2, r2, #16
 80171e8:	6006      	str	r6, [r0, #0]
 80171ea:	4e1f      	ldr	r6, [pc, #124]	; (8017268 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80171ec:	0c12      	lsrs	r2, r2, #16
 80171ee:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80171f2:	19da      	adds	r2, r3, r7
 80171f4:	6032      	str	r2, [r6, #0]
 80171f6:	220e      	movs	r2, #14
 80171f8:	fb02 f20c 	mul.w	r2, r2, ip
 80171fc:	3203      	adds	r2, #3
 80171fe:	f022 0203 	bic.w	r2, r2, #3
 8017202:	443a      	add	r2, r7
 8017204:	4f19      	ldr	r7, [pc, #100]	; (801726c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017206:	4413      	add	r3, r2
 8017208:	603b      	str	r3, [r7, #0]
 801720a:	2300      	movs	r3, #0
 801720c:	4f18      	ldr	r7, [pc, #96]	; (8017270 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801720e:	469c      	mov	ip, r3
 8017210:	803b      	strh	r3, [r7, #0]
 8017212:	4f18      	ldr	r7, [pc, #96]	; (8017274 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017214:	683f      	ldr	r7, [r7, #0]
 8017216:	1aba      	subs	r2, r7, r2
 8017218:	4f17      	ldr	r7, [pc, #92]	; (8017278 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801721a:	603a      	str	r2, [r7, #0]
 801721c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017220:	4a16      	ldr	r2, [pc, #88]	; (801727c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017222:	8013      	strh	r3, [r2, #0]
 8017224:	428b      	cmp	r3, r1
 8017226:	d10d      	bne.n	8017244 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017228:	882d      	ldrh	r5, [r5, #0]
 801722a:	2300      	movs	r3, #0
 801722c:	6830      	ldr	r0, [r6, #0]
 801722e:	240e      	movs	r4, #14
 8017230:	429d      	cmp	r5, r3
 8017232:	d90f      	bls.n	8017254 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017234:	fb04 0203 	mla	r2, r4, r3, r0
 8017238:	3301      	adds	r3, #1
 801723a:	7b11      	ldrb	r1, [r2, #12]
 801723c:	f36f 1145 	bfc	r1, #5, #1
 8017240:	7311      	strb	r1, [r2, #12]
 8017242:	e7f5      	b.n	8017230 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8017244:	6822      	ldr	r2, [r4, #0]
 8017246:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801724a:	6802      	ldr	r2, [r0, #0]
 801724c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017250:	3301      	adds	r3, #1
 8017252:	e7e7      	b.n	8017224 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017256:	bf00      	nop
 8017258:	20027f04 	.word	0x20027f04
 801725c:	20027f20 	.word	0x20027f20
 8017260:	20027f24 	.word	0x20027f24
 8017264:	20027f18 	.word	0x20027f18
 8017268:	20027f08 	.word	0x20027f08
 801726c:	20027f10 	.word	0x20027f10
 8017270:	20027f22 	.word	0x20027f22
 8017274:	20027f0c 	.word	0x20027f0c
 8017278:	20027f1c 	.word	0x20027f1c
 801727c:	20027f14 	.word	0x20027f14

08017280 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017280:	4b06      	ldr	r3, [pc, #24]	; (801729c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	b943      	cbnz	r3, 8017298 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017286:	b139      	cbz	r1, 8017298 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017288:	4b05      	ldr	r3, [pc, #20]	; (80172a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801728a:	801a      	strh	r2, [r3, #0]
 801728c:	4b05      	ldr	r3, [pc, #20]	; (80172a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801728e:	6019      	str	r1, [r3, #0]
 8017290:	4b05      	ldr	r3, [pc, #20]	; (80172a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8017292:	6018      	str	r0, [r3, #0]
 8017294:	f7ff bf96 	b.w	80171c4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop
 801729c:	20027f10 	.word	0x20027f10
 80172a0:	20027f24 	.word	0x20027f24
 80172a4:	20027f0c 	.word	0x20027f0c
 80172a8:	20027f04 	.word	0x20027f04

080172ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80172ac:	b470      	push	{r4, r5, r6}
 80172ae:	4c07      	ldr	r4, [pc, #28]	; (80172cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80172b0:	4605      	mov	r5, r0
 80172b2:	4610      	mov	r0, r2
 80172b4:	9a03      	ldr	r2, [sp, #12]
 80172b6:	6826      	ldr	r6, [r4, #0]
 80172b8:	b936      	cbnz	r6, 80172c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80172ba:	6025      	str	r5, [r4, #0]
 80172bc:	4c04      	ldr	r4, [pc, #16]	; (80172d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80172be:	8021      	strh	r1, [r4, #0]
 80172c0:	4619      	mov	r1, r3
 80172c2:	bc70      	pop	{r4, r5, r6}
 80172c4:	f7ff bfdc 	b.w	8017280 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80172c8:	bc70      	pop	{r4, r5, r6}
 80172ca:	4770      	bx	lr
 80172cc:	20027f28 	.word	0x20027f28
 80172d0:	20027f20 	.word	0x20027f20

080172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80172d4:	4a12      	ldr	r2, [pc, #72]	; (8017320 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80172d6:	8803      	ldrh	r3, [r0, #0]
 80172d8:	8812      	ldrh	r2, [r2, #0]
 80172da:	4293      	cmp	r3, r2
 80172dc:	d207      	bcs.n	80172ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80172de:	4a11      	ldr	r2, [pc, #68]	; (8017324 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80172e0:	2114      	movs	r1, #20
 80172e2:	6812      	ldr	r2, [r2, #0]
 80172e4:	fb01 2303 	mla	r3, r1, r3, r2
 80172e8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80172ec:	4770      	bx	lr
 80172ee:	490e      	ldr	r1, [pc, #56]	; (8017328 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80172f0:	8809      	ldrh	r1, [r1, #0]
 80172f2:	4411      	add	r1, r2
 80172f4:	428b      	cmp	r3, r1
 80172f6:	da04      	bge.n	8017302 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80172f8:	1a9b      	subs	r3, r3, r2
 80172fa:	4a0c      	ldr	r2, [pc, #48]	; (801732c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80172fc:	210e      	movs	r1, #14
 80172fe:	6812      	ldr	r2, [r2, #0]
 8017300:	e7f0      	b.n	80172e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8017302:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017306:	4293      	cmp	r3, r2
 8017308:	d108      	bne.n	801731c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801730a:	4b09      	ldr	r3, [pc, #36]	; (8017330 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801730c:	781b      	ldrb	r3, [r3, #0]
 801730e:	b91b      	cbnz	r3, 8017318 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8017310:	4b08      	ldr	r3, [pc, #32]	; (8017334 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8017312:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017316:	4770      	bx	lr
 8017318:	4b07      	ldr	r3, [pc, #28]	; (8017338 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801731a:	e7fa      	b.n	8017312 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801731c:	2000      	movs	r0, #0
 801731e:	4770      	bx	lr
 8017320:	20027f20 	.word	0x20027f20
 8017324:	20027f28 	.word	0x20027f28
 8017328:	20027f24 	.word	0x20027f24
 801732c:	20027f08 	.word	0x20027f08
 8017330:	20027e90 	.word	0x20027e90
 8017334:	20027e92 	.word	0x20027e92
 8017338:	20027e94 	.word	0x20027e94

0801733c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801733c:	4a12      	ldr	r2, [pc, #72]	; (8017388 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801733e:	8803      	ldrh	r3, [r0, #0]
 8017340:	8812      	ldrh	r2, [r2, #0]
 8017342:	4293      	cmp	r3, r2
 8017344:	d207      	bcs.n	8017356 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8017346:	4a11      	ldr	r2, [pc, #68]	; (801738c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017348:	2114      	movs	r1, #20
 801734a:	6812      	ldr	r2, [r2, #0]
 801734c:	fb01 2303 	mla	r3, r1, r3, r2
 8017350:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017354:	4770      	bx	lr
 8017356:	490e      	ldr	r1, [pc, #56]	; (8017390 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017358:	8809      	ldrh	r1, [r1, #0]
 801735a:	4411      	add	r1, r2
 801735c:	428b      	cmp	r3, r1
 801735e:	da04      	bge.n	801736a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017360:	1a9b      	subs	r3, r3, r2
 8017362:	4a0c      	ldr	r2, [pc, #48]	; (8017394 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017364:	210e      	movs	r1, #14
 8017366:	6812      	ldr	r2, [r2, #0]
 8017368:	e7f0      	b.n	801734c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801736a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801736e:	4293      	cmp	r3, r2
 8017370:	d108      	bne.n	8017384 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8017372:	4b09      	ldr	r3, [pc, #36]	; (8017398 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	b91b      	cbnz	r3, 8017380 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017378:	4b08      	ldr	r3, [pc, #32]	; (801739c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801737a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801737e:	4770      	bx	lr
 8017380:	4b07      	ldr	r3, [pc, #28]	; (80173a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017382:	e7fa      	b.n	801737a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017384:	2000      	movs	r0, #0
 8017386:	4770      	bx	lr
 8017388:	20027f20 	.word	0x20027f20
 801738c:	20027f28 	.word	0x20027f28
 8017390:	20027f24 	.word	0x20027f24
 8017394:	20027f08 	.word	0x20027f08
 8017398:	20027e90 	.word	0x20027e90
 801739c:	20027e94 	.word	0x20027e94
 80173a0:	20027e92 	.word	0x20027e92

080173a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80173a4:	4a1f      	ldr	r2, [pc, #124]	; (8017424 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80173a6:	b510      	push	{r4, lr}
 80173a8:	880b      	ldrh	r3, [r1, #0]
 80173aa:	8812      	ldrh	r2, [r2, #0]
 80173ac:	4293      	cmp	r3, r2
 80173ae:	d213      	bcs.n	80173d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80173b0:	4a1d      	ldr	r2, [pc, #116]	; (8017428 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80173b2:	2114      	movs	r1, #20
 80173b4:	6812      	ldr	r2, [r2, #0]
 80173b6:	fb01 2303 	mla	r3, r1, r3, r2
 80173ba:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80173be:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80173c2:	8a1a      	ldrh	r2, [r3, #16]
 80173c4:	8a5b      	ldrh	r3, [r3, #18]
 80173c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80173ca:	8004      	strh	r4, [r0, #0]
 80173cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173d0:	8041      	strh	r1, [r0, #2]
 80173d2:	8082      	strh	r2, [r0, #4]
 80173d4:	80c3      	strh	r3, [r0, #6]
 80173d6:	e00e      	b.n	80173f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80173d8:	4914      	ldr	r1, [pc, #80]	; (801742c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80173da:	8809      	ldrh	r1, [r1, #0]
 80173dc:	4411      	add	r1, r2
 80173de:	428b      	cmp	r3, r1
 80173e0:	da0a      	bge.n	80173f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80173e2:	1a9b      	subs	r3, r3, r2
 80173e4:	4a12      	ldr	r2, [pc, #72]	; (8017430 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80173e6:	210e      	movs	r1, #14
 80173e8:	6812      	ldr	r2, [r2, #0]
 80173ea:	fb01 2303 	mla	r3, r1, r3, r2
 80173ee:	681a      	ldr	r2, [r3, #0]
 80173f0:	6002      	str	r2, [r0, #0]
 80173f2:	685a      	ldr	r2, [r3, #4]
 80173f4:	6042      	str	r2, [r0, #4]
 80173f6:	bd10      	pop	{r4, pc}
 80173f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80173fc:	4293      	cmp	r3, r2
 80173fe:	d10b      	bne.n	8017418 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8017400:	4b0c      	ldr	r3, [pc, #48]	; (8017434 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8017402:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017406:	4b0c      	ldr	r3, [pc, #48]	; (8017438 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017408:	8081      	strh	r1, [r0, #4]
 801740a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801740e:	2300      	movs	r3, #0
 8017410:	80c2      	strh	r2, [r0, #6]
 8017412:	8003      	strh	r3, [r0, #0]
 8017414:	8043      	strh	r3, [r0, #2]
 8017416:	e7ee      	b.n	80173f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8017418:	2300      	movs	r3, #0
 801741a:	8003      	strh	r3, [r0, #0]
 801741c:	8043      	strh	r3, [r0, #2]
 801741e:	8083      	strh	r3, [r0, #4]
 8017420:	e7d8      	b.n	80173d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017422:	bf00      	nop
 8017424:	20027f20 	.word	0x20027f20
 8017428:	20027f28 	.word	0x20027f28
 801742c:	20027f24 	.word	0x20027f24
 8017430:	20027f08 	.word	0x20027f08
 8017434:	20027e8c 	.word	0x20027e8c
 8017438:	20027e8e 	.word	0x20027e8e

0801743c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801743c:	4a17      	ldr	r2, [pc, #92]	; (801749c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801743e:	8803      	ldrh	r3, [r0, #0]
 8017440:	8812      	ldrh	r2, [r2, #0]
 8017442:	4293      	cmp	r3, r2
 8017444:	d213      	bcs.n	801746e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8017446:	4a16      	ldr	r2, [pc, #88]	; (80174a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017448:	2114      	movs	r1, #20
 801744a:	6812      	ldr	r2, [r2, #0]
 801744c:	fb01 2303 	mla	r3, r1, r3, r2
 8017450:	8a1a      	ldrh	r2, [r3, #16]
 8017452:	8919      	ldrh	r1, [r3, #8]
 8017454:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017458:	428a      	cmp	r2, r1
 801745a:	db1d      	blt.n	8017498 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801745c:	8a58      	ldrh	r0, [r3, #18]
 801745e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017462:	895b      	ldrh	r3, [r3, #10]
 8017464:	4298      	cmp	r0, r3
 8017466:	bfac      	ite	ge
 8017468:	2000      	movge	r0, #0
 801746a:	2001      	movlt	r0, #1
 801746c:	4770      	bx	lr
 801746e:	490d      	ldr	r1, [pc, #52]	; (80174a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017470:	8809      	ldrh	r1, [r1, #0]
 8017472:	4411      	add	r1, r2
 8017474:	428b      	cmp	r3, r1
 8017476:	da0d      	bge.n	8017494 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8017478:	1a9b      	subs	r3, r3, r2
 801747a:	4a0b      	ldr	r2, [pc, #44]	; (80174a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801747c:	210e      	movs	r1, #14
 801747e:	6812      	ldr	r2, [r2, #0]
 8017480:	fb01 2303 	mla	r3, r1, r3, r2
 8017484:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017488:	891a      	ldrh	r2, [r3, #8]
 801748a:	4291      	cmp	r1, r2
 801748c:	db04      	blt.n	8017498 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801748e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8017492:	e7e6      	b.n	8017462 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8017494:	2000      	movs	r0, #0
 8017496:	4770      	bx	lr
 8017498:	2001      	movs	r0, #1
 801749a:	4770      	bx	lr
 801749c:	20027f20 	.word	0x20027f20
 80174a0:	20027f28 	.word	0x20027f28
 80174a4:	20027f24 	.word	0x20027f24
 80174a8:	20027f08 	.word	0x20027f08

080174ac <_ZNK8touchgfx6Bitmap7getDataEv>:
 80174ac:	4a12      	ldr	r2, [pc, #72]	; (80174f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80174ae:	8803      	ldrh	r3, [r0, #0]
 80174b0:	8811      	ldrh	r1, [r2, #0]
 80174b2:	428b      	cmp	r3, r1
 80174b4:	d20b      	bcs.n	80174ce <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80174b6:	4a11      	ldr	r2, [pc, #68]	; (80174fc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80174b8:	6812      	ldr	r2, [r2, #0]
 80174ba:	b112      	cbz	r2, 80174c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80174bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80174c0:	b9c0      	cbnz	r0, 80174f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80174c2:	4a0f      	ldr	r2, [pc, #60]	; (8017500 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80174c4:	6811      	ldr	r1, [r2, #0]
 80174c6:	2214      	movs	r2, #20
 80174c8:	4353      	muls	r3, r2
 80174ca:	58c8      	ldr	r0, [r1, r3]
 80174cc:	4770      	bx	lr
 80174ce:	4a0d      	ldr	r2, [pc, #52]	; (8017504 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80174d0:	8812      	ldrh	r2, [r2, #0]
 80174d2:	440a      	add	r2, r1
 80174d4:	4293      	cmp	r3, r2
 80174d6:	da04      	bge.n	80174e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80174d8:	4a08      	ldr	r2, [pc, #32]	; (80174fc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80174da:	6812      	ldr	r2, [r2, #0]
 80174dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80174e0:	4770      	bx	lr
 80174e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80174e6:	4293      	cmp	r3, r2
 80174e8:	d103      	bne.n	80174f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80174ea:	4b07      	ldr	r3, [pc, #28]	; (8017508 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80174f0:	4770      	bx	lr
 80174f2:	2000      	movs	r0, #0
 80174f4:	4770      	bx	lr
 80174f6:	bf00      	nop
 80174f8:	20027f20 	.word	0x20027f20
 80174fc:	20027f04 	.word	0x20027f04
 8017500:	20027f28 	.word	0x20027f28
 8017504:	20027f24 	.word	0x20027f24
 8017508:	20027e98 	.word	0x20027e98

0801750c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801750c:	4b24      	ldr	r3, [pc, #144]	; (80175a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801750e:	8802      	ldrh	r2, [r0, #0]
 8017510:	8818      	ldrh	r0, [r3, #0]
 8017512:	4282      	cmp	r2, r0
 8017514:	d221      	bcs.n	801755a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8017516:	4b23      	ldr	r3, [pc, #140]	; (80175a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017518:	6819      	ldr	r1, [r3, #0]
 801751a:	2314      	movs	r3, #20
 801751c:	fb03 1302 	mla	r3, r3, r2, r1
 8017520:	6858      	ldr	r0, [r3, #4]
 8017522:	2800      	cmp	r0, #0
 8017524:	d03a      	beq.n	801759c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017526:	4920      	ldr	r1, [pc, #128]	; (80175a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017528:	6809      	ldr	r1, [r1, #0]
 801752a:	2900      	cmp	r1, #0
 801752c:	d036      	beq.n	801759c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801752e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017532:	2900      	cmp	r1, #0
 8017534:	d032      	beq.n	801759c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017536:	891a      	ldrh	r2, [r3, #8]
 8017538:	8958      	ldrh	r0, [r3, #10]
 801753a:	4350      	muls	r0, r2
 801753c:	7c5a      	ldrb	r2, [r3, #17]
 801753e:	7cdb      	ldrb	r3, [r3, #19]
 8017540:	0952      	lsrs	r2, r2, #5
 8017542:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017546:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801754a:	2b0b      	cmp	r3, #11
 801754c:	bf18      	it	ne
 801754e:	0040      	lslne	r0, r0, #1
 8017550:	3003      	adds	r0, #3
 8017552:	f020 0003 	bic.w	r0, r0, #3
 8017556:	4408      	add	r0, r1
 8017558:	4770      	bx	lr
 801755a:	4b14      	ldr	r3, [pc, #80]	; (80175ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801755c:	881b      	ldrh	r3, [r3, #0]
 801755e:	4403      	add	r3, r0
 8017560:	429a      	cmp	r2, r3
 8017562:	da1a      	bge.n	801759a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017564:	4b12      	ldr	r3, [pc, #72]	; (80175b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017566:	1a10      	subs	r0, r2, r0
 8017568:	210e      	movs	r1, #14
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	fb01 3000 	mla	r0, r1, r0, r3
 8017570:	7b03      	ldrb	r3, [r0, #12]
 8017572:	f003 031f 	and.w	r3, r3, #31
 8017576:	2b0b      	cmp	r3, #11
 8017578:	d10b      	bne.n	8017592 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801757a:	8903      	ldrh	r3, [r0, #8]
 801757c:	8940      	ldrh	r0, [r0, #10]
 801757e:	4358      	muls	r0, r3
 8017580:	4b09      	ldr	r3, [pc, #36]	; (80175a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017582:	3003      	adds	r0, #3
 8017584:	6819      	ldr	r1, [r3, #0]
 8017586:	f020 0303 	bic.w	r3, r0, #3
 801758a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801758e:	4418      	add	r0, r3
 8017590:	4770      	bx	lr
 8017592:	2b0d      	cmp	r3, #13
 8017594:	d101      	bne.n	801759a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017596:	300d      	adds	r0, #13
 8017598:	4770      	bx	lr
 801759a:	2000      	movs	r0, #0
 801759c:	4770      	bx	lr
 801759e:	bf00      	nop
 80175a0:	20027f20 	.word	0x20027f20
 80175a4:	20027f28 	.word	0x20027f28
 80175a8:	20027f04 	.word	0x20027f04
 80175ac:	20027f24 	.word	0x20027f24
 80175b0:	20027f08 	.word	0x20027f08

080175b4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80175b4:	4a17      	ldr	r2, [pc, #92]	; (8017614 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80175b6:	b510      	push	{r4, lr}
 80175b8:	8803      	ldrh	r3, [r0, #0]
 80175ba:	8812      	ldrh	r2, [r2, #0]
 80175bc:	4293      	cmp	r3, r2
 80175be:	d20c      	bcs.n	80175da <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80175c0:	4a15      	ldr	r2, [pc, #84]	; (8017618 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80175c2:	2114      	movs	r1, #20
 80175c4:	6812      	ldr	r2, [r2, #0]
 80175c6:	fb01 2303 	mla	r3, r1, r3, r2
 80175ca:	7c58      	ldrb	r0, [r3, #17]
 80175cc:	0942      	lsrs	r2, r0, #5
 80175ce:	7cd8      	ldrb	r0, [r3, #19]
 80175d0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80175d4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80175d8:	bd10      	pop	{r4, pc}
 80175da:	4910      	ldr	r1, [pc, #64]	; (801761c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80175dc:	8809      	ldrh	r1, [r1, #0]
 80175de:	4411      	add	r1, r2
 80175e0:	428b      	cmp	r3, r1
 80175e2:	da09      	bge.n	80175f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80175e4:	1a9b      	subs	r3, r3, r2
 80175e6:	4a0e      	ldr	r2, [pc, #56]	; (8017620 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80175e8:	210e      	movs	r1, #14
 80175ea:	6812      	ldr	r2, [r2, #0]
 80175ec:	fb01 2303 	mla	r3, r1, r3, r2
 80175f0:	7b18      	ldrb	r0, [r3, #12]
 80175f2:	f000 001f 	and.w	r0, r0, #31
 80175f6:	e7ef      	b.n	80175d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80175f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80175fc:	4293      	cmp	r3, r2
 80175fe:	d106      	bne.n	801760e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8017600:	f7f7 ff28 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 8017604:	6803      	ldr	r3, [r0, #0]
 8017606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801760c:	4718      	bx	r3
 801760e:	2000      	movs	r0, #0
 8017610:	e7e2      	b.n	80175d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8017612:	bf00      	nop
 8017614:	20027f20 	.word	0x20027f20
 8017618:	20027f28 	.word	0x20027f28
 801761c:	20027f24 	.word	0x20027f24
 8017620:	20027f08 	.word	0x20027f08

08017624 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8017624:	2010      	movs	r0, #16
 8017626:	4770      	bx	lr

08017628 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8017628:	2000      	movs	r0, #0
 801762a:	4770      	bx	lr

0801762c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801762c:	4b02      	ldr	r3, [pc, #8]	; (8017638 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801762e:	8818      	ldrh	r0, [r3, #0]
 8017630:	0040      	lsls	r0, r0, #1
 8017632:	b280      	uxth	r0, r0
 8017634:	4770      	bx	lr
 8017636:	bf00      	nop
 8017638:	20027e92 	.word	0x20027e92

0801763c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801763c:	2bff      	cmp	r3, #255	; 0xff
 801763e:	d050      	beq.n	80176e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017640:	2a0b      	cmp	r2, #11
 8017642:	d04a      	beq.n	80176da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017644:	d80e      	bhi.n	8017664 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017646:	2a03      	cmp	r2, #3
 8017648:	d03f      	beq.n	80176ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801764a:	d804      	bhi.n	8017656 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801764c:	2a01      	cmp	r2, #1
 801764e:	d03e      	beq.n	80176ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017650:	d93f      	bls.n	80176d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017652:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017654:	4770      	bx	lr
 8017656:	2a09      	cmp	r2, #9
 8017658:	d03f      	beq.n	80176da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801765a:	d83c      	bhi.n	80176d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801765c:	2a08      	cmp	r2, #8
 801765e:	d03a      	beq.n	80176d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017660:	2000      	movs	r0, #0
 8017662:	4770      	bx	lr
 8017664:	2a2f      	cmp	r2, #47	; 0x2f
 8017666:	d024      	beq.n	80176b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8017668:	d80d      	bhi.n	8017686 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801766a:	2a2d      	cmp	r2, #45	; 0x2d
 801766c:	d014      	beq.n	8017698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801766e:	d826      	bhi.n	80176be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017670:	2a2c      	cmp	r2, #44	; 0x2c
 8017672:	d1f5      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017674:	684b      	ldr	r3, [r1, #4]
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	2b01      	cmp	r3, #1
 801767a:	d018      	beq.n	80176ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801767c:	d323      	bcc.n	80176c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801767e:	2b02      	cmp	r3, #2
 8017680:	d1ee      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017682:	6880      	ldr	r0, [r0, #8]
 8017684:	4770      	bx	lr
 8017686:	2a31      	cmp	r2, #49	; 0x31
 8017688:	d004      	beq.n	8017694 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801768a:	d328      	bcc.n	80176de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801768c:	2a32      	cmp	r2, #50	; 0x32
 801768e:	d026      	beq.n	80176de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017690:	2a33      	cmp	r2, #51	; 0x33
 8017692:	d1e5      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017694:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8017696:	4770      	bx	lr
 8017698:	684b      	ldr	r3, [r1, #4]
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	2b01      	cmp	r3, #1
 801769e:	d004      	beq.n	80176aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80176a0:	d30b      	bcc.n	80176ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80176a2:	2b02      	cmp	r3, #2
 80176a4:	d1dc      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80176a6:	6900      	ldr	r0, [r0, #16]
 80176a8:	4770      	bx	lr
 80176aa:	6a00      	ldr	r0, [r0, #32]
 80176ac:	4770      	bx	lr
 80176ae:	6980      	ldr	r0, [r0, #24]
 80176b0:	4770      	bx	lr
 80176b2:	684b      	ldr	r3, [r1, #4]
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d1d2      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80176ba:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80176bc:	4770      	bx	lr
 80176be:	684b      	ldr	r3, [r1, #4]
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d1cc      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80176c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80176c8:	4770      	bx	lr
 80176ca:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80176cc:	4770      	bx	lr
 80176ce:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80176d0:	4770      	bx	lr
 80176d2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80176d4:	4770      	bx	lr
 80176d6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80176d8:	4770      	bx	lr
 80176da:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80176dc:	4770      	bx	lr
 80176de:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80176e0:	4770      	bx	lr
 80176e2:	2a0b      	cmp	r2, #11
 80176e4:	d049      	beq.n	801777a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80176e6:	d80e      	bhi.n	8017706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 80176e8:	2a03      	cmp	r2, #3
 80176ea:	d040      	beq.n	801776e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80176ec:	d804      	bhi.n	80176f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 80176ee:	2a01      	cmp	r2, #1
 80176f0:	d03f      	beq.n	8017772 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80176f2:	d940      	bls.n	8017776 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80176f4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80176f6:	4770      	bx	lr
 80176f8:	2a09      	cmp	r2, #9
 80176fa:	d03e      	beq.n	801777a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80176fc:	d801      	bhi.n	8017702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 80176fe:	2a08      	cmp	r2, #8
 8017700:	d1ae      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017702:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8017704:	4770      	bx	lr
 8017706:	2a2f      	cmp	r2, #47	; 0x2f
 8017708:	d024      	beq.n	8017754 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801770a:	d80d      	bhi.n	8017728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801770c:	2a2d      	cmp	r2, #45	; 0x2d
 801770e:	d014      	beq.n	801773a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8017710:	d826      	bhi.n	8017760 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8017712:	2a2c      	cmp	r2, #44	; 0x2c
 8017714:	d1a4      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017716:	684b      	ldr	r3, [r1, #4]
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	2b01      	cmp	r3, #1
 801771c:	d018      	beq.n	8017750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801771e:	d324      	bcc.n	801776a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017720:	2b02      	cmp	r3, #2
 8017722:	d19d      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017724:	68c0      	ldr	r0, [r0, #12]
 8017726:	4770      	bx	lr
 8017728:	2a31      	cmp	r2, #49	; 0x31
 801772a:	d004      	beq.n	8017736 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801772c:	d327      	bcc.n	801777e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801772e:	2a32      	cmp	r2, #50	; 0x32
 8017730:	d025      	beq.n	801777e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017732:	2a33      	cmp	r2, #51	; 0x33
 8017734:	d194      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017736:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8017738:	4770      	bx	lr
 801773a:	684b      	ldr	r3, [r1, #4]
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	2b01      	cmp	r3, #1
 8017740:	d004      	beq.n	801774c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8017742:	d30b      	bcc.n	801775c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8017744:	2b02      	cmp	r3, #2
 8017746:	d18b      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017748:	6940      	ldr	r0, [r0, #20]
 801774a:	4770      	bx	lr
 801774c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801774e:	4770      	bx	lr
 8017750:	69c0      	ldr	r0, [r0, #28]
 8017752:	4770      	bx	lr
 8017754:	684b      	ldr	r3, [r1, #4]
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d181      	bne.n	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801775c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801775e:	4770      	bx	lr
 8017760:	684b      	ldr	r3, [r1, #4]
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	f47f af7b 	bne.w	8017660 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801776a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801776c:	4770      	bx	lr
 801776e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017770:	4770      	bx	lr
 8017772:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017774:	4770      	bx	lr
 8017776:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017778:	4770      	bx	lr
 801777a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801777c:	4770      	bx	lr
 801777e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8017780:	4770      	bx	lr

08017782 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017786:	b087      	sub	sp, #28
 8017788:	9815      	ldr	r0, [sp, #84]	; 0x54
 801778a:	9205      	str	r2, [sp, #20]
 801778c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017790:	9101      	str	r1, [sp, #4]
 8017792:	9202      	str	r2, [sp, #8]
 8017794:	6841      	ldr	r1, [r0, #4]
 8017796:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801779a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801779e:	fb01 2404 	mla	r4, r1, r4, r2
 80177a2:	6802      	ldr	r2, [r0, #0]
 80177a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80177a8:	f8de 2000 	ldr.w	r2, [lr]
 80177ac:	9203      	str	r2, [sp, #12]
 80177ae:	f8de 2004 	ldr.w	r2, [lr, #4]
 80177b2:	3204      	adds	r2, #4
 80177b4:	9204      	str	r2, [sp, #16]
 80177b6:	9a02      	ldr	r2, [sp, #8]
 80177b8:	43d6      	mvns	r6, r2
 80177ba:	b2f6      	uxtb	r6, r6
 80177bc:	9a01      	ldr	r2, [sp, #4]
 80177be:	2a00      	cmp	r2, #0
 80177c0:	dc03      	bgt.n	80177ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80177c2:	9a05      	ldr	r2, [sp, #20]
 80177c4:	2a00      	cmp	r2, #0
 80177c6:	f340 8129 	ble.w	8017a1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80177ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80177cc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80177d0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80177d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80177d6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80177da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80177de:	2b00      	cmp	r3, #0
 80177e0:	dd0e      	ble.n	8017800 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80177e2:	1408      	asrs	r0, r1, #16
 80177e4:	d405      	bmi.n	80177f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80177e6:	4560      	cmp	r0, ip
 80177e8:	da03      	bge.n	80177f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80177ea:	1410      	asrs	r0, r2, #16
 80177ec:	d401      	bmi.n	80177f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80177ee:	42b8      	cmp	r0, r7
 80177f0:	db07      	blt.n	8017802 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80177f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80177f4:	3b01      	subs	r3, #1
 80177f6:	3402      	adds	r4, #2
 80177f8:	4401      	add	r1, r0
 80177fa:	9814      	ldr	r0, [sp, #80]	; 0x50
 80177fc:	4402      	add	r2, r0
 80177fe:	e7ee      	b.n	80177de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017800:	d071      	beq.n	80178e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017802:	1e58      	subs	r0, r3, #1
 8017804:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017806:	fb05 1500 	mla	r5, r5, r0, r1
 801780a:	142d      	asrs	r5, r5, #16
 801780c:	d45f      	bmi.n	80178ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801780e:	4565      	cmp	r5, ip
 8017810:	da5d      	bge.n	80178ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017812:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017814:	fb05 2000 	mla	r0, r5, r0, r2
 8017818:	1400      	asrs	r0, r0, #16
 801781a:	d458      	bmi.n	80178ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801781c:	42b8      	cmp	r0, r7
 801781e:	da56      	bge.n	80178ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017820:	4699      	mov	r9, r3
 8017822:	46a2      	mov	sl, r4
 8017824:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8017828:	f1b9 0f00 	cmp.w	r9, #0
 801782c:	dd57      	ble.n	80178de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801782e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017832:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017836:	9803      	ldr	r0, [sp, #12]
 8017838:	140d      	asrs	r5, r1, #16
 801783a:	f109 39ff 	add.w	r9, r9, #4294967295
 801783e:	fb07 000c 	mla	r0, r7, ip, r0
 8017842:	5d40      	ldrb	r0, [r0, r5]
 8017844:	9d04      	ldr	r5, [sp, #16]
 8017846:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801784a:	f8ba 5000 	ldrh.w	r5, [sl]
 801784e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017852:	122f      	asrs	r7, r5, #8
 8017854:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8017858:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801785c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017860:	00ed      	lsls	r5, r5, #3
 8017862:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8017866:	fb17 f706 	smulbb	r7, r7, r6
 801786a:	b2ed      	uxtb	r5, r5
 801786c:	fb18 f806 	smulbb	r8, r8, r6
 8017870:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8017874:	10c7      	asrs	r7, r0, #3
 8017876:	fb15 f506 	smulbb	r5, r5, r6
 801787a:	00c0      	lsls	r0, r0, #3
 801787c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017880:	fa1f fc8c 	uxth.w	ip, ip
 8017884:	b2c0      	uxtb	r0, r0
 8017886:	fb07 870b 	mla	r7, r7, fp, r8
 801788a:	fb00 500b 	mla	r0, r0, fp, r5
 801788e:	f10c 0501 	add.w	r5, ip, #1
 8017892:	b2bf      	uxth	r7, r7
 8017894:	b280      	uxth	r0, r0
 8017896:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801789a:	f107 0801 	add.w	r8, r7, #1
 801789e:	1c45      	adds	r5, r0, #1
 80178a0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80178a4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80178a8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80178ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80178ae:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80178b2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80178b6:	4401      	add	r1, r0
 80178b8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80178bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80178be:	ea45 0c0c 	orr.w	ip, r5, ip
 80178c2:	4402      	add	r2, r0
 80178c4:	ea4c 0c08 	orr.w	ip, ip, r8
 80178c8:	f82a cb02 	strh.w	ip, [sl], #2
 80178cc:	e7ac      	b.n	8017828 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80178ce:	f04f 0800 	mov.w	r8, #0
 80178d2:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80178d6:	eb03 0008 	add.w	r0, r3, r8
 80178da:	2800      	cmp	r0, #0
 80178dc:	dc41      	bgt.n	8017962 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80178de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80178e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80178e6:	9b01      	ldr	r3, [sp, #4]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	f340 8097 	ble.w	8017a1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80178ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80178f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80178f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80178f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80178fc:	eef0 6a62 	vmov.f32	s13, s5
 8017900:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017904:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017908:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801790c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017910:	eef0 6a43 	vmov.f32	s13, s6
 8017914:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017918:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801791c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017920:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017924:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017928:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801792c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017930:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017934:	ee12 2a90 	vmov	r2, s5
 8017938:	eef0 2a47 	vmov.f32	s5, s14
 801793c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017940:	ee13 2a10 	vmov	r2, s6
 8017944:	9313      	str	r3, [sp, #76]	; 0x4c
 8017946:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017948:	eeb0 3a67 	vmov.f32	s6, s15
 801794c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017950:	9314      	str	r3, [sp, #80]	; 0x50
 8017952:	9b01      	ldr	r3, [sp, #4]
 8017954:	9a05      	ldr	r2, [sp, #20]
 8017956:	3b01      	subs	r3, #1
 8017958:	9301      	str	r3, [sp, #4]
 801795a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801795c:	bf08      	it	eq
 801795e:	4613      	moveq	r3, r2
 8017960:	e72c      	b.n	80177bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017962:	140f      	asrs	r7, r1, #16
 8017964:	d453      	bmi.n	8017a0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017966:	f8de 5008 	ldr.w	r5, [lr, #8]
 801796a:	42bd      	cmp	r5, r7
 801796c:	dd4f      	ble.n	8017a0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801796e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017972:	d44c      	bmi.n	8017a0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017974:	f8de 000c 	ldr.w	r0, [lr, #12]
 8017978:	4560      	cmp	r0, ip
 801797a:	dd48      	ble.n	8017a0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801797c:	9803      	ldr	r0, [sp, #12]
 801797e:	b22d      	sxth	r5, r5
 8017980:	fb0c 0505 	mla	r5, ip, r5, r0
 8017984:	5de8      	ldrb	r0, [r5, r7]
 8017986:	9d04      	ldr	r5, [sp, #16]
 8017988:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801798c:	f06f 0501 	mvn.w	r5, #1
 8017990:	fb05 fb08 	mul.w	fp, r5, r8
 8017994:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017998:	f834 500b 	ldrh.w	r5, [r4, fp]
 801799c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80179a0:	122f      	asrs	r7, r5, #8
 80179a2:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80179a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80179aa:	00ed      	lsls	r5, r5, #3
 80179ac:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80179b0:	fb17 f706 	smulbb	r7, r7, r6
 80179b4:	b2ed      	uxtb	r5, r5
 80179b6:	fb19 f906 	smulbb	r9, r9, r6
 80179ba:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80179be:	10c7      	asrs	r7, r0, #3
 80179c0:	fb15 f506 	smulbb	r5, r5, r6
 80179c4:	00c0      	lsls	r0, r0, #3
 80179c6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80179ca:	fa1f fc8c 	uxth.w	ip, ip
 80179ce:	b2c0      	uxtb	r0, r0
 80179d0:	fb07 970a 	mla	r7, r7, sl, r9
 80179d4:	fb00 500a 	mla	r0, r0, sl, r5
 80179d8:	f10c 0501 	add.w	r5, ip, #1
 80179dc:	b2bf      	uxth	r7, r7
 80179de:	b280      	uxth	r0, r0
 80179e0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80179e4:	f107 0901 	add.w	r9, r7, #1
 80179e8:	1c45      	adds	r5, r0, #1
 80179ea:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80179ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80179f2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80179f6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80179fa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80179fe:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017a02:	ea45 0c0c 	orr.w	ip, r5, ip
 8017a06:	ea4c 0c09 	orr.w	ip, ip, r9
 8017a0a:	f824 c00b 	strh.w	ip, [r4, fp]
 8017a0e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017a10:	f108 38ff 	add.w	r8, r8, #4294967295
 8017a14:	4401      	add	r1, r0
 8017a16:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017a18:	4402      	add	r2, r0
 8017a1a:	e75c      	b.n	80178d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017a1c:	b007      	add	sp, #28
 8017a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a22 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a26:	b085      	sub	sp, #20
 8017a28:	4693      	mov	fp, r2
 8017a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017a2e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017a30:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017a32:	6870      	ldr	r0, [r6, #4]
 8017a34:	9100      	str	r1, [sp, #0]
 8017a36:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017a3a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8017a3e:	fb00 2404 	mla	r4, r0, r4, r2
 8017a42:	6832      	ldr	r2, [r6, #0]
 8017a44:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017a48:	682a      	ldr	r2, [r5, #0]
 8017a4a:	9201      	str	r2, [sp, #4]
 8017a4c:	686a      	ldr	r2, [r5, #4]
 8017a4e:	3204      	adds	r2, #4
 8017a50:	9202      	str	r2, [sp, #8]
 8017a52:	9a00      	ldr	r2, [sp, #0]
 8017a54:	2a00      	cmp	r2, #0
 8017a56:	dc03      	bgt.n	8017a60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017a58:	f1bb 0f00 	cmp.w	fp, #0
 8017a5c:	f340 80a0 	ble.w	8017ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a62:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017a66:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017a6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a6c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017a70:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	dd0c      	ble.n	8017a92 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017a78:	1406      	asrs	r6, r0, #16
 8017a7a:	d405      	bmi.n	8017a88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017a7c:	454e      	cmp	r6, r9
 8017a7e:	da03      	bge.n	8017a88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017a80:	1416      	asrs	r6, r2, #16
 8017a82:	d401      	bmi.n	8017a88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017a84:	4546      	cmp	r6, r8
 8017a86:	db05      	blt.n	8017a94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017a88:	4470      	add	r0, lr
 8017a8a:	4462      	add	r2, ip
 8017a8c:	3b01      	subs	r3, #1
 8017a8e:	3402      	adds	r4, #2
 8017a90:	e7f0      	b.n	8017a74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017a92:	d00f      	beq.n	8017ab4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017a94:	1e5e      	subs	r6, r3, #1
 8017a96:	fb0e 0706 	mla	r7, lr, r6, r0
 8017a9a:	143f      	asrs	r7, r7, #16
 8017a9c:	d541      	bpl.n	8017b22 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8017a9e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017aa2:	4698      	mov	r8, r3
 8017aa4:	9603      	str	r6, [sp, #12]
 8017aa6:	f1b8 0f00 	cmp.w	r8, #0
 8017aaa:	dc59      	bgt.n	8017b60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017aac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ab0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017ab4:	9b00      	ldr	r3, [sp, #0]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	dd72      	ble.n	8017ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017aba:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ac0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017ac4:	eeb0 6a62 	vmov.f32	s12, s5
 8017ac8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017acc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017ad0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017ad4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017ad8:	eeb0 6a43 	vmov.f32	s12, s6
 8017adc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017ae0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017ae4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017ae8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017aec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017af0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017af4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017af8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017afc:	ee12 2a90 	vmov	r2, s5
 8017b00:	eef0 2a47 	vmov.f32	s5, s14
 8017b04:	fb92 fef3 	sdiv	lr, r2, r3
 8017b08:	ee13 2a10 	vmov	r2, s6
 8017b0c:	eeb0 3a67 	vmov.f32	s6, s15
 8017b10:	fb92 fcf3 	sdiv	ip, r2, r3
 8017b14:	9b00      	ldr	r3, [sp, #0]
 8017b16:	3b01      	subs	r3, #1
 8017b18:	9300      	str	r3, [sp, #0]
 8017b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b1c:	bf08      	it	eq
 8017b1e:	465b      	moveq	r3, fp
 8017b20:	e797      	b.n	8017a52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8017b22:	454f      	cmp	r7, r9
 8017b24:	dabb      	bge.n	8017a9e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017b26:	fb0c 2606 	mla	r6, ip, r6, r2
 8017b2a:	1436      	asrs	r6, r6, #16
 8017b2c:	d4b7      	bmi.n	8017a9e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017b2e:	4546      	cmp	r6, r8
 8017b30:	dab5      	bge.n	8017a9e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017b32:	461e      	mov	r6, r3
 8017b34:	46a0      	mov	r8, r4
 8017b36:	2e00      	cmp	r6, #0
 8017b38:	ddb8      	ble.n	8017aac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017b3a:	1417      	asrs	r7, r2, #16
 8017b3c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8017b40:	9901      	ldr	r1, [sp, #4]
 8017b42:	ea4f 4920 	mov.w	r9, r0, asr #16
 8017b46:	4462      	add	r2, ip
 8017b48:	4470      	add	r0, lr
 8017b4a:	fb0a 1707 	mla	r7, sl, r7, r1
 8017b4e:	9902      	ldr	r1, [sp, #8]
 8017b50:	3e01      	subs	r6, #1
 8017b52:	f817 7009 	ldrb.w	r7, [r7, r9]
 8017b56:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8017b5a:	f828 7b02 	strh.w	r7, [r8], #2
 8017b5e:	e7ea      	b.n	8017b36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8017b60:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017b64:	d417      	bmi.n	8017b96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017b66:	68ae      	ldr	r6, [r5, #8]
 8017b68:	454e      	cmp	r6, r9
 8017b6a:	dd14      	ble.n	8017b96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017b6c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017b70:	d411      	bmi.n	8017b96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017b72:	68ef      	ldr	r7, [r5, #12]
 8017b74:	4557      	cmp	r7, sl
 8017b76:	dd0e      	ble.n	8017b96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017b78:	9f01      	ldr	r7, [sp, #4]
 8017b7a:	b236      	sxth	r6, r6
 8017b7c:	f06f 0101 	mvn.w	r1, #1
 8017b80:	fb0a 7606 	mla	r6, sl, r6, r7
 8017b84:	9f02      	ldr	r7, [sp, #8]
 8017b86:	f816 6009 	ldrb.w	r6, [r6, r9]
 8017b8a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8017b8e:	fb01 f608 	mul.w	r6, r1, r8
 8017b92:	9903      	ldr	r1, [sp, #12]
 8017b94:	538f      	strh	r7, [r1, r6]
 8017b96:	4470      	add	r0, lr
 8017b98:	4462      	add	r2, ip
 8017b9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b9e:	e782      	b.n	8017aa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017ba0:	b005      	add	sp, #20
 8017ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ba6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017baa:	b087      	sub	sp, #28
 8017bac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017bae:	9205      	str	r2, [sp, #20]
 8017bb0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017bb4:	9102      	str	r1, [sp, #8]
 8017bb6:	9203      	str	r2, [sp, #12]
 8017bb8:	6861      	ldr	r1, [r4, #4]
 8017bba:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017bbe:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017bc2:	fb01 2000 	mla	r0, r1, r0, r2
 8017bc6:	6822      	ldr	r2, [r4, #0]
 8017bc8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017bcc:	9200      	str	r2, [sp, #0]
 8017bce:	f8dc 2000 	ldr.w	r2, [ip]
 8017bd2:	9204      	str	r2, [sp, #16]
 8017bd4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017bd8:	3204      	adds	r2, #4
 8017bda:	9201      	str	r2, [sp, #4]
 8017bdc:	9a03      	ldr	r2, [sp, #12]
 8017bde:	43d5      	mvns	r5, r2
 8017be0:	b2ed      	uxtb	r5, r5
 8017be2:	9a02      	ldr	r2, [sp, #8]
 8017be4:	2a00      	cmp	r2, #0
 8017be6:	dc03      	bgt.n	8017bf0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017be8:	9a05      	ldr	r2, [sp, #20]
 8017bea:	2a00      	cmp	r2, #0
 8017bec:	f340 812c 	ble.w	8017e48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017bf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017bf2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017bf6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017bfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017bfc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017c00:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	dd10      	ble.n	8017c2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017c08:	140c      	asrs	r4, r1, #16
 8017c0a:	d405      	bmi.n	8017c18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017c0c:	4574      	cmp	r4, lr
 8017c0e:	da03      	bge.n	8017c18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017c10:	1414      	asrs	r4, r2, #16
 8017c12:	d401      	bmi.n	8017c18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017c14:	42bc      	cmp	r4, r7
 8017c16:	db09      	blt.n	8017c2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017c18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017c1a:	3b01      	subs	r3, #1
 8017c1c:	9800      	ldr	r0, [sp, #0]
 8017c1e:	4421      	add	r1, r4
 8017c20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017c22:	3002      	adds	r0, #2
 8017c24:	4422      	add	r2, r4
 8017c26:	9000      	str	r0, [sp, #0]
 8017c28:	e7ec      	b.n	8017c04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8017c2a:	d071      	beq.n	8017d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8017c2c:	1e5c      	subs	r4, r3, #1
 8017c2e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017c30:	fb06 1604 	mla	r6, r6, r4, r1
 8017c34:	1436      	asrs	r6, r6, #16
 8017c36:	d45d      	bmi.n	8017cf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017c38:	4576      	cmp	r6, lr
 8017c3a:	da5b      	bge.n	8017cf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017c3c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8017c3e:	fb06 2404 	mla	r4, r6, r4, r2
 8017c42:	1424      	asrs	r4, r4, #16
 8017c44:	d456      	bmi.n	8017cf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017c46:	42bc      	cmp	r4, r7
 8017c48:	da54      	bge.n	8017cf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017c4a:	4698      	mov	r8, r3
 8017c4c:	f8dd 9000 	ldr.w	r9, [sp]
 8017c50:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8017c54:	f1b8 0f00 	cmp.w	r8, #0
 8017c58:	dd54      	ble.n	8017d04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8017c5a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8017c5e:	1414      	asrs	r4, r2, #16
 8017c60:	9804      	ldr	r0, [sp, #16]
 8017c62:	140e      	asrs	r6, r1, #16
 8017c64:	f108 38ff 	add.w	r8, r8, #4294967295
 8017c68:	fb07 0404 	mla	r4, r7, r4, r0
 8017c6c:	9801      	ldr	r0, [sp, #4]
 8017c6e:	f814 e006 	ldrb.w	lr, [r4, r6]
 8017c72:	f8b9 4000 	ldrh.w	r4, [r9]
 8017c76:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017c7a:	1227      	asrs	r7, r4, #8
 8017c7c:	eb00 0b0e 	add.w	fp, r0, lr
 8017c80:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8017c84:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017c88:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017c8a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017c8e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8017c92:	4401      	add	r1, r0
 8017c94:	fb16 f60a 	smulbb	r6, r6, sl
 8017c98:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017c9a:	fb1b fb0a 	smulbb	fp, fp, sl
 8017c9e:	fb07 6705 	mla	r7, r7, r5, r6
 8017ca2:	10e6      	asrs	r6, r4, #3
 8017ca4:	00e4      	lsls	r4, r4, #3
 8017ca6:	4402      	add	r2, r0
 8017ca8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017cac:	b2bf      	uxth	r7, r7
 8017cae:	b2e4      	uxtb	r4, r4
 8017cb0:	fb06 b605 	mla	r6, r6, r5, fp
 8017cb4:	fb14 f405 	smulbb	r4, r4, r5
 8017cb8:	b2b6      	uxth	r6, r6
 8017cba:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8017cbe:	1c7c      	adds	r4, r7, #1
 8017cc0:	f106 0b01 	add.w	fp, r6, #1
 8017cc4:	fa1f fe8e 	uxth.w	lr, lr
 8017cc8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017ccc:	f10e 0401 	add.w	r4, lr, #1
 8017cd0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8017cd4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017cd8:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8017cdc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017ce0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8017ce4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8017ce8:	4327      	orrs	r7, r4
 8017cea:	ea47 070b 	orr.w	r7, r7, fp
 8017cee:	f829 7b02 	strh.w	r7, [r9], #2
 8017cf2:	e7af      	b.n	8017c54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017cf4:	f04f 0e00 	mov.w	lr, #0
 8017cf8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8017cfc:	eb03 040e 	add.w	r4, r3, lr
 8017d00:	2c00      	cmp	r4, #0
 8017d02:	dc43      	bgt.n	8017d8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8017d04:	9a00      	ldr	r2, [sp, #0]
 8017d06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017d0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017d0e:	9300      	str	r3, [sp, #0]
 8017d10:	9b02      	ldr	r3, [sp, #8]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	f340 8098 	ble.w	8017e48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017d22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017d26:	eef0 6a62 	vmov.f32	s13, s5
 8017d2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017d2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017d32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017d36:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017d3a:	eef0 6a43 	vmov.f32	s13, s6
 8017d3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017d42:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8017d46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017d4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017d4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017d52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017d56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017d5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017d5e:	ee12 2a90 	vmov	r2, s5
 8017d62:	eef0 2a47 	vmov.f32	s5, s14
 8017d66:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d6a:	ee13 2a10 	vmov	r2, s6
 8017d6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8017d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d72:	eeb0 3a67 	vmov.f32	s6, s15
 8017d76:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d7a:	9314      	str	r3, [sp, #80]	; 0x50
 8017d7c:	9b02      	ldr	r3, [sp, #8]
 8017d7e:	9a05      	ldr	r2, [sp, #20]
 8017d80:	3b01      	subs	r3, #1
 8017d82:	9302      	str	r3, [sp, #8]
 8017d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d86:	bf08      	it	eq
 8017d88:	4613      	moveq	r3, r2
 8017d8a:	e72a      	b.n	8017be2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017d8c:	140f      	asrs	r7, r1, #16
 8017d8e:	d454      	bmi.n	8017e3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017d90:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017d94:	42be      	cmp	r6, r7
 8017d96:	dd50      	ble.n	8017e3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017d98:	ea5f 4822 	movs.w	r8, r2, asr #16
 8017d9c:	d44d      	bmi.n	8017e3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017d9e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8017da2:	4544      	cmp	r4, r8
 8017da4:	dd49      	ble.n	8017e3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017da6:	9c04      	ldr	r4, [sp, #16]
 8017da8:	b236      	sxth	r6, r6
 8017daa:	f06f 0001 	mvn.w	r0, #1
 8017dae:	fb08 4606 	mla	r6, r8, r6, r4
 8017db2:	9c01      	ldr	r4, [sp, #4]
 8017db4:	fb00 fa0e 	mul.w	sl, r0, lr
 8017db8:	9800      	ldr	r0, [sp, #0]
 8017dba:	f816 8007 	ldrb.w	r8, [r6, r7]
 8017dbe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017dc2:	eb04 0b08 	add.w	fp, r4, r8
 8017dc6:	f830 400a 	ldrh.w	r4, [r0, sl]
 8017dca:	9801      	ldr	r0, [sp, #4]
 8017dcc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017dd0:	1227      	asrs	r7, r4, #8
 8017dd2:	f89b b001 	ldrb.w	fp, [fp, #1]
 8017dd6:	fb16 f609 	smulbb	r6, r6, r9
 8017dda:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017dde:	f810 8008 	ldrb.w	r8, [r0, r8]
 8017de2:	fb1b fb09 	smulbb	fp, fp, r9
 8017de6:	fb07 6705 	mla	r7, r7, r5, r6
 8017dea:	10e6      	asrs	r6, r4, #3
 8017dec:	00e4      	lsls	r4, r4, #3
 8017dee:	9800      	ldr	r0, [sp, #0]
 8017df0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017df4:	b2bf      	uxth	r7, r7
 8017df6:	b2e4      	uxtb	r4, r4
 8017df8:	fb06 b605 	mla	r6, r6, r5, fp
 8017dfc:	fb14 f405 	smulbb	r4, r4, r5
 8017e00:	b2b6      	uxth	r6, r6
 8017e02:	fb08 4809 	mla	r8, r8, r9, r4
 8017e06:	1c7c      	adds	r4, r7, #1
 8017e08:	f106 0b01 	add.w	fp, r6, #1
 8017e0c:	fa1f f888 	uxth.w	r8, r8
 8017e10:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017e14:	f108 0401 	add.w	r4, r8, #1
 8017e18:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8017e1c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017e20:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8017e24:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017e28:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8017e2c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8017e30:	4327      	orrs	r7, r4
 8017e32:	ea47 070b 	orr.w	r7, r7, fp
 8017e36:	f820 700a 	strh.w	r7, [r0, sl]
 8017e3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017e3c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017e40:	4401      	add	r1, r0
 8017e42:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017e44:	4402      	add	r2, r0
 8017e46:	e759      	b.n	8017cfc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017e48:	b007      	add	sp, #28
 8017e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017e50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e54:	b085      	sub	sp, #20
 8017e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e5a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017e5c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017e5e:	9203      	str	r2, [sp, #12]
 8017e60:	6870      	ldr	r0, [r6, #4]
 8017e62:	686f      	ldr	r7, [r5, #4]
 8017e64:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8017e68:	3704      	adds	r7, #4
 8017e6a:	9101      	str	r1, [sp, #4]
 8017e6c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017e70:	fb00 2404 	mla	r4, r0, r4, r2
 8017e74:	6832      	ldr	r2, [r6, #0]
 8017e76:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017e7a:	682a      	ldr	r2, [r5, #0]
 8017e7c:	9202      	str	r2, [sp, #8]
 8017e7e:	9a01      	ldr	r2, [sp, #4]
 8017e80:	2a00      	cmp	r2, #0
 8017e82:	dc03      	bgt.n	8017e8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017e84:	9a03      	ldr	r2, [sp, #12]
 8017e86:	2a00      	cmp	r2, #0
 8017e88:	f340 80cc 	ble.w	8018024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017e8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017e8e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017e92:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017e96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017e98:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017e9c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	dd0d      	ble.n	8017ec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017ea4:	1406      	asrs	r6, r0, #16
 8017ea6:	d405      	bmi.n	8017eb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017ea8:	454e      	cmp	r6, r9
 8017eaa:	da03      	bge.n	8017eb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017eac:	1416      	asrs	r6, r2, #16
 8017eae:	d401      	bmi.n	8017eb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017eb0:	4546      	cmp	r6, r8
 8017eb2:	db06      	blt.n	8017ec2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017eb4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017eb6:	4460      	add	r0, ip
 8017eb8:	3b01      	subs	r3, #1
 8017eba:	3402      	adds	r4, #2
 8017ebc:	4432      	add	r2, r6
 8017ebe:	e7ef      	b.n	8017ea0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017ec0:	d00f      	beq.n	8017ee2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017ec2:	1e5e      	subs	r6, r3, #1
 8017ec4:	fb0c 0e06 	mla	lr, ip, r6, r0
 8017ec8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8017ecc:	d543      	bpl.n	8017f56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8017ece:	4698      	mov	r8, r3
 8017ed0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8017ed4:	f1b8 0f00 	cmp.w	r8, #0
 8017ed8:	dc71      	bgt.n	8017fbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8017eda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ede:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017ee2:	9b01      	ldr	r3, [sp, #4]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	f340 809d 	ble.w	8018024 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017eea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ef0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017ef4:	eeb0 6a62 	vmov.f32	s12, s5
 8017ef8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017efc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017f00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f04:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017f08:	eeb0 6a43 	vmov.f32	s12, s6
 8017f0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f10:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017f14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017f18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017f1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017f20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017f24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017f28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017f2c:	ee12 2a90 	vmov	r2, s5
 8017f30:	eef0 2a47 	vmov.f32	s5, s14
 8017f34:	fb92 fcf3 	sdiv	ip, r2, r3
 8017f38:	ee13 2a10 	vmov	r2, s6
 8017f3c:	eeb0 3a67 	vmov.f32	s6, s15
 8017f40:	fb92 f3f3 	sdiv	r3, r2, r3
 8017f44:	9312      	str	r3, [sp, #72]	; 0x48
 8017f46:	9b01      	ldr	r3, [sp, #4]
 8017f48:	9a03      	ldr	r2, [sp, #12]
 8017f4a:	3b01      	subs	r3, #1
 8017f4c:	9301      	str	r3, [sp, #4]
 8017f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f50:	bf08      	it	eq
 8017f52:	4613      	moveq	r3, r2
 8017f54:	e793      	b.n	8017e7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8017f56:	45ce      	cmp	lr, r9
 8017f58:	dab9      	bge.n	8017ece <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017f5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017f5c:	fb01 2606 	mla	r6, r1, r6, r2
 8017f60:	1436      	asrs	r6, r6, #16
 8017f62:	d4b4      	bmi.n	8017ece <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017f64:	4546      	cmp	r6, r8
 8017f66:	dab2      	bge.n	8017ece <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017f68:	4698      	mov	r8, r3
 8017f6a:	46a2      	mov	sl, r4
 8017f6c:	f1b8 0f00 	cmp.w	r8, #0
 8017f70:	ddb3      	ble.n	8017eda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017f72:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017f76:	1416      	asrs	r6, r2, #16
 8017f78:	9902      	ldr	r1, [sp, #8]
 8017f7a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8017f7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017f82:	4460      	add	r0, ip
 8017f84:	fb09 1606 	mla	r6, r9, r6, r1
 8017f88:	4928      	ldr	r1, [pc, #160]	; (801802c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8017f8a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8017f8e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017f92:	eb07 0b0e 	add.w	fp, r7, lr
 8017f96:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8017f9a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8017f9e:	00f6      	lsls	r6, r6, #3
 8017fa0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8017fa4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017fa6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017faa:	440a      	add	r2, r1
 8017fac:	ea49 0606 	orr.w	r6, r9, r6
 8017fb0:	f817 900e 	ldrb.w	r9, [r7, lr]
 8017fb4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8017fb8:	f82a 6b02 	strh.w	r6, [sl], #2
 8017fbc:	e7d6      	b.n	8017f6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017fbe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017fc2:	d429      	bmi.n	8018018 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017fc4:	68ae      	ldr	r6, [r5, #8]
 8017fc6:	454e      	cmp	r6, r9
 8017fc8:	dd26      	ble.n	8018018 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017fca:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8017fce:	d423      	bmi.n	8018018 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017fd0:	68e9      	ldr	r1, [r5, #12]
 8017fd2:	4559      	cmp	r1, fp
 8017fd4:	dd20      	ble.n	8018018 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017fd6:	fa0f fe86 	sxth.w	lr, r6
 8017fda:	9902      	ldr	r1, [sp, #8]
 8017fdc:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8017fe0:	f06f 0101 	mvn.w	r1, #1
 8017fe4:	f81e e009 	ldrb.w	lr, [lr, r9]
 8017fe8:	fb01 f908 	mul.w	r9, r1, r8
 8017fec:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8017ff0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017ff4:	eb07 060e 	add.w	r6, r7, lr
 8017ff8:	f896 b002 	ldrb.w	fp, [r6, #2]
 8017ffc:	7876      	ldrb	r6, [r6, #1]
 8017ffe:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8018002:	00f6      	lsls	r6, r6, #3
 8018004:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018008:	ea4b 0606 	orr.w	r6, fp, r6
 801800c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8018010:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8018014:	f82a 6009 	strh.w	r6, [sl, r9]
 8018018:	9912      	ldr	r1, [sp, #72]	; 0x48
 801801a:	4460      	add	r0, ip
 801801c:	f108 38ff 	add.w	r8, r8, #4294967295
 8018020:	440a      	add	r2, r1
 8018022:	e757      	b.n	8017ed4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018024:	b005      	add	sp, #20
 8018026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801802a:	bf00      	nop
 801802c:	fffff800 	.word	0xfffff800

08018030 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018034:	b087      	sub	sp, #28
 8018036:	468b      	mov	fp, r1
 8018038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801803c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801803e:	9204      	str	r2, [sp, #16]
 8018040:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018044:	6841      	ldr	r1, [r0, #4]
 8018046:	9205      	str	r2, [sp, #20]
 8018048:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801804c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018050:	fb01 2404 	mla	r4, r1, r4, r2
 8018054:	6802      	ldr	r2, [r0, #0]
 8018056:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801805a:	f8dc 2000 	ldr.w	r2, [ip]
 801805e:	9201      	str	r2, [sp, #4]
 8018060:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018064:	3204      	adds	r2, #4
 8018066:	9202      	str	r2, [sp, #8]
 8018068:	f1bb 0f00 	cmp.w	fp, #0
 801806c:	dc03      	bgt.n	8018076 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801806e:	9a04      	ldr	r2, [sp, #16]
 8018070:	2a00      	cmp	r2, #0
 8018072:	f340 8138 	ble.w	80182e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8018076:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018078:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801807c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018080:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018082:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8018086:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801808a:	2b00      	cmp	r3, #0
 801808c:	dd0e      	ble.n	80180ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801808e:	1402      	asrs	r2, r0, #16
 8018090:	d405      	bmi.n	801809e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018092:	42ba      	cmp	r2, r7
 8018094:	da03      	bge.n	801809e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018096:	140a      	asrs	r2, r1, #16
 8018098:	d401      	bmi.n	801809e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801809a:	42b2      	cmp	r2, r6
 801809c:	db07      	blt.n	80180ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801809e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80180a0:	3b01      	subs	r3, #1
 80180a2:	3402      	adds	r4, #2
 80180a4:	4410      	add	r0, r2
 80180a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80180a8:	4411      	add	r1, r2
 80180aa:	e7ee      	b.n	801808a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80180ac:	d019      	beq.n	80180e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80180ae:	1e5a      	subs	r2, r3, #1
 80180b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80180b2:	fb05 0502 	mla	r5, r5, r2, r0
 80180b6:	142d      	asrs	r5, r5, #16
 80180b8:	d409      	bmi.n	80180ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180ba:	42bd      	cmp	r5, r7
 80180bc:	da07      	bge.n	80180ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80180c0:	fb05 1202 	mla	r2, r5, r2, r1
 80180c4:	1412      	asrs	r2, r2, #16
 80180c6:	d402      	bmi.n	80180ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80180c8:	42b2      	cmp	r2, r6
 80180ca:	f2c0 80ac 	blt.w	8018226 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80180ce:	f04f 0e00 	mov.w	lr, #0
 80180d2:	eb03 020e 	add.w	r2, r3, lr
 80180d6:	2a00      	cmp	r2, #0
 80180d8:	dc3e      	bgt.n	8018158 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80180da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80180de:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80180e2:	f1bb 0f00 	cmp.w	fp, #0
 80180e6:	f340 80fe 	ble.w	80182e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80180ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80180ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80180f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80180f4:	f1bb 0b01 	subs.w	fp, fp, #1
 80180f8:	eeb0 6a62 	vmov.f32	s12, s5
 80180fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018100:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018104:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018108:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801810c:	eeb0 6a43 	vmov.f32	s12, s6
 8018110:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018114:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018118:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801811c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018120:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018124:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018128:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801812c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018130:	ee12 2a90 	vmov	r2, s5
 8018134:	eef0 2a47 	vmov.f32	s5, s14
 8018138:	fb92 f3f3 	sdiv	r3, r2, r3
 801813c:	ee13 2a10 	vmov	r2, s6
 8018140:	9313      	str	r3, [sp, #76]	; 0x4c
 8018142:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018144:	eeb0 3a67 	vmov.f32	s6, s15
 8018148:	fb92 f3f3 	sdiv	r3, r2, r3
 801814c:	9a04      	ldr	r2, [sp, #16]
 801814e:	9314      	str	r3, [sp, #80]	; 0x50
 8018150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018152:	bf08      	it	eq
 8018154:	4613      	moveq	r3, r2
 8018156:	e787      	b.n	8018068 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018158:	1406      	asrs	r6, r0, #16
 801815a:	d45d      	bmi.n	8018218 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801815c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8018160:	42b5      	cmp	r5, r6
 8018162:	dd59      	ble.n	8018218 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018164:	140f      	asrs	r7, r1, #16
 8018166:	d457      	bmi.n	8018218 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018168:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801816c:	42ba      	cmp	r2, r7
 801816e:	dd53      	ble.n	8018218 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018170:	9a01      	ldr	r2, [sp, #4]
 8018172:	b22d      	sxth	r5, r5
 8018174:	fb07 2505 	mla	r5, r7, r5, r2
 8018178:	5daa      	ldrb	r2, [r5, r6]
 801817a:	9d02      	ldr	r5, [sp, #8]
 801817c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018180:	0e2e      	lsrs	r6, r5, #24
 8018182:	d049      	beq.n	8018218 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018184:	f06f 0201 	mvn.w	r2, #1
 8018188:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801818c:	fb02 f20e 	mul.w	r2, r2, lr
 8018190:	f834 8002 	ldrh.w	r8, [r4, r2]
 8018194:	9203      	str	r2, [sp, #12]
 8018196:	9a05      	ldr	r2, [sp, #20]
 8018198:	ea4f 2728 	mov.w	r7, r8, asr #8
 801819c:	4356      	muls	r6, r2
 801819e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80181a2:	1c72      	adds	r2, r6, #1
 80181a4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80181a8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80181ac:	b2ed      	uxtb	r5, r5
 80181ae:	1212      	asrs	r2, r2, #8
 80181b0:	fa1f f982 	uxth.w	r9, r2
 80181b4:	43d2      	mvns	r2, r2
 80181b6:	fb16 f609 	smulbb	r6, r6, r9
 80181ba:	b2d2      	uxtb	r2, r2
 80181bc:	fb15 f509 	smulbb	r5, r5, r9
 80181c0:	fb07 6702 	mla	r7, r7, r2, r6
 80181c4:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80181c8:	fb1a fa09 	smulbb	sl, sl, r9
 80181cc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80181d0:	b2bf      	uxth	r7, r7
 80181d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80181d6:	fa5f f888 	uxtb.w	r8, r8
 80181da:	fb06 a602 	mla	r6, r6, r2, sl
 80181de:	fb08 5502 	mla	r5, r8, r2, r5
 80181e2:	1c7a      	adds	r2, r7, #1
 80181e4:	b2b6      	uxth	r6, r6
 80181e6:	b2ad      	uxth	r5, r5
 80181e8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80181ec:	9a03      	ldr	r2, [sp, #12]
 80181ee:	f105 0a01 	add.w	sl, r5, #1
 80181f2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80181f6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80181fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80181fe:	ea4a 0707 	orr.w	r7, sl, r7
 8018202:	f106 0a01 	add.w	sl, r6, #1
 8018206:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801820a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801820e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018212:	ea47 070a 	orr.w	r7, r7, sl
 8018216:	52a7      	strh	r7, [r4, r2]
 8018218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801821a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801821e:	4410      	add	r0, r2
 8018220:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018222:	4411      	add	r1, r2
 8018224:	e755      	b.n	80180d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018226:	f04f 0800 	mov.w	r8, #0
 801822a:	eba3 0208 	sub.w	r2, r3, r8
 801822e:	2a00      	cmp	r2, #0
 8018230:	f77f af53 	ble.w	80180da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018234:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8018238:	140a      	asrs	r2, r1, #16
 801823a:	9f01      	ldr	r7, [sp, #4]
 801823c:	1405      	asrs	r5, r0, #16
 801823e:	fb06 7202 	mla	r2, r6, r2, r7
 8018242:	5d52      	ldrb	r2, [r2, r5]
 8018244:	9d02      	ldr	r5, [sp, #8]
 8018246:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801824a:	0e2e      	lsrs	r6, r5, #24
 801824c:	d044      	beq.n	80182d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801824e:	9a05      	ldr	r2, [sp, #20]
 8018250:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018254:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018258:	4356      	muls	r6, r2
 801825a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801825e:	1c72      	adds	r2, r6, #1
 8018260:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018264:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018268:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801826c:	b2ed      	uxtb	r5, r5
 801826e:	1212      	asrs	r2, r2, #8
 8018270:	fa1f f982 	uxth.w	r9, r2
 8018274:	43d2      	mvns	r2, r2
 8018276:	fb16 f609 	smulbb	r6, r6, r9
 801827a:	b2d2      	uxtb	r2, r2
 801827c:	fb15 f509 	smulbb	r5, r5, r9
 8018280:	fb07 6702 	mla	r7, r7, r2, r6
 8018284:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018288:	fb1a fa09 	smulbb	sl, sl, r9
 801828c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018290:	b2bf      	uxth	r7, r7
 8018292:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018296:	fa5f fe8e 	uxtb.w	lr, lr
 801829a:	fb06 a602 	mla	r6, r6, r2, sl
 801829e:	fb0e 5502 	mla	r5, lr, r2, r5
 80182a2:	1c7a      	adds	r2, r7, #1
 80182a4:	b2b6      	uxth	r6, r6
 80182a6:	b2ad      	uxth	r5, r5
 80182a8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80182ac:	f105 0a01 	add.w	sl, r5, #1
 80182b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80182b4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80182b8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80182bc:	ea4a 0707 	orr.w	r7, sl, r7
 80182c0:	f106 0a01 	add.w	sl, r6, #1
 80182c4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80182c8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80182cc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80182d0:	ea47 070a 	orr.w	r7, r7, sl
 80182d4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80182d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80182da:	f108 0801 	add.w	r8, r8, #1
 80182de:	4410      	add	r0, r2
 80182e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80182e2:	4411      	add	r1, r2
 80182e4:	e7a1      	b.n	801822a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80182e6:	b007      	add	sp, #28
 80182e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80182ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182f0:	b085      	sub	sp, #20
 80182f2:	468b      	mov	fp, r1
 80182f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80182f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80182fa:	9203      	str	r2, [sp, #12]
 80182fc:	6841      	ldr	r1, [r0, #4]
 80182fe:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8018302:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018306:	fb01 2404 	mla	r4, r1, r4, r2
 801830a:	6802      	ldr	r2, [r0, #0]
 801830c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018310:	f8de 2000 	ldr.w	r2, [lr]
 8018314:	9200      	str	r2, [sp, #0]
 8018316:	f8de 2004 	ldr.w	r2, [lr, #4]
 801831a:	3204      	adds	r2, #4
 801831c:	9201      	str	r2, [sp, #4]
 801831e:	f1bb 0f00 	cmp.w	fp, #0
 8018322:	dc03      	bgt.n	801832c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018324:	9a03      	ldr	r2, [sp, #12]
 8018326:	2a00      	cmp	r2, #0
 8018328:	f340 8153 	ble.w	80185d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801832c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801832e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018332:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018336:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018338:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801833c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018340:	2b00      	cmp	r3, #0
 8018342:	dd0e      	ble.n	8018362 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018344:	1408      	asrs	r0, r1, #16
 8018346:	d405      	bmi.n	8018354 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018348:	42b8      	cmp	r0, r7
 801834a:	da03      	bge.n	8018354 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801834c:	1410      	asrs	r0, r2, #16
 801834e:	d401      	bmi.n	8018354 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018350:	42b0      	cmp	r0, r6
 8018352:	db07      	blt.n	8018364 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018354:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018356:	3b01      	subs	r3, #1
 8018358:	3402      	adds	r4, #2
 801835a:	4401      	add	r1, r0
 801835c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801835e:	4402      	add	r2, r0
 8018360:	e7ee      	b.n	8018340 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018362:	d017      	beq.n	8018394 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018364:	1e58      	subs	r0, r3, #1
 8018366:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018368:	fb05 1500 	mla	r5, r5, r0, r1
 801836c:	142d      	asrs	r5, r5, #16
 801836e:	d409      	bmi.n	8018384 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018370:	42bd      	cmp	r5, r7
 8018372:	da07      	bge.n	8018384 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018374:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018376:	fb05 2000 	mla	r0, r5, r0, r2
 801837a:	1400      	asrs	r0, r0, #16
 801837c:	d402      	bmi.n	8018384 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801837e:	42b0      	cmp	r0, r6
 8018380:	f2c0 80bc 	blt.w	80184fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8018384:	2600      	movs	r6, #0
 8018386:	1998      	adds	r0, r3, r6
 8018388:	2800      	cmp	r0, #0
 801838a:	dc3e      	bgt.n	801840a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801838c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018390:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018394:	f1bb 0f00 	cmp.w	fp, #0
 8018398:	f340 811b 	ble.w	80185d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801839c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80183a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80183a6:	f1bb 0b01 	subs.w	fp, fp, #1
 80183aa:	eeb0 6a62 	vmov.f32	s12, s5
 80183ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80183b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80183b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183ba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80183be:	eeb0 6a43 	vmov.f32	s12, s6
 80183c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80183ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80183ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80183d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80183d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80183da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80183de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80183e2:	ee12 2a90 	vmov	r2, s5
 80183e6:	eef0 2a47 	vmov.f32	s5, s14
 80183ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80183ee:	ee13 2a10 	vmov	r2, s6
 80183f2:	9311      	str	r3, [sp, #68]	; 0x44
 80183f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183f6:	eeb0 3a67 	vmov.f32	s6, s15
 80183fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80183fe:	9a03      	ldr	r2, [sp, #12]
 8018400:	9312      	str	r3, [sp, #72]	; 0x48
 8018402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018404:	bf08      	it	eq
 8018406:	4613      	moveq	r3, r2
 8018408:	e789      	b.n	801831e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801840a:	140f      	asrs	r7, r1, #16
 801840c:	d426      	bmi.n	801845c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801840e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018412:	42bd      	cmp	r5, r7
 8018414:	dd22      	ble.n	801845c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018416:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801841a:	d41f      	bmi.n	801845c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801841c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018420:	4560      	cmp	r0, ip
 8018422:	dd1b      	ble.n	801845c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018424:	9800      	ldr	r0, [sp, #0]
 8018426:	b22d      	sxth	r5, r5
 8018428:	fb0c 0505 	mla	r5, ip, r5, r0
 801842c:	5de8      	ldrb	r0, [r5, r7]
 801842e:	9d01      	ldr	r5, [sp, #4]
 8018430:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018434:	0e07      	lsrs	r7, r0, #24
 8018436:	2fff      	cmp	r7, #255	; 0xff
 8018438:	d116      	bne.n	8018468 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801843a:	f06f 0501 	mvn.w	r5, #1
 801843e:	fb05 f706 	mul.w	r7, r5, r6
 8018442:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8018446:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801844a:	0945      	lsrs	r5, r0, #5
 801844c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018450:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018454:	ea4c 0505 	orr.w	r5, ip, r5
 8018458:	4305      	orrs	r5, r0
 801845a:	53e5      	strh	r5, [r4, r7]
 801845c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801845e:	3e01      	subs	r6, #1
 8018460:	4401      	add	r1, r0
 8018462:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018464:	4402      	add	r2, r0
 8018466:	e78e      	b.n	8018386 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018468:	b2fd      	uxtb	r5, r7
 801846a:	2f00      	cmp	r7, #0
 801846c:	d0f6      	beq.n	801845c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801846e:	f06f 0701 	mvn.w	r7, #1
 8018472:	fa1f f985 	uxth.w	r9, r5
 8018476:	43ed      	mvns	r5, r5
 8018478:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801847c:	4377      	muls	r7, r6
 801847e:	fb1a fa09 	smulbb	sl, sl, r9
 8018482:	b2ed      	uxtb	r5, r5
 8018484:	f834 8007 	ldrh.w	r8, [r4, r7]
 8018488:	9702      	str	r7, [sp, #8]
 801848a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801848e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018492:	fb17 f709 	smulbb	r7, r7, r9
 8018496:	b2c0      	uxtb	r0, r0
 8018498:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801849c:	fb10 f009 	smulbb	r0, r0, r9
 80184a0:	fb0c 7c05 	mla	ip, ip, r5, r7
 80184a4:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80184a8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80184ac:	fa1f fc8c 	uxth.w	ip, ip
 80184b0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80184b4:	fa5f f888 	uxtb.w	r8, r8
 80184b8:	fb07 a705 	mla	r7, r7, r5, sl
 80184bc:	fb08 0005 	mla	r0, r8, r5, r0
 80184c0:	f10c 0501 	add.w	r5, ip, #1
 80184c4:	b2bf      	uxth	r7, r7
 80184c6:	b280      	uxth	r0, r0
 80184c8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80184cc:	f100 0a01 	add.w	sl, r0, #1
 80184d0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80184d4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80184d8:	9802      	ldr	r0, [sp, #8]
 80184da:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80184de:	ea4a 0c0c 	orr.w	ip, sl, ip
 80184e2:	f107 0a01 	add.w	sl, r7, #1
 80184e6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80184ea:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80184ee:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80184f2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80184f6:	f824 c000 	strh.w	ip, [r4, r0]
 80184fa:	e7af      	b.n	801845c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80184fc:	f04f 0800 	mov.w	r8, #0
 8018500:	eba3 0008 	sub.w	r0, r3, r8
 8018504:	2800      	cmp	r0, #0
 8018506:	f77f af41 	ble.w	801838c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801850a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801850e:	1410      	asrs	r0, r2, #16
 8018510:	9f00      	ldr	r7, [sp, #0]
 8018512:	140d      	asrs	r5, r1, #16
 8018514:	fb06 7000 	mla	r0, r6, r0, r7
 8018518:	5d40      	ldrb	r0, [r0, r5]
 801851a:	9d01      	ldr	r5, [sp, #4]
 801851c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8018520:	0e2e      	lsrs	r6, r5, #24
 8018522:	2eff      	cmp	r6, #255	; 0xff
 8018524:	d112      	bne.n	801854c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8018526:	482c      	ldr	r0, [pc, #176]	; (80185d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8018528:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801852c:	0968      	lsrs	r0, r5, #5
 801852e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018532:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018536:	4330      	orrs	r0, r6
 8018538:	4328      	orrs	r0, r5
 801853a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801853e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018540:	f108 0801 	add.w	r8, r8, #1
 8018544:	4401      	add	r1, r0
 8018546:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018548:	4402      	add	r2, r0
 801854a:	e7d9      	b.n	8018500 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801854c:	b2f0      	uxtb	r0, r6
 801854e:	2e00      	cmp	r6, #0
 8018550:	d0f5      	beq.n	801853e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8018552:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8018556:	fa1f f980 	uxth.w	r9, r0
 801855a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801855e:	43c0      	mvns	r0, r0
 8018560:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018564:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018568:	fb16 f609 	smulbb	r6, r6, r9
 801856c:	b2c0      	uxtb	r0, r0
 801856e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018572:	b2ed      	uxtb	r5, r5
 8018574:	fb1a fa09 	smulbb	sl, sl, r9
 8018578:	fb07 6700 	mla	r7, r7, r0, r6
 801857c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018580:	fb15 f509 	smulbb	r5, r5, r9
 8018584:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018588:	b2bf      	uxth	r7, r7
 801858a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801858e:	fa5f fc8c 	uxtb.w	ip, ip
 8018592:	fb06 a600 	mla	r6, r6, r0, sl
 8018596:	fb0c 5500 	mla	r5, ip, r0, r5
 801859a:	1c78      	adds	r0, r7, #1
 801859c:	b2b6      	uxth	r6, r6
 801859e:	b2ad      	uxth	r5, r5
 80185a0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80185a4:	f105 0a01 	add.w	sl, r5, #1
 80185a8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80185ac:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80185b0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80185b4:	ea4a 0707 	orr.w	r7, sl, r7
 80185b8:	f106 0a01 	add.w	sl, r6, #1
 80185bc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80185c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80185c4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80185c8:	ea47 070a 	orr.w	r7, r7, sl
 80185cc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80185d0:	e7b5      	b.n	801853e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80185d2:	b005      	add	sp, #20
 80185d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d8:	fffff800 	.word	0xfffff800

080185dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80185dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e0:	b087      	sub	sp, #28
 80185e2:	468b      	mov	fp, r1
 80185e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80185e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80185ea:	9204      	str	r2, [sp, #16]
 80185ec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80185f0:	6861      	ldr	r1, [r4, #4]
 80185f2:	9205      	str	r2, [sp, #20]
 80185f4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80185f8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80185fc:	fb01 2000 	mla	r0, r1, r0, r2
 8018600:	6822      	ldr	r2, [r4, #0]
 8018602:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018606:	f8de 2000 	ldr.w	r2, [lr]
 801860a:	9201      	str	r2, [sp, #4]
 801860c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018610:	9202      	str	r2, [sp, #8]
 8018612:	f1bb 0f00 	cmp.w	fp, #0
 8018616:	dc03      	bgt.n	8018620 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018618:	9a04      	ldr	r2, [sp, #16]
 801861a:	2a00      	cmp	r2, #0
 801861c:	f340 8142 	ble.w	80188a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018620:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018622:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018626:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801862a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801862c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8018630:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018634:	2b00      	cmp	r3, #0
 8018636:	dd0e      	ble.n	8018656 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018638:	140c      	asrs	r4, r1, #16
 801863a:	d405      	bmi.n	8018648 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801863c:	42bc      	cmp	r4, r7
 801863e:	da03      	bge.n	8018648 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018640:	1414      	asrs	r4, r2, #16
 8018642:	d401      	bmi.n	8018648 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018644:	42b4      	cmp	r4, r6
 8018646:	db07      	blt.n	8018658 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018648:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801864a:	3b01      	subs	r3, #1
 801864c:	3002      	adds	r0, #2
 801864e:	4421      	add	r1, r4
 8018650:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018652:	4422      	add	r2, r4
 8018654:	e7ee      	b.n	8018634 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8018656:	d019      	beq.n	801868c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018658:	1e5c      	subs	r4, r3, #1
 801865a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801865c:	fb05 1504 	mla	r5, r5, r4, r1
 8018660:	142d      	asrs	r5, r5, #16
 8018662:	d409      	bmi.n	8018678 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018664:	42bd      	cmp	r5, r7
 8018666:	da07      	bge.n	8018678 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018668:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801866a:	fb05 2404 	mla	r4, r5, r4, r2
 801866e:	1424      	asrs	r4, r4, #16
 8018670:	d402      	bmi.n	8018678 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018672:	42b4      	cmp	r4, r6
 8018674:	f2c0 80b1 	blt.w	80187da <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8018678:	f04f 0800 	mov.w	r8, #0
 801867c:	eb03 0408 	add.w	r4, r3, r8
 8018680:	2c00      	cmp	r4, #0
 8018682:	dc3e      	bgt.n	8018702 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018684:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018688:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801868c:	f1bb 0f00 	cmp.w	fp, #0
 8018690:	f340 8108 	ble.w	80188a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018694:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801869a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801869e:	f1bb 0b01 	subs.w	fp, fp, #1
 80186a2:	eeb0 6a62 	vmov.f32	s12, s5
 80186a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80186aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80186ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80186b6:	eeb0 6a43 	vmov.f32	s12, s6
 80186ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186be:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80186c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80186c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80186ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80186ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80186d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80186d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80186da:	ee12 2a90 	vmov	r2, s5
 80186de:	eef0 2a47 	vmov.f32	s5, s14
 80186e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80186e6:	ee13 2a10 	vmov	r2, s6
 80186ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80186ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80186ee:	eeb0 3a67 	vmov.f32	s6, s15
 80186f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80186f6:	9a04      	ldr	r2, [sp, #16]
 80186f8:	9314      	str	r3, [sp, #80]	; 0x50
 80186fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80186fc:	bf08      	it	eq
 80186fe:	4613      	moveq	r3, r2
 8018700:	e787      	b.n	8018612 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018702:	140e      	asrs	r6, r1, #16
 8018704:	d462      	bmi.n	80187cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018706:	f8de 5008 	ldr.w	r5, [lr, #8]
 801870a:	42b5      	cmp	r5, r6
 801870c:	dd5e      	ble.n	80187cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801870e:	1417      	asrs	r7, r2, #16
 8018710:	d45c      	bmi.n	80187cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018712:	f8de 400c 	ldr.w	r4, [lr, #12]
 8018716:	42bc      	cmp	r4, r7
 8018718:	dd58      	ble.n	80187cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801871a:	b22d      	sxth	r5, r5
 801871c:	9c02      	ldr	r4, [sp, #8]
 801871e:	fb07 6505 	mla	r5, r7, r5, r6
 8018722:	5d66      	ldrb	r6, [r4, r5]
 8018724:	2e00      	cmp	r6, #0
 8018726:	d051      	beq.n	80187cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018728:	9c01      	ldr	r4, [sp, #4]
 801872a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801872e:	f06f 0401 	mvn.w	r4, #1
 8018732:	fb04 f408 	mul.w	r4, r4, r8
 8018736:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801873a:	5b05      	ldrh	r5, [r0, r4]
 801873c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018740:	9403      	str	r4, [sp, #12]
 8018742:	9c05      	ldr	r4, [sp, #20]
 8018744:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018748:	4366      	muls	r6, r4
 801874a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801874e:	1c74      	adds	r4, r6, #1
 8018750:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018754:	122e      	asrs	r6, r5, #8
 8018756:	1224      	asrs	r4, r4, #8
 8018758:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801875c:	00ed      	lsls	r5, r5, #3
 801875e:	b2a7      	uxth	r7, r4
 8018760:	43e4      	mvns	r4, r4
 8018762:	b2ed      	uxtb	r5, r5
 8018764:	b2e4      	uxtb	r4, r4
 8018766:	fb16 f604 	smulbb	r6, r6, r4
 801876a:	fb15 f504 	smulbb	r5, r5, r4
 801876e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018772:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8018776:	fb1a fa04 	smulbb	sl, sl, r4
 801877a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801877e:	fa1f fc8c 	uxth.w	ip, ip
 8018782:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018786:	fa5f f989 	uxtb.w	r9, r9
 801878a:	fb06 a607 	mla	r6, r6, r7, sl
 801878e:	f10c 0401 	add.w	r4, ip, #1
 8018792:	fb09 5507 	mla	r5, r9, r7, r5
 8018796:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801879a:	9c03      	ldr	r4, [sp, #12]
 801879c:	b2ad      	uxth	r5, r5
 801879e:	b2b6      	uxth	r6, r6
 80187a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80187a4:	f105 0a01 	add.w	sl, r5, #1
 80187a8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80187ac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80187b0:	ea4a 0c0c 	orr.w	ip, sl, ip
 80187b4:	f106 0a01 	add.w	sl, r6, #1
 80187b8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80187bc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80187c0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80187c4:	ea4c 0c0a 	orr.w	ip, ip, sl
 80187c8:	f820 c004 	strh.w	ip, [r0, r4]
 80187cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80187ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80187d2:	4421      	add	r1, r4
 80187d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80187d6:	4422      	add	r2, r4
 80187d8:	e750      	b.n	801867c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80187da:	f04f 0900 	mov.w	r9, #0
 80187de:	eba3 0409 	sub.w	r4, r3, r9
 80187e2:	2c00      	cmp	r4, #0
 80187e4:	f77f af4e 	ble.w	8018684 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80187e8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80187ec:	140d      	asrs	r5, r1, #16
 80187ee:	1414      	asrs	r4, r2, #16
 80187f0:	fb06 5404 	mla	r4, r6, r4, r5
 80187f4:	9d02      	ldr	r5, [sp, #8]
 80187f6:	5d2e      	ldrb	r6, [r5, r4]
 80187f8:	2e00      	cmp	r6, #0
 80187fa:	d04c      	beq.n	8018896 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80187fc:	9d01      	ldr	r5, [sp, #4]
 80187fe:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8018802:	9c05      	ldr	r4, [sp, #20]
 8018804:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018808:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801880c:	4366      	muls	r6, r4
 801880e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018812:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018816:	1c74      	adds	r4, r6, #1
 8018818:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801881c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018820:	122e      	asrs	r6, r5, #8
 8018822:	1224      	asrs	r4, r4, #8
 8018824:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018828:	00ed      	lsls	r5, r5, #3
 801882a:	b2a7      	uxth	r7, r4
 801882c:	43e4      	mvns	r4, r4
 801882e:	b2ed      	uxtb	r5, r5
 8018830:	b2e4      	uxtb	r4, r4
 8018832:	fb16 f604 	smulbb	r6, r6, r4
 8018836:	fb15 f504 	smulbb	r5, r5, r4
 801883a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801883e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8018842:	fb1a fa04 	smulbb	sl, sl, r4
 8018846:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801884a:	fa1f fc8c 	uxth.w	ip, ip
 801884e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018852:	fa5f f888 	uxtb.w	r8, r8
 8018856:	fb06 a607 	mla	r6, r6, r7, sl
 801885a:	f10c 0401 	add.w	r4, ip, #1
 801885e:	fb08 5507 	mla	r5, r8, r7, r5
 8018862:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018866:	b2ad      	uxth	r5, r5
 8018868:	b2b6      	uxth	r6, r6
 801886a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801886e:	f105 0a01 	add.w	sl, r5, #1
 8018872:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018876:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801887a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801887e:	f106 0a01 	add.w	sl, r6, #1
 8018882:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018886:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801888a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801888e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018892:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018896:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018898:	f109 0901 	add.w	r9, r9, #1
 801889c:	4421      	add	r1, r4
 801889e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80188a0:	4422      	add	r2, r4
 80188a2:	e79c      	b.n	80187de <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80188a4:	b007      	add	sp, #28
 80188a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080188aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80188aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ae:	b085      	sub	sp, #20
 80188b0:	468b      	mov	fp, r1
 80188b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80188b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80188b8:	9203      	str	r2, [sp, #12]
 80188ba:	6861      	ldr	r1, [r4, #4]
 80188bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80188c0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80188c4:	fb01 2000 	mla	r0, r1, r0, r2
 80188c8:	6822      	ldr	r2, [r4, #0]
 80188ca:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80188ce:	f8d8 2000 	ldr.w	r2, [r8]
 80188d2:	9200      	str	r2, [sp, #0]
 80188d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80188d8:	9201      	str	r2, [sp, #4]
 80188da:	f1bb 0f00 	cmp.w	fp, #0
 80188de:	dc03      	bgt.n	80188e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80188e0:	9a03      	ldr	r2, [sp, #12]
 80188e2:	2a00      	cmp	r2, #0
 80188e4:	f340 8146 	ble.w	8018b74 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80188e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80188ea:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80188ee:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80188f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80188f4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80188f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	dd0e      	ble.n	801891e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018900:	140c      	asrs	r4, r1, #16
 8018902:	d405      	bmi.n	8018910 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018904:	42bc      	cmp	r4, r7
 8018906:	da03      	bge.n	8018910 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018908:	1414      	asrs	r4, r2, #16
 801890a:	d401      	bmi.n	8018910 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801890c:	42b4      	cmp	r4, r6
 801890e:	db07      	blt.n	8018920 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018910:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018912:	3b01      	subs	r3, #1
 8018914:	3002      	adds	r0, #2
 8018916:	4421      	add	r1, r4
 8018918:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801891a:	4422      	add	r2, r4
 801891c:	e7ee      	b.n	80188fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801891e:	d017      	beq.n	8018950 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018920:	1e5c      	subs	r4, r3, #1
 8018922:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018924:	fb05 1504 	mla	r5, r5, r4, r1
 8018928:	142d      	asrs	r5, r5, #16
 801892a:	d409      	bmi.n	8018940 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801892c:	42bd      	cmp	r5, r7
 801892e:	da07      	bge.n	8018940 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018930:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018932:	fb05 2404 	mla	r4, r5, r4, r2
 8018936:	1424      	asrs	r4, r4, #16
 8018938:	d402      	bmi.n	8018940 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801893a:	42b4      	cmp	r4, r6
 801893c:	f2c0 80b3 	blt.w	8018aa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8018940:	2600      	movs	r6, #0
 8018942:	199c      	adds	r4, r3, r6
 8018944:	2c00      	cmp	r4, #0
 8018946:	dc3e      	bgt.n	80189c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018948:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801894c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018950:	f1bb 0f00 	cmp.w	fp, #0
 8018954:	f340 810e 	ble.w	8018b74 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018958:	ee30 0a04 	vadd.f32	s0, s0, s8
 801895c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801895e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018962:	f1bb 0b01 	subs.w	fp, fp, #1
 8018966:	eeb0 6a62 	vmov.f32	s12, s5
 801896a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801896e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018972:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018976:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801897a:	eeb0 6a43 	vmov.f32	s12, s6
 801897e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018982:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018986:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801898a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801898e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018992:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018996:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801899a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801899e:	ee12 2a90 	vmov	r2, s5
 80189a2:	eef0 2a47 	vmov.f32	s5, s14
 80189a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80189aa:	ee13 2a10 	vmov	r2, s6
 80189ae:	9311      	str	r3, [sp, #68]	; 0x44
 80189b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189b2:	eeb0 3a67 	vmov.f32	s6, s15
 80189b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80189ba:	9a03      	ldr	r2, [sp, #12]
 80189bc:	9312      	str	r3, [sp, #72]	; 0x48
 80189be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189c0:	bf08      	it	eq
 80189c2:	4613      	moveq	r3, r2
 80189c4:	e789      	b.n	80188da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80189c6:	140f      	asrs	r7, r1, #16
 80189c8:	d418      	bmi.n	80189fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80189ca:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80189ce:	42bd      	cmp	r5, r7
 80189d0:	dd14      	ble.n	80189fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80189d2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80189d6:	d411      	bmi.n	80189fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80189d8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80189dc:	4564      	cmp	r4, ip
 80189de:	dd0d      	ble.n	80189fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80189e0:	b22d      	sxth	r5, r5
 80189e2:	9c01      	ldr	r4, [sp, #4]
 80189e4:	fb0c 7505 	mla	r5, ip, r5, r7
 80189e8:	5d64      	ldrb	r4, [r4, r5]
 80189ea:	2cff      	cmp	r4, #255	; 0xff
 80189ec:	d10c      	bne.n	8018a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80189ee:	9c00      	ldr	r4, [sp, #0]
 80189f0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80189f4:	f06f 0401 	mvn.w	r4, #1
 80189f8:	4374      	muls	r4, r6
 80189fa:	5305      	strh	r5, [r0, r4]
 80189fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80189fe:	3e01      	subs	r6, #1
 8018a00:	4421      	add	r1, r4
 8018a02:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018a04:	4422      	add	r2, r4
 8018a06:	e79c      	b.n	8018942 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a08:	2c00      	cmp	r4, #0
 8018a0a:	d0f7      	beq.n	80189fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018a0c:	9f00      	ldr	r7, [sp, #0]
 8018a0e:	fa1f fc84 	uxth.w	ip, r4
 8018a12:	43e4      	mvns	r4, r4
 8018a14:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8018a18:	f06f 0501 	mvn.w	r5, #1
 8018a1c:	b2e4      	uxtb	r4, r4
 8018a1e:	4375      	muls	r5, r6
 8018a20:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8018a24:	9502      	str	r5, [sp, #8]
 8018a26:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018a2a:	5b45      	ldrh	r5, [r0, r5]
 8018a2c:	122f      	asrs	r7, r5, #8
 8018a2e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018a32:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018a36:	00ed      	lsls	r5, r5, #3
 8018a38:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018a3c:	fb17 f704 	smulbb	r7, r7, r4
 8018a40:	b2ed      	uxtb	r5, r5
 8018a42:	fb1a fa04 	smulbb	sl, sl, r4
 8018a46:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8018a4a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8018a4e:	fb15 f504 	smulbb	r5, r5, r4
 8018a52:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8018a56:	fa1f fe8e 	uxth.w	lr, lr
 8018a5a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018a5e:	fa5f f989 	uxtb.w	r9, r9
 8018a62:	fb07 a70c 	mla	r7, r7, ip, sl
 8018a66:	f10e 0401 	add.w	r4, lr, #1
 8018a6a:	fb09 550c 	mla	r5, r9, ip, r5
 8018a6e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8018a72:	9c02      	ldr	r4, [sp, #8]
 8018a74:	b2ad      	uxth	r5, r5
 8018a76:	b2bf      	uxth	r7, r7
 8018a78:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018a7c:	f105 0a01 	add.w	sl, r5, #1
 8018a80:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018a84:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018a88:	ea4a 0e0e 	orr.w	lr, sl, lr
 8018a8c:	f107 0a01 	add.w	sl, r7, #1
 8018a90:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018a94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018a98:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018a9c:	ea4e 0e0a 	orr.w	lr, lr, sl
 8018aa0:	f820 e004 	strh.w	lr, [r0, r4]
 8018aa4:	e7aa      	b.n	80189fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018aa6:	f04f 0900 	mov.w	r9, #0
 8018aaa:	eba3 0409 	sub.w	r4, r3, r9
 8018aae:	2c00      	cmp	r4, #0
 8018ab0:	f77f af4a 	ble.w	8018948 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018ab4:	1414      	asrs	r4, r2, #16
 8018ab6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018aba:	140d      	asrs	r5, r1, #16
 8018abc:	fb06 5504 	mla	r5, r6, r4, r5
 8018ac0:	9c01      	ldr	r4, [sp, #4]
 8018ac2:	5d64      	ldrb	r4, [r4, r5]
 8018ac4:	2cff      	cmp	r4, #255	; 0xff
 8018ac6:	d10b      	bne.n	8018ae0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018ac8:	9c00      	ldr	r4, [sp, #0]
 8018aca:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8018ace:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8018ad2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018ad4:	f109 0901 	add.w	r9, r9, #1
 8018ad8:	4421      	add	r1, r4
 8018ada:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018adc:	4422      	add	r2, r4
 8018ade:	e7e4      	b.n	8018aaa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8018ae0:	2c00      	cmp	r4, #0
 8018ae2:	d0f6      	beq.n	8018ad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018ae4:	9e00      	ldr	r6, [sp, #0]
 8018ae6:	b2a7      	uxth	r7, r4
 8018ae8:	43e4      	mvns	r4, r4
 8018aea:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8018aee:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018af2:	b2e4      	uxtb	r4, r4
 8018af4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018af8:	122e      	asrs	r6, r5, #8
 8018afa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018afe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018b02:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018b06:	00ed      	lsls	r5, r5, #3
 8018b08:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018b0c:	fb16 f604 	smulbb	r6, r6, r4
 8018b10:	b2ed      	uxtb	r5, r5
 8018b12:	fb1a fa04 	smulbb	sl, sl, r4
 8018b16:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018b1a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018b1e:	fb15 f504 	smulbb	r5, r5, r4
 8018b22:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018b26:	fa1f fc8c 	uxth.w	ip, ip
 8018b2a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018b2e:	fa5f fe8e 	uxtb.w	lr, lr
 8018b32:	fb06 a607 	mla	r6, r6, r7, sl
 8018b36:	f10c 0401 	add.w	r4, ip, #1
 8018b3a:	fb0e 5507 	mla	r5, lr, r7, r5
 8018b3e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018b42:	b2ad      	uxth	r5, r5
 8018b44:	b2b6      	uxth	r6, r6
 8018b46:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018b4a:	f105 0a01 	add.w	sl, r5, #1
 8018b4e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018b52:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018b56:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018b5a:	f106 0a01 	add.w	sl, r6, #1
 8018b5e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018b62:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018b66:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018b6a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018b6e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018b72:	e7ae      	b.n	8018ad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018b74:	b005      	add	sp, #20
 8018b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b7a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b7e:	b085      	sub	sp, #20
 8018b80:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018b82:	9203      	str	r2, [sp, #12]
 8018b84:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8018b88:	9100      	str	r1, [sp, #0]
 8018b8a:	9201      	str	r2, [sp, #4]
 8018b8c:	6841      	ldr	r1, [r0, #4]
 8018b8e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8018b92:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018b96:	fb01 2404 	mla	r4, r1, r4, r2
 8018b9a:	6802      	ldr	r2, [r0, #0]
 8018b9c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018ba0:	f8de 2000 	ldr.w	r2, [lr]
 8018ba4:	9202      	str	r2, [sp, #8]
 8018ba6:	9a01      	ldr	r2, [sp, #4]
 8018ba8:	43d6      	mvns	r6, r2
 8018baa:	b2f6      	uxtb	r6, r6
 8018bac:	9a00      	ldr	r2, [sp, #0]
 8018bae:	2a00      	cmp	r2, #0
 8018bb0:	dc03      	bgt.n	8018bba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018bb2:	9a03      	ldr	r2, [sp, #12]
 8018bb4:	2a00      	cmp	r2, #0
 8018bb6:	f340 8124 	ble.w	8018e02 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018bba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018bbc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8018bc0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018bc6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8018bca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	dd0e      	ble.n	8018bf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018bd2:	1408      	asrs	r0, r1, #16
 8018bd4:	d405      	bmi.n	8018be2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018bd6:	4560      	cmp	r0, ip
 8018bd8:	da03      	bge.n	8018be2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018bda:	1410      	asrs	r0, r2, #16
 8018bdc:	d401      	bmi.n	8018be2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018bde:	42b8      	cmp	r0, r7
 8018be0:	db07      	blt.n	8018bf2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018be2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018be4:	3b01      	subs	r3, #1
 8018be6:	3402      	adds	r4, #2
 8018be8:	4401      	add	r1, r0
 8018bea:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018bec:	4402      	add	r2, r0
 8018bee:	e7ee      	b.n	8018bce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018bf0:	d06e      	beq.n	8018cd0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018bf2:	1e58      	subs	r0, r3, #1
 8018bf4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018bf6:	fb05 1500 	mla	r5, r5, r0, r1
 8018bfa:	142d      	asrs	r5, r5, #16
 8018bfc:	d45c      	bmi.n	8018cb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018bfe:	4565      	cmp	r5, ip
 8018c00:	da5a      	bge.n	8018cb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018c02:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018c04:	fb05 2000 	mla	r0, r5, r0, r2
 8018c08:	1400      	asrs	r0, r0, #16
 8018c0a:	d455      	bmi.n	8018cb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018c0c:	42b8      	cmp	r0, r7
 8018c0e:	da53      	bge.n	8018cb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018c10:	4699      	mov	r9, r3
 8018c12:	46a2      	mov	sl, r4
 8018c14:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8018c18:	f1b9 0f00 	cmp.w	r9, #0
 8018c1c:	dd54      	ble.n	8018cc8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018c1e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018c22:	140d      	asrs	r5, r1, #16
 8018c24:	1410      	asrs	r0, r2, #16
 8018c26:	f109 39ff 	add.w	r9, r9, #4294967295
 8018c2a:	fb07 5000 	mla	r0, r7, r0, r5
 8018c2e:	9d02      	ldr	r5, [sp, #8]
 8018c30:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8018c34:	f8ba 5000 	ldrh.w	r5, [sl]
 8018c38:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018c3c:	122f      	asrs	r7, r5, #8
 8018c3e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8018c42:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018c46:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018c4a:	00ed      	lsls	r5, r5, #3
 8018c4c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8018c50:	fb17 f706 	smulbb	r7, r7, r6
 8018c54:	b2ed      	uxtb	r5, r5
 8018c56:	fb18 f806 	smulbb	r8, r8, r6
 8018c5a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8018c5e:	10c7      	asrs	r7, r0, #3
 8018c60:	fb15 f506 	smulbb	r5, r5, r6
 8018c64:	00c0      	lsls	r0, r0, #3
 8018c66:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018c6a:	fa1f fc8c 	uxth.w	ip, ip
 8018c6e:	b2c0      	uxtb	r0, r0
 8018c70:	fb07 870b 	mla	r7, r7, fp, r8
 8018c74:	fb00 500b 	mla	r0, r0, fp, r5
 8018c78:	f10c 0501 	add.w	r5, ip, #1
 8018c7c:	b2bf      	uxth	r7, r7
 8018c7e:	b280      	uxth	r0, r0
 8018c80:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018c84:	f107 0801 	add.w	r8, r7, #1
 8018c88:	1c45      	adds	r5, r0, #1
 8018c8a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8018c8e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018c92:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8018c96:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018c98:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018c9c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018ca0:	4401      	add	r1, r0
 8018ca2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8018ca6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018ca8:	ea45 0c0c 	orr.w	ip, r5, ip
 8018cac:	4402      	add	r2, r0
 8018cae:	ea4c 0c08 	orr.w	ip, ip, r8
 8018cb2:	f82a cb02 	strh.w	ip, [sl], #2
 8018cb6:	e7af      	b.n	8018c18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018cb8:	f04f 0800 	mov.w	r8, #0
 8018cbc:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8018cc0:	eb03 0008 	add.w	r0, r3, r8
 8018cc4:	2800      	cmp	r0, #0
 8018cc6:	dc41      	bgt.n	8018d4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8018cc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ccc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018cd0:	9b00      	ldr	r3, [sp, #0]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	f340 8095 	ble.w	8018e02 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cde:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018ce2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ce6:	eef0 6a62 	vmov.f32	s13, s5
 8018cea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018cee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018cf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018cf6:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8018cfa:	eef0 6a43 	vmov.f32	s13, s6
 8018cfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018d02:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8018d06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018d0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018d0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018d12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018d16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018d1e:	ee12 2a90 	vmov	r2, s5
 8018d22:	eef0 2a47 	vmov.f32	s5, s14
 8018d26:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d2a:	ee13 2a10 	vmov	r2, s6
 8018d2e:	9311      	str	r3, [sp, #68]	; 0x44
 8018d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d32:	eeb0 3a67 	vmov.f32	s6, s15
 8018d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d3a:	9312      	str	r3, [sp, #72]	; 0x48
 8018d3c:	9b00      	ldr	r3, [sp, #0]
 8018d3e:	9a03      	ldr	r2, [sp, #12]
 8018d40:	3b01      	subs	r3, #1
 8018d42:	9300      	str	r3, [sp, #0]
 8018d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d46:	bf08      	it	eq
 8018d48:	4613      	moveq	r3, r2
 8018d4a:	e72f      	b.n	8018bac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8018d4c:	140f      	asrs	r7, r1, #16
 8018d4e:	d451      	bmi.n	8018df4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018d50:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018d54:	42bd      	cmp	r5, r7
 8018d56:	dd4d      	ble.n	8018df4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018d58:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018d5c:	d44a      	bmi.n	8018df4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018d5e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018d62:	4560      	cmp	r0, ip
 8018d64:	dd46      	ble.n	8018df4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8018d66:	b22d      	sxth	r5, r5
 8018d68:	9802      	ldr	r0, [sp, #8]
 8018d6a:	fb0c 7505 	mla	r5, ip, r5, r7
 8018d6e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8018d72:	f06f 0501 	mvn.w	r5, #1
 8018d76:	fb05 fb08 	mul.w	fp, r5, r8
 8018d7a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018d7e:	f834 500b 	ldrh.w	r5, [r4, fp]
 8018d82:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018d86:	122f      	asrs	r7, r5, #8
 8018d88:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8018d8c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018d90:	00ed      	lsls	r5, r5, #3
 8018d92:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8018d96:	fb17 f706 	smulbb	r7, r7, r6
 8018d9a:	b2ed      	uxtb	r5, r5
 8018d9c:	fb19 f906 	smulbb	r9, r9, r6
 8018da0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8018da4:	10c7      	asrs	r7, r0, #3
 8018da6:	fb15 f506 	smulbb	r5, r5, r6
 8018daa:	00c0      	lsls	r0, r0, #3
 8018dac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018db0:	fa1f fc8c 	uxth.w	ip, ip
 8018db4:	b2c0      	uxtb	r0, r0
 8018db6:	fb07 970a 	mla	r7, r7, sl, r9
 8018dba:	fb00 500a 	mla	r0, r0, sl, r5
 8018dbe:	f10c 0501 	add.w	r5, ip, #1
 8018dc2:	b2bf      	uxth	r7, r7
 8018dc4:	b280      	uxth	r0, r0
 8018dc6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018dca:	f107 0901 	add.w	r9, r7, #1
 8018dce:	1c45      	adds	r5, r0, #1
 8018dd0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8018dd4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018dd8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8018ddc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018de0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018de4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8018de8:	ea45 0c0c 	orr.w	ip, r5, ip
 8018dec:	ea4c 0c09 	orr.w	ip, ip, r9
 8018df0:	f824 c00b 	strh.w	ip, [r4, fp]
 8018df4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018df6:	f108 38ff 	add.w	r8, r8, #4294967295
 8018dfa:	4401      	add	r1, r0
 8018dfc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018dfe:	4402      	add	r2, r0
 8018e00:	e75e      	b.n	8018cc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018e02:	b005      	add	sp, #20
 8018e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e08 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e0c:	b085      	sub	sp, #20
 8018e0e:	4693      	mov	fp, r2
 8018e10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018e14:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018e16:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8018e18:	6870      	ldr	r0, [r6, #4]
 8018e1a:	9101      	str	r1, [sp, #4]
 8018e1c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018e20:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8018e24:	fb00 2404 	mla	r4, r0, r4, r2
 8018e28:	6832      	ldr	r2, [r6, #0]
 8018e2a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018e2e:	682a      	ldr	r2, [r5, #0]
 8018e30:	9202      	str	r2, [sp, #8]
 8018e32:	9a01      	ldr	r2, [sp, #4]
 8018e34:	2a00      	cmp	r2, #0
 8018e36:	dc03      	bgt.n	8018e40 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018e38:	f1bb 0f00 	cmp.w	fp, #0
 8018e3c:	f340 809a 	ble.w	8018f74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018e42:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018e46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018e4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e4c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018e50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	dd0c      	ble.n	8018e72 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018e58:	1406      	asrs	r6, r0, #16
 8018e5a:	d405      	bmi.n	8018e68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018e5c:	454e      	cmp	r6, r9
 8018e5e:	da03      	bge.n	8018e68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018e60:	1416      	asrs	r6, r2, #16
 8018e62:	d401      	bmi.n	8018e68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018e64:	4546      	cmp	r6, r8
 8018e66:	db05      	blt.n	8018e74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018e68:	4470      	add	r0, lr
 8018e6a:	4462      	add	r2, ip
 8018e6c:	3b01      	subs	r3, #1
 8018e6e:	3402      	adds	r4, #2
 8018e70:	e7f0      	b.n	8018e54 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018e72:	d00f      	beq.n	8018e94 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018e74:	1e5e      	subs	r6, r3, #1
 8018e76:	fb0e 0706 	mla	r7, lr, r6, r0
 8018e7a:	143f      	asrs	r7, r7, #16
 8018e7c:	d541      	bpl.n	8018f02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8018e7e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8018e82:	4698      	mov	r8, r3
 8018e84:	9603      	str	r6, [sp, #12]
 8018e86:	f1b8 0f00 	cmp.w	r8, #0
 8018e8a:	dc56      	bgt.n	8018f3a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8018e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018e94:	9b01      	ldr	r3, [sp, #4]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	dd6c      	ble.n	8018f74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018e9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ea0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ea4:	eeb0 6a62 	vmov.f32	s12, s5
 8018ea8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018eac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018eb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018eb4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018eb8:	eeb0 6a43 	vmov.f32	s12, s6
 8018ebc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ec0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018ec4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018ec8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018ecc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018ed0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018ed4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018ed8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018edc:	ee12 2a90 	vmov	r2, s5
 8018ee0:	eef0 2a47 	vmov.f32	s5, s14
 8018ee4:	fb92 fef3 	sdiv	lr, r2, r3
 8018ee8:	ee13 2a10 	vmov	r2, s6
 8018eec:	eeb0 3a67 	vmov.f32	s6, s15
 8018ef0:	fb92 fcf3 	sdiv	ip, r2, r3
 8018ef4:	9b01      	ldr	r3, [sp, #4]
 8018ef6:	3b01      	subs	r3, #1
 8018ef8:	9301      	str	r3, [sp, #4]
 8018efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018efc:	bf08      	it	eq
 8018efe:	465b      	moveq	r3, fp
 8018f00:	e797      	b.n	8018e32 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8018f02:	454f      	cmp	r7, r9
 8018f04:	dabb      	bge.n	8018e7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018f06:	fb0c 2606 	mla	r6, ip, r6, r2
 8018f0a:	1436      	asrs	r6, r6, #16
 8018f0c:	d4b7      	bmi.n	8018e7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018f0e:	4546      	cmp	r6, r8
 8018f10:	dab5      	bge.n	8018e7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018f12:	461e      	mov	r6, r3
 8018f14:	46a0      	mov	r8, r4
 8018f16:	2e00      	cmp	r6, #0
 8018f18:	ddb8      	ble.n	8018e8c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018f1a:	1417      	asrs	r7, r2, #16
 8018f1c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8018f20:	ea4f 4920 	mov.w	r9, r0, asr #16
 8018f24:	9902      	ldr	r1, [sp, #8]
 8018f26:	4470      	add	r0, lr
 8018f28:	4462      	add	r2, ip
 8018f2a:	fb0a 9707 	mla	r7, sl, r7, r9
 8018f2e:	3e01      	subs	r6, #1
 8018f30:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8018f34:	f828 7b02 	strh.w	r7, [r8], #2
 8018f38:	e7ed      	b.n	8018f16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8018f3a:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018f3e:	d414      	bmi.n	8018f6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018f40:	68ae      	ldr	r6, [r5, #8]
 8018f42:	454e      	cmp	r6, r9
 8018f44:	dd11      	ble.n	8018f6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018f46:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018f4a:	d40e      	bmi.n	8018f6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018f4c:	68ef      	ldr	r7, [r5, #12]
 8018f4e:	4557      	cmp	r7, sl
 8018f50:	dd0b      	ble.n	8018f6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018f52:	b236      	sxth	r6, r6
 8018f54:	f06f 0101 	mvn.w	r1, #1
 8018f58:	9f02      	ldr	r7, [sp, #8]
 8018f5a:	fb0a 9606 	mla	r6, sl, r6, r9
 8018f5e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8018f62:	fb01 f608 	mul.w	r6, r1, r8
 8018f66:	9903      	ldr	r1, [sp, #12]
 8018f68:	538f      	strh	r7, [r1, r6]
 8018f6a:	4470      	add	r0, lr
 8018f6c:	4462      	add	r2, ip
 8018f6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018f72:	e788      	b.n	8018e86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018f74:	b005      	add	sp, #20
 8018f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f7e:	b087      	sub	sp, #28
 8018f80:	468b      	mov	fp, r1
 8018f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018f86:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018f88:	9203      	str	r2, [sp, #12]
 8018f8a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018f8e:	6841      	ldr	r1, [r0, #4]
 8018f90:	9204      	str	r2, [sp, #16]
 8018f92:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018f96:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8018f9a:	fb01 2505 	mla	r5, r1, r5, r2
 8018f9e:	6802      	ldr	r2, [r0, #0]
 8018fa0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8018fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8018fa8:	9201      	str	r2, [sp, #4]
 8018faa:	f1bb 0f00 	cmp.w	fp, #0
 8018fae:	dc03      	bgt.n	8018fb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018fb0:	9a03      	ldr	r2, [sp, #12]
 8018fb2:	2a00      	cmp	r2, #0
 8018fb4:	f340 8158 	ble.w	8019268 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8018fb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018fba:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8018fbe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018fc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018fc4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8018fc8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	dd0e      	ble.n	8018fee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018fd0:	1402      	asrs	r2, r0, #16
 8018fd2:	d405      	bmi.n	8018fe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fd4:	42ba      	cmp	r2, r7
 8018fd6:	da03      	bge.n	8018fe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fd8:	140a      	asrs	r2, r1, #16
 8018fda:	d401      	bmi.n	8018fe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fdc:	42b2      	cmp	r2, r6
 8018fde:	db07      	blt.n	8018ff0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018fe0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018fe2:	3b01      	subs	r3, #1
 8018fe4:	3502      	adds	r5, #2
 8018fe6:	4410      	add	r0, r2
 8018fe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018fea:	4411      	add	r1, r2
 8018fec:	e7ee      	b.n	8018fcc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018fee:	d017      	beq.n	8019020 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018ff0:	1e5a      	subs	r2, r3, #1
 8018ff2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018ff4:	fb04 0402 	mla	r4, r4, r2, r0
 8018ff8:	1424      	asrs	r4, r4, #16
 8018ffa:	d409      	bmi.n	8019010 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ffc:	42bc      	cmp	r4, r7
 8018ffe:	da07      	bge.n	8019010 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019000:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019002:	fb04 1202 	mla	r2, r4, r2, r1
 8019006:	1412      	asrs	r2, r2, #16
 8019008:	d402      	bmi.n	8019010 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801900a:	42b2      	cmp	r2, r6
 801900c:	f2c0 80bf 	blt.w	801918e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019010:	2700      	movs	r7, #0
 8019012:	19da      	adds	r2, r3, r7
 8019014:	2a00      	cmp	r2, #0
 8019016:	dc3e      	bgt.n	8019096 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019018:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801901c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019020:	f1bb 0f00 	cmp.w	fp, #0
 8019024:	f340 8120 	ble.w	8019268 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8019028:	ee30 0a04 	vadd.f32	s0, s0, s8
 801902c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801902e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019032:	f1bb 0b01 	subs.w	fp, fp, #1
 8019036:	eeb0 6a62 	vmov.f32	s12, s5
 801903a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801903e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019042:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019046:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801904a:	eeb0 6a43 	vmov.f32	s12, s6
 801904e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019052:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019056:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801905a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801905e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019062:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019066:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801906a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801906e:	ee12 2a90 	vmov	r2, s5
 8019072:	eef0 2a47 	vmov.f32	s5, s14
 8019076:	fb92 f3f3 	sdiv	r3, r2, r3
 801907a:	ee13 2a10 	vmov	r2, s6
 801907e:	9313      	str	r3, [sp, #76]	; 0x4c
 8019080:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019082:	eeb0 3a67 	vmov.f32	s6, s15
 8019086:	fb92 f3f3 	sdiv	r3, r2, r3
 801908a:	9a03      	ldr	r2, [sp, #12]
 801908c:	9314      	str	r3, [sp, #80]	; 0x50
 801908e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019090:	bf08      	it	eq
 8019092:	4613      	moveq	r3, r2
 8019094:	e789      	b.n	8018faa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019096:	1406      	asrs	r6, r0, #16
 8019098:	d42d      	bmi.n	80190f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801909a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801909e:	42b4      	cmp	r4, r6
 80190a0:	dd29      	ble.n	80190f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190a2:	ea5f 4c21 	movs.w	ip, r1, asr #16
 80190a6:	d426      	bmi.n	80190f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190a8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80190ac:	4562      	cmp	r2, ip
 80190ae:	dd22      	ble.n	80190f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190b0:	b224      	sxth	r4, r4
 80190b2:	9a01      	ldr	r2, [sp, #4]
 80190b4:	fb0c 6404 	mla	r4, ip, r4, r6
 80190b8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80190bc:	0e22      	lsrs	r2, r4, #24
 80190be:	d01a      	beq.n	80190f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80190c0:	9e04      	ldr	r6, [sp, #16]
 80190c2:	4372      	muls	r2, r6
 80190c4:	1c56      	adds	r6, r2, #1
 80190c6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80190ca:	0a26      	lsrs	r6, r4, #8
 80190cc:	1212      	asrs	r2, r2, #8
 80190ce:	9605      	str	r6, [sp, #20]
 80190d0:	2aff      	cmp	r2, #255	; 0xff
 80190d2:	d116      	bne.n	8019102 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80190d4:	f06f 0201 	mvn.w	r2, #1
 80190d8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80190dc:	fb02 fc07 	mul.w	ip, r2, r7
 80190e0:	0962      	lsrs	r2, r4, #5
 80190e2:	f026 0607 	bic.w	r6, r6, #7
 80190e6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80190ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80190ee:	4316      	orrs	r6, r2
 80190f0:	4326      	orrs	r6, r4
 80190f2:	f825 600c 	strh.w	r6, [r5, ip]
 80190f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80190f8:	3f01      	subs	r7, #1
 80190fa:	4410      	add	r0, r2
 80190fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80190fe:	4411      	add	r1, r2
 8019100:	e787      	b.n	8019012 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019102:	f06f 0601 	mvn.w	r6, #1
 8019106:	fa1f fa82 	uxth.w	sl, r2
 801910a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801910e:	43d2      	mvns	r2, r2
 8019110:	437e      	muls	r6, r7
 8019112:	b2e4      	uxtb	r4, r4
 8019114:	fb1c fc0a 	smulbb	ip, ip, sl
 8019118:	b2d2      	uxtb	r2, r2
 801911a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801911e:	fb14 f40a 	smulbb	r4, r4, sl
 8019122:	9602      	str	r6, [sp, #8]
 8019124:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019128:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801912c:	fb16 f60a 	smulbb	r6, r6, sl
 8019130:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019134:	fb0e ce02 	mla	lr, lr, r2, ip
 8019138:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801913c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019140:	fa1f fe8e 	uxth.w	lr, lr
 8019144:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019148:	fa5f f888 	uxtb.w	r8, r8
 801914c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8019150:	fb08 4402 	mla	r4, r8, r2, r4
 8019154:	f10e 0201 	add.w	r2, lr, #1
 8019158:	fa1f fc8c 	uxth.w	ip, ip
 801915c:	b2a4      	uxth	r4, r4
 801915e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8019162:	9a02      	ldr	r2, [sp, #8]
 8019164:	1c66      	adds	r6, r4, #1
 8019166:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801916a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801916e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019172:	ea46 0e0e 	orr.w	lr, r6, lr
 8019176:	f10c 0601 	add.w	r6, ip, #1
 801917a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801917e:	0976      	lsrs	r6, r6, #5
 8019180:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019184:	ea4e 0e06 	orr.w	lr, lr, r6
 8019188:	f825 e002 	strh.w	lr, [r5, r2]
 801918c:	e7b3      	b.n	80190f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801918e:	f04f 0800 	mov.w	r8, #0
 8019192:	eba3 0208 	sub.w	r2, r3, r8
 8019196:	2a00      	cmp	r2, #0
 8019198:	f77f af3e 	ble.w	8019018 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801919c:	1404      	asrs	r4, r0, #16
 801919e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 80191a2:	140a      	asrs	r2, r1, #16
 80191a4:	fb06 4202 	mla	r2, r6, r2, r4
 80191a8:	9c01      	ldr	r4, [sp, #4]
 80191aa:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 80191ae:	0e22      	lsrs	r2, r4, #24
 80191b0:	d015      	beq.n	80191de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80191b2:	9e04      	ldr	r6, [sp, #16]
 80191b4:	4372      	muls	r2, r6
 80191b6:	1c56      	adds	r6, r2, #1
 80191b8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80191bc:	0a26      	lsrs	r6, r4, #8
 80191be:	1212      	asrs	r2, r2, #8
 80191c0:	2aff      	cmp	r2, #255	; 0xff
 80191c2:	d113      	bne.n	80191ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80191c4:	0962      	lsrs	r2, r4, #5
 80191c6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80191ca:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80191ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80191d2:	f026 0607 	bic.w	r6, r6, #7
 80191d6:	4316      	orrs	r6, r2
 80191d8:	4326      	orrs	r6, r4
 80191da:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80191de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80191e0:	f108 0801 	add.w	r8, r8, #1
 80191e4:	4410      	add	r0, r2
 80191e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80191e8:	4411      	add	r1, r2
 80191ea:	e7d2      	b.n	8019192 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80191ec:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80191f0:	fa1f fa82 	uxth.w	sl, r2
 80191f4:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80191f8:	43d2      	mvns	r2, r2
 80191fa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80191fe:	fb17 f70a 	smulbb	r7, r7, sl
 8019202:	b2d2      	uxtb	r2, r2
 8019204:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019208:	b2e4      	uxtb	r4, r4
 801920a:	b2f6      	uxtb	r6, r6
 801920c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8019210:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019214:	fb14 f40a 	smulbb	r4, r4, sl
 8019218:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801921c:	fa1f fc8c 	uxth.w	ip, ip
 8019220:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019224:	fb16 f60a 	smulbb	r6, r6, sl
 8019228:	fa5f fe8e 	uxtb.w	lr, lr
 801922c:	fb0e 4402 	mla	r4, lr, r2, r4
 8019230:	fb07 6702 	mla	r7, r7, r2, r6
 8019234:	f10c 0201 	add.w	r2, ip, #1
 8019238:	b2a4      	uxth	r4, r4
 801923a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801923e:	1c66      	adds	r6, r4, #1
 8019240:	b2bf      	uxth	r7, r7
 8019242:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019246:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801924a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801924e:	ea46 0c0c 	orr.w	ip, r6, ip
 8019252:	1c7e      	adds	r6, r7, #1
 8019254:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019258:	0976      	lsrs	r6, r6, #5
 801925a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801925e:	ea4c 0c06 	orr.w	ip, ip, r6
 8019262:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8019266:	e7ba      	b.n	80191de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8019268:	b007      	add	sp, #28
 801926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019270 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019274:	b085      	sub	sp, #20
 8019276:	468b      	mov	fp, r1
 8019278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801927c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801927e:	9203      	str	r2, [sp, #12]
 8019280:	6841      	ldr	r1, [r0, #4]
 8019282:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8019286:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801928a:	fb01 2404 	mla	r4, r1, r4, r2
 801928e:	6802      	ldr	r2, [r0, #0]
 8019290:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019294:	f8d8 2000 	ldr.w	r2, [r8]
 8019298:	9201      	str	r2, [sp, #4]
 801929a:	f1bb 0f00 	cmp.w	fp, #0
 801929e:	dc03      	bgt.n	80192a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80192a0:	9a03      	ldr	r2, [sp, #12]
 80192a2:	2a00      	cmp	r2, #0
 80192a4:	f340 814f 	ble.w	8019546 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80192a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192aa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80192ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80192b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192b4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80192b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80192bc:	2b00      	cmp	r3, #0
 80192be:	dd0e      	ble.n	80192de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80192c0:	1408      	asrs	r0, r1, #16
 80192c2:	d405      	bmi.n	80192d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80192c4:	42b8      	cmp	r0, r7
 80192c6:	da03      	bge.n	80192d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80192c8:	1410      	asrs	r0, r2, #16
 80192ca:	d401      	bmi.n	80192d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80192cc:	42b0      	cmp	r0, r6
 80192ce:	db07      	blt.n	80192e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80192d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80192d2:	3b01      	subs	r3, #1
 80192d4:	3402      	adds	r4, #2
 80192d6:	4401      	add	r1, r0
 80192d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80192da:	4402      	add	r2, r0
 80192dc:	e7ee      	b.n	80192bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80192de:	d017      	beq.n	8019310 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80192e0:	1e58      	subs	r0, r3, #1
 80192e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80192e4:	fb05 1500 	mla	r5, r5, r0, r1
 80192e8:	142d      	asrs	r5, r5, #16
 80192ea:	d409      	bmi.n	8019300 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80192ec:	42bd      	cmp	r5, r7
 80192ee:	da07      	bge.n	8019300 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80192f0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80192f2:	fb05 2000 	mla	r0, r5, r0, r2
 80192f6:	1400      	asrs	r0, r0, #16
 80192f8:	d402      	bmi.n	8019300 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80192fa:	42b0      	cmp	r0, r6
 80192fc:	f2c0 80ba 	blt.w	8019474 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8019300:	2600      	movs	r6, #0
 8019302:	1998      	adds	r0, r3, r6
 8019304:	2800      	cmp	r0, #0
 8019306:	dc3e      	bgt.n	8019386 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8019308:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801930c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019310:	f1bb 0f00 	cmp.w	fp, #0
 8019314:	f340 8117 	ble.w	8019546 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8019318:	ee30 0a04 	vadd.f32	s0, s0, s8
 801931c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801931e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019322:	f1bb 0b01 	subs.w	fp, fp, #1
 8019326:	eeb0 6a62 	vmov.f32	s12, s5
 801932a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801932e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019332:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019336:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801933a:	eeb0 6a43 	vmov.f32	s12, s6
 801933e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019342:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019346:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801934a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801934e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019352:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019356:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801935a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801935e:	ee12 2a90 	vmov	r2, s5
 8019362:	eef0 2a47 	vmov.f32	s5, s14
 8019366:	fb92 f3f3 	sdiv	r3, r2, r3
 801936a:	ee13 2a10 	vmov	r2, s6
 801936e:	9311      	str	r3, [sp, #68]	; 0x44
 8019370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019372:	eeb0 3a67 	vmov.f32	s6, s15
 8019376:	fb92 f3f3 	sdiv	r3, r2, r3
 801937a:	9a03      	ldr	r2, [sp, #12]
 801937c:	9312      	str	r3, [sp, #72]	; 0x48
 801937e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019380:	bf08      	it	eq
 8019382:	4613      	moveq	r3, r2
 8019384:	e789      	b.n	801929a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8019386:	140f      	asrs	r7, r1, #16
 8019388:	d424      	bmi.n	80193d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801938a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801938e:	42bd      	cmp	r5, r7
 8019390:	dd20      	ble.n	80193d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019392:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019396:	d41d      	bmi.n	80193d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019398:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801939c:	4560      	cmp	r0, ip
 801939e:	dd19      	ble.n	80193d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193a0:	b22d      	sxth	r5, r5
 80193a2:	9801      	ldr	r0, [sp, #4]
 80193a4:	fb0c 7505 	mla	r5, ip, r5, r7
 80193a8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80193ac:	0e07      	lsrs	r7, r0, #24
 80193ae:	2fff      	cmp	r7, #255	; 0xff
 80193b0:	d116      	bne.n	80193e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80193b2:	f06f 0501 	mvn.w	r5, #1
 80193b6:	fb05 f706 	mul.w	r7, r5, r6
 80193ba:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80193be:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80193c2:	0945      	lsrs	r5, r0, #5
 80193c4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80193c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80193cc:	ea4c 0505 	orr.w	r5, ip, r5
 80193d0:	4305      	orrs	r5, r0
 80193d2:	53e5      	strh	r5, [r4, r7]
 80193d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80193d6:	3e01      	subs	r6, #1
 80193d8:	4401      	add	r1, r0
 80193da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80193dc:	4402      	add	r2, r0
 80193de:	e790      	b.n	8019302 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80193e0:	b2fd      	uxtb	r5, r7
 80193e2:	2f00      	cmp	r7, #0
 80193e4:	d0f6      	beq.n	80193d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193e6:	f06f 0701 	mvn.w	r7, #1
 80193ea:	fa1f f985 	uxth.w	r9, r5
 80193ee:	43ed      	mvns	r5, r5
 80193f0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80193f4:	4377      	muls	r7, r6
 80193f6:	fb1a fa09 	smulbb	sl, sl, r9
 80193fa:	b2ed      	uxtb	r5, r5
 80193fc:	f834 e007 	ldrh.w	lr, [r4, r7]
 8019400:	9702      	str	r7, [sp, #8]
 8019402:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019406:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801940a:	fb17 f709 	smulbb	r7, r7, r9
 801940e:	b2c0      	uxtb	r0, r0
 8019410:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019414:	fb10 f009 	smulbb	r0, r0, r9
 8019418:	fb0c 7c05 	mla	ip, ip, r5, r7
 801941c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019420:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019424:	fa1f fc8c 	uxth.w	ip, ip
 8019428:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801942c:	fa5f fe8e 	uxtb.w	lr, lr
 8019430:	fb07 a705 	mla	r7, r7, r5, sl
 8019434:	fb0e 0005 	mla	r0, lr, r5, r0
 8019438:	f10c 0501 	add.w	r5, ip, #1
 801943c:	b2bf      	uxth	r7, r7
 801943e:	b280      	uxth	r0, r0
 8019440:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019444:	f100 0a01 	add.w	sl, r0, #1
 8019448:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801944c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8019450:	9802      	ldr	r0, [sp, #8]
 8019452:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019456:	ea4a 0c0c 	orr.w	ip, sl, ip
 801945a:	f107 0a01 	add.w	sl, r7, #1
 801945e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019462:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019466:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801946a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801946e:	f824 c000 	strh.w	ip, [r4, r0]
 8019472:	e7af      	b.n	80193d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019474:	f04f 0e00 	mov.w	lr, #0
 8019478:	eba3 000e 	sub.w	r0, r3, lr
 801947c:	2800      	cmp	r0, #0
 801947e:	f77f af43 	ble.w	8019308 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019482:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8019486:	140d      	asrs	r5, r1, #16
 8019488:	1410      	asrs	r0, r2, #16
 801948a:	fb06 5000 	mla	r0, r6, r0, r5
 801948e:	9d01      	ldr	r5, [sp, #4]
 8019490:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8019494:	0e2e      	lsrs	r6, r5, #24
 8019496:	2eff      	cmp	r6, #255	; 0xff
 8019498:	d112      	bne.n	80194c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801949a:	482c      	ldr	r0, [pc, #176]	; (801954c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801949c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80194a0:	0968      	lsrs	r0, r5, #5
 80194a2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80194a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80194aa:	4330      	orrs	r0, r6
 80194ac:	4328      	orrs	r0, r5
 80194ae:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 80194b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80194b4:	f10e 0e01 	add.w	lr, lr, #1
 80194b8:	4401      	add	r1, r0
 80194ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 80194bc:	4402      	add	r2, r0
 80194be:	e7db      	b.n	8019478 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80194c0:	b2f0      	uxtb	r0, r6
 80194c2:	2e00      	cmp	r6, #0
 80194c4:	d0f5      	beq.n	80194b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80194c6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80194ca:	fa1f f980 	uxth.w	r9, r0
 80194ce:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80194d2:	43c0      	mvns	r0, r0
 80194d4:	ea4f 272c 	mov.w	r7, ip, asr #8
 80194d8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80194dc:	fb16 f609 	smulbb	r6, r6, r9
 80194e0:	b2c0      	uxtb	r0, r0
 80194e2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80194e6:	b2ed      	uxtb	r5, r5
 80194e8:	fb1a fa09 	smulbb	sl, sl, r9
 80194ec:	fb07 6700 	mla	r7, r7, r0, r6
 80194f0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80194f4:	fb15 f509 	smulbb	r5, r5, r9
 80194f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80194fc:	b2bf      	uxth	r7, r7
 80194fe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019502:	fa5f fc8c 	uxtb.w	ip, ip
 8019506:	fb06 a600 	mla	r6, r6, r0, sl
 801950a:	fb0c 5500 	mla	r5, ip, r0, r5
 801950e:	1c78      	adds	r0, r7, #1
 8019510:	b2b6      	uxth	r6, r6
 8019512:	b2ad      	uxth	r5, r5
 8019514:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8019518:	f105 0a01 	add.w	sl, r5, #1
 801951c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019520:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019524:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019528:	ea4a 0707 	orr.w	r7, sl, r7
 801952c:	f106 0a01 	add.w	sl, r6, #1
 8019530:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019534:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019538:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801953c:	ea47 070a 	orr.w	r7, r7, sl
 8019540:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8019544:	e7b5      	b.n	80194b2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8019546:	b005      	add	sp, #20
 8019548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801954c:	fffff800 	.word	0xfffff800

08019550 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019554:	b087      	sub	sp, #28
 8019556:	468b      	mov	fp, r1
 8019558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801955c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801955e:	9203      	str	r2, [sp, #12]
 8019560:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019564:	6841      	ldr	r1, [r0, #4]
 8019566:	9204      	str	r2, [sp, #16]
 8019568:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801956c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019570:	fb01 2404 	mla	r4, r1, r4, r2
 8019574:	6802      	ldr	r2, [r0, #0]
 8019576:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801957a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801957e:	3201      	adds	r2, #1
 8019580:	f022 0201 	bic.w	r2, r2, #1
 8019584:	9200      	str	r2, [sp, #0]
 8019586:	f8d9 2000 	ldr.w	r2, [r9]
 801958a:	9201      	str	r2, [sp, #4]
 801958c:	f1bb 0f00 	cmp.w	fp, #0
 8019590:	dc03      	bgt.n	801959a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019592:	9a03      	ldr	r2, [sp, #12]
 8019594:	2a00      	cmp	r2, #0
 8019596:	f340 816a 	ble.w	801986e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801959a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801959c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80195a0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80195a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80195a6:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80195aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	dd0e      	ble.n	80195d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80195b2:	1402      	asrs	r2, r0, #16
 80195b4:	d405      	bmi.n	80195c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195b6:	42ba      	cmp	r2, r7
 80195b8:	da03      	bge.n	80195c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195ba:	140a      	asrs	r2, r1, #16
 80195bc:	d401      	bmi.n	80195c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195be:	42b2      	cmp	r2, r6
 80195c0:	db07      	blt.n	80195d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80195c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80195c4:	3b01      	subs	r3, #1
 80195c6:	3402      	adds	r4, #2
 80195c8:	4410      	add	r0, r2
 80195ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80195cc:	4411      	add	r1, r2
 80195ce:	e7ee      	b.n	80195ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80195d0:	d017      	beq.n	8019602 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80195d2:	1e5a      	subs	r2, r3, #1
 80195d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80195d6:	fb05 0502 	mla	r5, r5, r2, r0
 80195da:	142d      	asrs	r5, r5, #16
 80195dc:	d409      	bmi.n	80195f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80195de:	42bd      	cmp	r5, r7
 80195e0:	da07      	bge.n	80195f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80195e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80195e4:	fb05 1202 	mla	r2, r5, r2, r1
 80195e8:	1412      	asrs	r2, r2, #16
 80195ea:	d402      	bmi.n	80195f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80195ec:	42b2      	cmp	r2, r6
 80195ee:	f2c0 80c8 	blt.w	8019782 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80195f2:	2700      	movs	r7, #0
 80195f4:	19da      	adds	r2, r3, r7
 80195f6:	2a00      	cmp	r2, #0
 80195f8:	dc3e      	bgt.n	8019678 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80195fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019602:	f1bb 0f00 	cmp.w	fp, #0
 8019606:	f340 8132 	ble.w	801986e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801960a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801960e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019610:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019614:	f1bb 0b01 	subs.w	fp, fp, #1
 8019618:	eeb0 6a62 	vmov.f32	s12, s5
 801961c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019620:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019624:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019628:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801962c:	eeb0 6a43 	vmov.f32	s12, s6
 8019630:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019634:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019638:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801963c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019640:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019644:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019648:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801964c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019650:	ee12 2a90 	vmov	r2, s5
 8019654:	eef0 2a47 	vmov.f32	s5, s14
 8019658:	fb92 f3f3 	sdiv	r3, r2, r3
 801965c:	ee13 2a10 	vmov	r2, s6
 8019660:	9313      	str	r3, [sp, #76]	; 0x4c
 8019662:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019664:	eeb0 3a67 	vmov.f32	s6, s15
 8019668:	fb92 f3f3 	sdiv	r3, r2, r3
 801966c:	9a03      	ldr	r2, [sp, #12]
 801966e:	9314      	str	r3, [sp, #80]	; 0x50
 8019670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019672:	bf08      	it	eq
 8019674:	4613      	moveq	r3, r2
 8019676:	e789      	b.n	801958c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019678:	1405      	asrs	r5, r0, #16
 801967a:	d436      	bmi.n	80196ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801967c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8019680:	42aa      	cmp	r2, r5
 8019682:	dd32      	ble.n	80196ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019684:	140e      	asrs	r6, r1, #16
 8019686:	d430      	bmi.n	80196ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019688:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801968c:	42b2      	cmp	r2, r6
 801968e:	dd2c      	ble.n	80196ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019690:	9a00      	ldr	r2, [sp, #0]
 8019692:	fb06 5502 	mla	r5, r6, r2, r5
 8019696:	9e01      	ldr	r6, [sp, #4]
 8019698:	086a      	lsrs	r2, r5, #1
 801969a:	5cb2      	ldrb	r2, [r6, r2]
 801969c:	07ee      	lsls	r6, r5, #31
 801969e:	bf54      	ite	pl
 80196a0:	f002 020f 	andpl.w	r2, r2, #15
 80196a4:	1112      	asrmi	r2, r2, #4
 80196a6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80196aa:	b2d2      	uxtb	r2, r2
 80196ac:	b1ea      	cbz	r2, 80196ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80196ae:	9d04      	ldr	r5, [sp, #16]
 80196b0:	436a      	muls	r2, r5
 80196b2:	1c55      	adds	r5, r2, #1
 80196b4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80196b8:	4d6e      	ldr	r5, [pc, #440]	; (8019874 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80196ba:	1212      	asrs	r2, r2, #8
 80196bc:	682d      	ldr	r5, [r5, #0]
 80196be:	2aff      	cmp	r2, #255	; 0xff
 80196c0:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80196c4:	9605      	str	r6, [sp, #20]
 80196c6:	d116      	bne.n	80196f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80196c8:	f06f 0201 	mvn.w	r2, #1
 80196cc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80196d0:	fb02 fc07 	mul.w	ip, r2, r7
 80196d4:	096a      	lsrs	r2, r5, #5
 80196d6:	f026 0607 	bic.w	r6, r6, #7
 80196da:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80196de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80196e2:	4316      	orrs	r6, r2
 80196e4:	432e      	orrs	r6, r5
 80196e6:	f824 600c 	strh.w	r6, [r4, ip]
 80196ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80196ec:	3f01      	subs	r7, #1
 80196ee:	4410      	add	r0, r2
 80196f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80196f2:	4411      	add	r1, r2
 80196f4:	e77e      	b.n	80195f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80196f6:	f06f 0601 	mvn.w	r6, #1
 80196fa:	fa1f fa82 	uxth.w	sl, r2
 80196fe:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8019702:	43d2      	mvns	r2, r2
 8019704:	437e      	muls	r6, r7
 8019706:	b2ed      	uxtb	r5, r5
 8019708:	fb1c fc0a 	smulbb	ip, ip, sl
 801970c:	b2d2      	uxtb	r2, r2
 801970e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8019712:	fb15 f50a 	smulbb	r5, r5, sl
 8019716:	9602      	str	r6, [sp, #8]
 8019718:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801971c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8019720:	fb16 f60a 	smulbb	r6, r6, sl
 8019724:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019728:	fb0e ce02 	mla	lr, lr, r2, ip
 801972c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8019730:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019734:	fa1f fe8e 	uxth.w	lr, lr
 8019738:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801973c:	fa5f f888 	uxtb.w	r8, r8
 8019740:	fb0c 6c02 	mla	ip, ip, r2, r6
 8019744:	fb08 5502 	mla	r5, r8, r2, r5
 8019748:	f10e 0201 	add.w	r2, lr, #1
 801974c:	fa1f fc8c 	uxth.w	ip, ip
 8019750:	b2ad      	uxth	r5, r5
 8019752:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8019756:	9a02      	ldr	r2, [sp, #8]
 8019758:	1c6e      	adds	r6, r5, #1
 801975a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801975e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8019762:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019766:	ea46 0e0e 	orr.w	lr, r6, lr
 801976a:	f10c 0601 	add.w	r6, ip, #1
 801976e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8019772:	0976      	lsrs	r6, r6, #5
 8019774:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019778:	ea4e 0e06 	orr.w	lr, lr, r6
 801977c:	f824 e002 	strh.w	lr, [r4, r2]
 8019780:	e7b3      	b.n	80196ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019782:	f04f 0800 	mov.w	r8, #0
 8019786:	eba3 0208 	sub.w	r2, r3, r8
 801978a:	2a00      	cmp	r2, #0
 801978c:	f77f af35 	ble.w	80195fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019790:	1402      	asrs	r2, r0, #16
 8019792:	9e00      	ldr	r6, [sp, #0]
 8019794:	140d      	asrs	r5, r1, #16
 8019796:	fb06 2505 	mla	r5, r6, r5, r2
 801979a:	9e01      	ldr	r6, [sp, #4]
 801979c:	086a      	lsrs	r2, r5, #1
 801979e:	07ed      	lsls	r5, r5, #31
 80197a0:	5cb2      	ldrb	r2, [r6, r2]
 80197a2:	bf54      	ite	pl
 80197a4:	f002 020f 	andpl.w	r2, r2, #15
 80197a8:	1112      	asrmi	r2, r2, #4
 80197aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80197ae:	b2d2      	uxtb	r2, r2
 80197b0:	b1c2      	cbz	r2, 80197e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80197b2:	9d04      	ldr	r5, [sp, #16]
 80197b4:	436a      	muls	r2, r5
 80197b6:	1c55      	adds	r5, r2, #1
 80197b8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80197bc:	4d2d      	ldr	r5, [pc, #180]	; (8019874 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80197be:	1212      	asrs	r2, r2, #8
 80197c0:	682e      	ldr	r6, [r5, #0]
 80197c2:	2aff      	cmp	r2, #255	; 0xff
 80197c4:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80197c8:	d113      	bne.n	80197f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80197ca:	0972      	lsrs	r2, r6, #5
 80197cc:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80197d0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80197d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80197d8:	f025 0507 	bic.w	r5, r5, #7
 80197dc:	4315      	orrs	r5, r2
 80197de:	4335      	orrs	r5, r6
 80197e0:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80197e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80197e6:	f108 0801 	add.w	r8, r8, #1
 80197ea:	4410      	add	r0, r2
 80197ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80197ee:	4411      	add	r1, r2
 80197f0:	e7c9      	b.n	8019786 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80197f2:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80197f6:	fa1f fa82 	uxth.w	sl, r2
 80197fa:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80197fe:	43d2      	mvns	r2, r2
 8019800:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019804:	fb17 f70a 	smulbb	r7, r7, sl
 8019808:	b2d2      	uxtb	r2, r2
 801980a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801980e:	b2f6      	uxtb	r6, r6
 8019810:	b2ed      	uxtb	r5, r5
 8019812:	fb0c 7c02 	mla	ip, ip, r2, r7
 8019816:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801981a:	fb16 f60a 	smulbb	r6, r6, sl
 801981e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019822:	fa1f fc8c 	uxth.w	ip, ip
 8019826:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801982a:	fb15 f50a 	smulbb	r5, r5, sl
 801982e:	fa5f fe8e 	uxtb.w	lr, lr
 8019832:	fb0e 6602 	mla	r6, lr, r2, r6
 8019836:	fb07 5702 	mla	r7, r7, r2, r5
 801983a:	f10c 0201 	add.w	r2, ip, #1
 801983e:	b2b6      	uxth	r6, r6
 8019840:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019844:	1c75      	adds	r5, r6, #1
 8019846:	b2bf      	uxth	r7, r7
 8019848:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801984c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8019850:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019854:	ea45 0c0c 	orr.w	ip, r5, ip
 8019858:	1c7d      	adds	r5, r7, #1
 801985a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801985e:	096d      	lsrs	r5, r5, #5
 8019860:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019864:	ea4c 0c05 	orr.w	ip, ip, r5
 8019868:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801986c:	e7ba      	b.n	80197e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801986e:	b007      	add	sp, #28
 8019870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019874:	20027ea8 	.word	0x20027ea8

08019878 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801987c:	b087      	sub	sp, #28
 801987e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019882:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8019b8c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8019886:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019888:	9101      	str	r1, [sp, #4]
 801988a:	9205      	str	r2, [sp, #20]
 801988c:	6841      	ldr	r1, [r0, #4]
 801988e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8019892:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019896:	fb01 2404 	mla	r4, r1, r4, r2
 801989a:	6802      	ldr	r2, [r0, #0]
 801989c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80198a0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80198a4:	3201      	adds	r2, #1
 80198a6:	f022 0201 	bic.w	r2, r2, #1
 80198aa:	9202      	str	r2, [sp, #8]
 80198ac:	f8db 2000 	ldr.w	r2, [fp]
 80198b0:	9203      	str	r2, [sp, #12]
 80198b2:	9a01      	ldr	r2, [sp, #4]
 80198b4:	2a00      	cmp	r2, #0
 80198b6:	dc03      	bgt.n	80198c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80198b8:	9a05      	ldr	r2, [sp, #20]
 80198ba:	2a00      	cmp	r2, #0
 80198bc:	f340 8162 	ble.w	8019b84 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80198c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80198c2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80198c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80198ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198cc:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80198d0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	dd0e      	ble.n	80198f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80198d8:	1402      	asrs	r2, r0, #16
 80198da:	d405      	bmi.n	80198e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80198dc:	42ba      	cmp	r2, r7
 80198de:	da03      	bge.n	80198e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80198e0:	140a      	asrs	r2, r1, #16
 80198e2:	d401      	bmi.n	80198e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80198e4:	42b2      	cmp	r2, r6
 80198e6:	db07      	blt.n	80198f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80198e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80198ea:	3b01      	subs	r3, #1
 80198ec:	3402      	adds	r4, #2
 80198ee:	4410      	add	r0, r2
 80198f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80198f2:	4411      	add	r1, r2
 80198f4:	e7ee      	b.n	80198d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80198f6:	d017      	beq.n	8019928 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80198f8:	1e5a      	subs	r2, r3, #1
 80198fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80198fc:	fb05 0502 	mla	r5, r5, r2, r0
 8019900:	142d      	asrs	r5, r5, #16
 8019902:	d409      	bmi.n	8019918 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019904:	42bd      	cmp	r5, r7
 8019906:	da07      	bge.n	8019918 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019908:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801990a:	fb05 1202 	mla	r2, r5, r2, r1
 801990e:	1412      	asrs	r2, r2, #16
 8019910:	d402      	bmi.n	8019918 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019912:	42b2      	cmp	r2, r6
 8019914:	f2c0 80c3 	blt.w	8019a9e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8019918:	2500      	movs	r5, #0
 801991a:	195a      	adds	r2, r3, r5
 801991c:	2a00      	cmp	r2, #0
 801991e:	dc3f      	bgt.n	80199a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019920:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019924:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019928:	9b01      	ldr	r3, [sp, #4]
 801992a:	2b00      	cmp	r3, #0
 801992c:	f340 812a 	ble.w	8019b84 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019930:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019936:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801993a:	eeb0 6a62 	vmov.f32	s12, s5
 801993e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019942:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019946:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801994a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801994e:	eeb0 6a43 	vmov.f32	s12, s6
 8019952:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019956:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801995a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801995e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019962:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019966:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801996a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801996e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019972:	ee12 2a90 	vmov	r2, s5
 8019976:	eef0 2a47 	vmov.f32	s5, s14
 801997a:	fb92 f3f3 	sdiv	r3, r2, r3
 801997e:	ee13 2a10 	vmov	r2, s6
 8019982:	9313      	str	r3, [sp, #76]	; 0x4c
 8019984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019986:	eeb0 3a67 	vmov.f32	s6, s15
 801998a:	fb92 f3f3 	sdiv	r3, r2, r3
 801998e:	9314      	str	r3, [sp, #80]	; 0x50
 8019990:	9b01      	ldr	r3, [sp, #4]
 8019992:	9a05      	ldr	r2, [sp, #20]
 8019994:	3b01      	subs	r3, #1
 8019996:	9301      	str	r3, [sp, #4]
 8019998:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801999a:	bf08      	it	eq
 801999c:	4613      	moveq	r3, r2
 801999e:	e788      	b.n	80198b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80199a0:	1406      	asrs	r6, r0, #16
 80199a2:	d42c      	bmi.n	80199fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80199a4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80199a8:	42b2      	cmp	r2, r6
 80199aa:	dd28      	ble.n	80199fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80199ac:	140f      	asrs	r7, r1, #16
 80199ae:	d426      	bmi.n	80199fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80199b0:	f8db 200c 	ldr.w	r2, [fp, #12]
 80199b4:	42ba      	cmp	r2, r7
 80199b6:	dd22      	ble.n	80199fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80199b8:	9a02      	ldr	r2, [sp, #8]
 80199ba:	fb07 6602 	mla	r6, r7, r2, r6
 80199be:	9f03      	ldr	r7, [sp, #12]
 80199c0:	0872      	lsrs	r2, r6, #1
 80199c2:	07f6      	lsls	r6, r6, #31
 80199c4:	5cba      	ldrb	r2, [r7, r2]
 80199c6:	bf54      	ite	pl
 80199c8:	f002 020f 	andpl.w	r2, r2, #15
 80199cc:	1112      	asrmi	r2, r2, #4
 80199ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80199d2:	b2d2      	uxtb	r2, r2
 80199d4:	2aff      	cmp	r2, #255	; 0xff
 80199d6:	d118      	bne.n	8019a0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80199d8:	f06f 0601 	mvn.w	r6, #1
 80199dc:	f8d8 2000 	ldr.w	r2, [r8]
 80199e0:	fb06 f705 	mul.w	r7, r6, r5
 80199e4:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 80199e8:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80199ec:	0956      	lsrs	r6, r2, #5
 80199ee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80199f2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80199f6:	ea4c 0606 	orr.w	r6, ip, r6
 80199fa:	4316      	orrs	r6, r2
 80199fc:	53e6      	strh	r6, [r4, r7]
 80199fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019a00:	3d01      	subs	r5, #1
 8019a02:	4410      	add	r0, r2
 8019a04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a06:	4411      	add	r1, r2
 8019a08:	e787      	b.n	801991a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019a0a:	2a00      	cmp	r2, #0
 8019a0c:	d0f7      	beq.n	80199fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019a0e:	f06f 0601 	mvn.w	r6, #1
 8019a12:	f8d8 c000 	ldr.w	ip, [r8]
 8019a16:	fa1f f982 	uxth.w	r9, r2
 8019a1a:	43d2      	mvns	r2, r2
 8019a1c:	436e      	muls	r6, r5
 8019a1e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8019a22:	b2d2      	uxtb	r2, r2
 8019a24:	f834 e006 	ldrh.w	lr, [r4, r6]
 8019a28:	fb1a fa09 	smulbb	sl, sl, r9
 8019a2c:	9604      	str	r6, [sp, #16]
 8019a2e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8019a32:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019a36:	fb16 f609 	smulbb	r6, r6, r9
 8019a3a:	fa5f fc8c 	uxtb.w	ip, ip
 8019a3e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019a42:	fb1c fc09 	smulbb	ip, ip, r9
 8019a46:	fb07 6702 	mla	r7, r7, r2, r6
 8019a4a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019a4e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019a52:	b2bf      	uxth	r7, r7
 8019a54:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019a58:	fa5f fe8e 	uxtb.w	lr, lr
 8019a5c:	fb06 a602 	mla	r6, r6, r2, sl
 8019a60:	fb0e cc02 	mla	ip, lr, r2, ip
 8019a64:	1c7a      	adds	r2, r7, #1
 8019a66:	b2b6      	uxth	r6, r6
 8019a68:	fa1f fc8c 	uxth.w	ip, ip
 8019a6c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019a70:	9a04      	ldr	r2, [sp, #16]
 8019a72:	f10c 0a01 	add.w	sl, ip, #1
 8019a76:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019a7a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019a7e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019a82:	ea4a 0707 	orr.w	r7, sl, r7
 8019a86:	f106 0a01 	add.w	sl, r6, #1
 8019a8a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019a8e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019a92:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019a96:	ea47 070a 	orr.w	r7, r7, sl
 8019a9a:	52a7      	strh	r7, [r4, r2]
 8019a9c:	e7af      	b.n	80199fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019a9e:	f04f 0e00 	mov.w	lr, #0
 8019aa2:	eba3 020e 	sub.w	r2, r3, lr
 8019aa6:	2a00      	cmp	r2, #0
 8019aa8:	f77f af3a 	ble.w	8019920 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019aac:	1402      	asrs	r2, r0, #16
 8019aae:	9e02      	ldr	r6, [sp, #8]
 8019ab0:	140d      	asrs	r5, r1, #16
 8019ab2:	fb06 2505 	mla	r5, r6, r5, r2
 8019ab6:	9e03      	ldr	r6, [sp, #12]
 8019ab8:	086a      	lsrs	r2, r5, #1
 8019aba:	07ed      	lsls	r5, r5, #31
 8019abc:	5cb2      	ldrb	r2, [r6, r2]
 8019abe:	bf54      	ite	pl
 8019ac0:	f002 020f 	andpl.w	r2, r2, #15
 8019ac4:	1112      	asrmi	r2, r2, #4
 8019ac6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019aca:	b2d2      	uxtb	r2, r2
 8019acc:	2aff      	cmp	r2, #255	; 0xff
 8019ace:	d115      	bne.n	8019afc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019ad0:	f8d8 5000 	ldr.w	r5, [r8]
 8019ad4:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8019ad8:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8019adc:	096a      	lsrs	r2, r5, #5
 8019ade:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019ae2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019ae6:	4332      	orrs	r2, r6
 8019ae8:	432a      	orrs	r2, r5
 8019aea:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8019aee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019af0:	f10e 0e01 	add.w	lr, lr, #1
 8019af4:	4410      	add	r0, r2
 8019af6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019af8:	4411      	add	r1, r2
 8019afa:	e7d2      	b.n	8019aa2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019afc:	2a00      	cmp	r2, #0
 8019afe:	d0f6      	beq.n	8019aee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019b00:	f8d8 7000 	ldr.w	r7, [r8]
 8019b04:	fa1f f982 	uxth.w	r9, r2
 8019b08:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019b0c:	43d2      	mvns	r2, r2
 8019b0e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8019b12:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019b16:	ea4f 262c 	mov.w	r6, ip, asr #8
 8019b1a:	fb15 f509 	smulbb	r5, r5, r9
 8019b1e:	b2d2      	uxtb	r2, r2
 8019b20:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019b24:	b2ff      	uxtb	r7, r7
 8019b26:	fb1a fa09 	smulbb	sl, sl, r9
 8019b2a:	fb06 5602 	mla	r6, r6, r2, r5
 8019b2e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8019b32:	fb17 f709 	smulbb	r7, r7, r9
 8019b36:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019b3a:	b2b6      	uxth	r6, r6
 8019b3c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019b40:	fa5f fc8c 	uxtb.w	ip, ip
 8019b44:	fb05 a502 	mla	r5, r5, r2, sl
 8019b48:	fb0c 7702 	mla	r7, ip, r2, r7
 8019b4c:	1c72      	adds	r2, r6, #1
 8019b4e:	b2ad      	uxth	r5, r5
 8019b50:	b2bf      	uxth	r7, r7
 8019b52:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8019b56:	f107 0a01 	add.w	sl, r7, #1
 8019b5a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8019b5e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019b62:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019b66:	ea4a 0606 	orr.w	r6, sl, r6
 8019b6a:	f105 0a01 	add.w	sl, r5, #1
 8019b6e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019b72:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019b76:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019b7a:	ea46 060a 	orr.w	r6, r6, sl
 8019b7e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8019b82:	e7b4      	b.n	8019aee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019b84:	b007      	add	sp, #28
 8019b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b8a:	bf00      	nop
 8019b8c:	20027ea8 	.word	0x20027ea8

08019b90 <_ZN8touchgfx8LCD16bppD1Ev>:
 8019b90:	4770      	bx	lr

08019b92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019b92:	4770      	bx	lr

08019b94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019b94:	4770      	bx	lr

08019b96 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019b96:	4770      	bx	lr

08019b98 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8019b98:	4770      	bx	lr

08019b9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019b9a:	4770      	bx	lr

08019b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019b9c:	4770      	bx	lr

08019b9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019b9e:	4770      	bx	lr

08019ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019ba0:	4770      	bx	lr

08019ba2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019ba2:	4770      	bx	lr

08019ba4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019ba4:	4770      	bx	lr

08019ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019ba6:	4770      	bx	lr

08019ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019ba8:	4770      	bx	lr

08019baa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019baa:	4770      	bx	lr

08019bac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019bac:	4770      	bx	lr

08019bae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019bae:	4770      	bx	lr

08019bb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019bb0:	4770      	bx	lr

08019bb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019bb2:	4770      	bx	lr

08019bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019bb4:	4770      	bx	lr

08019bb6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019bb6:	4770      	bx	lr

08019bb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019bb8:	4770      	bx	lr

08019bba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019bba:	4770      	bx	lr

08019bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019bbc:	4770      	bx	lr

08019bbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019bbe:	4770      	bx	lr

08019bc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019bc0:	4770      	bx	lr

08019bc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019bc2:	4770      	bx	lr

08019bc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019bc4:	4770      	bx	lr

08019bc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019bc6:	4770      	bx	lr

08019bc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019bc8:	4770      	bx	lr

08019bca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bce:	b088      	sub	sp, #32
 8019bd0:	4606      	mov	r6, r0
 8019bd2:	4688      	mov	r8, r1
 8019bd4:	4691      	mov	r9, r2
 8019bd6:	ac08      	add	r4, sp, #32
 8019bd8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019bdc:	4620      	mov	r0, r4
 8019bde:	f7fd fc65 	bl	80174ac <_ZNK8touchgfx6Bitmap7getDataEv>
 8019be2:	6833      	ldr	r3, [r6, #0]
 8019be4:	4605      	mov	r5, r0
 8019be6:	4620      	mov	r0, r4
 8019be8:	699f      	ldr	r7, [r3, #24]
 8019bea:	f7fd fb73 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019bee:	4682      	mov	sl, r0
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	f7fd fba3 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019bf6:	9500      	str	r5, [sp, #0]
 8019bf8:	464b      	mov	r3, r9
 8019bfa:	4642      	mov	r2, r8
 8019bfc:	4631      	mov	r1, r6
 8019bfe:	e9cd a001 	strd	sl, r0, [sp, #4]
 8019c02:	a806      	add	r0, sp, #24
 8019c04:	47b8      	blx	r7
 8019c06:	4628      	mov	r0, r5
 8019c08:	b008      	add	sp, #32
 8019c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019c10 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c14:	2300      	movs	r3, #0
 8019c16:	9300      	str	r3, [sp, #0]
 8019c18:	4b3d      	ldr	r3, [pc, #244]	; (8019d10 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8019c1a:	781b      	ldrb	r3, [r3, #0]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d137      	bne.n	8019c90 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8019c20:	4a3c      	ldr	r2, [pc, #240]	; (8019d14 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019c22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019c26:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d132      	bne.n	8019c94 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8019c2e:	4b3a      	ldr	r3, [pc, #232]	; (8019d18 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8019c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c34:	ac02      	add	r4, sp, #8
 8019c36:	6808      	ldr	r0, [r1, #0]
 8019c38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019c3c:	ab02      	add	r3, sp, #8
 8019c3e:	6849      	ldr	r1, [r1, #4]
 8019c40:	4d36      	ldr	r5, [pc, #216]	; (8019d1c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8019c42:	c303      	stmia	r3!, {r0, r1}
 8019c44:	4669      	mov	r1, sp
 8019c46:	4620      	mov	r0, r4
 8019c48:	f7fa f894 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c4c:	4668      	mov	r0, sp
 8019c4e:	f7fa f84d 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019c56:	f8bd 2000 	ldrh.w	r2, [sp]
 8019c5a:	462f      	mov	r7, r5
 8019c5c:	6828      	ldr	r0, [r5, #0]
 8019c5e:	4413      	add	r3, r2
 8019c60:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019c64:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019c68:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019c6c:	4413      	add	r3, r2
 8019c6e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019c72:	6803      	ldr	r3, [r0, #0]
 8019c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c76:	4798      	blx	r3
 8019c78:	f010 0f01 	tst.w	r0, #1
 8019c7c:	d00c      	beq.n	8019c98 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8019c7e:	6828      	ldr	r0, [r5, #0]
 8019c80:	6803      	ldr	r3, [r0, #0]
 8019c82:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c88:	4798      	blx	r3
 8019c8a:	b004      	add	sp, #16
 8019c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c90:	4a21      	ldr	r2, [pc, #132]	; (8019d18 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8019c92:	e7c6      	b.n	8019c22 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8019c94:	4b1f      	ldr	r3, [pc, #124]	; (8019d14 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019c96:	e7cb      	b.n	8019c30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019c98:	6838      	ldr	r0, [r7, #0]
 8019c9a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8019c9e:	6803      	ldr	r3, [r0, #0]
 8019ca0:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8019ca4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019caa:	4798      	blx	r3
 8019cac:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8019cb0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019cb4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8019cb8:	fb16 3602 	smlabb	r6, r6, r2, r3
 8019cbc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019cc0:	6838      	ldr	r0, [r7, #0]
 8019cc2:	6803      	ldr	r3, [r0, #0]
 8019cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cc6:	4798      	blx	r3
 8019cc8:	4a12      	ldr	r2, [pc, #72]	; (8019d14 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019cca:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8019cce:	8813      	ldrh	r3, [r2, #0]
 8019cd0:	4691      	mov	r9, r2
 8019cd2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019cd6:	435d      	muls	r5, r3
 8019cd8:	fb03 1404 	mla	r4, r3, r4, r1
 8019cdc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019ce0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019ce4:	6838      	ldr	r0, [r7, #0]
 8019ce6:	42ac      	cmp	r4, r5
 8019ce8:	6803      	ldr	r3, [r0, #0]
 8019cea:	d20e      	bcs.n	8019d0a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8019cec:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8019cf0:	4632      	mov	r2, r6
 8019cf2:	4643      	mov	r3, r8
 8019cf4:	4621      	mov	r1, r4
 8019cf6:	47d0      	blx	sl
 8019cf8:	f8b9 3000 	ldrh.w	r3, [r9]
 8019cfc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019d00:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019d04:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019d08:	e7ec      	b.n	8019ce4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8019d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d0c:	4798      	blx	r3
 8019d0e:	e7bc      	b.n	8019c8a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019d10:	20027e90 	.word	0x20027e90
 8019d14:	20027e92 	.word	0x20027e92
 8019d18:	20027e94 	.word	0x20027e94
 8019d1c:	20027e98 	.word	0x20027e98

08019d20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8019d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d24:	b08b      	sub	sp, #44	; 0x2c
 8019d26:	460f      	mov	r7, r1
 8019d28:	4616      	mov	r6, r2
 8019d2a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8019d2e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8019d32:	f1bb 0f00 	cmp.w	fp, #0
 8019d36:	d049      	beq.n	8019dcc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019d38:	6810      	ldr	r0, [r2, #0]
 8019d3a:	ad06      	add	r5, sp, #24
 8019d3c:	6851      	ldr	r1, [r2, #4]
 8019d3e:	c503      	stmia	r5!, {r0, r1}
 8019d40:	6818      	ldr	r0, [r3, #0]
 8019d42:	ad08      	add	r5, sp, #32
 8019d44:	6859      	ldr	r1, [r3, #4]
 8019d46:	c503      	stmia	r5!, {r0, r1}
 8019d48:	a806      	add	r0, sp, #24
 8019d4a:	f7f9 ffcf 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019d4e:	4631      	mov	r1, r6
 8019d50:	a808      	add	r0, sp, #32
 8019d52:	f7fa f80f 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019d56:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019d5a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019d5e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8019d62:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8019d66:	fb16 2103 	smlabb	r1, r6, r3, r2
 8019d6a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8019d6e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8019d72:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019d76:	4f5f      	ldr	r7, [pc, #380]	; (8019ef4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019d78:	440a      	add	r2, r1
 8019d7a:	6838      	ldr	r0, [r7, #0]
 8019d7c:	46b9      	mov	r9, r7
 8019d7e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019d82:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019d86:	4413      	add	r3, r2
 8019d88:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019d8c:	6803      	ldr	r3, [r0, #0]
 8019d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d90:	4798      	blx	r3
 8019d92:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019d96:	d01c      	beq.n	8019dd2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8019d98:	f010 0f04 	tst.w	r0, #4
 8019d9c:	d01d      	beq.n	8019dda <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019d9e:	f8d9 0000 	ldr.w	r0, [r9]
 8019da2:	2700      	movs	r7, #0
 8019da4:	b2ad      	uxth	r5, r5
 8019da6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8019daa:	6801      	ldr	r1, [r0, #0]
 8019dac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019db0:	f8cd b00c 	str.w	fp, [sp, #12]
 8019db4:	9501      	str	r5, [sp, #4]
 8019db6:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8019dba:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8019dbe:	9402      	str	r4, [sp, #8]
 8019dc0:	fa1f f488 	uxth.w	r4, r8
 8019dc4:	9400      	str	r4, [sp, #0]
 8019dc6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8019dc8:	4631      	mov	r1, r6
 8019dca:	47a0      	blx	r4
 8019dcc:	b00b      	add	sp, #44	; 0x2c
 8019dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd2:	b914      	cbnz	r4, 8019dda <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019dd4:	f010 0f01 	tst.w	r0, #1
 8019dd8:	e7e0      	b.n	8019d9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8019dda:	f8d9 0000 	ldr.w	r0, [r9]
 8019dde:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8019de2:	6803      	ldr	r3, [r0, #0]
 8019de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019de6:	4798      	blx	r3
 8019de8:	4b43      	ldr	r3, [pc, #268]	; (8019ef8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8019dea:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8019dee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019df2:	881a      	ldrh	r2, [r3, #0]
 8019df4:	469a      	mov	sl, r3
 8019df6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8019dfa:	fb05 f502 	mul.w	r5, r5, r2
 8019dfe:	fb02 1404 	mla	r4, r2, r4, r1
 8019e02:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019e06:	d059      	beq.n	8019ebc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8019e08:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8019e0c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019e10:	fa1f f28b 	uxth.w	r2, fp
 8019e14:	469e      	mov	lr, r3
 8019e16:	fa1f f989 	uxth.w	r9, r9
 8019e1a:	42ac      	cmp	r4, r5
 8019e1c:	d264      	bcs.n	8019ee8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8019e1e:	eb04 0a07 	add.w	sl, r4, r7
 8019e22:	4554      	cmp	r4, sl
 8019e24:	d23d      	bcs.n	8019ea2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8019e26:	8821      	ldrh	r1, [r4, #0]
 8019e28:	f836 3b02 	ldrh.w	r3, [r6], #2
 8019e2c:	1208      	asrs	r0, r1, #8
 8019e2e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8019e32:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019e36:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8019e3a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019e3e:	00c9      	lsls	r1, r1, #3
 8019e40:	fb10 f009 	smulbb	r0, r0, r9
 8019e44:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8019e48:	b2c9      	uxtb	r1, r1
 8019e4a:	fb0c 0c02 	mla	ip, ip, r2, r0
 8019e4e:	10d8      	asrs	r0, r3, #3
 8019e50:	fb1b fb09 	smulbb	fp, fp, r9
 8019e54:	00db      	lsls	r3, r3, #3
 8019e56:	fa1f fc8c 	uxth.w	ip, ip
 8019e5a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8019e5e:	fb11 f109 	smulbb	r1, r1, r9
 8019e62:	b2db      	uxtb	r3, r3
 8019e64:	fb00 b002 	mla	r0, r0, r2, fp
 8019e68:	f10c 0b01 	add.w	fp, ip, #1
 8019e6c:	fb03 1302 	mla	r3, r3, r2, r1
 8019e70:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019e74:	b29b      	uxth	r3, r3
 8019e76:	b280      	uxth	r0, r0
 8019e78:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8019e7c:	f103 0c01 	add.w	ip, r3, #1
 8019e80:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019e84:	1c43      	adds	r3, r0, #1
 8019e86:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019e8a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019e8e:	0940      	lsrs	r0, r0, #5
 8019e90:	ea4c 0c0b 	orr.w	ip, ip, fp
 8019e94:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019e98:	ea4c 0c00 	orr.w	ip, ip, r0
 8019e9c:	f824 cb02 	strh.w	ip, [r4], #2
 8019ea0:	e7bf      	b.n	8019e22 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8019ea2:	f8be 3000 	ldrh.w	r3, [lr]
 8019ea6:	eba3 0308 	sub.w	r3, r3, r8
 8019eaa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019eae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019eb2:	eba3 0308 	sub.w	r3, r3, r8
 8019eb6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019eba:	e7ae      	b.n	8019e1a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8019ebc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019ec0:	f8d9 0000 	ldr.w	r0, [r9]
 8019ec4:	42ac      	cmp	r4, r5
 8019ec6:	6803      	ldr	r3, [r0, #0]
 8019ec8:	d20e      	bcs.n	8019ee8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8019eca:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8019ece:	4632      	mov	r2, r6
 8019ed0:	463b      	mov	r3, r7
 8019ed2:	4621      	mov	r1, r4
 8019ed4:	47c0      	blx	r8
 8019ed6:	f8ba 3000 	ldrh.w	r3, [sl]
 8019eda:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ede:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019ee2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019ee6:	e7eb      	b.n	8019ec0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8019ee8:	4b02      	ldr	r3, [pc, #8]	; (8019ef4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019eea:	6818      	ldr	r0, [r3, #0]
 8019eec:	6803      	ldr	r3, [r0, #0]
 8019eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ef0:	4798      	blx	r3
 8019ef2:	e76b      	b.n	8019dcc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019ef4:	20027e98 	.word	0x20027e98
 8019ef8:	20027e92 	.word	0x20027e92

08019efc <_ZN8touchgfx8LCD16bppD0Ev>:
 8019efc:	b510      	push	{r4, lr}
 8019efe:	4604      	mov	r4, r0
 8019f00:	2178      	movs	r1, #120	; 0x78
 8019f02:	f00a ff34 	bl	8024d6e <_ZdlPvj>
 8019f06:	4620      	mov	r0, r4
 8019f08:	bd10      	pop	{r4, pc}

08019f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019f0a:	b510      	push	{r4, lr}
 8019f0c:	4604      	mov	r4, r0
 8019f0e:	2104      	movs	r1, #4
 8019f10:	f00a ff2d 	bl	8024d6e <_ZdlPvj>
 8019f14:	4620      	mov	r0, r4
 8019f16:	bd10      	pop	{r4, pc}

08019f18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8019f18:	b510      	push	{r4, lr}
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	2104      	movs	r1, #4
 8019f1e:	f00a ff26 	bl	8024d6e <_ZdlPvj>
 8019f22:	4620      	mov	r0, r4
 8019f24:	bd10      	pop	{r4, pc}

08019f26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019f26:	b510      	push	{r4, lr}
 8019f28:	4604      	mov	r4, r0
 8019f2a:	2104      	movs	r1, #4
 8019f2c:	f00a ff1f 	bl	8024d6e <_ZdlPvj>
 8019f30:	4620      	mov	r0, r4
 8019f32:	bd10      	pop	{r4, pc}

08019f34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8019f34:	b510      	push	{r4, lr}
 8019f36:	4604      	mov	r4, r0
 8019f38:	2104      	movs	r1, #4
 8019f3a:	f00a ff18 	bl	8024d6e <_ZdlPvj>
 8019f3e:	4620      	mov	r0, r4
 8019f40:	bd10      	pop	{r4, pc}

08019f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019f42:	b510      	push	{r4, lr}
 8019f44:	4604      	mov	r4, r0
 8019f46:	2104      	movs	r1, #4
 8019f48:	f00a ff11 	bl	8024d6e <_ZdlPvj>
 8019f4c:	4620      	mov	r0, r4
 8019f4e:	bd10      	pop	{r4, pc}

08019f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019f50:	b510      	push	{r4, lr}
 8019f52:	4604      	mov	r4, r0
 8019f54:	2104      	movs	r1, #4
 8019f56:	f00a ff0a 	bl	8024d6e <_ZdlPvj>
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	bd10      	pop	{r4, pc}

08019f5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019f5e:	b510      	push	{r4, lr}
 8019f60:	4604      	mov	r4, r0
 8019f62:	2104      	movs	r1, #4
 8019f64:	f00a ff03 	bl	8024d6e <_ZdlPvj>
 8019f68:	4620      	mov	r0, r4
 8019f6a:	bd10      	pop	{r4, pc}

08019f6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019f6c:	b510      	push	{r4, lr}
 8019f6e:	4604      	mov	r4, r0
 8019f70:	2104      	movs	r1, #4
 8019f72:	f00a fefc 	bl	8024d6e <_ZdlPvj>
 8019f76:	4620      	mov	r0, r4
 8019f78:	bd10      	pop	{r4, pc}

08019f7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019f7a:	b510      	push	{r4, lr}
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	2104      	movs	r1, #4
 8019f80:	f00a fef5 	bl	8024d6e <_ZdlPvj>
 8019f84:	4620      	mov	r0, r4
 8019f86:	bd10      	pop	{r4, pc}

08019f88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019f88:	b510      	push	{r4, lr}
 8019f8a:	4604      	mov	r4, r0
 8019f8c:	2104      	movs	r1, #4
 8019f8e:	f00a feee 	bl	8024d6e <_ZdlPvj>
 8019f92:	4620      	mov	r0, r4
 8019f94:	bd10      	pop	{r4, pc}

08019f96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019f96:	b510      	push	{r4, lr}
 8019f98:	4604      	mov	r4, r0
 8019f9a:	2104      	movs	r1, #4
 8019f9c:	f00a fee7 	bl	8024d6e <_ZdlPvj>
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	bd10      	pop	{r4, pc}

08019fa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019fa4:	b510      	push	{r4, lr}
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	2104      	movs	r1, #4
 8019faa:	f00a fee0 	bl	8024d6e <_ZdlPvj>
 8019fae:	4620      	mov	r0, r4
 8019fb0:	bd10      	pop	{r4, pc}

08019fb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019fb2:	b510      	push	{r4, lr}
 8019fb4:	4604      	mov	r4, r0
 8019fb6:	2104      	movs	r1, #4
 8019fb8:	f00a fed9 	bl	8024d6e <_ZdlPvj>
 8019fbc:	4620      	mov	r0, r4
 8019fbe:	bd10      	pop	{r4, pc}

08019fc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8019fc0:	b510      	push	{r4, lr}
 8019fc2:	4604      	mov	r4, r0
 8019fc4:	2104      	movs	r1, #4
 8019fc6:	f00a fed2 	bl	8024d6e <_ZdlPvj>
 8019fca:	4620      	mov	r0, r4
 8019fcc:	bd10      	pop	{r4, pc}

08019fce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019fce:	b510      	push	{r4, lr}
 8019fd0:	4604      	mov	r4, r0
 8019fd2:	2104      	movs	r1, #4
 8019fd4:	f00a fecb 	bl	8024d6e <_ZdlPvj>
 8019fd8:	4620      	mov	r0, r4
 8019fda:	bd10      	pop	{r4, pc}

08019fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019fdc:	b510      	push	{r4, lr}
 8019fde:	4604      	mov	r4, r0
 8019fe0:	2104      	movs	r1, #4
 8019fe2:	f00a fec4 	bl	8024d6e <_ZdlPvj>
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	bd10      	pop	{r4, pc}

08019fea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019fea:	b510      	push	{r4, lr}
 8019fec:	4604      	mov	r4, r0
 8019fee:	2104      	movs	r1, #4
 8019ff0:	f00a febd 	bl	8024d6e <_ZdlPvj>
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	bd10      	pop	{r4, pc}

08019ff8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8019ff8:	b510      	push	{r4, lr}
 8019ffa:	4604      	mov	r4, r0
 8019ffc:	2104      	movs	r1, #4
 8019ffe:	f00a feb6 	bl	8024d6e <_ZdlPvj>
 801a002:	4620      	mov	r0, r4
 801a004:	bd10      	pop	{r4, pc}

0801a006 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a006:	b510      	push	{r4, lr}
 801a008:	4604      	mov	r4, r0
 801a00a:	2104      	movs	r1, #4
 801a00c:	f00a feaf 	bl	8024d6e <_ZdlPvj>
 801a010:	4620      	mov	r0, r4
 801a012:	bd10      	pop	{r4, pc}

0801a014 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a014:	b510      	push	{r4, lr}
 801a016:	4604      	mov	r4, r0
 801a018:	2104      	movs	r1, #4
 801a01a:	f00a fea8 	bl	8024d6e <_ZdlPvj>
 801a01e:	4620      	mov	r0, r4
 801a020:	bd10      	pop	{r4, pc}

0801a022 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a022:	b510      	push	{r4, lr}
 801a024:	4604      	mov	r4, r0
 801a026:	2104      	movs	r1, #4
 801a028:	f00a fea1 	bl	8024d6e <_ZdlPvj>
 801a02c:	4620      	mov	r0, r4
 801a02e:	bd10      	pop	{r4, pc}

0801a030 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a030:	b510      	push	{r4, lr}
 801a032:	4604      	mov	r4, r0
 801a034:	2104      	movs	r1, #4
 801a036:	f00a fe9a 	bl	8024d6e <_ZdlPvj>
 801a03a:	4620      	mov	r0, r4
 801a03c:	bd10      	pop	{r4, pc}

0801a03e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a03e:	b510      	push	{r4, lr}
 801a040:	4604      	mov	r4, r0
 801a042:	2104      	movs	r1, #4
 801a044:	f00a fe93 	bl	8024d6e <_ZdlPvj>
 801a048:	4620      	mov	r0, r4
 801a04a:	bd10      	pop	{r4, pc}

0801a04c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a04c:	b510      	push	{r4, lr}
 801a04e:	4604      	mov	r4, r0
 801a050:	2104      	movs	r1, #4
 801a052:	f00a fe8c 	bl	8024d6e <_ZdlPvj>
 801a056:	4620      	mov	r0, r4
 801a058:	bd10      	pop	{r4, pc}

0801a05a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a05a:	b510      	push	{r4, lr}
 801a05c:	4604      	mov	r4, r0
 801a05e:	2104      	movs	r1, #4
 801a060:	f00a fe85 	bl	8024d6e <_ZdlPvj>
 801a064:	4620      	mov	r0, r4
 801a066:	bd10      	pop	{r4, pc}

0801a068 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a068:	b510      	push	{r4, lr}
 801a06a:	4604      	mov	r4, r0
 801a06c:	2104      	movs	r1, #4
 801a06e:	f00a fe7e 	bl	8024d6e <_ZdlPvj>
 801a072:	4620      	mov	r0, r4
 801a074:	bd10      	pop	{r4, pc}

0801a076 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a076:	b510      	push	{r4, lr}
 801a078:	4604      	mov	r4, r0
 801a07a:	2104      	movs	r1, #4
 801a07c:	f00a fe77 	bl	8024d6e <_ZdlPvj>
 801a080:	4620      	mov	r0, r4
 801a082:	bd10      	pop	{r4, pc}

0801a084 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a084:	b510      	push	{r4, lr}
 801a086:	4604      	mov	r4, r0
 801a088:	2104      	movs	r1, #4
 801a08a:	f00a fe70 	bl	8024d6e <_ZdlPvj>
 801a08e:	4620      	mov	r0, r4
 801a090:	bd10      	pop	{r4, pc}
	...

0801a094 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a098:	b091      	sub	sp, #68	; 0x44
 801a09a:	469b      	mov	fp, r3
 801a09c:	4616      	mov	r6, r2
 801a09e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a0a2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801a0a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0aa:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801a0ae:	4604      	mov	r4, r0
 801a0b0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801a0b4:	4640      	mov	r0, r8
 801a0b6:	460d      	mov	r5, r1
 801a0b8:	4659      	mov	r1, fp
 801a0ba:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a0be:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a0c2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801a0c6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801a0ca:	f7f4 fef5 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 801a0ce:	4631      	mov	r1, r6
 801a0d0:	4640      	mov	r0, r8
 801a0d2:	f7f4 fef1 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 801a0d6:	4b74      	ldr	r3, [pc, #464]	; (801a2a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801a0d8:	8818      	ldrh	r0, [r3, #0]
 801a0da:	4b74      	ldr	r3, [pc, #464]	; (801a2ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801a0dc:	b202      	sxth	r2, r0
 801a0de:	8819      	ldrh	r1, [r3, #0]
 801a0e0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a0e4:	b20e      	sxth	r6, r1
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	da07      	bge.n	801a0fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801a0ea:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801a0ee:	4463      	add	r3, ip
 801a0f0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801a0fa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a0fe:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a102:	1ad2      	subs	r2, r2, r3
 801a104:	4594      	cmp	ip, r2
 801a106:	bfc4      	itt	gt
 801a108:	1ac2      	subgt	r2, r0, r3
 801a10a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801a10e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a112:	2a00      	cmp	r2, #0
 801a114:	da07      	bge.n	801a126 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801a116:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801a11a:	4462      	add	r2, ip
 801a11c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801a120:	2200      	movs	r2, #0
 801a122:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a126:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801a12a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a12e:	eba6 060a 	sub.w	r6, r6, sl
 801a132:	42b2      	cmp	r2, r6
 801a134:	bfc4      	itt	gt
 801a136:	eba1 020a 	subgt.w	r2, r1, sl
 801a13a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801a13e:	4a5c      	ldr	r2, [pc, #368]	; (801a2b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801a140:	7812      	ldrb	r2, [r2, #0]
 801a142:	b9a2      	cbnz	r2, 801a16e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801a144:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801a148:	4286      	cmp	r6, r0
 801a14a:	4640      	mov	r0, r8
 801a14c:	9303      	str	r3, [sp, #12]
 801a14e:	bf14      	ite	ne
 801a150:	2600      	movne	r6, #0
 801a152:	2601      	moveq	r6, #1
 801a154:	f7f4 fef3 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a158:	9b03      	ldr	r3, [sp, #12]
 801a15a:	b160      	cbz	r0, 801a176 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801a15c:	2300      	movs	r3, #0
 801a15e:	8023      	strh	r3, [r4, #0]
 801a160:	8063      	strh	r3, [r4, #2]
 801a162:	80a3      	strh	r3, [r4, #4]
 801a164:	4620      	mov	r0, r4
 801a166:	80e3      	strh	r3, [r4, #6]
 801a168:	b011      	add	sp, #68	; 0x44
 801a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a16e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a172:	428e      	cmp	r6, r1
 801a174:	e7e9      	b.n	801a14a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801a176:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a17a:	a90e      	add	r1, sp, #56	; 0x38
 801a17c:	900e      	str	r0, [sp, #56]	; 0x38
 801a17e:	a80c      	add	r0, sp, #48	; 0x30
 801a180:	9205      	str	r2, [sp, #20]
 801a182:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a186:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801a18a:	9206      	str	r2, [sp, #24]
 801a18c:	f8bb 2000 	ldrh.w	r2, [fp]
 801a190:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801a194:	1a9b      	subs	r3, r3, r2
 801a196:	b21b      	sxth	r3, r3
 801a198:	9303      	str	r3, [sp, #12]
 801a19a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801a19e:	f8df b118 	ldr.w	fp, [pc, #280]	; 801a2b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a1a2:	ebaa 0a03 	sub.w	sl, sl, r3
 801a1a6:	fa0f f38a 	sxth.w	r3, sl
 801a1aa:	9304      	str	r3, [sp, #16]
 801a1ac:	9b03      	ldr	r3, [sp, #12]
 801a1ae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801a1b2:	9b04      	ldr	r3, [sp, #16]
 801a1b4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a1b8:	9b05      	ldr	r3, [sp, #20]
 801a1ba:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a1be:	9b06      	ldr	r3, [sp, #24]
 801a1c0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a1c4:	f7f9 fdd6 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a1c8:	4640      	mov	r0, r8
 801a1ca:	f7f9 fd8f 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1ce:	a80e      	add	r0, sp, #56	; 0x38
 801a1d0:	f7f9 fd8c 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1d4:	4b37      	ldr	r3, [pc, #220]	; (801a2b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a1d6:	4628      	mov	r0, r5
 801a1d8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801a1dc:	881b      	ldrh	r3, [r3, #0]
 801a1de:	9307      	str	r3, [sp, #28]
 801a1e0:	682b      	ldr	r3, [r5, #0]
 801a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1e4:	4798      	blx	r3
 801a1e6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801a1ea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a1ee:	4681      	mov	r9, r0
 801a1f0:	f8db 0000 	ldr.w	r0, [fp]
 801a1f4:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801a1f8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801a1fa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a1fe:	6803      	ldr	r3, [r0, #0]
 801a200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a202:	4798      	blx	r3
 801a204:	4607      	mov	r7, r0
 801a206:	f8db 0000 	ldr.w	r0, [fp]
 801a20a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801a20e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a212:	6803      	ldr	r3, [r0, #0]
 801a214:	9109      	str	r1, [sp, #36]	; 0x24
 801a216:	9208      	str	r2, [sp, #32]
 801a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a21a:	4798      	blx	r3
 801a21c:	f010 0f01 	tst.w	r0, #1
 801a220:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a224:	d012      	beq.n	801a24c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801a226:	f8db 0000 	ldr.w	r0, [fp]
 801a22a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a22e:	6803      	ldr	r3, [r0, #0]
 801a230:	9200      	str	r2, [sp, #0]
 801a232:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a234:	462b      	mov	r3, r5
 801a236:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a23a:	47b0      	blx	r6
 801a23c:	9b03      	ldr	r3, [sp, #12]
 801a23e:	8023      	strh	r3, [r4, #0]
 801a240:	9b04      	ldr	r3, [sp, #16]
 801a242:	8063      	strh	r3, [r4, #2]
 801a244:	9b05      	ldr	r3, [sp, #20]
 801a246:	80a3      	strh	r3, [r4, #4]
 801a248:	9b06      	ldr	r3, [sp, #24]
 801a24a:	e78b      	b.n	801a164 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801a24c:	fb09 f202 	mul.w	r2, r9, r2
 801a250:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a254:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801a258:	440f      	add	r7, r1
 801a25a:	b166      	cbz	r6, 801a276 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a25c:	9a07      	ldr	r2, [sp, #28]
 801a25e:	4592      	cmp	sl, r2
 801a260:	d109      	bne.n	801a276 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a262:	f8db 0000 	ldr.w	r0, [fp]
 801a266:	fb09 f303 	mul.w	r3, r9, r3
 801a26a:	4629      	mov	r1, r5
 801a26c:	6802      	ldr	r2, [r0, #0]
 801a26e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801a270:	463a      	mov	r2, r7
 801a272:	47b0      	blx	r6
 801a274:	e7e2      	b.n	801a23c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a276:	fb0a f303 	mul.w	r3, sl, r3
 801a27a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801a27e:	f8df b038 	ldr.w	fp, [pc, #56]	; 801a2b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a282:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801a286:	4545      	cmp	r5, r8
 801a288:	d2d8      	bcs.n	801a23c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a28a:	f8db 0000 	ldr.w	r0, [fp]
 801a28e:	4629      	mov	r1, r5
 801a290:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a294:	4435      	add	r5, r6
 801a296:	6802      	ldr	r2, [r0, #0]
 801a298:	005b      	lsls	r3, r3, #1
 801a29a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a29e:	463a      	mov	r2, r7
 801a2a0:	47d0      	blx	sl
 801a2a2:	444f      	add	r7, r9
 801a2a4:	e7ef      	b.n	801a286 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801a2a6:	bf00      	nop
 801a2a8:	20027e8c 	.word	0x20027e8c
 801a2ac:	20027e8e 	.word	0x20027e8e
 801a2b0:	20027e90 	.word	0x20027e90
 801a2b4:	20027e92 	.word	0x20027e92
 801a2b8:	20027e98 	.word	0x20027e98

0801a2bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2be:	4606      	mov	r6, r0
 801a2c0:	b087      	sub	sp, #28
 801a2c2:	460c      	mov	r4, r1
 801a2c4:	4617      	mov	r7, r2
 801a2c6:	461d      	mov	r5, r3
 801a2c8:	b333      	cbz	r3, 801a318 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a2ca:	4608      	mov	r0, r1
 801a2cc:	f7f4 fe37 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a2d0:	bb10      	cbnz	r0, 801a318 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a2d2:	6820      	ldr	r0, [r4, #0]
 801a2d4:	ab04      	add	r3, sp, #16
 801a2d6:	6861      	ldr	r1, [r4, #4]
 801a2d8:	4c1b      	ldr	r4, [pc, #108]	; (801a348 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801a2da:	c303      	stmia	r3!, {r0, r1}
 801a2dc:	a804      	add	r0, sp, #16
 801a2de:	f7f9 fd05 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a2e2:	6820      	ldr	r0, [r4, #0]
 801a2e4:	6803      	ldr	r3, [r0, #0]
 801a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2e8:	4798      	blx	r3
 801a2ea:	2dff      	cmp	r5, #255	; 0xff
 801a2ec:	d016      	beq.n	801a31c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801a2ee:	f010 0f08 	tst.w	r0, #8
 801a2f2:	6820      	ldr	r0, [r4, #0]
 801a2f4:	d015      	beq.n	801a322 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801a2f6:	2400      	movs	r4, #0
 801a2f8:	6801      	ldr	r1, [r0, #0]
 801a2fa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a2fe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a302:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801a306:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801a30a:	9401      	str	r4, [sp, #4]
 801a30c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801a310:	9400      	str	r4, [sp, #0]
 801a312:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801a314:	4639      	mov	r1, r7
 801a316:	47a0      	blx	r4
 801a318:	b007      	add	sp, #28
 801a31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a31c:	f010 0f02 	tst.w	r0, #2
 801a320:	e7e7      	b.n	801a2f2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801a322:	6803      	ldr	r3, [r0, #0]
 801a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a326:	4798      	blx	r3
 801a328:	4b08      	ldr	r3, [pc, #32]	; (801a34c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801a32a:	4601      	mov	r1, r0
 801a32c:	4630      	mov	r0, r6
 801a32e:	881a      	ldrh	r2, [r3, #0]
 801a330:	6833      	ldr	r3, [r6, #0]
 801a332:	e9cd 7500 	strd	r7, r5, [sp]
 801a336:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801a338:	ab04      	add	r3, sp, #16
 801a33a:	47a8      	blx	r5
 801a33c:	6820      	ldr	r0, [r4, #0]
 801a33e:	6803      	ldr	r3, [r0, #0]
 801a340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a342:	4798      	blx	r3
 801a344:	e7e8      	b.n	801a318 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a346:	bf00      	nop
 801a348:	20027e98 	.word	0x20027e98
 801a34c:	20027e92 	.word	0x20027e92

0801a350 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a354:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801a358:	4688      	mov	r8, r1
 801a35a:	4614      	mov	r4, r2
 801a35c:	461d      	mov	r5, r3
 801a35e:	9e08      	ldr	r6, [sp, #32]
 801a360:	2f00      	cmp	r7, #0
 801a362:	f000 80ab 	beq.w	801a4bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a366:	4618      	mov	r0, r3
 801a368:	f7f4 fde9 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a36c:	2800      	cmp	r0, #0
 801a36e:	f040 80a5 	bne.w	801a4bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a372:	f9b5 1000 	ldrsh.w	r1, [r5]
 801a376:	2fff      	cmp	r7, #255	; 0xff
 801a378:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a37c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801a380:	fb04 1303 	mla	r3, r4, r3, r1
 801a384:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801a388:	eba4 0200 	sub.w	r2, r4, r0
 801a38c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801a390:	fb04 f505 	mul.w	r5, r4, r5
 801a394:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801a398:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801a39c:	d04a      	beq.n	801a434 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801a39e:	b2bc      	uxth	r4, r7
 801a3a0:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801a3a4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801a3a8:	fa5f f788 	uxtb.w	r7, r8
 801a3ac:	b2f3      	uxtb	r3, r6
 801a3ae:	0040      	lsls	r0, r0, #1
 801a3b0:	fb0e fe04 	mul.w	lr, lr, r4
 801a3b4:	4367      	muls	r7, r4
 801a3b6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801a3ba:	4363      	muls	r3, r4
 801a3bc:	fa1f fc8c 	uxth.w	ip, ip
 801a3c0:	42a9      	cmp	r1, r5
 801a3c2:	d27b      	bcs.n	801a4bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a3c4:	eb01 0900 	add.w	r9, r1, r0
 801a3c8:	4549      	cmp	r1, r9
 801a3ca:	d231      	bcs.n	801a430 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801a3cc:	880a      	ldrh	r2, [r1, #0]
 801a3ce:	1214      	asrs	r4, r2, #8
 801a3d0:	10d6      	asrs	r6, r2, #3
 801a3d2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801a3d6:	00d2      	lsls	r2, r2, #3
 801a3d8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a3dc:	b2d2      	uxtb	r2, r2
 801a3de:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801a3e2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a3e6:	fb14 f40c 	smulbb	r4, r4, ip
 801a3ea:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801a3ee:	fb12 f20c 	smulbb	r2, r2, ip
 801a3f2:	fb16 f60c 	smulbb	r6, r6, ip
 801a3f6:	4474      	add	r4, lr
 801a3f8:	441a      	add	r2, r3
 801a3fa:	b2a4      	uxth	r4, r4
 801a3fc:	443e      	add	r6, r7
 801a3fe:	b292      	uxth	r2, r2
 801a400:	f104 0a01 	add.w	sl, r4, #1
 801a404:	b2b6      	uxth	r6, r6
 801a406:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a40a:	f102 0a01 	add.w	sl, r2, #1
 801a40e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801a412:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801a416:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a41a:	4322      	orrs	r2, r4
 801a41c:	1c74      	adds	r4, r6, #1
 801a41e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801a422:	0976      	lsrs	r6, r6, #5
 801a424:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a428:	4332      	orrs	r2, r6
 801a42a:	f821 2b02 	strh.w	r2, [r1], #2
 801a42e:	e7cb      	b.n	801a3c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801a430:	4441      	add	r1, r8
 801a432:	e7c5      	b.n	801a3c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801a434:	0973      	lsrs	r3, r6, #5
 801a436:	4f22      	ldr	r7, [pc, #136]	; (801a4c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801a438:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801a43c:	ea08 0707 	and.w	r7, r8, r7
 801a440:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a444:	433b      	orrs	r3, r7
 801a446:	07e7      	lsls	r7, r4, #31
 801a448:	ea43 0306 	orr.w	r3, r3, r6
 801a44c:	b29b      	uxth	r3, r3
 801a44e:	d50b      	bpl.n	801a468 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801a450:	0040      	lsls	r0, r0, #1
 801a452:	0052      	lsls	r2, r2, #1
 801a454:	42a9      	cmp	r1, r5
 801a456:	d231      	bcs.n	801a4bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a458:	180c      	adds	r4, r1, r0
 801a45a:	42a1      	cmp	r1, r4
 801a45c:	d202      	bcs.n	801a464 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801a45e:	f821 3b02 	strh.w	r3, [r1], #2
 801a462:	e7fa      	b.n	801a45a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801a464:	4411      	add	r1, r2
 801a466:	e7f5      	b.n	801a454 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801a468:	078e      	lsls	r6, r1, #30
 801a46a:	d008      	beq.n	801a47e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801a46c:	0066      	lsls	r6, r4, #1
 801a46e:	460a      	mov	r2, r1
 801a470:	42aa      	cmp	r2, r5
 801a472:	d202      	bcs.n	801a47a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801a474:	8013      	strh	r3, [r2, #0]
 801a476:	4432      	add	r2, r6
 801a478:	e7fa      	b.n	801a470 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801a47a:	3102      	adds	r1, #2
 801a47c:	3801      	subs	r0, #1
 801a47e:	07c2      	lsls	r2, r0, #31
 801a480:	d50b      	bpl.n	801a49a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801a482:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801a486:	0066      	lsls	r6, r4, #1
 801a488:	3a01      	subs	r2, #1
 801a48a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801a48e:	42aa      	cmp	r2, r5
 801a490:	d202      	bcs.n	801a498 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801a492:	8013      	strh	r3, [r2, #0]
 801a494:	4432      	add	r2, r6
 801a496:	e7fa      	b.n	801a48e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801a498:	3801      	subs	r0, #1
 801a49a:	b178      	cbz	r0, 801a4bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a49c:	1040      	asrs	r0, r0, #1
 801a49e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801a4a2:	0080      	lsls	r0, r0, #2
 801a4a4:	0064      	lsls	r4, r4, #1
 801a4a6:	42a9      	cmp	r1, r5
 801a4a8:	d208      	bcs.n	801a4bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a4aa:	180e      	adds	r6, r1, r0
 801a4ac:	460a      	mov	r2, r1
 801a4ae:	42b2      	cmp	r2, r6
 801a4b0:	d202      	bcs.n	801a4b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801a4b2:	f842 3b04 	str.w	r3, [r2], #4
 801a4b6:	e7fa      	b.n	801a4ae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801a4b8:	4421      	add	r1, r4
 801a4ba:	e7f4      	b.n	801a4a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801a4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4c0:	00fff800 	.word	0x00fff800

0801a4c4 <_ZN8touchgfx8LCD16bppC1Ev>:
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	4910      	ldr	r1, [pc, #64]	; (801a508 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801a4c8:	6042      	str	r2, [r0, #4]
 801a4ca:	6001      	str	r1, [r0, #0]
 801a4cc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a4d0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801a4d4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a4d8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801a4dc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801a4e0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801a4e4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801a4e8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801a4ec:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801a4f0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801a4f4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a4f8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a4fc:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801a500:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801a504:	4770      	bx	lr
 801a506:	bf00      	nop
 801a508:	0802a218 	.word	0x0802a218

0801a50c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a510:	b08d      	sub	sp, #52	; 0x34
 801a512:	460d      	mov	r5, r1
 801a514:	4604      	mov	r4, r0
 801a516:	4699      	mov	r9, r3
 801a518:	6808      	ldr	r0, [r1, #0]
 801a51a:	ab08      	add	r3, sp, #32
 801a51c:	6849      	ldr	r1, [r1, #4]
 801a51e:	c303      	stmia	r3!, {r0, r1}
 801a520:	6810      	ldr	r0, [r2, #0]
 801a522:	ab0a      	add	r3, sp, #40	; 0x28
 801a524:	6851      	ldr	r1, [r2, #4]
 801a526:	c303      	stmia	r3!, {r0, r1}
 801a528:	a808      	add	r0, sp, #32
 801a52a:	f7f9 fbdf 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a52e:	4629      	mov	r1, r5
 801a530:	a80a      	add	r0, sp, #40	; 0x28
 801a532:	4d67      	ldr	r5, [pc, #412]	; (801a6d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a534:	f7f9 fc1e 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a538:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801a53c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801a540:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a544:	6828      	ldr	r0, [r5, #0]
 801a546:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a54a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801a54e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a552:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a556:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801a55a:	440a      	add	r2, r1
 801a55c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a560:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801a564:	4413      	add	r3, r2
 801a566:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a56a:	6803      	ldr	r3, [r0, #0]
 801a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a56e:	4798      	blx	r3
 801a570:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a574:	d119      	bne.n	801a5aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801a576:	f010 0f20 	tst.w	r0, #32
 801a57a:	6828      	ldr	r0, [r5, #0]
 801a57c:	d018      	beq.n	801a5b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801a57e:	2500      	movs	r5, #0
 801a580:	6801      	ldr	r1, [r0, #0]
 801a582:	b2b6      	uxth	r6, r6
 801a584:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801a588:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801a58c:	9601      	str	r6, [sp, #4]
 801a58e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801a592:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801a596:	9502      	str	r5, [sp, #8]
 801a598:	fa1f f588 	uxth.w	r5, r8
 801a59c:	9500      	str	r5, [sp, #0]
 801a59e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801a5a0:	4621      	mov	r1, r4
 801a5a2:	47a8      	blx	r5
 801a5a4:	b00d      	add	sp, #52	; 0x34
 801a5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a5ae:	e7e4      	b.n	801a57a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801a5b0:	6803      	ldr	r3, [r0, #0]
 801a5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5b4:	4798      	blx	r3
 801a5b6:	4947      	ldr	r1, [pc, #284]	; (801a6d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801a5b8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a5bc:	880b      	ldrh	r3, [r1, #0]
 801a5be:	468a      	mov	sl, r1
 801a5c0:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801a5c4:	fb03 5202 	mla	r2, r3, r2, r5
 801a5c8:	4373      	muls	r3, r6
 801a5ca:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a5ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a5d2:	9307      	str	r3, [sp, #28]
 801a5d4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a5d8:	9306      	str	r3, [sp, #24]
 801a5da:	9b07      	ldr	r3, [sp, #28]
 801a5dc:	4298      	cmp	r0, r3
 801a5de:	d270      	bcs.n	801a6c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801a5e0:	9b06      	ldr	r3, [sp, #24]
 801a5e2:	4621      	mov	r1, r4
 801a5e4:	eb00 0b03 	add.w	fp, r0, r3
 801a5e8:	4558      	cmp	r0, fp
 801a5ea:	d25d      	bcs.n	801a6a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801a5ec:	f851 4b04 	ldr.w	r4, [r1], #4
 801a5f0:	0e23      	lsrs	r3, r4, #24
 801a5f2:	d014      	beq.n	801a61e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801a5f4:	2bff      	cmp	r3, #255	; 0xff
 801a5f6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801a5fa:	d112      	bne.n	801a622 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801a5fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a600:	d10f      	bne.n	801a622 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801a602:	0963      	lsrs	r3, r4, #5
 801a604:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801a608:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a60c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a610:	f02c 0c07 	bic.w	ip, ip, #7
 801a614:	ea43 0c0c 	orr.w	ip, r3, ip
 801a618:	ea4c 0404 	orr.w	r4, ip, r4
 801a61c:	8004      	strh	r4, [r0, #0]
 801a61e:	3002      	adds	r0, #2
 801a620:	e7e2      	b.n	801a5e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801a622:	fb09 f303 	mul.w	r3, r9, r3
 801a626:	8807      	ldrh	r7, [r0, #0]
 801a628:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801a62c:	fa5f fc8c 	uxtb.w	ip, ip
 801a630:	1c5a      	adds	r2, r3, #1
 801a632:	123e      	asrs	r6, r7, #8
 801a634:	10fd      	asrs	r5, r7, #3
 801a636:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801a63a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a63e:	00ff      	lsls	r7, r7, #3
 801a640:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a644:	1212      	asrs	r2, r2, #8
 801a646:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a64a:	b293      	uxth	r3, r2
 801a64c:	43d2      	mvns	r2, r2
 801a64e:	b2ff      	uxtb	r7, r7
 801a650:	fb1e fe03 	smulbb	lr, lr, r3
 801a654:	b2d2      	uxtb	r2, r2
 801a656:	fb1c fc03 	smulbb	ip, ip, r3
 801a65a:	b2e4      	uxtb	r4, r4
 801a65c:	fb06 e602 	mla	r6, r6, r2, lr
 801a660:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a664:	fb14 f403 	smulbb	r4, r4, r3
 801a668:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801a66c:	b2b6      	uxth	r6, r6
 801a66e:	fb05 c502 	mla	r5, r5, r2, ip
 801a672:	fb07 4702 	mla	r7, r7, r2, r4
 801a676:	f106 0e01 	add.w	lr, r6, #1
 801a67a:	b2ad      	uxth	r5, r5
 801a67c:	b2bf      	uxth	r7, r7
 801a67e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801a682:	f105 0c01 	add.w	ip, r5, #1
 801a686:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801a68a:	1c7e      	adds	r6, r7, #1
 801a68c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a690:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801a694:	096d      	lsrs	r5, r5, #5
 801a696:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a69a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a69e:	ea46 060e 	orr.w	r6, r6, lr
 801a6a2:	432e      	orrs	r6, r5
 801a6a4:	8006      	strh	r6, [r0, #0]
 801a6a6:	e7ba      	b.n	801a61e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801a6a8:	f8ba 3000 	ldrh.w	r3, [sl]
 801a6ac:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801a6b0:	eba3 0308 	sub.w	r3, r3, r8
 801a6b4:	eba4 0408 	sub.w	r4, r4, r8
 801a6b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a6bc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801a6c0:	e78b      	b.n	801a5da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801a6c2:	4b03      	ldr	r3, [pc, #12]	; (801a6d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a6c4:	6818      	ldr	r0, [r3, #0]
 801a6c6:	6803      	ldr	r3, [r0, #0]
 801a6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6ca:	4798      	blx	r3
 801a6cc:	e76a      	b.n	801a5a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801a6ce:	bf00      	nop
 801a6d0:	20027e98 	.word	0x20027e98
 801a6d4:	20027e92 	.word	0x20027e92

0801a6d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801a6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6dc:	b085      	sub	sp, #20
 801a6de:	6810      	ldr	r0, [r2, #0]
 801a6e0:	460c      	mov	r4, r1
 801a6e2:	6851      	ldr	r1, [r2, #4]
 801a6e4:	466d      	mov	r5, sp
 801a6e6:	4616      	mov	r6, r2
 801a6e8:	c503      	stmia	r5!, {r0, r1}
 801a6ea:	6818      	ldr	r0, [r3, #0]
 801a6ec:	6859      	ldr	r1, [r3, #4]
 801a6ee:	c503      	stmia	r5!, {r0, r1}
 801a6f0:	4668      	mov	r0, sp
 801a6f2:	4d2e      	ldr	r5, [pc, #184]	; (801a7ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801a6f4:	f7f9 fafa 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a6f8:	4631      	mov	r1, r6
 801a6fa:	a802      	add	r0, sp, #8
 801a6fc:	4e2c      	ldr	r6, [pc, #176]	; (801a7b0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801a6fe:	f7f9 fb39 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a702:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801a706:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a70a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801a70e:	6828      	ldr	r0, [r5, #0]
 801a710:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a714:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a718:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801a71c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a720:	f8bd 1000 	ldrh.w	r1, [sp]
 801a724:	440a      	add	r2, r1
 801a726:	f8ad 2008 	strh.w	r2, [sp, #8]
 801a72a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a72e:	4413      	add	r3, r2
 801a730:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a734:	6803      	ldr	r3, [r0, #0]
 801a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a738:	4798      	blx	r3
 801a73a:	8833      	ldrh	r3, [r6, #0]
 801a73c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801a740:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801a744:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a748:	f8df e068 	ldr.w	lr, [pc, #104]	; 801a7b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801a74c:	fb03 1202 	mla	r2, r3, r2, r1
 801a750:	fb08 f303 	mul.w	r3, r8, r3
 801a754:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a758:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a75c:	4298      	cmp	r0, r3
 801a75e:	d21d      	bcs.n	801a79c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801a760:	eb00 080c 	add.w	r8, r0, ip
 801a764:	4540      	cmp	r0, r8
 801a766:	d20f      	bcs.n	801a788 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801a768:	f854 1b04 	ldr.w	r1, [r4], #4
 801a76c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801a770:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801a774:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801a778:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a77c:	ea42 0209 	orr.w	r2, r2, r9
 801a780:	430a      	orrs	r2, r1
 801a782:	f820 2b02 	strh.w	r2, [r0], #2
 801a786:	e7ed      	b.n	801a764 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801a788:	8832      	ldrh	r2, [r6, #0]
 801a78a:	1bd2      	subs	r2, r2, r7
 801a78c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a790:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a794:	1bd2      	subs	r2, r2, r7
 801a796:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801a79a:	e7df      	b.n	801a75c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801a79c:	6828      	ldr	r0, [r5, #0]
 801a79e:	6803      	ldr	r3, [r0, #0]
 801a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7a2:	4798      	blx	r3
 801a7a4:	b005      	add	sp, #20
 801a7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7aa:	bf00      	nop
 801a7ac:	20027e98 	.word	0x20027e98
 801a7b0:	20027e92 	.word	0x20027e92
 801a7b4:	fffff800 	.word	0xfffff800

0801a7b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801a7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7bc:	b08e      	sub	sp, #56	; 0x38
 801a7be:	460e      	mov	r6, r1
 801a7c0:	4604      	mov	r4, r0
 801a7c2:	461d      	mov	r5, r3
 801a7c4:	6808      	ldr	r0, [r1, #0]
 801a7c6:	ab0a      	add	r3, sp, #40	; 0x28
 801a7c8:	6849      	ldr	r1, [r1, #4]
 801a7ca:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801a9a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801a7ce:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801a9a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801a7d2:	c303      	stmia	r3!, {r0, r1}
 801a7d4:	6810      	ldr	r0, [r2, #0]
 801a7d6:	ab0c      	add	r3, sp, #48	; 0x30
 801a7d8:	6851      	ldr	r1, [r2, #4]
 801a7da:	c303      	stmia	r3!, {r0, r1}
 801a7dc:	a80a      	add	r0, sp, #40	; 0x28
 801a7de:	f7f9 fa85 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a7e2:	4631      	mov	r1, r6
 801a7e4:	a80c      	add	r0, sp, #48	; 0x30
 801a7e6:	f7f9 fac5 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a7ea:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801a7ee:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a7f2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a7f6:	f8d8 0000 	ldr.w	r0, [r8]
 801a7fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a7fe:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801a802:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801a806:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a80a:	440c      	add	r4, r1
 801a80c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801a810:	440a      	add	r2, r1
 801a812:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801a816:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801a81a:	4413      	add	r3, r2
 801a81c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a820:	6803      	ldr	r3, [r0, #0]
 801a822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a824:	4798      	blx	r3
 801a826:	2dff      	cmp	r5, #255	; 0xff
 801a828:	d124      	bne.n	801a874 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801a82a:	f010 0f01 	tst.w	r0, #1
 801a82e:	f8d8 0000 	ldr.w	r0, [r8]
 801a832:	d022      	beq.n	801a87a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801a834:	2100      	movs	r1, #0
 801a836:	f04f 0e01 	mov.w	lr, #1
 801a83a:	f8d0 c000 	ldr.w	ip, [r0]
 801a83e:	b2b6      	uxth	r6, r6
 801a840:	f8cd e018 	str.w	lr, [sp, #24]
 801a844:	b2bf      	uxth	r7, r7
 801a846:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801a84a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801a84e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801a852:	f8b9 e000 	ldrh.w	lr, [r9]
 801a856:	9503      	str	r5, [sp, #12]
 801a858:	9601      	str	r6, [sp, #4]
 801a85a:	9700      	str	r7, [sp, #0]
 801a85c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801a860:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a864:	9102      	str	r1, [sp, #8]
 801a866:	4621      	mov	r1, r4
 801a868:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801a86c:	47a8      	blx	r5
 801a86e:	b00e      	add	sp, #56	; 0x38
 801a870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a874:	f010 0f04 	tst.w	r0, #4
 801a878:	e7d9      	b.n	801a82e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801a87a:	6803      	ldr	r3, [r0, #0]
 801a87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a87e:	4798      	blx	r3
 801a880:	f8b9 3000 	ldrh.w	r3, [r9]
 801a884:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a888:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801a88c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a890:	435e      	muls	r6, r3
 801a892:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a896:	2dff      	cmp	r5, #255	; 0xff
 801a898:	fb03 1202 	mla	r2, r3, r2, r1
 801a89c:	ebac 0c07 	sub.w	ip, ip, r7
 801a8a0:	eba3 0707 	sub.w	r7, r3, r7
 801a8a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a8a8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a8ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a8b0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801a8b4:	d049      	beq.n	801a94a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801a8b6:	43eb      	mvns	r3, r5
 801a8b8:	fa1f f985 	uxth.w	r9, r5
 801a8bc:	b2db      	uxtb	r3, r3
 801a8be:	42b0      	cmp	r0, r6
 801a8c0:	d266      	bcs.n	801a990 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a8c2:	eb00 0a0e 	add.w	sl, r0, lr
 801a8c6:	4550      	cmp	r0, sl
 801a8c8:	4621      	mov	r1, r4
 801a8ca:	f104 0403 	add.w	r4, r4, #3
 801a8ce:	d25b      	bcs.n	801a988 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801a8d0:	8802      	ldrh	r2, [r0, #0]
 801a8d2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a8d6:	ea4f 2822 	mov.w	r8, r2, asr #8
 801a8da:	fb11 f109 	smulbb	r1, r1, r9
 801a8de:	10d5      	asrs	r5, r2, #3
 801a8e0:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801a8e4:	00d2      	lsls	r2, r2, #3
 801a8e6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a8ea:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801a8ee:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a8f2:	fb08 1803 	mla	r8, r8, r3, r1
 801a8f6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801a8fa:	b2d2      	uxtb	r2, r2
 801a8fc:	fb11 f109 	smulbb	r1, r1, r9
 801a900:	fa1f f888 	uxth.w	r8, r8
 801a904:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a908:	fb05 1503 	mla	r5, r5, r3, r1
 801a90c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a910:	fb11 f109 	smulbb	r1, r1, r9
 801a914:	b2ad      	uxth	r5, r5
 801a916:	fb02 1203 	mla	r2, r2, r3, r1
 801a91a:	f108 0101 	add.w	r1, r8, #1
 801a91e:	b292      	uxth	r2, r2
 801a920:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801a924:	1c51      	adds	r1, r2, #1
 801a926:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801a92a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a92e:	1c69      	adds	r1, r5, #1
 801a930:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801a934:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a938:	096d      	lsrs	r5, r5, #5
 801a93a:	ea42 0208 	orr.w	r2, r2, r8
 801a93e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a942:	432a      	orrs	r2, r5
 801a944:	f820 2b02 	strh.w	r2, [r0], #2
 801a948:	e7bd      	b.n	801a8c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801a94a:	4a14      	ldr	r2, [pc, #80]	; (801a99c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801a94c:	42b0      	cmp	r0, r6
 801a94e:	d21f      	bcs.n	801a990 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a950:	eb00 050e 	add.w	r5, r0, lr
 801a954:	42a8      	cmp	r0, r5
 801a956:	4621      	mov	r1, r4
 801a958:	f104 0403 	add.w	r4, r4, #3
 801a95c:	d210      	bcs.n	801a980 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801a95e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801a962:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a966:	00db      	lsls	r3, r3, #3
 801a968:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801a96c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a970:	430b      	orrs	r3, r1
 801a972:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a976:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801a97a:	f820 3b02 	strh.w	r3, [r0], #2
 801a97e:	e7e9      	b.n	801a954 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801a980:	4438      	add	r0, r7
 801a982:	eb01 040c 	add.w	r4, r1, ip
 801a986:	e7e1      	b.n	801a94c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801a988:	4438      	add	r0, r7
 801a98a:	eb01 040c 	add.w	r4, r1, ip
 801a98e:	e796      	b.n	801a8be <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801a990:	4b03      	ldr	r3, [pc, #12]	; (801a9a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801a992:	6818      	ldr	r0, [r3, #0]
 801a994:	6803      	ldr	r3, [r0, #0]
 801a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a998:	4798      	blx	r3
 801a99a:	e768      	b.n	801a86e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801a99c:	fffff800 	.word	0xfffff800
 801a9a0:	20027e98 	.word	0x20027e98
 801a9a4:	20027e92 	.word	0x20027e92

0801a9a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801a9a8:	b4f0      	push	{r4, r5, r6, r7}
 801a9aa:	4616      	mov	r6, r2
 801a9ac:	461c      	mov	r4, r3
 801a9ae:	460d      	mov	r5, r1
 801a9b0:	9a04      	ldr	r2, [sp, #16]
 801a9b2:	2e01      	cmp	r6, #1
 801a9b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a9b8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801a9bc:	d012      	beq.n	801a9e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801a9be:	d303      	bcc.n	801a9c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801a9c0:	2e02      	cmp	r6, #2
 801a9c2:	d00a      	beq.n	801a9da <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801a9c4:	bcf0      	pop	{r4, r5, r6, r7}
 801a9c6:	4770      	bx	lr
 801a9c8:	6805      	ldr	r5, [r0, #0]
 801a9ca:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801a9ce:	68ed      	ldr	r5, [r5, #12]
 801a9d0:	4613      	mov	r3, r2
 801a9d2:	4622      	mov	r2, r4
 801a9d4:	46ac      	mov	ip, r5
 801a9d6:	bcf0      	pop	{r4, r5, r6, r7}
 801a9d8:	4760      	bx	ip
 801a9da:	4621      	mov	r1, r4
 801a9dc:	4628      	mov	r0, r5
 801a9de:	bcf0      	pop	{r4, r5, r6, r7}
 801a9e0:	f7ff bd94 	b.w	801a50c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a9e4:	4621      	mov	r1, r4
 801a9e6:	4628      	mov	r0, r5
 801a9e8:	bcf0      	pop	{r4, r5, r6, r7}
 801a9ea:	f7ff bee5 	b.w	801a7b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801a9f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f4:	b093      	sub	sp, #76	; 0x4c
 801a9f6:	4681      	mov	r9, r0
 801a9f8:	4688      	mov	r8, r1
 801a9fa:	6810      	ldr	r0, [r2, #0]
 801a9fc:	6851      	ldr	r1, [r2, #4]
 801a9fe:	ac0e      	add	r4, sp, #56	; 0x38
 801aa00:	4616      	mov	r6, r2
 801aa02:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801aa06:	4f6b      	ldr	r7, [pc, #428]	; (801abb4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801aa08:	c403      	stmia	r4!, {r0, r1}
 801aa0a:	6818      	ldr	r0, [r3, #0]
 801aa0c:	ac10      	add	r4, sp, #64	; 0x40
 801aa0e:	6859      	ldr	r1, [r3, #4]
 801aa10:	c403      	stmia	r4!, {r0, r1}
 801aa12:	a80e      	add	r0, sp, #56	; 0x38
 801aa14:	f7f9 f96a 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa18:	4631      	mov	r1, r6
 801aa1a:	a810      	add	r0, sp, #64	; 0x40
 801aa1c:	4e66      	ldr	r6, [pc, #408]	; (801abb8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801aa1e:	f7f9 f9a9 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aa22:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801aa26:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801aa2a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801aa2e:	6830      	ldr	r0, [r6, #0]
 801aa30:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aa34:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801aa38:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801aa3c:	4489      	add	r9, r1
 801aa3e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801aa42:	440a      	add	r2, r1
 801aa44:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801aa48:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801aa4c:	4413      	add	r3, r2
 801aa4e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801aa52:	6803      	ldr	r3, [r0, #0]
 801aa54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa56:	4798      	blx	r3
 801aa58:	f010 0f80 	tst.w	r0, #128	; 0x80
 801aa5c:	6830      	ldr	r0, [r6, #0]
 801aa5e:	d01d      	beq.n	801aa9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801aa60:	2200      	movs	r2, #0
 801aa62:	6801      	ldr	r1, [r0, #0]
 801aa64:	b2a4      	uxth	r4, r4
 801aa66:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801aa6a:	b2ad      	uxth	r5, r5
 801aa6c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801aa70:	220b      	movs	r2, #11
 801aa72:	9207      	str	r2, [sp, #28]
 801aa74:	883a      	ldrh	r2, [r7, #0]
 801aa76:	9502      	str	r5, [sp, #8]
 801aa78:	9206      	str	r2, [sp, #24]
 801aa7a:	2201      	movs	r2, #1
 801aa7c:	9401      	str	r4, [sp, #4]
 801aa7e:	e9cd a204 	strd	sl, r2, [sp, #16]
 801aa82:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801aa86:	9203      	str	r2, [sp, #12]
 801aa88:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801aa8c:	9200      	str	r2, [sp, #0]
 801aa8e:	4642      	mov	r2, r8
 801aa90:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801aa92:	4649      	mov	r1, r9
 801aa94:	47a0      	blx	r4
 801aa96:	b013      	add	sp, #76	; 0x4c
 801aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa9c:	6803      	ldr	r3, [r0, #0]
 801aa9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aaa0:	4798      	blx	r3
 801aaa2:	883b      	ldrh	r3, [r7, #0]
 801aaa4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801aaa8:	f04f 0e04 	mov.w	lr, #4
 801aaac:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801aab0:	435d      	muls	r5, r3
 801aab2:	fb03 1202 	mla	r2, r3, r2, r1
 801aab6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801aaba:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801aabe:	920c      	str	r2, [sp, #48]	; 0x30
 801aac0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801aac4:	1b12      	subs	r2, r2, r4
 801aac6:	920d      	str	r2, [sp, #52]	; 0x34
 801aac8:	0062      	lsls	r2, r4, #1
 801aaca:	1b1c      	subs	r4, r3, r4
 801aacc:	920a      	str	r2, [sp, #40]	; 0x28
 801aace:	0063      	lsls	r3, r4, #1
 801aad0:	930b      	str	r3, [sp, #44]	; 0x2c
 801aad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aad4:	4298      	cmp	r0, r3
 801aad6:	d266      	bcs.n	801aba6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801aad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aada:	eb00 0b03 	add.w	fp, r0, r3
 801aade:	4558      	cmp	r0, fp
 801aae0:	d25c      	bcs.n	801ab9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801aae2:	f819 3b01 	ldrb.w	r3, [r9], #1
 801aae6:	fb1e e303 	smlabb	r3, lr, r3, lr
 801aaea:	f858 2003 	ldr.w	r2, [r8, r3]
 801aaee:	0e11      	lsrs	r1, r2, #24
 801aaf0:	d012      	beq.n	801ab18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801aaf2:	29ff      	cmp	r1, #255	; 0xff
 801aaf4:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801aaf8:	d110      	bne.n	801ab1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801aafa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801aafe:	d10d      	bne.n	801ab1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ab00:	0953      	lsrs	r3, r2, #5
 801ab02:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801ab06:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ab0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ab0e:	f027 0707 	bic.w	r7, r7, #7
 801ab12:	431f      	orrs	r7, r3
 801ab14:	433a      	orrs	r2, r7
 801ab16:	8002      	strh	r2, [r0, #0]
 801ab18:	3002      	adds	r0, #2
 801ab1a:	e7e0      	b.n	801aade <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801ab1c:	fb0a f101 	mul.w	r1, sl, r1
 801ab20:	8806      	ldrh	r6, [r0, #0]
 801ab22:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801ab26:	b2d2      	uxtb	r2, r2
 801ab28:	1c4b      	adds	r3, r1, #1
 801ab2a:	1235      	asrs	r5, r6, #8
 801ab2c:	10f4      	asrs	r4, r6, #3
 801ab2e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801ab32:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ab36:	00f6      	lsls	r6, r6, #3
 801ab38:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ab3c:	121b      	asrs	r3, r3, #8
 801ab3e:	b2f6      	uxtb	r6, r6
 801ab40:	b299      	uxth	r1, r3
 801ab42:	43db      	mvns	r3, r3
 801ab44:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ab48:	fb1c fc01 	smulbb	ip, ip, r1
 801ab4c:	b2db      	uxtb	r3, r3
 801ab4e:	fb12 f201 	smulbb	r2, r2, r1
 801ab52:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ab56:	fb05 c503 	mla	r5, r5, r3, ip
 801ab5a:	b2ff      	uxtb	r7, r7
 801ab5c:	fb06 2203 	mla	r2, r6, r3, r2
 801ab60:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801ab64:	fb17 f701 	smulbb	r7, r7, r1
 801ab68:	b2ad      	uxth	r5, r5
 801ab6a:	b292      	uxth	r2, r2
 801ab6c:	fb04 7403 	mla	r4, r4, r3, r7
 801ab70:	f105 0c01 	add.w	ip, r5, #1
 801ab74:	1c57      	adds	r7, r2, #1
 801ab76:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ab7a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ab7e:	b2a4      	uxth	r4, r4
 801ab80:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ab84:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ab88:	433d      	orrs	r5, r7
 801ab8a:	1c67      	adds	r7, r4, #1
 801ab8c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801ab90:	0964      	lsrs	r4, r4, #5
 801ab92:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801ab96:	4325      	orrs	r5, r4
 801ab98:	8005      	strh	r5, [r0, #0]
 801ab9a:	e7bd      	b.n	801ab18 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ab9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab9e:	4418      	add	r0, r3
 801aba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aba2:	4499      	add	r9, r3
 801aba4:	e795      	b.n	801aad2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801aba6:	4b04      	ldr	r3, [pc, #16]	; (801abb8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801aba8:	6818      	ldr	r0, [r3, #0]
 801abaa:	6803      	ldr	r3, [r0, #0]
 801abac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abae:	4798      	blx	r3
 801abb0:	e771      	b.n	801aa96 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801abb2:	bf00      	nop
 801abb4:	20027e92 	.word	0x20027e92
 801abb8:	20027e98 	.word	0x20027e98

0801abbc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abc0:	b087      	sub	sp, #28
 801abc2:	4680      	mov	r8, r0
 801abc4:	460d      	mov	r5, r1
 801abc6:	4614      	mov	r4, r2
 801abc8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801abcc:	2e00      	cmp	r6, #0
 801abce:	f000 80b9 	beq.w	801ad44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801abd2:	6810      	ldr	r0, [r2, #0]
 801abd4:	af02      	add	r7, sp, #8
 801abd6:	6851      	ldr	r1, [r2, #4]
 801abd8:	c703      	stmia	r7!, {r0, r1}
 801abda:	6818      	ldr	r0, [r3, #0]
 801abdc:	af04      	add	r7, sp, #16
 801abde:	6859      	ldr	r1, [r3, #4]
 801abe0:	c703      	stmia	r7!, {r0, r1}
 801abe2:	a802      	add	r0, sp, #8
 801abe4:	f7f9 f882 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801abe8:	4621      	mov	r1, r4
 801abea:	a804      	add	r0, sp, #16
 801abec:	f7f9 f8c2 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801abf0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801abf4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801abf8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801abfc:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801ac00:	fb14 2103 	smlabb	r1, r4, r3, r2
 801ac04:	eb08 0401 	add.w	r4, r8, r1
 801ac08:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ac0c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801ac10:	440a      	add	r2, r1
 801ac12:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801ac16:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ac1a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ac1e:	4413      	add	r3, r2
 801ac20:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ac24:	4b49      	ldr	r3, [pc, #292]	; (801ad4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801ac26:	6818      	ldr	r0, [r3, #0]
 801ac28:	6803      	ldr	r3, [r0, #0]
 801ac2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac2c:	4798      	blx	r3
 801ac2e:	4b48      	ldr	r3, [pc, #288]	; (801ad50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801ac30:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801ac34:	2eff      	cmp	r6, #255	; 0xff
 801ac36:	881a      	ldrh	r2, [r3, #0]
 801ac38:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801ac3c:	fb02 c101 	mla	r1, r2, r1, ip
 801ac40:	fb02 f207 	mul.w	r2, r2, r7
 801ac44:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801ac48:	f105 0104 	add.w	r1, r5, #4
 801ac4c:	461d      	mov	r5, r3
 801ac4e:	d05a      	beq.n	801ad06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801ac50:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801ac54:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ac58:	b2b6      	uxth	r6, r6
 801ac5a:	9301      	str	r3, [sp, #4]
 801ac5c:	fa1f fe8e 	uxth.w	lr, lr
 801ac60:	4282      	cmp	r2, r0
 801ac62:	d96a      	bls.n	801ad3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801ac64:	eb00 0b0a 	add.w	fp, r0, sl
 801ac68:	4583      	cmp	fp, r0
 801ac6a:	d940      	bls.n	801acee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801ac6c:	8805      	ldrh	r5, [r0, #0]
 801ac6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ac72:	122f      	asrs	r7, r5, #8
 801ac74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ac78:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ac7c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ac80:	00ed      	lsls	r5, r5, #3
 801ac82:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ac86:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ac8a:	fb17 f70e 	smulbb	r7, r7, lr
 801ac8e:	b2ed      	uxtb	r5, r5
 801ac90:	fb19 f90e 	smulbb	r9, r9, lr
 801ac94:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac98:	fb15 f50e 	smulbb	r5, r5, lr
 801ac9c:	fb0c 7c06 	mla	ip, ip, r6, r7
 801aca0:	10df      	asrs	r7, r3, #3
 801aca2:	00db      	lsls	r3, r3, #3
 801aca4:	fa1f fc8c 	uxth.w	ip, ip
 801aca8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801acac:	b2db      	uxtb	r3, r3
 801acae:	fb07 9706 	mla	r7, r7, r6, r9
 801acb2:	f10c 0901 	add.w	r9, ip, #1
 801acb6:	fb03 5306 	mla	r3, r3, r6, r5
 801acba:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801acbe:	b29b      	uxth	r3, r3
 801acc0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801acc4:	b2bf      	uxth	r7, r7
 801acc6:	f103 0c01 	add.w	ip, r3, #1
 801acca:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801acce:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801acd2:	ea4c 0c09 	orr.w	ip, ip, r9
 801acd6:	f107 0901 	add.w	r9, r7, #1
 801acda:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801acde:	097f      	lsrs	r7, r7, #5
 801ace0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ace4:	ea4c 0c07 	orr.w	ip, ip, r7
 801ace8:	f820 cb02 	strh.w	ip, [r0], #2
 801acec:	e7bc      	b.n	801ac68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801acee:	9b01      	ldr	r3, [sp, #4]
 801acf0:	881b      	ldrh	r3, [r3, #0]
 801acf2:	eba3 0308 	sub.w	r3, r3, r8
 801acf6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801acfa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801acfe:	eba3 0308 	sub.w	r3, r3, r8
 801ad02:	441c      	add	r4, r3
 801ad04:	e7ac      	b.n	801ac60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801ad06:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ad0a:	4282      	cmp	r2, r0
 801ad0c:	d915      	bls.n	801ad3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801ad0e:	eb00 060a 	add.w	r6, r0, sl
 801ad12:	4286      	cmp	r6, r0
 801ad14:	d906      	bls.n	801ad24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801ad16:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ad1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ad1e:	f820 3b02 	strh.w	r3, [r0], #2
 801ad22:	e7f6      	b.n	801ad12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801ad24:	882b      	ldrh	r3, [r5, #0]
 801ad26:	eba3 0308 	sub.w	r3, r3, r8
 801ad2a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ad2e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ad32:	eba3 0308 	sub.w	r3, r3, r8
 801ad36:	441c      	add	r4, r3
 801ad38:	e7e7      	b.n	801ad0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801ad3a:	4b04      	ldr	r3, [pc, #16]	; (801ad4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801ad3c:	6818      	ldr	r0, [r3, #0]
 801ad3e:	6803      	ldr	r3, [r0, #0]
 801ad40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad42:	4798      	blx	r3
 801ad44:	b007      	add	sp, #28
 801ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad4a:	bf00      	nop
 801ad4c:	20027e98 	.word	0x20027e98
 801ad50:	20027e92 	.word	0x20027e92

0801ad54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ad54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad58:	b091      	sub	sp, #68	; 0x44
 801ad5a:	4680      	mov	r8, r0
 801ad5c:	460f      	mov	r7, r1
 801ad5e:	4614      	mov	r4, r2
 801ad60:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801ad64:	2d00      	cmp	r5, #0
 801ad66:	d051      	beq.n	801ae0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801ad68:	6810      	ldr	r0, [r2, #0]
 801ad6a:	ae0c      	add	r6, sp, #48	; 0x30
 801ad6c:	6851      	ldr	r1, [r2, #4]
 801ad6e:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801af70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801ad72:	c603      	stmia	r6!, {r0, r1}
 801ad74:	6818      	ldr	r0, [r3, #0]
 801ad76:	ae0e      	add	r6, sp, #56	; 0x38
 801ad78:	6859      	ldr	r1, [r3, #4]
 801ad7a:	c603      	stmia	r6!, {r0, r1}
 801ad7c:	a80c      	add	r0, sp, #48	; 0x30
 801ad7e:	f7f8 ffb5 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ad82:	4621      	mov	r1, r4
 801ad84:	a80e      	add	r0, sp, #56	; 0x38
 801ad86:	f7f8 fff5 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ad8a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ad8e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ad92:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ad96:	f8d9 0000 	ldr.w	r0, [r9]
 801ad9a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ad9e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801ada2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801ada6:	eb08 0401 	add.w	r4, r8, r1
 801adaa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801adae:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801af74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801adb2:	440a      	add	r2, r1
 801adb4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801adb8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801adbc:	4413      	add	r3, r2
 801adbe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801adc2:	6803      	ldr	r3, [r0, #0]
 801adc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801adc6:	4798      	blx	r3
 801adc8:	f010 0f80 	tst.w	r0, #128	; 0x80
 801adcc:	f8d9 0000 	ldr.w	r0, [r9]
 801add0:	d01f      	beq.n	801ae12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801add2:	2200      	movs	r2, #0
 801add4:	6801      	ldr	r1, [r0, #0]
 801add6:	b2b6      	uxth	r6, r6
 801add8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801addc:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ade0:	220b      	movs	r2, #11
 801ade2:	9207      	str	r2, [sp, #28]
 801ade4:	f8b8 2000 	ldrh.w	r2, [r8]
 801ade8:	9601      	str	r6, [sp, #4]
 801adea:	9206      	str	r2, [sp, #24]
 801adec:	2201      	movs	r2, #1
 801adee:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801adf2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801adf6:	9203      	str	r2, [sp, #12]
 801adf8:	fa1f f28a 	uxth.w	r2, sl
 801adfc:	9202      	str	r2, [sp, #8]
 801adfe:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ae02:	9200      	str	r2, [sp, #0]
 801ae04:	463a      	mov	r2, r7
 801ae06:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801ae08:	4621      	mov	r1, r4
 801ae0a:	47a8      	blx	r5
 801ae0c:	b011      	add	sp, #68	; 0x44
 801ae0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae12:	6803      	ldr	r3, [r0, #0]
 801ae14:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801ae18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae1a:	4798      	blx	r3
 801ae1c:	f8b8 2000 	ldrh.w	r2, [r8]
 801ae20:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ae24:	2dff      	cmp	r5, #255	; 0xff
 801ae26:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801ae2a:	fb0a fa02 	mul.w	sl, sl, r2
 801ae2e:	fb02 1303 	mla	r3, r2, r3, r1
 801ae32:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ae36:	d062      	beq.n	801aefe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801ae38:	ea6f 0c05 	mvn.w	ip, r5
 801ae3c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801ae40:	b2ad      	uxth	r5, r5
 801ae42:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801ae46:	fa5f fc8c 	uxtb.w	ip, ip
 801ae4a:	930a      	str	r3, [sp, #40]	; 0x28
 801ae4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae4e:	4298      	cmp	r0, r3
 801ae50:	f080 8085 	bcs.w	801af5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801ae54:	eb00 0b09 	add.w	fp, r0, r9
 801ae58:	4558      	cmp	r0, fp
 801ae5a:	d246      	bcs.n	801aeea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801ae5c:	f814 eb01 	ldrb.w	lr, [r4], #1
 801ae60:	2303      	movs	r3, #3
 801ae62:	2204      	movs	r2, #4
 801ae64:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801ae68:	8803      	ldrh	r3, [r0, #0]
 801ae6a:	eb07 0a0e 	add.w	sl, r7, lr
 801ae6e:	1219      	asrs	r1, r3, #8
 801ae70:	10da      	asrs	r2, r3, #3
 801ae72:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ae76:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801ae7a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ae7e:	00db      	lsls	r3, r3, #3
 801ae80:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ae84:	fb18 f805 	smulbb	r8, r8, r5
 801ae88:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801ae8c:	fb1e fe05 	smulbb	lr, lr, r5
 801ae90:	b2db      	uxtb	r3, r3
 801ae92:	fb01 810c 	mla	r1, r1, ip, r8
 801ae96:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ae9a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801ae9e:	fb18 f805 	smulbb	r8, r8, r5
 801aea2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801aea6:	b289      	uxth	r1, r1
 801aea8:	fb02 820c 	mla	r2, r2, ip, r8
 801aeac:	fb03 e30c 	mla	r3, r3, ip, lr
 801aeb0:	f101 0801 	add.w	r8, r1, #1
 801aeb4:	b292      	uxth	r2, r2
 801aeb6:	b29b      	uxth	r3, r3
 801aeb8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801aebc:	f102 0801 	add.w	r8, r2, #1
 801aec0:	f103 0e01 	add.w	lr, r3, #1
 801aec4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801aec8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801aecc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801aed0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801aed4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801aed8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801aedc:	ea4e 0101 	orr.w	r1, lr, r1
 801aee0:	ea41 0108 	orr.w	r1, r1, r8
 801aee4:	f820 1b02 	strh.w	r1, [r0], #2
 801aee8:	e7b6      	b.n	801ae58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801aeea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aeec:	881b      	ldrh	r3, [r3, #0]
 801aeee:	1b9b      	subs	r3, r3, r6
 801aef0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aef4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801aef8:	1b9b      	subs	r3, r3, r6
 801aefa:	441c      	add	r4, r3
 801aefc:	e7a6      	b.n	801ae4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801aefe:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801af02:	2203      	movs	r2, #3
 801af04:	2504      	movs	r5, #4
 801af06:	4919      	ldr	r1, [pc, #100]	; (801af6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801af08:	4550      	cmp	r0, sl
 801af0a:	d228      	bcs.n	801af5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801af0c:	eb00 0c09 	add.w	ip, r0, r9
 801af10:	4560      	cmp	r0, ip
 801af12:	4623      	mov	r3, r4
 801af14:	d219      	bcs.n	801af4a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801af16:	f893 e000 	ldrb.w	lr, [r3]
 801af1a:	3401      	adds	r4, #1
 801af1c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801af20:	eb07 0b0e 	add.w	fp, r7, lr
 801af24:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801af28:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801af2c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801af30:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801af34:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801af38:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801af3c:	ea43 030b 	orr.w	r3, r3, fp
 801af40:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801af44:	f820 3b02 	strh.w	r3, [r0], #2
 801af48:	e7e2      	b.n	801af10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801af4a:	f8b8 3000 	ldrh.w	r3, [r8]
 801af4e:	1b9b      	subs	r3, r3, r6
 801af50:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801af54:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801af58:	1b9b      	subs	r3, r3, r6
 801af5a:	441c      	add	r4, r3
 801af5c:	e7d4      	b.n	801af08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801af5e:	4b04      	ldr	r3, [pc, #16]	; (801af70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801af60:	6818      	ldr	r0, [r3, #0]
 801af62:	6803      	ldr	r3, [r0, #0]
 801af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af66:	4798      	blx	r3
 801af68:	e750      	b.n	801ae0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801af6a:	bf00      	nop
 801af6c:	fffff800 	.word	0xfffff800
 801af70:	20027e98 	.word	0x20027e98
 801af74:	20027e92 	.word	0x20027e92

0801af78 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801af78:	b430      	push	{r4, r5}
 801af7a:	780d      	ldrb	r5, [r1, #0]
 801af7c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801af80:	2d01      	cmp	r5, #1
 801af82:	d00a      	beq.n	801af9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801af84:	d305      	bcc.n	801af92 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801af86:	2d02      	cmp	r5, #2
 801af88:	d10b      	bne.n	801afa2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801af8a:	9402      	str	r4, [sp, #8]
 801af8c:	bc30      	pop	{r4, r5}
 801af8e:	f7ff be15 	b.w	801abbc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801af92:	9402      	str	r4, [sp, #8]
 801af94:	bc30      	pop	{r4, r5}
 801af96:	f7ff bd2b 	b.w	801a9f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801af9a:	9402      	str	r4, [sp, #8]
 801af9c:	bc30      	pop	{r4, r5}
 801af9e:	f7ff bed9 	b.w	801ad54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801afa2:	bc30      	pop	{r4, r5}
 801afa4:	4770      	bx	lr
	...

0801afa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afac:	b087      	sub	sp, #28
 801afae:	4604      	mov	r4, r0
 801afb0:	460e      	mov	r6, r1
 801afb2:	6810      	ldr	r0, [r2, #0]
 801afb4:	6851      	ldr	r1, [r2, #4]
 801afb6:	ad02      	add	r5, sp, #8
 801afb8:	4617      	mov	r7, r2
 801afba:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801afbe:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801b1f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801afc2:	c503      	stmia	r5!, {r0, r1}
 801afc4:	6818      	ldr	r0, [r3, #0]
 801afc6:	ad04      	add	r5, sp, #16
 801afc8:	6859      	ldr	r1, [r3, #4]
 801afca:	c503      	stmia	r5!, {r0, r1}
 801afcc:	a802      	add	r0, sp, #8
 801afce:	f7f8 fe8d 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801afd2:	4639      	mov	r1, r7
 801afd4:	a804      	add	r0, sp, #16
 801afd6:	f7f8 fecd 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801afda:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801afde:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801afe2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801afe6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801afea:	fb11 2103 	smlabb	r1, r1, r3, r2
 801afee:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801aff2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801aff6:	440e      	add	r6, r1
 801aff8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801affc:	440a      	add	r2, r1
 801affe:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b002:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b006:	4413      	add	r3, r2
 801b008:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b00c:	4b77      	ldr	r3, [pc, #476]	; (801b1ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b00e:	6818      	ldr	r0, [r3, #0]
 801b010:	6803      	ldr	r3, [r0, #0]
 801b012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b014:	4798      	blx	r3
 801b016:	f8b9 b000 	ldrh.w	fp, [r9]
 801b01a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b01e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b022:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b026:	fb05 f50b 	mul.w	r5, r5, fp
 801b02a:	fb0b 2303 	mla	r3, fp, r3, r2
 801b02e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b032:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801b036:	9300      	str	r3, [sp, #0]
 801b038:	d069      	beq.n	801b10e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801b03a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801b03e:	4558      	cmp	r0, fp
 801b040:	f080 80cc 	bcs.w	801b1dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b044:	9b00      	ldr	r3, [sp, #0]
 801b046:	4631      	mov	r1, r6
 801b048:	18c3      	adds	r3, r0, r3
 801b04a:	9301      	str	r3, [sp, #4]
 801b04c:	9b01      	ldr	r3, [sp, #4]
 801b04e:	4298      	cmp	r0, r3
 801b050:	d24f      	bcs.n	801b0f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801b052:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b056:	2a00      	cmp	r2, #0
 801b058:	d048      	beq.n	801b0ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801b05a:	fb0a f202 	mul.w	r2, sl, r2
 801b05e:	1c53      	adds	r3, r2, #1
 801b060:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b064:	121b      	asrs	r3, r3, #8
 801b066:	d041      	beq.n	801b0ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801b068:	8802      	ldrh	r2, [r0, #0]
 801b06a:	b29e      	uxth	r6, r3
 801b06c:	f8b4 c000 	ldrh.w	ip, [r4]
 801b070:	43db      	mvns	r3, r3
 801b072:	1215      	asrs	r5, r2, #8
 801b074:	b2db      	uxtb	r3, r3
 801b076:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b07a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b07e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801b082:	fb15 f503 	smulbb	r5, r5, r3
 801b086:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b08a:	00d2      	lsls	r2, r2, #3
 801b08c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b090:	fb07 5706 	mla	r7, r7, r6, r5
 801b094:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b098:	b2d2      	uxtb	r2, r2
 801b09a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b09e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b0a2:	fb1e fe03 	smulbb	lr, lr, r3
 801b0a6:	b2bf      	uxth	r7, r7
 801b0a8:	fb12 f203 	smulbb	r2, r2, r3
 801b0ac:	fa5f fc8c 	uxtb.w	ip, ip
 801b0b0:	fb05 e506 	mla	r5, r5, r6, lr
 801b0b4:	f107 0e01 	add.w	lr, r7, #1
 801b0b8:	fb0c 2c06 	mla	ip, ip, r6, r2
 801b0bc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b0c0:	fa1f fc8c 	uxth.w	ip, ip
 801b0c4:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801b0c8:	b2ad      	uxth	r5, r5
 801b0ca:	f10c 0701 	add.w	r7, ip, #1
 801b0ce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b0d2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b0d6:	ea47 070e 	orr.w	r7, r7, lr
 801b0da:	f105 0e01 	add.w	lr, r5, #1
 801b0de:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801b0e2:	096d      	lsrs	r5, r5, #5
 801b0e4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b0e8:	432f      	orrs	r7, r5
 801b0ea:	8007      	strh	r7, [r0, #0]
 801b0ec:	3002      	adds	r0, #2
 801b0ee:	3402      	adds	r4, #2
 801b0f0:	e7ac      	b.n	801b04c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801b0f2:	f8b9 3000 	ldrh.w	r3, [r9]
 801b0f6:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b0fa:	eba3 0308 	sub.w	r3, r3, r8
 801b0fe:	eba6 0608 	sub.w	r6, r6, r8
 801b102:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b106:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b10a:	440e      	add	r6, r1
 801b10c:	e797      	b.n	801b03e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801b10e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801b112:	42a8      	cmp	r0, r5
 801b114:	d262      	bcs.n	801b1dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b116:	9b00      	ldr	r3, [sp, #0]
 801b118:	4631      	mov	r1, r6
 801b11a:	eb00 0b03 	add.w	fp, r0, r3
 801b11e:	4558      	cmp	r0, fp
 801b120:	d24e      	bcs.n	801b1c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801b122:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b126:	b12b      	cbz	r3, 801b134 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b128:	2bff      	cmp	r3, #255	; 0xff
 801b12a:	f8b4 e000 	ldrh.w	lr, [r4]
 801b12e:	d104      	bne.n	801b13a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801b130:	f8a0 e000 	strh.w	lr, [r0]
 801b134:	3002      	adds	r0, #2
 801b136:	3402      	adds	r4, #2
 801b138:	e7f1      	b.n	801b11e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801b13a:	8802      	ldrh	r2, [r0, #0]
 801b13c:	b29f      	uxth	r7, r3
 801b13e:	43db      	mvns	r3, r3
 801b140:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b144:	1216      	asrs	r6, r2, #8
 801b146:	b2db      	uxtb	r3, r3
 801b148:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b14c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b150:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801b154:	00d2      	lsls	r2, r2, #3
 801b156:	fb16 f603 	smulbb	r6, r6, r3
 801b15a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b15e:	b2d2      	uxtb	r2, r2
 801b160:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b164:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b168:	fb1a fa03 	smulbb	sl, sl, r3
 801b16c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b170:	fa1f fc8c 	uxth.w	ip, ip
 801b174:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b178:	fb12 f303 	smulbb	r3, r2, r3
 801b17c:	fa5f fe8e 	uxtb.w	lr, lr
 801b180:	fb06 a607 	mla	r6, r6, r7, sl
 801b184:	f10c 0201 	add.w	r2, ip, #1
 801b188:	fb0e 3307 	mla	r3, lr, r7, r3
 801b18c:	b2b6      	uxth	r6, r6
 801b18e:	b29b      	uxth	r3, r3
 801b190:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b194:	f106 0a01 	add.w	sl, r6, #1
 801b198:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801b19c:	f103 0c01 	add.w	ip, r3, #1
 801b1a0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801b1a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b1a8:	0976      	lsrs	r6, r6, #5
 801b1aa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b1ae:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b1b2:	ea4c 0c02 	orr.w	ip, ip, r2
 801b1b6:	ea4c 0c06 	orr.w	ip, ip, r6
 801b1ba:	f8a0 c000 	strh.w	ip, [r0]
 801b1be:	e7b9      	b.n	801b134 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b1c0:	f8b9 3000 	ldrh.w	r3, [r9]
 801b1c4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b1c8:	eba3 0308 	sub.w	r3, r3, r8
 801b1cc:	eba6 0608 	sub.w	r6, r6, r8
 801b1d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b1d4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b1d8:	440e      	add	r6, r1
 801b1da:	e79a      	b.n	801b112 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801b1dc:	4b03      	ldr	r3, [pc, #12]	; (801b1ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b1de:	6818      	ldr	r0, [r3, #0]
 801b1e0:	6803      	ldr	r3, [r0, #0]
 801b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1e4:	4798      	blx	r3
 801b1e6:	b007      	add	sp, #28
 801b1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ec:	20027e98 	.word	0x20027e98
 801b1f0:	20027e92 	.word	0x20027e92

0801b1f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1f8:	b089      	sub	sp, #36	; 0x24
 801b1fa:	4682      	mov	sl, r0
 801b1fc:	460f      	mov	r7, r1
 801b1fe:	4691      	mov	r9, r2
 801b200:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801b204:	4698      	mov	r8, r3
 801b206:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b208:	2e00      	cmp	r6, #0
 801b20a:	d036      	beq.n	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b20c:	4608      	mov	r0, r1
 801b20e:	f7fc f861 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b212:	4605      	mov	r5, r0
 801b214:	4638      	mov	r0, r7
 801b216:	f7fc f891 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b21a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b21e:	4638      	mov	r0, r7
 801b220:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b224:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b228:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b22c:	f7fc f93e 	bl	80174ac <_ZNK8touchgfx6Bitmap7getDataEv>
 801b230:	4605      	mov	r5, r0
 801b232:	4638      	mov	r0, r7
 801b234:	f7fc f96a 	bl	801750c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b238:	4681      	mov	r9, r0
 801b23a:	4638      	mov	r0, r7
 801b23c:	f7fc f9ba 	bl	80175b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b240:	280b      	cmp	r0, #11
 801b242:	d81a      	bhi.n	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b244:	e8df f000 	tbb	[pc, r0]
 801b248:	1906aebd 	.word	0x1906aebd
 801b24c:	19191919 	.word	0x19191919
 801b250:	b5191919 	.word	0xb5191919
 801b254:	4bb0      	ldr	r3, [pc, #704]	; (801b518 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801b256:	6818      	ldr	r0, [r3, #0]
 801b258:	6803      	ldr	r3, [r0, #0]
 801b25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b25c:	4798      	blx	r3
 801b25e:	2eff      	cmp	r6, #255	; 0xff
 801b260:	d121      	bne.n	801b2a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801b262:	0683      	lsls	r3, r0, #26
 801b264:	d41f      	bmi.n	801b2a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801b266:	4638      	mov	r0, r7
 801b268:	f7fc f8e8 	bl	801743c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b26c:	b940      	cbnz	r0, 801b280 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801b26e:	4623      	mov	r3, r4
 801b270:	aa02      	add	r2, sp, #8
 801b272:	4629      	mov	r1, r5
 801b274:	4650      	mov	r0, sl
 801b276:	f7ff fa2f 	bl	801a6d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b27a:	b009      	add	sp, #36	; 0x24
 801b27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b280:	f10d 0818 	add.w	r8, sp, #24
 801b284:	4639      	mov	r1, r7
 801b286:	af04      	add	r7, sp, #16
 801b288:	4640      	mov	r0, r8
 801b28a:	f7fc f88b 	bl	80173a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b28e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b292:	e887 0003 	stmia.w	r7, {r0, r1}
 801b296:	4638      	mov	r0, r7
 801b298:	4621      	mov	r1, r4
 801b29a:	f7f3 fe0d 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 801b29e:	4638      	mov	r0, r7
 801b2a0:	f7f3 fe4d 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b2a4:	b130      	cbz	r0, 801b2b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801b2a6:	4633      	mov	r3, r6
 801b2a8:	4622      	mov	r2, r4
 801b2aa:	a902      	add	r1, sp, #8
 801b2ac:	4628      	mov	r0, r5
 801b2ae:	f7ff f92d 	bl	801a50c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b2b2:	e7e2      	b.n	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b2b4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b2b8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b2bc:	4293      	cmp	r3, r2
 801b2be:	dd12      	ble.n	801b2e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801b2c0:	1a9b      	subs	r3, r3, r2
 801b2c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b2c6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b2ca:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b2d4:	4642      	mov	r2, r8
 801b2d6:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b2da:	a902      	add	r1, sp, #8
 801b2dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b2e0:	4633      	mov	r3, r6
 801b2e2:	f7ff f913 	bl	801a50c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b2e6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b2ea:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b2ee:	4293      	cmp	r3, r2
 801b2f0:	dd12      	ble.n	801b318 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801b2f2:	1a9b      	subs	r3, r3, r2
 801b2f4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b2f8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b2fc:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b300:	4642      	mov	r2, r8
 801b302:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b306:	4628      	mov	r0, r5
 801b308:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b30c:	23ff      	movs	r3, #255	; 0xff
 801b30e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b312:	a902      	add	r1, sp, #8
 801b314:	f7ff f8fa 	bl	801a50c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b318:	463b      	mov	r3, r7
 801b31a:	aa02      	add	r2, sp, #8
 801b31c:	4629      	mov	r1, r5
 801b31e:	4650      	mov	r0, sl
 801b320:	f7ff f9da 	bl	801a6d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b324:	88a2      	ldrh	r2, [r4, #4]
 801b326:	8823      	ldrh	r3, [r4, #0]
 801b328:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b32c:	4413      	add	r3, r2
 801b32e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b332:	440a      	add	r2, r1
 801b334:	b29b      	uxth	r3, r3
 801b336:	b292      	uxth	r2, r2
 801b338:	b218      	sxth	r0, r3
 801b33a:	b211      	sxth	r1, r2
 801b33c:	4288      	cmp	r0, r1
 801b33e:	dd12      	ble.n	801b366 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801b340:	1a9b      	subs	r3, r3, r2
 801b342:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b346:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801b34a:	4642      	mov	r2, r8
 801b34c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b350:	a902      	add	r1, sp, #8
 801b352:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b356:	23ff      	movs	r3, #255	; 0xff
 801b358:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b35c:	4628      	mov	r0, r5
 801b35e:	f8ad 601a 	strh.w	r6, [sp, #26]
 801b362:	f7ff f8d3 	bl	801a50c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b366:	88e2      	ldrh	r2, [r4, #6]
 801b368:	8863      	ldrh	r3, [r4, #2]
 801b36a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b36e:	4413      	add	r3, r2
 801b370:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b374:	440a      	add	r2, r1
 801b376:	b29b      	uxth	r3, r3
 801b378:	b292      	uxth	r2, r2
 801b37a:	b218      	sxth	r0, r3
 801b37c:	b211      	sxth	r1, r2
 801b37e:	4288      	cmp	r0, r1
 801b380:	f77f af7b 	ble.w	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b384:	1a9b      	subs	r3, r3, r2
 801b386:	f9b4 6000 	ldrsh.w	r6, [r4]
 801b38a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b38e:	4642      	mov	r2, r8
 801b390:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b394:	23ff      	movs	r3, #255	; 0xff
 801b396:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b39a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b39e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b3a2:	e782      	b.n	801b2aa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801b3a4:	4633      	mov	r3, r6
 801b3a6:	4622      	mov	r2, r4
 801b3a8:	a902      	add	r1, sp, #8
 801b3aa:	4628      	mov	r0, r5
 801b3ac:	f7ff fa04 	bl	801a7b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801b3b0:	e763      	b.n	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b3b2:	9600      	str	r6, [sp, #0]
 801b3b4:	4623      	mov	r3, r4
 801b3b6:	aa02      	add	r2, sp, #8
 801b3b8:	4649      	mov	r1, r9
 801b3ba:	4628      	mov	r0, r5
 801b3bc:	f7ff fddc 	bl	801af78 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b3c0:	e75b      	b.n	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b3c2:	4638      	mov	r0, r7
 801b3c4:	f7fc f83a 	bl	801743c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b3c8:	b950      	cbnz	r0, 801b3e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801b3ca:	f8da 3000 	ldr.w	r3, [sl]
 801b3ce:	aa02      	add	r2, sp, #8
 801b3d0:	4629      	mov	r1, r5
 801b3d2:	e9cd 6000 	strd	r6, r0, [sp]
 801b3d6:	4650      	mov	r0, sl
 801b3d8:	68de      	ldr	r6, [r3, #12]
 801b3da:	4623      	mov	r3, r4
 801b3dc:	47b0      	blx	r6
 801b3de:	e74c      	b.n	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b3e0:	f10d 0818 	add.w	r8, sp, #24
 801b3e4:	4639      	mov	r1, r7
 801b3e6:	af04      	add	r7, sp, #16
 801b3e8:	4640      	mov	r0, r8
 801b3ea:	f7fb ffdb 	bl	80173a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b3ee:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b3f2:	e887 0003 	stmia.w	r7, {r0, r1}
 801b3f6:	4638      	mov	r0, r7
 801b3f8:	4621      	mov	r1, r4
 801b3fa:	f7f3 fd5d 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 801b3fe:	4638      	mov	r0, r7
 801b400:	f7f3 fd9d 	bl	800ef3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b404:	b138      	cbz	r0, 801b416 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801b406:	4623      	mov	r3, r4
 801b408:	9600      	str	r6, [sp, #0]
 801b40a:	aa02      	add	r2, sp, #8
 801b40c:	4649      	mov	r1, r9
 801b40e:	4628      	mov	r0, r5
 801b410:	f7ff fdca 	bl	801afa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b414:	e731      	b.n	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b416:	f8da 3000 	ldr.w	r3, [sl]
 801b41a:	aa02      	add	r2, sp, #8
 801b41c:	4629      	mov	r1, r5
 801b41e:	e9cd 6000 	strd	r6, r0, [sp]
 801b422:	4650      	mov	r0, sl
 801b424:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801b428:	463b      	mov	r3, r7
 801b42a:	47d8      	blx	fp
 801b42c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b430:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b434:	4293      	cmp	r3, r2
 801b436:	dd13      	ble.n	801b460 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801b438:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b43c:	1a9b      	subs	r3, r3, r2
 801b43e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b442:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b446:	4628      	mov	r0, r5
 801b448:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b44c:	aa02      	add	r2, sp, #8
 801b44e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b452:	4649      	mov	r1, r9
 801b454:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b458:	4643      	mov	r3, r8
 801b45a:	9600      	str	r6, [sp, #0]
 801b45c:	f7ff fda4 	bl	801afa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b460:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b464:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b468:	4293      	cmp	r3, r2
 801b46a:	dd13      	ble.n	801b494 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801b46c:	1a9b      	subs	r3, r3, r2
 801b46e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b472:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b476:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b47a:	aa02      	add	r2, sp, #8
 801b47c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b480:	4628      	mov	r0, r5
 801b482:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b486:	4643      	mov	r3, r8
 801b488:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b48c:	4649      	mov	r1, r9
 801b48e:	9600      	str	r6, [sp, #0]
 801b490:	f7ff fd8a 	bl	801afa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b494:	88a2      	ldrh	r2, [r4, #4]
 801b496:	8823      	ldrh	r3, [r4, #0]
 801b498:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b49c:	4413      	add	r3, r2
 801b49e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b4a2:	440a      	add	r2, r1
 801b4a4:	b29b      	uxth	r3, r3
 801b4a6:	b292      	uxth	r2, r2
 801b4a8:	b218      	sxth	r0, r3
 801b4aa:	b211      	sxth	r1, r2
 801b4ac:	4288      	cmp	r0, r1
 801b4ae:	dd13      	ble.n	801b4d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801b4b0:	1a9b      	subs	r3, r3, r2
 801b4b2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b4b6:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801b4ba:	aa02      	add	r2, sp, #8
 801b4bc:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b4c0:	4649      	mov	r1, r9
 801b4c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b4c6:	4643      	mov	r3, r8
 801b4c8:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b4cc:	4628      	mov	r0, r5
 801b4ce:	9600      	str	r6, [sp, #0]
 801b4d0:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b4d4:	f7ff fd68 	bl	801afa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b4d8:	88e2      	ldrh	r2, [r4, #6]
 801b4da:	8863      	ldrh	r3, [r4, #2]
 801b4dc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b4e0:	4413      	add	r3, r2
 801b4e2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b4e6:	440a      	add	r2, r1
 801b4e8:	b29b      	uxth	r3, r3
 801b4ea:	b292      	uxth	r2, r2
 801b4ec:	b218      	sxth	r0, r3
 801b4ee:	b211      	sxth	r1, r2
 801b4f0:	4288      	cmp	r0, r1
 801b4f2:	f77f aec2 	ble.w	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b4f6:	f9b4 7000 	ldrsh.w	r7, [r4]
 801b4fa:	1a9b      	subs	r3, r3, r2
 801b4fc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b500:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b504:	4643      	mov	r3, r8
 801b506:	f8ad 7018 	strh.w	r7, [sp, #24]
 801b50a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b50e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b512:	9600      	str	r6, [sp, #0]
 801b514:	e779      	b.n	801b40a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801b516:	bf00      	nop
 801b518:	20027e98 	.word	0x20027e98

0801b51c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801b51c:	b180      	cbz	r0, 801b540 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801b51e:	2903      	cmp	r1, #3
 801b520:	d81c      	bhi.n	801b55c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b522:	e8df f001 	tbb	[pc, r1]
 801b526:	1d02      	.short	0x1d02
 801b528:	1f08      	.short	0x1f08
 801b52a:	4b10      	ldr	r3, [pc, #64]	; (801b56c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b52c:	8818      	ldrh	r0, [r3, #0]
 801b52e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b532:	4240      	negs	r0, r0
 801b534:	4770      	bx	lr
 801b536:	4b0d      	ldr	r3, [pc, #52]	; (801b56c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b538:	8818      	ldrh	r0, [r3, #0]
 801b53a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b53e:	4770      	bx	lr
 801b540:	2903      	cmp	r1, #3
 801b542:	d80b      	bhi.n	801b55c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b544:	a301      	add	r3, pc, #4	; (adr r3, 801b54c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801b546:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b54a:	bf00      	nop
 801b54c:	0801b561 	.word	0x0801b561
 801b550:	0801b537 	.word	0x0801b537
 801b554:	0801b565 	.word	0x0801b565
 801b558:	0801b52b 	.word	0x0801b52b
 801b55c:	2000      	movs	r0, #0
 801b55e:	4770      	bx	lr
 801b560:	2001      	movs	r0, #1
 801b562:	4770      	bx	lr
 801b564:	f04f 30ff 	mov.w	r0, #4294967295
 801b568:	4770      	bx	lr
 801b56a:	bf00      	nop
 801b56c:	20027e92 	.word	0x20027e92

0801b570 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801b570:	b180      	cbz	r0, 801b594 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801b572:	2903      	cmp	r1, #3
 801b574:	d81c      	bhi.n	801b5b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801b576:	e8df f001 	tbb	[pc, r1]
 801b57a:	021d      	.short	0x021d
 801b57c:	071f      	.short	0x071f
 801b57e:	4b10      	ldr	r3, [pc, #64]	; (801b5c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b580:	8818      	ldrh	r0, [r3, #0]
 801b582:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b586:	4770      	bx	lr
 801b588:	4b0d      	ldr	r3, [pc, #52]	; (801b5c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b58a:	8818      	ldrh	r0, [r3, #0]
 801b58c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b590:	4240      	negs	r0, r0
 801b592:	4770      	bx	lr
 801b594:	2903      	cmp	r1, #3
 801b596:	d80b      	bhi.n	801b5b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801b598:	a301      	add	r3, pc, #4	; (adr r3, 801b5a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801b59a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b59e:	bf00      	nop
 801b5a0:	0801b57f 	.word	0x0801b57f
 801b5a4:	0801b5b9 	.word	0x0801b5b9
 801b5a8:	0801b589 	.word	0x0801b589
 801b5ac:	0801b5b5 	.word	0x0801b5b5
 801b5b0:	2000      	movs	r0, #0
 801b5b2:	4770      	bx	lr
 801b5b4:	2001      	movs	r0, #1
 801b5b6:	4770      	bx	lr
 801b5b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b5bc:	4770      	bx	lr
 801b5be:	bf00      	nop
 801b5c0:	20027e92 	.word	0x20027e92

0801b5c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5c8:	b099      	sub	sp, #100	; 0x64
 801b5ca:	910b      	str	r1, [sp, #44]	; 0x2c
 801b5cc:	a914      	add	r1, sp, #80	; 0x50
 801b5ce:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801b5d2:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801b5d6:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801b5da:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801b5de:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801b5e2:	e881 000c 	stmia.w	r1, {r2, r3}
 801b5e6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801b5ea:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801b5ee:	9309      	str	r3, [sp, #36]	; 0x24
 801b5f0:	f891 900d 	ldrb.w	r9, [r1, #13]
 801b5f4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801b5f8:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801b5fc:	9310      	str	r3, [sp, #64]	; 0x40
 801b5fe:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801b602:	930c      	str	r3, [sp, #48]	; 0x30
 801b604:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801b608:	798f      	ldrb	r7, [r1, #6]
 801b60a:	431f      	orrs	r7, r3
 801b60c:	f000 8195 	beq.w	801b93a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b610:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801b614:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b618:	f891 9007 	ldrb.w	r9, [r1, #7]
 801b61c:	ea59 0903 	orrs.w	r9, r9, r3
 801b620:	f000 818b 	beq.w	801b93a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b624:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b628:	b29b      	uxth	r3, r3
 801b62a:	2d00      	cmp	r5, #0
 801b62c:	f000 812e 	beq.w	801b88c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801b630:	1aed      	subs	r5, r5, r3
 801b632:	b2ad      	uxth	r5, r5
 801b634:	042b      	lsls	r3, r5, #16
 801b636:	d502      	bpl.n	801b63e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801b638:	1b64      	subs	r4, r4, r5
 801b63a:	2500      	movs	r5, #0
 801b63c:	b224      	sxth	r4, r4
 801b63e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b642:	a814      	add	r0, sp, #80	; 0x50
 801b644:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801b648:	428c      	cmp	r4, r1
 801b64a:	b28b      	uxth	r3, r1
 801b64c:	bfbf      	itttt	lt
 801b64e:	18ed      	addlt	r5, r5, r3
 801b650:	1b2c      	sublt	r4, r5, r4
 801b652:	b2a5      	uxthlt	r5, r4
 801b654:	460c      	movlt	r4, r1
 801b656:	8891      	ldrh	r1, [r2, #4]
 801b658:	440b      	add	r3, r1
 801b65a:	4621      	mov	r1, r4
 801b65c:	b21b      	sxth	r3, r3
 801b65e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b660:	88d3      	ldrh	r3, [r2, #6]
 801b662:	8852      	ldrh	r2, [r2, #2]
 801b664:	4413      	add	r3, r2
 801b666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b668:	b21b      	sxth	r3, r3
 801b66a:	930d      	str	r3, [sp, #52]	; 0x34
 801b66c:	4bbd      	ldr	r3, [pc, #756]	; (801b964 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801b66e:	f893 b000 	ldrb.w	fp, [r3]
 801b672:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b676:	f1dc 0300 	rsbs	r3, ip, #0
 801b67a:	eb43 030c 	adc.w	r3, r3, ip
 801b67e:	930e      	str	r3, [sp, #56]	; 0x38
 801b680:	4653      	mov	r3, sl
 801b682:	f7f8 f9ae 	bl	80139e2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b686:	4621      	mov	r1, r4
 801b688:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801b68c:	4653      	mov	r3, sl
 801b68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b690:	a814      	add	r0, sp, #80	; 0x50
 801b692:	f7f8 f9c3 	bl	8013a1c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b696:	a918      	add	r1, sp, #96	; 0x60
 801b698:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b69c:	a817      	add	r0, sp, #92	; 0x5c
 801b69e:	f7f8 fae3 	bl	8013c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b6a2:	f1ba 0f00 	cmp.w	sl, #0
 801b6a6:	f040 80f4 	bne.w	801b892 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801b6aa:	f1bb 0f01 	cmp.w	fp, #1
 801b6ae:	f040 80f8 	bne.w	801b8a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801b6b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	f040 8145 	bne.w	801b944 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801b6ba:	b2ba      	uxth	r2, r7
 801b6bc:	b905      	cbnz	r5, 801b6c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801b6be:	b16e      	cbz	r6, 801b6dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801b6c0:	fb06 5302 	mla	r3, r6, r2, r5
 801b6c4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801b6c6:	4631      	mov	r1, r6
 801b6c8:	fb08 f303 	mul.w	r3, r8, r3
 801b6cc:	f003 0607 	and.w	r6, r3, #7
 801b6d0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801b6d4:	9328      	str	r3, [sp, #160]	; 0xa0
 801b6d6:	eba9 0301 	sub.w	r3, r9, r1
 801b6da:	930a      	str	r3, [sp, #40]	; 0x28
 801b6dc:	4651      	mov	r1, sl
 801b6de:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b6e0:	f7ff ff1c 	bl	801b51c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801b6e4:	4681      	mov	r9, r0
 801b6e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b6e8:	f7ff ff42 	bl	801b570 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801b6ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b6ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b6f0:	4683      	mov	fp, r0
 801b6f2:	eba3 0a01 	sub.w	sl, r3, r1
 801b6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6f8:	459a      	cmp	sl, r3
 801b6fa:	bfa8      	it	ge
 801b6fc:	469a      	movge	sl, r3
 801b6fe:	f1ba 0f00 	cmp.w	sl, #0
 801b702:	f340 811a 	ble.w	801b93a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b706:	1b64      	subs	r4, r4, r5
 801b708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b70a:	1b1c      	subs	r4, r3, r4
 801b70c:	42bc      	cmp	r4, r7
 801b70e:	bfd4      	ite	le
 801b710:	ebc5 0504 	rsble	r5, r5, r4
 801b714:	ebc5 0507 	rsbgt	r5, r5, r7
 801b718:	2d00      	cmp	r5, #0
 801b71a:	f340 810e 	ble.w	801b93a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b71e:	1b52      	subs	r2, r2, r5
 801b720:	fb08 f302 	mul.w	r3, r8, r2
 801b724:	930f      	str	r3, [sp, #60]	; 0x3c
 801b726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b728:	2b00      	cmp	r3, #0
 801b72a:	f040 8116 	bne.w	801b95a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801b72e:	4b8e      	ldr	r3, [pc, #568]	; (801b968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801b730:	6818      	ldr	r0, [r3, #0]
 801b732:	6803      	ldr	r3, [r0, #0]
 801b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b736:	4798      	blx	r3
 801b738:	2301      	movs	r3, #1
 801b73a:	4a8c      	ldr	r2, [pc, #560]	; (801b96c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801b73c:	fa03 f308 	lsl.w	r3, r3, r8
 801b740:	8811      	ldrh	r1, [r2, #0]
 801b742:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b746:	3b01      	subs	r3, #1
 801b748:	b2db      	uxtb	r3, r3
 801b74a:	930e      	str	r3, [sp, #56]	; 0x38
 801b74c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b750:	fb01 2303 	mla	r3, r1, r3, r2
 801b754:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b758:	930a      	str	r3, [sp, #40]	; 0x28
 801b75a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b75c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b760:	9313      	str	r3, [sp, #76]	; 0x4c
 801b762:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b764:	0a19      	lsrs	r1, r3, #8
 801b766:	b2cb      	uxtb	r3, r1
 801b768:	9312      	str	r3, [sp, #72]	; 0x48
 801b76a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b76c:	b2db      	uxtb	r3, r3
 801b76e:	9311      	str	r3, [sp, #68]	; 0x44
 801b770:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b772:	095a      	lsrs	r2, r3, #5
 801b774:	4b7e      	ldr	r3, [pc, #504]	; (801b970 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801b776:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b77a:	400b      	ands	r3, r1
 801b77c:	4313      	orrs	r3, r2
 801b77e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b780:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b784:	4313      	orrs	r3, r2
 801b786:	b29b      	uxth	r3, r3
 801b788:	9310      	str	r3, [sp, #64]	; 0x40
 801b78a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b78c:	781a      	ldrb	r2, [r3, #0]
 801b78e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801b792:	fb05 b919 	mls	r9, r5, r9, fp
 801b796:	4132      	asrs	r2, r6
 801b798:	fb03 fb05 	mul.w	fp, r3, r5
 801b79c:	930d      	str	r3, [sp, #52]	; 0x34
 801b79e:	b2d2      	uxtb	r2, r2
 801b7a0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801b7a4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b7a8:	f0c0 80f5 	bcc.w	801b996 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801b7ac:	46ae      	mov	lr, r5
 801b7ae:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801b7b2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b7b6:	f0c0 80dd 	bcc.w	801b974 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801b7ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7bc:	4013      	ands	r3, r2
 801b7be:	d055      	beq.n	801b86c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801b7c0:	20ff      	movs	r0, #255	; 0xff
 801b7c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b7c4:	fb90 f1f1 	sdiv	r1, r0, r1
 801b7c8:	434b      	muls	r3, r1
 801b7ca:	2bfe      	cmp	r3, #254	; 0xfe
 801b7cc:	dd03      	ble.n	801b7d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801b7ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b7d0:	4281      	cmp	r1, r0
 801b7d2:	f000 80c4 	beq.w	801b95e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801b7d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b7d8:	f8bc 4000 	ldrh.w	r4, [ip]
 801b7dc:	fb11 f303 	smulbb	r3, r1, r3
 801b7e0:	1220      	asrs	r0, r4, #8
 801b7e2:	b29b      	uxth	r3, r3
 801b7e4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b7e8:	1c59      	adds	r1, r3, #1
 801b7ea:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801b7ee:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b7f2:	10e1      	asrs	r1, r4, #3
 801b7f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b7f8:	00e4      	lsls	r4, r4, #3
 801b7fa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b7fe:	b29f      	uxth	r7, r3
 801b800:	43db      	mvns	r3, r3
 801b802:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801b806:	b2db      	uxtb	r3, r3
 801b808:	b2e4      	uxtb	r4, r4
 801b80a:	9309      	str	r3, [sp, #36]	; 0x24
 801b80c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b80e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801b812:	fb13 f907 	smulbb	r9, r3, r7
 801b816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b818:	fb00 9003 	mla	r0, r0, r3, r9
 801b81c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b81e:	fb13 f907 	smulbb	r9, r3, r7
 801b822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b824:	b280      	uxth	r0, r0
 801b826:	fb01 9103 	mla	r1, r1, r3, r9
 801b82a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b82c:	fb13 f707 	smulbb	r7, r3, r7
 801b830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b832:	b289      	uxth	r1, r1
 801b834:	fb04 7403 	mla	r4, r4, r3, r7
 801b838:	1c43      	adds	r3, r0, #1
 801b83a:	b2a4      	uxth	r4, r4
 801b83c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b840:	f104 0901 	add.w	r9, r4, #1
 801b844:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801b848:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801b84c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801b850:	ea49 0000 	orr.w	r0, r9, r0
 801b854:	f101 0901 	add.w	r9, r1, #1
 801b858:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801b85c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b860:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b864:	ea40 0009 	orr.w	r0, r0, r9
 801b868:	f8ac 0000 	strh.w	r0, [ip]
 801b86c:	4446      	add	r6, r8
 801b86e:	b2b6      	uxth	r6, r6
 801b870:	2e07      	cmp	r6, #7
 801b872:	bf89      	itett	hi
 801b874:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801b876:	fa42 f208 	asrls.w	r2, r2, r8
 801b87a:	2600      	movhi	r6, #0
 801b87c:	785a      	ldrbhi	r2, [r3, #1]
 801b87e:	bf8a      	itet	hi
 801b880:	3301      	addhi	r3, #1
 801b882:	b2d2      	uxtbls	r2, r2
 801b884:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801b886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b888:	449c      	add	ip, r3
 801b88a:	e792      	b.n	801b7b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801b88c:	441c      	add	r4, r3
 801b88e:	b224      	sxth	r4, r4
 801b890:	e6d5      	b.n	801b63e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801b892:	f1ba 0f01 	cmp.w	sl, #1
 801b896:	f47f af0c 	bne.w	801b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b89a:	f1bb 0f01 	cmp.w	fp, #1
 801b89e:	f47f af08 	bne.w	801b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8a2:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801b968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801b8a6:	f8db 0000 	ldr.w	r0, [fp]
 801b8aa:	6803      	ldr	r3, [r0, #0]
 801b8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8ae:	4798      	blx	r3
 801b8b0:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801b8b4:	465a      	mov	r2, fp
 801b8b6:	d006      	beq.n	801b8c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801b8b8:	f1b8 0f04 	cmp.w	r8, #4
 801b8bc:	d140      	bne.n	801b940 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801b8be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8c0:	3300      	adds	r3, #0
 801b8c2:	bf18      	it	ne
 801b8c4:	2301      	movne	r3, #1
 801b8c6:	0580      	lsls	r0, r0, #22
 801b8c8:	d56e      	bpl.n	801b9a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801b8ca:	f1b8 0f08 	cmp.w	r8, #8
 801b8ce:	d16b      	bne.n	801b9a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	bf0c      	ite	eq
 801b8d4:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801b8d8:	f44f 7180 	movne.w	r1, #256	; 0x100
 801b8dc:	2d00      	cmp	r5, #0
 801b8de:	f47f aee8 	bne.w	801b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8e2:	2e00      	cmp	r6, #0
 801b8e4:	f47f aee5 	bne.w	801b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8e8:	19e3      	adds	r3, r4, r7
 801b8ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b8ec:	4283      	cmp	r3, r0
 801b8ee:	f73f aee0 	bgt.w	801b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b8f6:	444b      	add	r3, r9
 801b8f8:	4283      	cmp	r3, r0
 801b8fa:	f73f aeda 	bgt.w	801b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b8fe:	b2bf      	uxth	r7, r7
 801b900:	f1b8 0f08 	cmp.w	r8, #8
 801b904:	6810      	ldr	r0, [r2, #0]
 801b906:	f04f 0500 	mov.w	r5, #0
 801b90a:	bf18      	it	ne
 801b90c:	3701      	addne	r7, #1
 801b90e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801b912:	6804      	ldr	r4, [r0, #0]
 801b914:	bf18      	it	ne
 801b916:	f027 0701 	bicne.w	r7, r7, #1
 801b91a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801b91e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801b922:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b924:	bf18      	it	ne
 801b926:	b2bf      	uxthne	r7, r7
 801b928:	9104      	str	r1, [sp, #16]
 801b92a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b92c:	e9cd 7900 	strd	r7, r9, [sp]
 801b930:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801b934:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b936:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801b938:	47a0      	blx	r4
 801b93a:	b019      	add	sp, #100	; 0x64
 801b93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b940:	2300      	movs	r3, #0
 801b942:	e7c0      	b.n	801b8c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801b944:	2208      	movs	r2, #8
 801b946:	fb92 f3f8 	sdiv	r3, r2, r8
 801b94a:	1e5a      	subs	r2, r3, #1
 801b94c:	443a      	add	r2, r7
 801b94e:	fb92 f2f3 	sdiv	r2, r2, r3
 801b952:	fb12 f203 	smulbb	r2, r2, r3
 801b956:	b292      	uxth	r2, r2
 801b958:	e6b0      	b.n	801b6bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801b95a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b95c:	e6ec      	b.n	801b738 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801b95e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b960:	e782      	b.n	801b868 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801b962:	bf00      	nop
 801b964:	20027e90 	.word	0x20027e90
 801b968:	20027e98 	.word	0x20027e98
 801b96c:	20027e92 	.word	0x20027e92
 801b970:	00fff800 	.word	0x00fff800
 801b974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b976:	b153      	cbz	r3, 801b98e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801b978:	441e      	add	r6, r3
 801b97a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b97c:	b2b6      	uxth	r6, r6
 801b97e:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801b982:	f006 0607 	and.w	r6, r6, #7
 801b986:	781a      	ldrb	r2, [r3, #0]
 801b988:	9328      	str	r3, [sp, #160]	; 0xa0
 801b98a:	4132      	asrs	r2, r6
 801b98c:	b2d2      	uxtb	r2, r2
 801b98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b990:	445b      	add	r3, fp
 801b992:	930a      	str	r3, [sp, #40]	; 0x28
 801b994:	e706      	b.n	801b7a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801b996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d1ce      	bne.n	801b93a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b99c:	4b05      	ldr	r3, [pc, #20]	; (801b9b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801b99e:	6818      	ldr	r0, [r3, #0]
 801b9a0:	6803      	ldr	r3, [r0, #0]
 801b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9a4:	4798      	blx	r3
 801b9a6:	e7c8      	b.n	801b93a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	f43f ae82 	beq.w	801b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b9ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b9b2:	e793      	b.n	801b8dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801b9b4:	20027e98 	.word	0x20027e98

0801b9b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801b9b8:	b538      	push	{r3, r4, r5, lr}
 801b9ba:	4c15      	ldr	r4, [pc, #84]	; (801ba10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801b9bc:	4605      	mov	r5, r0
 801b9be:	7823      	ldrb	r3, [r4, #0]
 801b9c0:	f3bf 8f5b 	dmb	ish
 801b9c4:	07da      	lsls	r2, r3, #31
 801b9c6:	d40b      	bmi.n	801b9e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	f009 f9d2 	bl	8024d72 <__cxa_guard_acquire>
 801b9ce:	b138      	cbz	r0, 801b9e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	f009 f9da 	bl	8024d8a <__cxa_guard_release>
 801b9d6:	4a0f      	ldr	r2, [pc, #60]	; (801ba14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b9d8:	490f      	ldr	r1, [pc, #60]	; (801ba18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801b9da:	4810      	ldr	r0, [pc, #64]	; (801ba1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b9dc:	f009 f9c2 	bl	8024d64 <__aeabi_atexit>
 801b9e0:	4c0f      	ldr	r4, [pc, #60]	; (801ba20 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801b9e2:	7823      	ldrb	r3, [r4, #0]
 801b9e4:	f3bf 8f5b 	dmb	ish
 801b9e8:	07db      	lsls	r3, r3, #31
 801b9ea:	d40b      	bmi.n	801ba04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b9ec:	4620      	mov	r0, r4
 801b9ee:	f009 f9c0 	bl	8024d72 <__cxa_guard_acquire>
 801b9f2:	b138      	cbz	r0, 801ba04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b9f4:	4620      	mov	r0, r4
 801b9f6:	f009 f9c8 	bl	8024d8a <__cxa_guard_release>
 801b9fa:	4a06      	ldr	r2, [pc, #24]	; (801ba14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b9fc:	4909      	ldr	r1, [pc, #36]	; (801ba24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801b9fe:	480a      	ldr	r0, [pc, #40]	; (801ba28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801ba00:	f009 f9b0 	bl	8024d64 <__aeabi_atexit>
 801ba04:	4b05      	ldr	r3, [pc, #20]	; (801ba1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801ba06:	612b      	str	r3, [r5, #16]
 801ba08:	4b07      	ldr	r3, [pc, #28]	; (801ba28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801ba0a:	616b      	str	r3, [r5, #20]
 801ba0c:	bd38      	pop	{r3, r4, r5, pc}
 801ba0e:	bf00      	nop
 801ba10:	20027f6c 	.word	0x20027f6c
 801ba14:	20000000 	.word	0x20000000
 801ba18:	08019bc5 	.word	0x08019bc5
 801ba1c:	200000b4 	.word	0x200000b4
 801ba20:	20027f70 	.word	0x20027f70
 801ba24:	08019bc3 	.word	0x08019bc3
 801ba28:	200000b8 	.word	0x200000b8

0801ba2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ba2c:	b538      	push	{r3, r4, r5, lr}
 801ba2e:	4c15      	ldr	r4, [pc, #84]	; (801ba84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801ba30:	4605      	mov	r5, r0
 801ba32:	7823      	ldrb	r3, [r4, #0]
 801ba34:	f3bf 8f5b 	dmb	ish
 801ba38:	07da      	lsls	r2, r3, #31
 801ba3a:	d40b      	bmi.n	801ba54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ba3c:	4620      	mov	r0, r4
 801ba3e:	f009 f998 	bl	8024d72 <__cxa_guard_acquire>
 801ba42:	b138      	cbz	r0, 801ba54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801ba44:	4620      	mov	r0, r4
 801ba46:	f009 f9a0 	bl	8024d8a <__cxa_guard_release>
 801ba4a:	4a0f      	ldr	r2, [pc, #60]	; (801ba88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ba4c:	490f      	ldr	r1, [pc, #60]	; (801ba8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801ba4e:	4810      	ldr	r0, [pc, #64]	; (801ba90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ba50:	f009 f988 	bl	8024d64 <__aeabi_atexit>
 801ba54:	4c0f      	ldr	r4, [pc, #60]	; (801ba94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801ba56:	7823      	ldrb	r3, [r4, #0]
 801ba58:	f3bf 8f5b 	dmb	ish
 801ba5c:	07db      	lsls	r3, r3, #31
 801ba5e:	d40b      	bmi.n	801ba78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ba60:	4620      	mov	r0, r4
 801ba62:	f009 f986 	bl	8024d72 <__cxa_guard_acquire>
 801ba66:	b138      	cbz	r0, 801ba78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801ba68:	4620      	mov	r0, r4
 801ba6a:	f009 f98e 	bl	8024d8a <__cxa_guard_release>
 801ba6e:	4a06      	ldr	r2, [pc, #24]	; (801ba88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801ba70:	4909      	ldr	r1, [pc, #36]	; (801ba98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801ba72:	480a      	ldr	r0, [pc, #40]	; (801ba9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ba74:	f009 f976 	bl	8024d64 <__aeabi_atexit>
 801ba78:	4b05      	ldr	r3, [pc, #20]	; (801ba90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801ba7a:	60ab      	str	r3, [r5, #8]
 801ba7c:	4b07      	ldr	r3, [pc, #28]	; (801ba9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801ba7e:	60eb      	str	r3, [r5, #12]
 801ba80:	bd38      	pop	{r3, r4, r5, pc}
 801ba82:	bf00      	nop
 801ba84:	20027f44 	.word	0x20027f44
 801ba88:	20000000 	.word	0x20000000
 801ba8c:	08019bc9 	.word	0x08019bc9
 801ba90:	2000008c 	.word	0x2000008c
 801ba94:	20027f48 	.word	0x20027f48
 801ba98:	08019bc7 	.word	0x08019bc7
 801ba9c:	20000090 	.word	0x20000090

0801baa0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801baa0:	b510      	push	{r4, lr}
 801baa2:	4604      	mov	r4, r0
 801baa4:	f7ff ff88 	bl	801b9b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801baa8:	4620      	mov	r0, r4
 801baaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baae:	f7ff bfbd 	b.w	801ba2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801bab4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801bab4:	b538      	push	{r3, r4, r5, lr}
 801bab6:	4c15      	ldr	r4, [pc, #84]	; (801bb0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801bab8:	4605      	mov	r5, r0
 801baba:	7823      	ldrb	r3, [r4, #0]
 801babc:	f3bf 8f5b 	dmb	ish
 801bac0:	07da      	lsls	r2, r3, #31
 801bac2:	d40b      	bmi.n	801badc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bac4:	4620      	mov	r0, r4
 801bac6:	f009 f954 	bl	8024d72 <__cxa_guard_acquire>
 801baca:	b138      	cbz	r0, 801badc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bacc:	4620      	mov	r0, r4
 801bace:	f009 f95c 	bl	8024d8a <__cxa_guard_release>
 801bad2:	4a0f      	ldr	r2, [pc, #60]	; (801bb10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bad4:	490f      	ldr	r1, [pc, #60]	; (801bb14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bad6:	4810      	ldr	r0, [pc, #64]	; (801bb18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bad8:	f009 f944 	bl	8024d64 <__aeabi_atexit>
 801badc:	4c0f      	ldr	r4, [pc, #60]	; (801bb1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801bade:	7823      	ldrb	r3, [r4, #0]
 801bae0:	f3bf 8f5b 	dmb	ish
 801bae4:	07db      	lsls	r3, r3, #31
 801bae6:	d40b      	bmi.n	801bb00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bae8:	4620      	mov	r0, r4
 801baea:	f009 f942 	bl	8024d72 <__cxa_guard_acquire>
 801baee:	b138      	cbz	r0, 801bb00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801baf0:	4620      	mov	r0, r4
 801baf2:	f009 f94a 	bl	8024d8a <__cxa_guard_release>
 801baf6:	4a06      	ldr	r2, [pc, #24]	; (801bb10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801baf8:	4909      	ldr	r1, [pc, #36]	; (801bb20 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bafa:	480a      	ldr	r0, [pc, #40]	; (801bb24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bafc:	f009 f932 	bl	8024d64 <__aeabi_atexit>
 801bb00:	4b05      	ldr	r3, [pc, #20]	; (801bb18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bb02:	622b      	str	r3, [r5, #32]
 801bb04:	4b07      	ldr	r3, [pc, #28]	; (801bb24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bb06:	626b      	str	r3, [r5, #36]	; 0x24
 801bb08:	bd38      	pop	{r3, r4, r5, pc}
 801bb0a:	bf00      	nop
 801bb0c:	20027f74 	.word	0x20027f74
 801bb10:	20000000 	.word	0x20000000
 801bb14:	08019bbd 	.word	0x08019bbd
 801bb18:	200000bc 	.word	0x200000bc
 801bb1c:	20027f78 	.word	0x20027f78
 801bb20:	08019bbb 	.word	0x08019bbb
 801bb24:	200000c0 	.word	0x200000c0

0801bb28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bb28:	b538      	push	{r3, r4, r5, lr}
 801bb2a:	4c15      	ldr	r4, [pc, #84]	; (801bb80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bb2c:	4605      	mov	r5, r0
 801bb2e:	7823      	ldrb	r3, [r4, #0]
 801bb30:	f3bf 8f5b 	dmb	ish
 801bb34:	07da      	lsls	r2, r3, #31
 801bb36:	d40b      	bmi.n	801bb50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bb38:	4620      	mov	r0, r4
 801bb3a:	f009 f91a 	bl	8024d72 <__cxa_guard_acquire>
 801bb3e:	b138      	cbz	r0, 801bb50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bb40:	4620      	mov	r0, r4
 801bb42:	f009 f922 	bl	8024d8a <__cxa_guard_release>
 801bb46:	4a0f      	ldr	r2, [pc, #60]	; (801bb84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bb48:	490f      	ldr	r1, [pc, #60]	; (801bb88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bb4a:	4810      	ldr	r0, [pc, #64]	; (801bb8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bb4c:	f009 f90a 	bl	8024d64 <__aeabi_atexit>
 801bb50:	4c0f      	ldr	r4, [pc, #60]	; (801bb90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bb52:	7823      	ldrb	r3, [r4, #0]
 801bb54:	f3bf 8f5b 	dmb	ish
 801bb58:	07db      	lsls	r3, r3, #31
 801bb5a:	d40b      	bmi.n	801bb74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bb5c:	4620      	mov	r0, r4
 801bb5e:	f009 f908 	bl	8024d72 <__cxa_guard_acquire>
 801bb62:	b138      	cbz	r0, 801bb74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bb64:	4620      	mov	r0, r4
 801bb66:	f009 f910 	bl	8024d8a <__cxa_guard_release>
 801bb6a:	4a06      	ldr	r2, [pc, #24]	; (801bb84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bb6c:	4909      	ldr	r1, [pc, #36]	; (801bb94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801bb6e:	480a      	ldr	r0, [pc, #40]	; (801bb98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bb70:	f009 f8f8 	bl	8024d64 <__aeabi_atexit>
 801bb74:	4b05      	ldr	r3, [pc, #20]	; (801bb8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bb76:	61ab      	str	r3, [r5, #24]
 801bb78:	4b07      	ldr	r3, [pc, #28]	; (801bb98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bb7a:	61eb      	str	r3, [r5, #28]
 801bb7c:	bd38      	pop	{r3, r4, r5, pc}
 801bb7e:	bf00      	nop
 801bb80:	20027f4c 	.word	0x20027f4c
 801bb84:	20000000 	.word	0x20000000
 801bb88:	08019bc1 	.word	0x08019bc1
 801bb8c:	20000094 	.word	0x20000094
 801bb90:	20027f50 	.word	0x20027f50
 801bb94:	08019bbf 	.word	0x08019bbf
 801bb98:	20000098 	.word	0x20000098

0801bb9c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801bb9c:	b510      	push	{r4, lr}
 801bb9e:	4604      	mov	r4, r0
 801bba0:	f7ff ff88 	bl	801bab4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801bba4:	4620      	mov	r0, r4
 801bba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbaa:	f7ff bfbd 	b.w	801bb28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801bbb0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801bbb0:	b538      	push	{r3, r4, r5, lr}
 801bbb2:	4c15      	ldr	r4, [pc, #84]	; (801bc08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801bbb4:	4605      	mov	r5, r0
 801bbb6:	7823      	ldrb	r3, [r4, #0]
 801bbb8:	f3bf 8f5b 	dmb	ish
 801bbbc:	07da      	lsls	r2, r3, #31
 801bbbe:	d40b      	bmi.n	801bbd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	f009 f8d6 	bl	8024d72 <__cxa_guard_acquire>
 801bbc6:	b138      	cbz	r0, 801bbd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bbc8:	4620      	mov	r0, r4
 801bbca:	f009 f8de 	bl	8024d8a <__cxa_guard_release>
 801bbce:	4a0f      	ldr	r2, [pc, #60]	; (801bc0c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bbd0:	490f      	ldr	r1, [pc, #60]	; (801bc10 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801bbd2:	4810      	ldr	r0, [pc, #64]	; (801bc14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bbd4:	f009 f8c6 	bl	8024d64 <__aeabi_atexit>
 801bbd8:	4c0f      	ldr	r4, [pc, #60]	; (801bc18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801bbda:	7823      	ldrb	r3, [r4, #0]
 801bbdc:	f3bf 8f5b 	dmb	ish
 801bbe0:	07db      	lsls	r3, r3, #31
 801bbe2:	d40b      	bmi.n	801bbfc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bbe4:	4620      	mov	r0, r4
 801bbe6:	f009 f8c4 	bl	8024d72 <__cxa_guard_acquire>
 801bbea:	b138      	cbz	r0, 801bbfc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bbec:	4620      	mov	r0, r4
 801bbee:	f009 f8cc 	bl	8024d8a <__cxa_guard_release>
 801bbf2:	4a06      	ldr	r2, [pc, #24]	; (801bc0c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bbf4:	4909      	ldr	r1, [pc, #36]	; (801bc1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801bbf6:	480a      	ldr	r0, [pc, #40]	; (801bc20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bbf8:	f009 f8b4 	bl	8024d64 <__aeabi_atexit>
 801bbfc:	4b05      	ldr	r3, [pc, #20]	; (801bc14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bbfe:	632b      	str	r3, [r5, #48]	; 0x30
 801bc00:	4b07      	ldr	r3, [pc, #28]	; (801bc20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bc02:	636b      	str	r3, [r5, #52]	; 0x34
 801bc04:	bd38      	pop	{r3, r4, r5, pc}
 801bc06:	bf00      	nop
 801bc08:	20027f84 	.word	0x20027f84
 801bc0c:	20000000 	.word	0x20000000
 801bc10:	08019bb5 	.word	0x08019bb5
 801bc14:	200000cc 	.word	0x200000cc
 801bc18:	20027f88 	.word	0x20027f88
 801bc1c:	08019bb3 	.word	0x08019bb3
 801bc20:	200000d0 	.word	0x200000d0

0801bc24 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801bc24:	b538      	push	{r3, r4, r5, lr}
 801bc26:	4c15      	ldr	r4, [pc, #84]	; (801bc7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801bc28:	4605      	mov	r5, r0
 801bc2a:	7823      	ldrb	r3, [r4, #0]
 801bc2c:	f3bf 8f5b 	dmb	ish
 801bc30:	07da      	lsls	r2, r3, #31
 801bc32:	d40b      	bmi.n	801bc4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bc34:	4620      	mov	r0, r4
 801bc36:	f009 f89c 	bl	8024d72 <__cxa_guard_acquire>
 801bc3a:	b138      	cbz	r0, 801bc4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801bc3c:	4620      	mov	r0, r4
 801bc3e:	f009 f8a4 	bl	8024d8a <__cxa_guard_release>
 801bc42:	4a0f      	ldr	r2, [pc, #60]	; (801bc80 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bc44:	490f      	ldr	r1, [pc, #60]	; (801bc84 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801bc46:	4810      	ldr	r0, [pc, #64]	; (801bc88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bc48:	f009 f88c 	bl	8024d64 <__aeabi_atexit>
 801bc4c:	4c0f      	ldr	r4, [pc, #60]	; (801bc8c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801bc4e:	7823      	ldrb	r3, [r4, #0]
 801bc50:	f3bf 8f5b 	dmb	ish
 801bc54:	07db      	lsls	r3, r3, #31
 801bc56:	d40b      	bmi.n	801bc70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bc58:	4620      	mov	r0, r4
 801bc5a:	f009 f88a 	bl	8024d72 <__cxa_guard_acquire>
 801bc5e:	b138      	cbz	r0, 801bc70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801bc60:	4620      	mov	r0, r4
 801bc62:	f009 f892 	bl	8024d8a <__cxa_guard_release>
 801bc66:	4a06      	ldr	r2, [pc, #24]	; (801bc80 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801bc68:	4909      	ldr	r1, [pc, #36]	; (801bc90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801bc6a:	480a      	ldr	r0, [pc, #40]	; (801bc94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bc6c:	f009 f87a 	bl	8024d64 <__aeabi_atexit>
 801bc70:	4b05      	ldr	r3, [pc, #20]	; (801bc88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801bc72:	62ab      	str	r3, [r5, #40]	; 0x28
 801bc74:	4b07      	ldr	r3, [pc, #28]	; (801bc94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bc76:	62eb      	str	r3, [r5, #44]	; 0x2c
 801bc78:	bd38      	pop	{r3, r4, r5, pc}
 801bc7a:	bf00      	nop
 801bc7c:	20027f54 	.word	0x20027f54
 801bc80:	20000000 	.word	0x20000000
 801bc84:	08019bb9 	.word	0x08019bb9
 801bc88:	2000009c 	.word	0x2000009c
 801bc8c:	20027f58 	.word	0x20027f58
 801bc90:	08019bb7 	.word	0x08019bb7
 801bc94:	200000a0 	.word	0x200000a0

0801bc98 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801bc98:	b510      	push	{r4, lr}
 801bc9a:	4604      	mov	r4, r0
 801bc9c:	f7ff ff88 	bl	801bbb0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801bca0:	4620      	mov	r0, r4
 801bca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bca6:	f7ff bfbd 	b.w	801bc24 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bcac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801bcac:	b538      	push	{r3, r4, r5, lr}
 801bcae:	4c15      	ldr	r4, [pc, #84]	; (801bd04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801bcb0:	4605      	mov	r5, r0
 801bcb2:	7823      	ldrb	r3, [r4, #0]
 801bcb4:	f3bf 8f5b 	dmb	ish
 801bcb8:	07da      	lsls	r2, r3, #31
 801bcba:	d40b      	bmi.n	801bcd4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801bcbc:	4620      	mov	r0, r4
 801bcbe:	f009 f858 	bl	8024d72 <__cxa_guard_acquire>
 801bcc2:	b138      	cbz	r0, 801bcd4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801bcc4:	4620      	mov	r0, r4
 801bcc6:	f009 f860 	bl	8024d8a <__cxa_guard_release>
 801bcca:	4a0f      	ldr	r2, [pc, #60]	; (801bd08 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801bccc:	490f      	ldr	r1, [pc, #60]	; (801bd0c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801bcce:	4810      	ldr	r0, [pc, #64]	; (801bd10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801bcd0:	f009 f848 	bl	8024d64 <__aeabi_atexit>
 801bcd4:	4c0f      	ldr	r4, [pc, #60]	; (801bd14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801bcd6:	7823      	ldrb	r3, [r4, #0]
 801bcd8:	f3bf 8f5b 	dmb	ish
 801bcdc:	07db      	lsls	r3, r3, #31
 801bcde:	d40b      	bmi.n	801bcf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801bce0:	4620      	mov	r0, r4
 801bce2:	f009 f846 	bl	8024d72 <__cxa_guard_acquire>
 801bce6:	b138      	cbz	r0, 801bcf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801bce8:	4620      	mov	r0, r4
 801bcea:	f009 f84e 	bl	8024d8a <__cxa_guard_release>
 801bcee:	4a06      	ldr	r2, [pc, #24]	; (801bd08 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801bcf0:	4909      	ldr	r1, [pc, #36]	; (801bd18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801bcf2:	480a      	ldr	r0, [pc, #40]	; (801bd1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801bcf4:	f009 f836 	bl	8024d64 <__aeabi_atexit>
 801bcf8:	4b05      	ldr	r3, [pc, #20]	; (801bd10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801bcfa:	652b      	str	r3, [r5, #80]	; 0x50
 801bcfc:	4b07      	ldr	r3, [pc, #28]	; (801bd1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801bcfe:	656b      	str	r3, [r5, #84]	; 0x54
 801bd00:	bd38      	pop	{r3, r4, r5, pc}
 801bd02:	bf00      	nop
 801bd04:	20027f8c 	.word	0x20027f8c
 801bd08:	20000000 	.word	0x20000000
 801bd0c:	08019ba5 	.word	0x08019ba5
 801bd10:	200000d4 	.word	0x200000d4
 801bd14:	20027f90 	.word	0x20027f90
 801bd18:	08019ba3 	.word	0x08019ba3
 801bd1c:	200000d8 	.word	0x200000d8

0801bd20 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801bd20:	b538      	push	{r3, r4, r5, lr}
 801bd22:	4c15      	ldr	r4, [pc, #84]	; (801bd78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801bd24:	4605      	mov	r5, r0
 801bd26:	7823      	ldrb	r3, [r4, #0]
 801bd28:	f3bf 8f5b 	dmb	ish
 801bd2c:	07da      	lsls	r2, r3, #31
 801bd2e:	d40b      	bmi.n	801bd48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801bd30:	4620      	mov	r0, r4
 801bd32:	f009 f81e 	bl	8024d72 <__cxa_guard_acquire>
 801bd36:	b138      	cbz	r0, 801bd48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801bd38:	4620      	mov	r0, r4
 801bd3a:	f009 f826 	bl	8024d8a <__cxa_guard_release>
 801bd3e:	4a0f      	ldr	r2, [pc, #60]	; (801bd7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801bd40:	490f      	ldr	r1, [pc, #60]	; (801bd80 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801bd42:	4810      	ldr	r0, [pc, #64]	; (801bd84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801bd44:	f009 f80e 	bl	8024d64 <__aeabi_atexit>
 801bd48:	4c0f      	ldr	r4, [pc, #60]	; (801bd88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801bd4a:	7823      	ldrb	r3, [r4, #0]
 801bd4c:	f3bf 8f5b 	dmb	ish
 801bd50:	07db      	lsls	r3, r3, #31
 801bd52:	d40b      	bmi.n	801bd6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801bd54:	4620      	mov	r0, r4
 801bd56:	f009 f80c 	bl	8024d72 <__cxa_guard_acquire>
 801bd5a:	b138      	cbz	r0, 801bd6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801bd5c:	4620      	mov	r0, r4
 801bd5e:	f009 f814 	bl	8024d8a <__cxa_guard_release>
 801bd62:	4a06      	ldr	r2, [pc, #24]	; (801bd7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801bd64:	4909      	ldr	r1, [pc, #36]	; (801bd8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801bd66:	480a      	ldr	r0, [pc, #40]	; (801bd90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801bd68:	f008 fffc 	bl	8024d64 <__aeabi_atexit>
 801bd6c:	4b05      	ldr	r3, [pc, #20]	; (801bd84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801bd6e:	64ab      	str	r3, [r5, #72]	; 0x48
 801bd70:	4b07      	ldr	r3, [pc, #28]	; (801bd90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801bd72:	64eb      	str	r3, [r5, #76]	; 0x4c
 801bd74:	bd38      	pop	{r3, r4, r5, pc}
 801bd76:	bf00      	nop
 801bd78:	20027f94 	.word	0x20027f94
 801bd7c:	20000000 	.word	0x20000000
 801bd80:	08019ba9 	.word	0x08019ba9
 801bd84:	200000dc 	.word	0x200000dc
 801bd88:	20027f98 	.word	0x20027f98
 801bd8c:	08019ba7 	.word	0x08019ba7
 801bd90:	200000e0 	.word	0x200000e0

0801bd94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801bd94:	b538      	push	{r3, r4, r5, lr}
 801bd96:	4c15      	ldr	r4, [pc, #84]	; (801bdec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801bd98:	4605      	mov	r5, r0
 801bd9a:	7823      	ldrb	r3, [r4, #0]
 801bd9c:	f3bf 8f5b 	dmb	ish
 801bda0:	07da      	lsls	r2, r3, #31
 801bda2:	d40b      	bmi.n	801bdbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801bda4:	4620      	mov	r0, r4
 801bda6:	f008 ffe4 	bl	8024d72 <__cxa_guard_acquire>
 801bdaa:	b138      	cbz	r0, 801bdbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801bdac:	4620      	mov	r0, r4
 801bdae:	f008 ffec 	bl	8024d8a <__cxa_guard_release>
 801bdb2:	4a0f      	ldr	r2, [pc, #60]	; (801bdf0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801bdb4:	490f      	ldr	r1, [pc, #60]	; (801bdf4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801bdb6:	4810      	ldr	r0, [pc, #64]	; (801bdf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801bdb8:	f008 ffd4 	bl	8024d64 <__aeabi_atexit>
 801bdbc:	4c0f      	ldr	r4, [pc, #60]	; (801bdfc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801bdbe:	7823      	ldrb	r3, [r4, #0]
 801bdc0:	f3bf 8f5b 	dmb	ish
 801bdc4:	07db      	lsls	r3, r3, #31
 801bdc6:	d40b      	bmi.n	801bde0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801bdc8:	4620      	mov	r0, r4
 801bdca:	f008 ffd2 	bl	8024d72 <__cxa_guard_acquire>
 801bdce:	b138      	cbz	r0, 801bde0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801bdd0:	4620      	mov	r0, r4
 801bdd2:	f008 ffda 	bl	8024d8a <__cxa_guard_release>
 801bdd6:	4a06      	ldr	r2, [pc, #24]	; (801bdf0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801bdd8:	4909      	ldr	r1, [pc, #36]	; (801be00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801bdda:	480a      	ldr	r0, [pc, #40]	; (801be04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801bddc:	f008 ffc2 	bl	8024d64 <__aeabi_atexit>
 801bde0:	4b05      	ldr	r3, [pc, #20]	; (801bdf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801bde2:	642b      	str	r3, [r5, #64]	; 0x40
 801bde4:	4b07      	ldr	r3, [pc, #28]	; (801be04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801bde6:	646b      	str	r3, [r5, #68]	; 0x44
 801bde8:	bd38      	pop	{r3, r4, r5, pc}
 801bdea:	bf00      	nop
 801bdec:	20027f5c 	.word	0x20027f5c
 801bdf0:	20000000 	.word	0x20000000
 801bdf4:	08019bad 	.word	0x08019bad
 801bdf8:	200000a4 	.word	0x200000a4
 801bdfc:	20027f60 	.word	0x20027f60
 801be00:	08019bab 	.word	0x08019bab
 801be04:	200000a8 	.word	0x200000a8

0801be08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801be08:	b538      	push	{r3, r4, r5, lr}
 801be0a:	4c15      	ldr	r4, [pc, #84]	; (801be60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801be0c:	4605      	mov	r5, r0
 801be0e:	7823      	ldrb	r3, [r4, #0]
 801be10:	f3bf 8f5b 	dmb	ish
 801be14:	07da      	lsls	r2, r3, #31
 801be16:	d40b      	bmi.n	801be30 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801be18:	4620      	mov	r0, r4
 801be1a:	f008 ffaa 	bl	8024d72 <__cxa_guard_acquire>
 801be1e:	b138      	cbz	r0, 801be30 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801be20:	4620      	mov	r0, r4
 801be22:	f008 ffb2 	bl	8024d8a <__cxa_guard_release>
 801be26:	4a0f      	ldr	r2, [pc, #60]	; (801be64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801be28:	490f      	ldr	r1, [pc, #60]	; (801be68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801be2a:	4810      	ldr	r0, [pc, #64]	; (801be6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801be2c:	f008 ff9a 	bl	8024d64 <__aeabi_atexit>
 801be30:	4c0f      	ldr	r4, [pc, #60]	; (801be70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801be32:	7823      	ldrb	r3, [r4, #0]
 801be34:	f3bf 8f5b 	dmb	ish
 801be38:	07db      	lsls	r3, r3, #31
 801be3a:	d40b      	bmi.n	801be54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801be3c:	4620      	mov	r0, r4
 801be3e:	f008 ff98 	bl	8024d72 <__cxa_guard_acquire>
 801be42:	b138      	cbz	r0, 801be54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801be44:	4620      	mov	r0, r4
 801be46:	f008 ffa0 	bl	8024d8a <__cxa_guard_release>
 801be4a:	4a06      	ldr	r2, [pc, #24]	; (801be64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801be4c:	4909      	ldr	r1, [pc, #36]	; (801be74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801be4e:	480a      	ldr	r0, [pc, #40]	; (801be78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801be50:	f008 ff88 	bl	8024d64 <__aeabi_atexit>
 801be54:	4b05      	ldr	r3, [pc, #20]	; (801be6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801be56:	63ab      	str	r3, [r5, #56]	; 0x38
 801be58:	4b07      	ldr	r3, [pc, #28]	; (801be78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801be5a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801be5c:	bd38      	pop	{r3, r4, r5, pc}
 801be5e:	bf00      	nop
 801be60:	20027f7c 	.word	0x20027f7c
 801be64:	20000000 	.word	0x20000000
 801be68:	08019bb1 	.word	0x08019bb1
 801be6c:	200000c4 	.word	0x200000c4
 801be70:	20027f80 	.word	0x20027f80
 801be74:	08019baf 	.word	0x08019baf
 801be78:	200000c8 	.word	0x200000c8

0801be7c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801be7c:	b510      	push	{r4, lr}
 801be7e:	4604      	mov	r4, r0
 801be80:	f7ff ff14 	bl	801bcac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801be84:	4620      	mov	r0, r4
 801be86:	f7ff ff85 	bl	801bd94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801be8a:	4620      	mov	r0, r4
 801be8c:	f7ff ff48 	bl	801bd20 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801be90:	4620      	mov	r0, r4
 801be92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be96:	f7ff bfb7 	b.w	801be08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801be9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801be9c:	b538      	push	{r3, r4, r5, lr}
 801be9e:	4c15      	ldr	r4, [pc, #84]	; (801bef4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801bea0:	4605      	mov	r5, r0
 801bea2:	7823      	ldrb	r3, [r4, #0]
 801bea4:	f3bf 8f5b 	dmb	ish
 801bea8:	07da      	lsls	r2, r3, #31
 801beaa:	d40b      	bmi.n	801bec4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801beac:	4620      	mov	r0, r4
 801beae:	f008 ff60 	bl	8024d72 <__cxa_guard_acquire>
 801beb2:	b138      	cbz	r0, 801bec4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801beb4:	4620      	mov	r0, r4
 801beb6:	f008 ff68 	bl	8024d8a <__cxa_guard_release>
 801beba:	4a0f      	ldr	r2, [pc, #60]	; (801bef8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801bebc:	490f      	ldr	r1, [pc, #60]	; (801befc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801bebe:	4810      	ldr	r0, [pc, #64]	; (801bf00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801bec0:	f008 ff50 	bl	8024d64 <__aeabi_atexit>
 801bec4:	4c0f      	ldr	r4, [pc, #60]	; (801bf04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801bec6:	7823      	ldrb	r3, [r4, #0]
 801bec8:	f3bf 8f5b 	dmb	ish
 801becc:	07db      	lsls	r3, r3, #31
 801bece:	d40b      	bmi.n	801bee8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bed0:	4620      	mov	r0, r4
 801bed2:	f008 ff4e 	bl	8024d72 <__cxa_guard_acquire>
 801bed6:	b138      	cbz	r0, 801bee8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bed8:	4620      	mov	r0, r4
 801beda:	f008 ff56 	bl	8024d8a <__cxa_guard_release>
 801bede:	4a06      	ldr	r2, [pc, #24]	; (801bef8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801bee0:	4909      	ldr	r1, [pc, #36]	; (801bf08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801bee2:	480a      	ldr	r0, [pc, #40]	; (801bf0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bee4:	f008 ff3e 	bl	8024d64 <__aeabi_atexit>
 801bee8:	4b05      	ldr	r3, [pc, #20]	; (801bf00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801beea:	662b      	str	r3, [r5, #96]	; 0x60
 801beec:	4b07      	ldr	r3, [pc, #28]	; (801bf0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801beee:	666b      	str	r3, [r5, #100]	; 0x64
 801bef0:	bd38      	pop	{r3, r4, r5, pc}
 801bef2:	bf00      	nop
 801bef4:	20027f64 	.word	0x20027f64
 801bef8:	20000000 	.word	0x20000000
 801befc:	08019b9d 	.word	0x08019b9d
 801bf00:	200000ac 	.word	0x200000ac
 801bf04:	20027f68 	.word	0x20027f68
 801bf08:	08019b9b 	.word	0x08019b9b
 801bf0c:	200000b0 	.word	0x200000b0

0801bf10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801bf10:	b538      	push	{r3, r4, r5, lr}
 801bf12:	4c15      	ldr	r4, [pc, #84]	; (801bf68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801bf14:	4605      	mov	r5, r0
 801bf16:	7823      	ldrb	r3, [r4, #0]
 801bf18:	f3bf 8f5b 	dmb	ish
 801bf1c:	07da      	lsls	r2, r3, #31
 801bf1e:	d40b      	bmi.n	801bf38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801bf20:	4620      	mov	r0, r4
 801bf22:	f008 ff26 	bl	8024d72 <__cxa_guard_acquire>
 801bf26:	b138      	cbz	r0, 801bf38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801bf28:	4620      	mov	r0, r4
 801bf2a:	f008 ff2e 	bl	8024d8a <__cxa_guard_release>
 801bf2e:	4a0f      	ldr	r2, [pc, #60]	; (801bf6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bf30:	490f      	ldr	r1, [pc, #60]	; (801bf70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801bf32:	4810      	ldr	r0, [pc, #64]	; (801bf74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bf34:	f008 ff16 	bl	8024d64 <__aeabi_atexit>
 801bf38:	4c0f      	ldr	r4, [pc, #60]	; (801bf78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801bf3a:	7823      	ldrb	r3, [r4, #0]
 801bf3c:	f3bf 8f5b 	dmb	ish
 801bf40:	07db      	lsls	r3, r3, #31
 801bf42:	d40b      	bmi.n	801bf5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801bf44:	4620      	mov	r0, r4
 801bf46:	f008 ff14 	bl	8024d72 <__cxa_guard_acquire>
 801bf4a:	b138      	cbz	r0, 801bf5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801bf4c:	4620      	mov	r0, r4
 801bf4e:	f008 ff1c 	bl	8024d8a <__cxa_guard_release>
 801bf52:	4a06      	ldr	r2, [pc, #24]	; (801bf6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bf54:	4909      	ldr	r1, [pc, #36]	; (801bf7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801bf56:	480a      	ldr	r0, [pc, #40]	; (801bf80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bf58:	f008 ff04 	bl	8024d64 <__aeabi_atexit>
 801bf5c:	4b05      	ldr	r3, [pc, #20]	; (801bf74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bf5e:	65ab      	str	r3, [r5, #88]	; 0x58
 801bf60:	4b07      	ldr	r3, [pc, #28]	; (801bf80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bf62:	65eb      	str	r3, [r5, #92]	; 0x5c
 801bf64:	bd38      	pop	{r3, r4, r5, pc}
 801bf66:	bf00      	nop
 801bf68:	20027f3c 	.word	0x20027f3c
 801bf6c:	20000000 	.word	0x20000000
 801bf70:	08019ba1 	.word	0x08019ba1
 801bf74:	20000084 	.word	0x20000084
 801bf78:	20027f40 	.word	0x20027f40
 801bf7c:	08019b9f 	.word	0x08019b9f
 801bf80:	20000088 	.word	0x20000088

0801bf84 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801bf84:	b510      	push	{r4, lr}
 801bf86:	4604      	mov	r4, r0
 801bf88:	f7ff ff88 	bl	801be9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf92:	f7ff bfbd 	b.w	801bf10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801bf98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801bf98:	b538      	push	{r3, r4, r5, lr}
 801bf9a:	4c15      	ldr	r4, [pc, #84]	; (801bff0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801bf9c:	4605      	mov	r5, r0
 801bf9e:	7823      	ldrb	r3, [r4, #0]
 801bfa0:	f3bf 8f5b 	dmb	ish
 801bfa4:	07da      	lsls	r2, r3, #31
 801bfa6:	d40b      	bmi.n	801bfc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bfa8:	4620      	mov	r0, r4
 801bfaa:	f008 fee2 	bl	8024d72 <__cxa_guard_acquire>
 801bfae:	b138      	cbz	r0, 801bfc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	f008 feea 	bl	8024d8a <__cxa_guard_release>
 801bfb6:	4a0f      	ldr	r2, [pc, #60]	; (801bff4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bfb8:	490f      	ldr	r1, [pc, #60]	; (801bff8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801bfba:	4810      	ldr	r0, [pc, #64]	; (801bffc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bfbc:	f008 fed2 	bl	8024d64 <__aeabi_atexit>
 801bfc0:	4c0f      	ldr	r4, [pc, #60]	; (801c000 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801bfc2:	7823      	ldrb	r3, [r4, #0]
 801bfc4:	f3bf 8f5b 	dmb	ish
 801bfc8:	07db      	lsls	r3, r3, #31
 801bfca:	d40b      	bmi.n	801bfe4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bfcc:	4620      	mov	r0, r4
 801bfce:	f008 fed0 	bl	8024d72 <__cxa_guard_acquire>
 801bfd2:	b138      	cbz	r0, 801bfe4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	f008 fed8 	bl	8024d8a <__cxa_guard_release>
 801bfda:	4a06      	ldr	r2, [pc, #24]	; (801bff4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bfdc:	4909      	ldr	r1, [pc, #36]	; (801c004 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801bfde:	480a      	ldr	r0, [pc, #40]	; (801c008 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801bfe0:	f008 fec0 	bl	8024d64 <__aeabi_atexit>
 801bfe4:	4b05      	ldr	r3, [pc, #20]	; (801bffc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bfe6:	672b      	str	r3, [r5, #112]	; 0x70
 801bfe8:	4b07      	ldr	r3, [pc, #28]	; (801c008 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801bfea:	676b      	str	r3, [r5, #116]	; 0x74
 801bfec:	bd38      	pop	{r3, r4, r5, pc}
 801bfee:	bf00      	nop
 801bff0:	20027f34 	.word	0x20027f34
 801bff4:	20000000 	.word	0x20000000
 801bff8:	08019b95 	.word	0x08019b95
 801bffc:	2000007c 	.word	0x2000007c
 801c000:	20027f38 	.word	0x20027f38
 801c004:	08019b93 	.word	0x08019b93
 801c008:	20000080 	.word	0x20000080

0801c00c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c00c:	b538      	push	{r3, r4, r5, lr}
 801c00e:	4c15      	ldr	r4, [pc, #84]	; (801c064 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c010:	4605      	mov	r5, r0
 801c012:	7823      	ldrb	r3, [r4, #0]
 801c014:	f3bf 8f5b 	dmb	ish
 801c018:	07da      	lsls	r2, r3, #31
 801c01a:	d40b      	bmi.n	801c034 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c01c:	4620      	mov	r0, r4
 801c01e:	f008 fea8 	bl	8024d72 <__cxa_guard_acquire>
 801c022:	b138      	cbz	r0, 801c034 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c024:	4620      	mov	r0, r4
 801c026:	f008 feb0 	bl	8024d8a <__cxa_guard_release>
 801c02a:	4a0f      	ldr	r2, [pc, #60]	; (801c068 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c02c:	490f      	ldr	r1, [pc, #60]	; (801c06c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c02e:	4810      	ldr	r0, [pc, #64]	; (801c070 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c030:	f008 fe98 	bl	8024d64 <__aeabi_atexit>
 801c034:	4c0f      	ldr	r4, [pc, #60]	; (801c074 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c036:	7823      	ldrb	r3, [r4, #0]
 801c038:	f3bf 8f5b 	dmb	ish
 801c03c:	07db      	lsls	r3, r3, #31
 801c03e:	d40b      	bmi.n	801c058 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c040:	4620      	mov	r0, r4
 801c042:	f008 fe96 	bl	8024d72 <__cxa_guard_acquire>
 801c046:	b138      	cbz	r0, 801c058 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c048:	4620      	mov	r0, r4
 801c04a:	f008 fe9e 	bl	8024d8a <__cxa_guard_release>
 801c04e:	4a06      	ldr	r2, [pc, #24]	; (801c068 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c050:	4909      	ldr	r1, [pc, #36]	; (801c078 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c052:	480a      	ldr	r0, [pc, #40]	; (801c07c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c054:	f008 fe86 	bl	8024d64 <__aeabi_atexit>
 801c058:	4b05      	ldr	r3, [pc, #20]	; (801c070 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c05a:	66ab      	str	r3, [r5, #104]	; 0x68
 801c05c:	4b07      	ldr	r3, [pc, #28]	; (801c07c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c05e:	66eb      	str	r3, [r5, #108]	; 0x6c
 801c060:	bd38      	pop	{r3, r4, r5, pc}
 801c062:	bf00      	nop
 801c064:	20027f2c 	.word	0x20027f2c
 801c068:	20000000 	.word	0x20000000
 801c06c:	08019b99 	.word	0x08019b99
 801c070:	20000074 	.word	0x20000074
 801c074:	20027f30 	.word	0x20027f30
 801c078:	08019b97 	.word	0x08019b97
 801c07c:	20000078 	.word	0x20000078

0801c080 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801c080:	b510      	push	{r4, lr}
 801c082:	4604      	mov	r4, r0
 801c084:	f7ff ff88 	bl	801bf98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c088:	4620      	mov	r0, r4
 801c08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c08e:	f7ff bfbd 	b.w	801c00c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801c092 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801c092:	b510      	push	{r4, lr}
 801c094:	4604      	mov	r4, r0
 801c096:	f7ff fff3 	bl	801c080 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801c09a:	4620      	mov	r0, r4
 801c09c:	f7ff ff72 	bl	801bf84 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801c0a0:	4620      	mov	r0, r4
 801c0a2:	f7ff fdf9 	bl	801bc98 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	f7ff fcfa 	bl	801baa0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	f7ff fd75 	bl	801bb9c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801c0b2:	4620      	mov	r0, r4
 801c0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0b8:	f7ff bee0 	b.w	801be7c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801c0bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0c0:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801c0c4:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801c0c8:	2d00      	cmp	r5, #0
 801c0ca:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801c0ce:	fb05 4c0e 	mla	ip, r5, lr, r4
 801c0d2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801c0d6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801c0da:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801c0de:	eb02 0a0c 	add.w	sl, r2, ip
 801c0e2:	8808      	ldrh	r0, [r1, #0]
 801c0e4:	f2c0 80b0 	blt.w	801c248 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c0e8:	45ab      	cmp	fp, r5
 801c0ea:	f340 80ad 	ble.w	801c248 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c0ee:	2c00      	cmp	r4, #0
 801c0f0:	f2c0 80a8 	blt.w	801c244 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c0f4:	45a6      	cmp	lr, r4
 801c0f6:	f340 80a5 	ble.w	801c244 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c0fa:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c0fe:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801c102:	1c62      	adds	r2, r4, #1
 801c104:	f100 80a3 	bmi.w	801c24e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c108:	4596      	cmp	lr, r2
 801c10a:	f340 80a0 	ble.w	801c24e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c10e:	f1b9 0f00 	cmp.w	r9, #0
 801c112:	f000 809c 	beq.w	801c24e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c116:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c11a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801c11e:	3501      	adds	r5, #1
 801c120:	f100 8099 	bmi.w	801c256 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c124:	45ab      	cmp	fp, r5
 801c126:	f340 8096 	ble.w	801c256 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c12a:	2f00      	cmp	r7, #0
 801c12c:	f000 8093 	beq.w	801c256 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c130:	2c00      	cmp	r4, #0
 801c132:	f2c0 808e 	blt.w	801c252 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c136:	45a6      	cmp	lr, r4
 801c138:	f340 808b 	ble.w	801c252 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c13c:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801c140:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801c144:	3401      	adds	r4, #1
 801c146:	f100 8089 	bmi.w	801c25c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c14a:	45a6      	cmp	lr, r4
 801c14c:	f340 8086 	ble.w	801c25c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c150:	f1b9 0f00 	cmp.w	r9, #0
 801c154:	f000 8082 	beq.w	801c25c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c158:	44d6      	add	lr, sl
 801c15a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c15e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801c162:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801c166:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801c16a:	fb19 fe07 	smulbb	lr, r9, r7
 801c16e:	f1c7 0210 	rsb	r2, r7, #16
 801c172:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c176:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801c17a:	eba2 0209 	sub.w	r2, r2, r9
 801c17e:	ea44 0808 	orr.w	r8, r4, r8
 801c182:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801c186:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c18a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801c18e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c192:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801c196:	ea44 0c0c 	orr.w	ip, r4, ip
 801c19a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801c19e:	fb04 f40c 	mul.w	r4, r4, ip
 801c1a2:	fb02 4808 	mla	r8, r2, r8, r4
 801c1a6:	041a      	lsls	r2, r3, #16
 801c1a8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c1ac:	b2b4      	uxth	r4, r6
 801c1ae:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c1b2:	43f6      	mvns	r6, r6
 801c1b4:	4313      	orrs	r3, r2
 801c1b6:	042a      	lsls	r2, r5, #16
 801c1b8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c1bc:	b2f6      	uxtb	r6, r6
 801c1be:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c1c2:	fb0e 8303 	mla	r3, lr, r3, r8
 801c1c6:	432a      	orrs	r2, r5
 801c1c8:	fb07 3202 	mla	r2, r7, r2, r3
 801c1cc:	10c7      	asrs	r7, r0, #3
 801c1ce:	0d53      	lsrs	r3, r2, #21
 801c1d0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c1d4:	0952      	lsrs	r2, r2, #5
 801c1d6:	fb17 f706 	smulbb	r7, r7, r6
 801c1da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c1de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c1e2:	431a      	orrs	r2, r3
 801c1e4:	b293      	uxth	r3, r2
 801c1e6:	1202      	asrs	r2, r0, #8
 801c1e8:	121d      	asrs	r5, r3, #8
 801c1ea:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c1ee:	00c0      	lsls	r0, r0, #3
 801c1f0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c1f4:	fb12 f206 	smulbb	r2, r2, r6
 801c1f8:	b2c0      	uxtb	r0, r0
 801c1fa:	fb05 2504 	mla	r5, r5, r4, r2
 801c1fe:	10da      	asrs	r2, r3, #3
 801c200:	fb10 f006 	smulbb	r0, r0, r6
 801c204:	00db      	lsls	r3, r3, #3
 801c206:	b2ad      	uxth	r5, r5
 801c208:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	fb02 7204 	mla	r2, r2, r4, r7
 801c212:	fb03 0004 	mla	r0, r3, r4, r0
 801c216:	1c6b      	adds	r3, r5, #1
 801c218:	b292      	uxth	r2, r2
 801c21a:	b280      	uxth	r0, r0
 801c21c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c220:	1c43      	adds	r3, r0, #1
 801c222:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c226:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c22a:	1c50      	adds	r0, r2, #1
 801c22c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c230:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c234:	0952      	lsrs	r2, r2, #5
 801c236:	432b      	orrs	r3, r5
 801c238:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c23c:	4313      	orrs	r3, r2
 801c23e:	800b      	strh	r3, [r1, #0]
 801c240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c244:	4680      	mov	r8, r0
 801c246:	e75c      	b.n	801c102 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801c248:	4684      	mov	ip, r0
 801c24a:	4680      	mov	r8, r0
 801c24c:	e767      	b.n	801c11e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c24e:	4684      	mov	ip, r0
 801c250:	e765      	b.n	801c11e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c252:	4605      	mov	r5, r0
 801c254:	e776      	b.n	801c144 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801c256:	4603      	mov	r3, r0
 801c258:	4605      	mov	r5, r0
 801c25a:	e782      	b.n	801c162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c25c:	4603      	mov	r3, r0
 801c25e:	e780      	b.n	801c162 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801c260 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c264:	b099      	sub	sp, #100	; 0x64
 801c266:	9215      	str	r2, [sp, #84]	; 0x54
 801c268:	9309      	str	r3, [sp, #36]	; 0x24
 801c26a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c26c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801c270:	9016      	str	r0, [sp, #88]	; 0x58
 801c272:	930d      	str	r3, [sp, #52]	; 0x34
 801c274:	6850      	ldr	r0, [r2, #4]
 801c276:	910c      	str	r1, [sp, #48]	; 0x30
 801c278:	6812      	ldr	r2, [r2, #0]
 801c27a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801c27e:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801c282:	fb00 1303 	mla	r3, r0, r3, r1
 801c286:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801c28a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c290:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c292:	685e      	ldr	r6, [r3, #4]
 801c294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c296:	3604      	adds	r6, #4
 801c298:	43db      	mvns	r3, r3
 801c29a:	b2db      	uxtb	r3, r3
 801c29c:	930a      	str	r3, [sp, #40]	; 0x28
 801c29e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	dc03      	bgt.n	801c2ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c2a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	f340 8225 	ble.w	801c6f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c2ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c2ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c2b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c2b6:	1e48      	subs	r0, r1, #1
 801c2b8:	1e57      	subs	r7, r2, #1
 801c2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	f340 80e3 	ble.w	801c488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c2c2:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801c2c6:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c2ca:	d406      	bmi.n	801c2da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c2cc:	4584      	cmp	ip, r0
 801c2ce:	da04      	bge.n	801c2da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	db02      	blt.n	801c2da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c2d4:	42bb      	cmp	r3, r7
 801c2d6:	f2c0 80d8 	blt.w	801c48a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c2da:	f11c 0c01 	adds.w	ip, ip, #1
 801c2de:	f100 80c9 	bmi.w	801c474 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c2e2:	4561      	cmp	r1, ip
 801c2e4:	f2c0 80c6 	blt.w	801c474 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c2e8:	3301      	adds	r3, #1
 801c2ea:	f100 80c3 	bmi.w	801c474 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c2ee:	429a      	cmp	r2, r3
 801c2f0:	f2c0 80c0 	blt.w	801c474 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c2f4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c2f8:	4647      	mov	r7, r8
 801c2fa:	f1bb 0f00 	cmp.w	fp, #0
 801c2fe:	f340 80e3 	ble.w	801c4c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801c302:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c304:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c308:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c30a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801c30e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c312:	ea5f 422a 	movs.w	r2, sl, asr #16
 801c316:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c31a:	689b      	ldr	r3, [r3, #8]
 801c31c:	f100 8121 	bmi.w	801c562 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c320:	f103 39ff 	add.w	r9, r3, #4294967295
 801c324:	454a      	cmp	r2, r9
 801c326:	f280 811c 	bge.w	801c562 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c32a:	f1bc 0f00 	cmp.w	ip, #0
 801c32e:	f2c0 8118 	blt.w	801c562 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c332:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c336:	45cc      	cmp	ip, r9
 801c338:	f280 8113 	bge.w	801c562 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c33c:	b21b      	sxth	r3, r3
 801c33e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c340:	fb0c 2203 	mla	r2, ip, r3, r2
 801c344:	eb04 0902 	add.w	r9, r4, r2
 801c348:	5ca2      	ldrb	r2, [r4, r2]
 801c34a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801c34e:	2800      	cmp	r0, #0
 801c350:	f000 80fe 	beq.w	801c550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801c354:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c358:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801c35c:	9211      	str	r2, [sp, #68]	; 0x44
 801c35e:	b151      	cbz	r1, 801c376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c360:	eb09 0203 	add.w	r2, r9, r3
 801c364:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c368:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c36c:	930f      	str	r3, [sp, #60]	; 0x3c
 801c36e:	7853      	ldrb	r3, [r2, #1]
 801c370:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c374:	9312      	str	r3, [sp, #72]	; 0x48
 801c376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c378:	fb10 f201 	smulbb	r2, r0, r1
 801c37c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c37e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c382:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c386:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801c38a:	10d2      	asrs	r2, r2, #3
 801c38c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c390:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801c394:	ea4c 0c03 	orr.w	ip, ip, r3
 801c398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c39a:	041b      	lsls	r3, r3, #16
 801c39c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c3a0:	4323      	orrs	r3, r4
 801c3a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c3a4:	4353      	muls	r3, r2
 801c3a6:	fb09 330c 	mla	r3, r9, ip, r3
 801c3aa:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c3ae:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c3b2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c3b6:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c3ba:	f1c1 0c10 	rsb	ip, r1, #16
 801c3be:	ebac 0c00 	sub.w	ip, ip, r0
 801c3c2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c3c6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c3ca:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c3ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3d0:	0418      	lsls	r0, r3, #16
 801c3d2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c3d6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c3da:	4318      	orrs	r0, r3
 801c3dc:	fb02 c200 	mla	r2, r2, r0, ip
 801c3e0:	8838      	ldrh	r0, [r7, #0]
 801c3e2:	0d53      	lsrs	r3, r2, #21
 801c3e4:	0952      	lsrs	r2, r2, #5
 801c3e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c3ea:	1201      	asrs	r1, r0, #8
 801c3ec:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c3f0:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801c3f4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c3f8:	00c0      	lsls	r0, r0, #3
 801c3fa:	431a      	orrs	r2, r3
 801c3fc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801c400:	fb11 f104 	smulbb	r1, r1, r4
 801c404:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c408:	b292      	uxth	r2, r2
 801c40a:	fb1e fe04 	smulbb	lr, lr, r4
 801c40e:	b2c0      	uxtb	r0, r0
 801c410:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801c414:	fb10 f004 	smulbb	r0, r0, r4
 801c418:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c41c:	fb0c 1c03 	mla	ip, ip, r3, r1
 801c420:	10d1      	asrs	r1, r2, #3
 801c422:	00d2      	lsls	r2, r2, #3
 801c424:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c428:	fa1f fc8c 	uxth.w	ip, ip
 801c42c:	b2d2      	uxtb	r2, r2
 801c42e:	fb01 e103 	mla	r1, r1, r3, lr
 801c432:	fb02 0303 	mla	r3, r2, r3, r0
 801c436:	b289      	uxth	r1, r1
 801c438:	b29a      	uxth	r2, r3
 801c43a:	f10c 0301 	add.w	r3, ip, #1
 801c43e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c442:	1c53      	adds	r3, r2, #1
 801c444:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c448:	1c4a      	adds	r2, r1, #1
 801c44a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c44e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c452:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c456:	0949      	lsrs	r1, r1, #5
 801c458:	ea43 030c 	orr.w	r3, r3, ip
 801c45c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c460:	430b      	orrs	r3, r1
 801c462:	803b      	strh	r3, [r7, #0]
 801c464:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c466:	3702      	adds	r7, #2
 801c468:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c46c:	449a      	add	sl, r3
 801c46e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c470:	441d      	add	r5, r3
 801c472:	e742      	b.n	801c2fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c474:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c476:	f108 0802 	add.w	r8, r8, #2
 801c47a:	449a      	add	sl, r3
 801c47c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c47e:	441d      	add	r5, r3
 801c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c482:	3b01      	subs	r3, #1
 801c484:	9309      	str	r3, [sp, #36]	; 0x24
 801c486:	e718      	b.n	801c2ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c488:	d023      	beq.n	801c4d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801c48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c48c:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c48e:	3b01      	subs	r3, #1
 801c490:	fb00 a003 	mla	r0, r0, r3, sl
 801c494:	1400      	asrs	r0, r0, #16
 801c496:	f53f af2d 	bmi.w	801c2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c49a:	3901      	subs	r1, #1
 801c49c:	4288      	cmp	r0, r1
 801c49e:	f6bf af29 	bge.w	801c2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c4a2:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c4a4:	fb01 5303 	mla	r3, r1, r3, r5
 801c4a8:	141b      	asrs	r3, r3, #16
 801c4aa:	f53f af23 	bmi.w	801c2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c4ae:	3a01      	subs	r2, #1
 801c4b0:	4293      	cmp	r3, r2
 801c4b2:	f6bf af1f 	bge.w	801c2f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c4b6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801c4ba:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801c4be:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c4c2:	f1be 0f00 	cmp.w	lr, #0
 801c4c6:	dc6c      	bgt.n	801c5a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4ca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c4ce:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801c4d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	f340 810e 	ble.w	801c6f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c4da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c4de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c4e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4e8:	eef0 6a62 	vmov.f32	s13, s5
 801c4ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c4f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4f8:	ee16 aa90 	vmov	sl, s13
 801c4fc:	eef0 6a43 	vmov.f32	s13, s6
 801c500:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c504:	ee16 5a90 	vmov	r5, s13
 801c508:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c50c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c510:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c514:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c518:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c51c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c520:	ee12 2a90 	vmov	r2, s5
 801c524:	eef0 2a47 	vmov.f32	s5, s14
 801c528:	fb92 f3f3 	sdiv	r3, r2, r3
 801c52c:	ee13 2a10 	vmov	r2, s6
 801c530:	9325      	str	r3, [sp, #148]	; 0x94
 801c532:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c534:	eeb0 3a67 	vmov.f32	s6, s15
 801c538:	fb92 f3f3 	sdiv	r3, r2, r3
 801c53c:	9326      	str	r3, [sp, #152]	; 0x98
 801c53e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c540:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c542:	3b01      	subs	r3, #1
 801c544:	930c      	str	r3, [sp, #48]	; 0x30
 801c546:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c548:	bf08      	it	eq
 801c54a:	4613      	moveq	r3, r2
 801c54c:	9309      	str	r3, [sp, #36]	; 0x24
 801c54e:	e6a6      	b.n	801c29e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c550:	2900      	cmp	r1, #0
 801c552:	f43f af10 	beq.w	801c376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c556:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c55a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c55e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c560:	e709      	b.n	801c376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c562:	f112 0901 	adds.w	r9, r2, #1
 801c566:	f53f af7d 	bmi.w	801c464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c56a:	454b      	cmp	r3, r9
 801c56c:	f6ff af7a 	blt.w	801c464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c570:	f11c 0901 	adds.w	r9, ip, #1
 801c574:	f53f af76 	bmi.w	801c464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c578:	45ce      	cmp	lr, r9
 801c57a:	f6ff af73 	blt.w	801c464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c57e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c580:	b21b      	sxth	r3, r3
 801c582:	9202      	str	r2, [sp, #8]
 801c584:	fa0f f28e 	sxth.w	r2, lr
 801c588:	9300      	str	r3, [sp, #0]
 801c58a:	4633      	mov	r3, r6
 801c58c:	9201      	str	r2, [sp, #4]
 801c58e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c590:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c594:	e9cd c003 	strd	ip, r0, [sp, #12]
 801c598:	4639      	mov	r1, r7
 801c59a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c59c:	f7ff fd8e 	bl	801c0bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801c5a0:	e760      	b.n	801c464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c5a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c5a4:	ea4f 422a 	mov.w	r2, sl, asr #16
 801c5a8:	1429      	asrs	r1, r5, #16
 801c5aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c5ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c5b0:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801c5b4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c5b8:	fb03 2101 	mla	r1, r3, r1, r2
 801c5bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c5be:	440a      	add	r2, r1
 801c5c0:	5c61      	ldrb	r1, [r4, r1]
 801c5c2:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801c5c6:	f1bc 0f00 	cmp.w	ip, #0
 801c5ca:	f000 808c 	beq.w	801c6e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801c5ce:	7857      	ldrb	r7, [r2, #1]
 801c5d0:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801c5d4:	9413      	str	r4, [sp, #76]	; 0x4c
 801c5d6:	b140      	cbz	r0, 801c5ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c5d8:	18d7      	adds	r7, r2, r3
 801c5da:	5cd3      	ldrb	r3, [r2, r3]
 801c5dc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c5e0:	9310      	str	r3, [sp, #64]	; 0x40
 801c5e2:	787b      	ldrb	r3, [r7, #1]
 801c5e4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c5e8:	9314      	str	r3, [sp, #80]	; 0x50
 801c5ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c5ec:	fb1c f200 	smulbb	r2, ip, r0
 801c5f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c5f2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c5f6:	041f      	lsls	r7, r3, #16
 801c5f8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c5fc:	10d2      	asrs	r2, r2, #3
 801c5fe:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801c602:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801c606:	431f      	orrs	r7, r3
 801c608:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801c60c:	9317      	str	r3, [sp, #92]	; 0x5c
 801c60e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c610:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c612:	041b      	lsls	r3, r3, #16
 801c614:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c618:	ea43 030b 	orr.w	r3, r3, fp
 801c61c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c620:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c624:	4353      	muls	r3, r2
 801c626:	fb04 3707 	mla	r7, r4, r7, r3
 801c62a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801c62e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c630:	ea43 0b01 	orr.w	fp, r3, r1
 801c634:	f1c0 0110 	rsb	r1, r0, #16
 801c638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c63a:	eba1 0c0c 	sub.w	ip, r1, ip
 801c63e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c642:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801c646:	fb0c 770b 	mla	r7, ip, fp, r7
 801c64a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c64e:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801c652:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c656:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c65a:	fb02 770c 	mla	r7, r2, ip, r7
 801c65e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c660:	0d79      	lsrs	r1, r7, #21
 801c662:	8812      	ldrh	r2, [r2, #0]
 801c664:	097f      	lsrs	r7, r7, #5
 801c666:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c66a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c66e:	430f      	orrs	r7, r1
 801c670:	1211      	asrs	r1, r2, #8
 801c672:	b2bb      	uxth	r3, r7
 801c674:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c678:	10d7      	asrs	r7, r2, #3
 801c67a:	fb11 f104 	smulbb	r1, r1, r4
 801c67e:	1218      	asrs	r0, r3, #8
 801c680:	00d2      	lsls	r2, r2, #3
 801c682:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c686:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c68a:	fb17 f704 	smulbb	r7, r7, r4
 801c68e:	b2d2      	uxtb	r2, r2
 801c690:	fb00 1009 	mla	r0, r0, r9, r1
 801c694:	10d9      	asrs	r1, r3, #3
 801c696:	fb12 f204 	smulbb	r2, r2, r4
 801c69a:	00db      	lsls	r3, r3, #3
 801c69c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c6a0:	b280      	uxth	r0, r0
 801c6a2:	b2db      	uxtb	r3, r3
 801c6a4:	fb01 7109 	mla	r1, r1, r9, r7
 801c6a8:	fb03 2309 	mla	r3, r3, r9, r2
 801c6ac:	1c42      	adds	r2, r0, #1
 801c6ae:	b289      	uxth	r1, r1
 801c6b0:	b29b      	uxth	r3, r3
 801c6b2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c6b6:	1c4f      	adds	r7, r1, #1
 801c6b8:	1c5a      	adds	r2, r3, #1
 801c6ba:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801c6be:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c6c2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c6c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6c8:	0949      	lsrs	r1, r1, #5
 801c6ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c6ce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c6d2:	4310      	orrs	r0, r2
 801c6d4:	4308      	orrs	r0, r1
 801c6d6:	f823 0b02 	strh.w	r0, [r3], #2
 801c6da:	930e      	str	r3, [sp, #56]	; 0x38
 801c6dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c6de:	449a      	add	sl, r3
 801c6e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c6e2:	441d      	add	r5, r3
 801c6e4:	e6ed      	b.n	801c4c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801c6e6:	2800      	cmp	r0, #0
 801c6e8:	f43f af7f 	beq.w	801c5ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c6ec:	5cd3      	ldrb	r3, [r2, r3]
 801c6ee:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c6f2:	9310      	str	r3, [sp, #64]	; 0x40
 801c6f4:	e779      	b.n	801c5ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c6f6:	b019      	add	sp, #100	; 0x64
 801c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c700:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801c704:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801c708:	f1b8 0f00 	cmp.w	r8, #0
 801c70c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801c710:	fb08 470e 	mla	r7, r8, lr, r4
 801c714:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801c718:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801c71c:	eb02 0907 	add.w	r9, r2, r7
 801c720:	8808      	ldrh	r0, [r1, #0]
 801c722:	db67      	blt.n	801c7f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801c724:	45c2      	cmp	sl, r8
 801c726:	dd65      	ble.n	801c7f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801c728:	2c00      	cmp	r4, #0
 801c72a:	db61      	blt.n	801c7f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801c72c:	45a6      	cmp	lr, r4
 801c72e:	dd5f      	ble.n	801c7f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801c730:	5dd2      	ldrb	r2, [r2, r7]
 801c732:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801c736:	1c62      	adds	r2, r4, #1
 801c738:	d45f      	bmi.n	801c7fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801c73a:	4596      	cmp	lr, r2
 801c73c:	dd5d      	ble.n	801c7fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801c73e:	2d00      	cmp	r5, #0
 801c740:	d05b      	beq.n	801c7fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801c742:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c746:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801c74a:	f118 0801 	adds.w	r8, r8, #1
 801c74e:	d458      	bmi.n	801c802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801c750:	45c2      	cmp	sl, r8
 801c752:	dd56      	ble.n	801c802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801c754:	2e00      	cmp	r6, #0
 801c756:	d054      	beq.n	801c802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801c758:	2c00      	cmp	r4, #0
 801c75a:	db50      	blt.n	801c7fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801c75c:	45a6      	cmp	lr, r4
 801c75e:	dd4e      	ble.n	801c7fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801c760:	f819 200e 	ldrb.w	r2, [r9, lr]
 801c764:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801c768:	3401      	adds	r4, #1
 801c76a:	d407      	bmi.n	801c77c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801c76c:	45a6      	cmp	lr, r4
 801c76e:	dd05      	ble.n	801c77c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801c770:	b125      	cbz	r5, 801c77c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801c772:	44ce      	add	lr, r9
 801c774:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801c778:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801c77c:	fb15 f406 	smulbb	r4, r5, r6
 801c780:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801c784:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801c788:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c78c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c790:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801c794:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801c798:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c79c:	ea43 0c0c 	orr.w	ip, r3, ip
 801c7a0:	f1c6 0310 	rsb	r3, r6, #16
 801c7a4:	ea4e 0707 	orr.w	r7, lr, r7
 801c7a8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801c7ac:	1b5b      	subs	r3, r3, r5
 801c7ae:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801c7b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c7b6:	437d      	muls	r5, r7
 801c7b8:	fb03 5c0c 	mla	ip, r3, ip, r5
 801c7bc:	0403      	lsls	r3, r0, #16
 801c7be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c7c2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c7c6:	4318      	orrs	r0, r3
 801c7c8:	0413      	lsls	r3, r2, #16
 801c7ca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c7ce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c7d2:	fb04 c000 	mla	r0, r4, r0, ip
 801c7d6:	4313      	orrs	r3, r2
 801c7d8:	fb06 0003 	mla	r0, r6, r3, r0
 801c7dc:	0d43      	lsrs	r3, r0, #21
 801c7de:	0940      	lsrs	r0, r0, #5
 801c7e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c7e4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c7e8:	4318      	orrs	r0, r3
 801c7ea:	8008      	strh	r0, [r1, #0]
 801c7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7f0:	4684      	mov	ip, r0
 801c7f2:	e7a0      	b.n	801c736 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801c7f4:	4607      	mov	r7, r0
 801c7f6:	4684      	mov	ip, r0
 801c7f8:	e7a7      	b.n	801c74a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801c7fa:	4607      	mov	r7, r0
 801c7fc:	e7a5      	b.n	801c74a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801c7fe:	4602      	mov	r2, r0
 801c800:	e7b2      	b.n	801c768 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801c802:	4602      	mov	r2, r0
 801c804:	e7ba      	b.n	801c77c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801c806 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c80a:	b093      	sub	sp, #76	; 0x4c
 801c80c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c810:	920f      	str	r2, [sp, #60]	; 0x3c
 801c812:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c814:	9010      	str	r0, [sp, #64]	; 0x40
 801c816:	9108      	str	r1, [sp, #32]
 801c818:	6850      	ldr	r0, [r2, #4]
 801c81a:	9306      	str	r3, [sp, #24]
 801c81c:	6812      	ldr	r2, [r2, #0]
 801c81e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801c822:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801c826:	fb00 1303 	mla	r3, r0, r3, r1
 801c82a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801c82e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	9307      	str	r3, [sp, #28]
 801c834:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c836:	685f      	ldr	r7, [r3, #4]
 801c838:	3704      	adds	r7, #4
 801c83a:	9b08      	ldr	r3, [sp, #32]
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	dc03      	bgt.n	801c848 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c842:	2b00      	cmp	r3, #0
 801c844:	f340 81b2 	ble.w	801cbac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801c848:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c84a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c84e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c852:	1e48      	subs	r0, r1, #1
 801c854:	f102 3cff 	add.w	ip, r2, #4294967295
 801c858:	9b06      	ldr	r3, [sp, #24]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	f340 80a9 	ble.w	801c9b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c860:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c864:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c868:	d406      	bmi.n	801c878 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c86a:	4586      	cmp	lr, r0
 801c86c:	da04      	bge.n	801c878 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c86e:	2b00      	cmp	r3, #0
 801c870:	db02      	blt.n	801c878 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c872:	4563      	cmp	r3, ip
 801c874:	f2c0 809e 	blt.w	801c9b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c878:	f11e 0e01 	adds.w	lr, lr, #1
 801c87c:	f100 808f 	bmi.w	801c99e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c880:	4571      	cmp	r1, lr
 801c882:	f2c0 808c 	blt.w	801c99e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c886:	3301      	adds	r3, #1
 801c888:	f100 8089 	bmi.w	801c99e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c88c:	429a      	cmp	r2, r3
 801c88e:	f2c0 8086 	blt.w	801c99e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c892:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c896:	46c8      	mov	r8, r9
 801c898:	f1bb 0f00 	cmp.w	fp, #0
 801c89c:	f340 80a6 	ble.w	801c9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c8a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c8a2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c8a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c8a8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c8ac:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c8b0:	1422      	asrs	r2, r4, #16
 801c8b2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c8b6:	689b      	ldr	r3, [r3, #8]
 801c8b8:	f100 80e3 	bmi.w	801ca82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c8bc:	f103 3aff 	add.w	sl, r3, #4294967295
 801c8c0:	4552      	cmp	r2, sl
 801c8c2:	f280 80de 	bge.w	801ca82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c8c6:	f1bc 0f00 	cmp.w	ip, #0
 801c8ca:	f2c0 80da 	blt.w	801ca82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c8ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 801c8d2:	45d4      	cmp	ip, sl
 801c8d4:	f280 80d5 	bge.w	801ca82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c8d8:	b21b      	sxth	r3, r3
 801c8da:	9d07      	ldr	r5, [sp, #28]
 801c8dc:	fb0c 2203 	mla	r2, ip, r3, r2
 801c8e0:	eb05 0a02 	add.w	sl, r5, r2
 801c8e4:	5caa      	ldrb	r2, [r5, r2]
 801c8e6:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801c8ea:	2800      	cmp	r0, #0
 801c8ec:	f000 80c0 	beq.w	801ca70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c8f0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c8f4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801c8f8:	920b      	str	r2, [sp, #44]	; 0x2c
 801c8fa:	b151      	cbz	r1, 801c912 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801c8fc:	eb0a 0203 	add.w	r2, sl, r3
 801c900:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c904:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c908:	9309      	str	r3, [sp, #36]	; 0x24
 801c90a:	7853      	ldrb	r3, [r2, #1]
 801c90c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c910:	930c      	str	r3, [sp, #48]	; 0x30
 801c912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c914:	fb10 f201 	smulbb	r2, r0, r1
 801c918:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c91a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c91e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c922:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c926:	10d2      	asrs	r2, r2, #3
 801c928:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c92c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801c930:	ea4c 0c03 	orr.w	ip, ip, r3
 801c934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c936:	041b      	lsls	r3, r3, #16
 801c938:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c93c:	432b      	orrs	r3, r5
 801c93e:	4353      	muls	r3, r2
 801c940:	fb0a 330c 	mla	r3, sl, ip, r3
 801c944:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c948:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c94c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c950:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c954:	f1c1 0c10 	rsb	ip, r1, #16
 801c958:	ebac 0c00 	sub.w	ip, ip, r0
 801c95c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c960:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c964:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c96a:	0418      	lsls	r0, r3, #16
 801c96c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c970:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c974:	4318      	orrs	r0, r3
 801c976:	fb02 c200 	mla	r2, r2, r0, ip
 801c97a:	0d53      	lsrs	r3, r2, #21
 801c97c:	0952      	lsrs	r2, r2, #5
 801c97e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c982:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c986:	431a      	orrs	r2, r3
 801c988:	f8a8 2000 	strh.w	r2, [r8]
 801c98c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c98e:	f108 0802 	add.w	r8, r8, #2
 801c992:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c996:	441c      	add	r4, r3
 801c998:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c99a:	441e      	add	r6, r3
 801c99c:	e77c      	b.n	801c898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c99e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c9a0:	f109 0902 	add.w	r9, r9, #2
 801c9a4:	441c      	add	r4, r3
 801c9a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c9a8:	441e      	add	r6, r3
 801c9aa:	9b06      	ldr	r3, [sp, #24]
 801c9ac:	3b01      	subs	r3, #1
 801c9ae:	9306      	str	r3, [sp, #24]
 801c9b0:	e752      	b.n	801c858 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c9b2:	d020      	beq.n	801c9f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c9b4:	9b06      	ldr	r3, [sp, #24]
 801c9b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c9b8:	3b01      	subs	r3, #1
 801c9ba:	fb00 4003 	mla	r0, r0, r3, r4
 801c9be:	1400      	asrs	r0, r0, #16
 801c9c0:	f53f af67 	bmi.w	801c892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c9c4:	3901      	subs	r1, #1
 801c9c6:	4288      	cmp	r0, r1
 801c9c8:	f6bf af63 	bge.w	801c892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c9cc:	9920      	ldr	r1, [sp, #128]	; 0x80
 801c9ce:	fb01 6303 	mla	r3, r1, r3, r6
 801c9d2:	141b      	asrs	r3, r3, #16
 801c9d4:	f53f af5d 	bmi.w	801c892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c9d8:	3a01      	subs	r2, #1
 801c9da:	4293      	cmp	r3, r2
 801c9dc:	f6bf af59 	bge.w	801c892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c9e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c9e4:	46ca      	mov	sl, r9
 801c9e6:	f1b8 0f00 	cmp.w	r8, #0
 801c9ea:	dc67      	bgt.n	801cabc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c9ec:	9b06      	ldr	r3, [sp, #24]
 801c9ee:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c9f2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801c9f6:	9b08      	ldr	r3, [sp, #32]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	f340 80d7 	ble.w	801cbac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801c9fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca02:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca08:	eeb0 6a62 	vmov.f32	s12, s5
 801ca0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca10:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca18:	ee16 4a10 	vmov	r4, s12
 801ca1c:	eeb0 6a43 	vmov.f32	s12, s6
 801ca20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca24:	ee16 6a10 	vmov	r6, s12
 801ca28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca30:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca40:	ee12 2a90 	vmov	r2, s5
 801ca44:	eef0 2a47 	vmov.f32	s5, s14
 801ca48:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca4c:	ee13 2a10 	vmov	r2, s6
 801ca50:	931f      	str	r3, [sp, #124]	; 0x7c
 801ca52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca54:	eeb0 3a67 	vmov.f32	s6, s15
 801ca58:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca5c:	9320      	str	r3, [sp, #128]	; 0x80
 801ca5e:	9b08      	ldr	r3, [sp, #32]
 801ca60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ca62:	3b01      	subs	r3, #1
 801ca64:	9308      	str	r3, [sp, #32]
 801ca66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca68:	bf08      	it	eq
 801ca6a:	4613      	moveq	r3, r2
 801ca6c:	9306      	str	r3, [sp, #24]
 801ca6e:	e6e4      	b.n	801c83a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ca70:	2900      	cmp	r1, #0
 801ca72:	f43f af4e 	beq.w	801c912 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ca76:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ca7a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ca7e:	9309      	str	r3, [sp, #36]	; 0x24
 801ca80:	e747      	b.n	801c912 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ca82:	f112 0a01 	adds.w	sl, r2, #1
 801ca86:	d481      	bmi.n	801c98c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ca88:	4553      	cmp	r3, sl
 801ca8a:	f6ff af7f 	blt.w	801c98c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ca8e:	f11c 0a01 	adds.w	sl, ip, #1
 801ca92:	f53f af7b 	bmi.w	801c98c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ca96:	45d6      	cmp	lr, sl
 801ca98:	f6ff af78 	blt.w	801c98c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ca9c:	b21b      	sxth	r3, r3
 801ca9e:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801caa2:	fa0f f28e 	sxth.w	r2, lr
 801caa6:	9300      	str	r3, [sp, #0]
 801caa8:	463b      	mov	r3, r7
 801caaa:	9201      	str	r2, [sp, #4]
 801caac:	9a07      	ldr	r2, [sp, #28]
 801caae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cab2:	4641      	mov	r1, r8
 801cab4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801cab6:	f7ff fe21 	bl	801c6fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801caba:	e767      	b.n	801c98c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cabc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cabe:	1422      	asrs	r2, r4, #16
 801cac0:	1431      	asrs	r1, r6, #16
 801cac2:	9d07      	ldr	r5, [sp, #28]
 801cac4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801cac8:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801cacc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cad0:	fb03 2101 	mla	r1, r3, r1, r2
 801cad4:	9a07      	ldr	r2, [sp, #28]
 801cad6:	440a      	add	r2, r1
 801cad8:	5c69      	ldrb	r1, [r5, r1]
 801cada:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801cade:	f1be 0f00 	cmp.w	lr, #0
 801cae2:	d05c      	beq.n	801cb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801cae4:	f892 c001 	ldrb.w	ip, [r2, #1]
 801cae8:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801caec:	950d      	str	r5, [sp, #52]	; 0x34
 801caee:	b150      	cbz	r0, 801cb06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801caf0:	eb02 0c03 	add.w	ip, r2, r3
 801caf4:	5cd3      	ldrb	r3, [r2, r3]
 801caf6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cafa:	930a      	str	r3, [sp, #40]	; 0x28
 801cafc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801cb00:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cb04:	930e      	str	r3, [sp, #56]	; 0x38
 801cb06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb08:	fb1e f200 	smulbb	r2, lr, r0
 801cb0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801cb0e:	f108 38ff 	add.w	r8, r8, #4294967295
 801cb12:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cb16:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cb1a:	10d2      	asrs	r2, r2, #3
 801cb1c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801cb20:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cb24:	ea4c 0c03 	orr.w	ip, ip, r3
 801cb28:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801cb2c:	9311      	str	r3, [sp, #68]	; 0x44
 801cb2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cb32:	041b      	lsls	r3, r3, #16
 801cb34:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cb38:	ea43 030b 	orr.w	r3, r3, fp
 801cb3c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cb40:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cb44:	4353      	muls	r3, r2
 801cb46:	fb05 3c0c 	mla	ip, r5, ip, r3
 801cb4a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801cb4e:	ea43 0b01 	orr.w	fp, r3, r1
 801cb52:	f1c0 0110 	rsb	r1, r0, #16
 801cb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb58:	eba1 0e0e 	sub.w	lr, r1, lr
 801cb5c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801cb60:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801cb64:	fb0e cc0b 	mla	ip, lr, fp, ip
 801cb68:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801cb6c:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801cb70:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cb74:	ea4b 0e0e 	orr.w	lr, fp, lr
 801cb78:	fb02 cc0e 	mla	ip, r2, lr, ip
 801cb7c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801cb80:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cb84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cb88:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801cb8c:	ea43 0c0c 	orr.w	ip, r3, ip
 801cb90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cb92:	441c      	add	r4, r3
 801cb94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cb96:	f82a cb02 	strh.w	ip, [sl], #2
 801cb9a:	441e      	add	r6, r3
 801cb9c:	e723      	b.n	801c9e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cb9e:	2800      	cmp	r0, #0
 801cba0:	d0b1      	beq.n	801cb06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801cba2:	5cd3      	ldrb	r3, [r2, r3]
 801cba4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cba8:	930a      	str	r3, [sp, #40]	; 0x28
 801cbaa:	e7ac      	b.n	801cb06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801cbac:	b013      	add	sp, #76	; 0x4c
 801cbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cbb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801cbb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbb6:	880d      	ldrh	r5, [r1, #0]
 801cbb8:	b087      	sub	sp, #28
 801cbba:	10ef      	asrs	r7, r5, #3
 801cbbc:	9103      	str	r1, [sp, #12]
 801cbbe:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801cbc2:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801cbc6:	00ed      	lsls	r5, r5, #3
 801cbc8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cbcc:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801cbd0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801cbd4:	b2ed      	uxtb	r5, r5
 801cbd6:	9701      	str	r7, [sp, #4]
 801cbd8:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801cbdc:	9502      	str	r5, [sp, #8]
 801cbde:	9d01      	ldr	r5, [sp, #4]
 801cbe0:	9902      	ldr	r1, [sp, #8]
 801cbe2:	022d      	lsls	r5, r5, #8
 801cbe4:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801cbe8:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801cbec:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801cbf0:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801cbf4:	430d      	orrs	r5, r1
 801cbf6:	fb06 0709 	mla	r7, r6, r9, r0
 801cbfa:	2e00      	cmp	r6, #0
 801cbfc:	9505      	str	r5, [sp, #20]
 801cbfe:	eb02 0c07 	add.w	ip, r2, r7
 801cc02:	f2c0 80b6 	blt.w	801cd72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801cc06:	45b3      	cmp	fp, r6
 801cc08:	f340 80b3 	ble.w	801cd72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801cc0c:	2800      	cmp	r0, #0
 801cc0e:	f2c0 80ae 	blt.w	801cd6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801cc12:	4581      	cmp	r9, r0
 801cc14:	f340 80ab 	ble.w	801cd6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801cc18:	5dd7      	ldrb	r7, [r2, r7]
 801cc1a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cc1e:	441f      	add	r7, r3
 801cc20:	1c42      	adds	r2, r0, #1
 801cc22:	f100 80a9 	bmi.w	801cd78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cc26:	4591      	cmp	r9, r2
 801cc28:	f340 80a6 	ble.w	801cd78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cc2c:	2c00      	cmp	r4, #0
 801cc2e:	f000 80a3 	beq.w	801cd78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cc32:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801cc36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc3a:	441d      	add	r5, r3
 801cc3c:	3601      	adds	r6, #1
 801cc3e:	f100 809f 	bmi.w	801cd80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801cc42:	45b3      	cmp	fp, r6
 801cc44:	f340 809c 	ble.w	801cd80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801cc48:	f1be 0f00 	cmp.w	lr, #0
 801cc4c:	f000 8098 	beq.w	801cd80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801cc50:	2800      	cmp	r0, #0
 801cc52:	f2c0 8093 	blt.w	801cd7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801cc56:	4581      	cmp	r9, r0
 801cc58:	f340 8090 	ble.w	801cd7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801cc5c:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801cc60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cc64:	441e      	add	r6, r3
 801cc66:	3001      	adds	r0, #1
 801cc68:	f100 808d 	bmi.w	801cd86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801cc6c:	4581      	cmp	r9, r0
 801cc6e:	f340 808a 	ble.w	801cd86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801cc72:	2c00      	cmp	r4, #0
 801cc74:	f000 8087 	beq.w	801cd86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801cc78:	44e1      	add	r9, ip
 801cc7a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801cc7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cc82:	4413      	add	r3, r2
 801cc84:	b2a4      	uxth	r4, r4
 801cc86:	f897 c002 	ldrb.w	ip, [r7, #2]
 801cc8a:	fa1f fe8e 	uxth.w	lr, lr
 801cc8e:	9901      	ldr	r1, [sp, #4]
 801cc90:	fb04 fb0e 	mul.w	fp, r4, lr
 801cc94:	0124      	lsls	r4, r4, #4
 801cc96:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801cc9a:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801cc9e:	eba4 040b 	sub.w	r4, r4, fp
 801cca2:	fa1f f08e 	uxth.w	r0, lr
 801cca6:	b2a2      	uxth	r2, r4
 801cca8:	78ac      	ldrb	r4, [r5, #2]
 801ccaa:	eba9 0900 	sub.w	r9, r9, r0
 801ccae:	fa1f fe88 	uxth.w	lr, r8
 801ccb2:	4354      	muls	r4, r2
 801ccb4:	ea6f 0808 	mvn.w	r8, r8
 801ccb8:	fa1f f989 	uxth.w	r9, r9
 801ccbc:	fa5f f888 	uxtb.w	r8, r8
 801ccc0:	fb09 440c 	mla	r4, r9, ip, r4
 801ccc4:	f896 c002 	ldrb.w	ip, [r6, #2]
 801ccc8:	fb1a fa08 	smulbb	sl, sl, r8
 801cccc:	fb00 440c 	mla	r4, r0, ip, r4
 801ccd0:	f893 c002 	ldrb.w	ip, [r3, #2]
 801ccd4:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801ccd8:	787c      	ldrb	r4, [r7, #1]
 801ccda:	783f      	ldrb	r7, [r7, #0]
 801ccdc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cce0:	fb0c ac0e 	mla	ip, ip, lr, sl
 801cce4:	f895 a001 	ldrb.w	sl, [r5, #1]
 801cce8:	782d      	ldrb	r5, [r5, #0]
 801ccea:	fb02 fa0a 	mul.w	sl, r2, sl
 801ccee:	fa1f fc8c 	uxth.w	ip, ip
 801ccf2:	436a      	muls	r2, r5
 801ccf4:	7835      	ldrb	r5, [r6, #0]
 801ccf6:	fb09 aa04 	mla	sl, r9, r4, sl
 801ccfa:	7874      	ldrb	r4, [r6, #1]
 801ccfc:	fb09 2207 	mla	r2, r9, r7, r2
 801cd00:	fb00 aa04 	mla	sl, r0, r4, sl
 801cd04:	785c      	ldrb	r4, [r3, #1]
 801cd06:	fb00 2005 	mla	r0, r0, r5, r2
 801cd0a:	781b      	ldrb	r3, [r3, #0]
 801cd0c:	fb0b a404 	mla	r4, fp, r4, sl
 801cd10:	fb11 fa08 	smulbb	sl, r1, r8
 801cd14:	fb0b 0b03 	mla	fp, fp, r3, r0
 801cd18:	9b02      	ldr	r3, [sp, #8]
 801cd1a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801cd1e:	fb13 f808 	smulbb	r8, r3, r8
 801cd22:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801cd26:	fb04 a40e 	mla	r4, r4, lr, sl
 801cd2a:	f10c 0301 	add.w	r3, ip, #1
 801cd2e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801cd32:	b2a4      	uxth	r4, r4
 801cd34:	fa1f fe8e 	uxth.w	lr, lr
 801cd38:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801cd3c:	f104 0a01 	add.w	sl, r4, #1
 801cd40:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801cd44:	f10e 0c01 	add.w	ip, lr, #1
 801cd48:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801cd4c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cd50:	0964      	lsrs	r4, r4, #5
 801cd52:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cd56:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801cd5a:	ea4c 0c03 	orr.w	ip, ip, r3
 801cd5e:	9b03      	ldr	r3, [sp, #12]
 801cd60:	ea4c 0c04 	orr.w	ip, ip, r4
 801cd64:	f8a3 c000 	strh.w	ip, [r3]
 801cd68:	b007      	add	sp, #28
 801cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd6e:	af05      	add	r7, sp, #20
 801cd70:	e756      	b.n	801cc20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801cd72:	ad05      	add	r5, sp, #20
 801cd74:	462f      	mov	r7, r5
 801cd76:	e761      	b.n	801cc3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801cd78:	ad05      	add	r5, sp, #20
 801cd7a:	e75f      	b.n	801cc3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801cd7c:	ae05      	add	r6, sp, #20
 801cd7e:	e772      	b.n	801cc66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801cd80:	ab05      	add	r3, sp, #20
 801cd82:	461e      	mov	r6, r3
 801cd84:	e77e      	b.n	801cc84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801cd86:	ab05      	add	r3, sp, #20
 801cd88:	e77c      	b.n	801cc84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801cd8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd8e:	b095      	sub	sp, #84	; 0x54
 801cd90:	9212      	str	r2, [sp, #72]	; 0x48
 801cd92:	9309      	str	r3, [sp, #36]	; 0x24
 801cd94:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801cd96:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801cd9a:	9013      	str	r0, [sp, #76]	; 0x4c
 801cd9c:	930f      	str	r3, [sp, #60]	; 0x3c
 801cd9e:	6850      	ldr	r0, [r2, #4]
 801cda0:	910e      	str	r1, [sp, #56]	; 0x38
 801cda2:	6812      	ldr	r2, [r2, #0]
 801cda4:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801cda8:	fb00 1303 	mla	r3, r0, r3, r1
 801cdac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cdb0:	930a      	str	r3, [sp, #40]	; 0x28
 801cdb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	930d      	str	r3, [sp, #52]	; 0x34
 801cdb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cdba:	685c      	ldr	r4, [r3, #4]
 801cdbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cdbe:	3404      	adds	r4, #4
 801cdc0:	43db      	mvns	r3, r3
 801cdc2:	b2db      	uxtb	r3, r3
 801cdc4:	930b      	str	r3, [sp, #44]	; 0x2c
 801cdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	dc03      	bgt.n	801cdd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801cdcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	f340 8255 	ble.w	801d27e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801cdd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cdd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cdda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cdde:	1e48      	subs	r0, r1, #1
 801cde0:	1e55      	subs	r5, r2, #1
 801cde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	f340 80f9 	ble.w	801cfdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801cdea:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801cdec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cdee:	1436      	asrs	r6, r6, #16
 801cdf0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801cdf4:	d406      	bmi.n	801ce04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cdf6:	4286      	cmp	r6, r0
 801cdf8:	da04      	bge.n	801ce04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	db02      	blt.n	801ce04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cdfe:	42ab      	cmp	r3, r5
 801ce00:	f2c0 80ed 	blt.w	801cfde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ce04:	3601      	adds	r6, #1
 801ce06:	f100 80da 	bmi.w	801cfbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ce0a:	42b1      	cmp	r1, r6
 801ce0c:	f2c0 80d7 	blt.w	801cfbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ce10:	3301      	adds	r3, #1
 801ce12:	f100 80d4 	bmi.w	801cfbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ce16:	429a      	cmp	r2, r3
 801ce18:	f2c0 80d1 	blt.w	801cfbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ce1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce1e:	9311      	str	r3, [sp, #68]	; 0x44
 801ce20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce22:	930c      	str	r3, [sp, #48]	; 0x30
 801ce24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	f340 80fa 	ble.w	801d020 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ce2c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ce2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ce32:	68c6      	ldr	r6, [r0, #12]
 801ce34:	141d      	asrs	r5, r3, #16
 801ce36:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ce38:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ce3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ce3e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ce40:	1400      	asrs	r0, r0, #16
 801ce42:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ce46:	6892      	ldr	r2, [r2, #8]
 801ce48:	f100 813e 	bmi.w	801d0c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ce4c:	1e57      	subs	r7, r2, #1
 801ce4e:	42b8      	cmp	r0, r7
 801ce50:	f280 813a 	bge.w	801d0c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ce54:	2d00      	cmp	r5, #0
 801ce56:	f2c0 8137 	blt.w	801d0c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ce5a:	1e77      	subs	r7, r6, #1
 801ce5c:	42bd      	cmp	r5, r7
 801ce5e:	f280 8133 	bge.w	801d0c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ce62:	b212      	sxth	r2, r2
 801ce64:	fb05 0002 	mla	r0, r5, r2, r0
 801ce68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ce6a:	f815 a000 	ldrb.w	sl, [r5, r0]
 801ce6e:	182e      	adds	r6, r5, r0
 801ce70:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801ce74:	eb04 050a 	add.w	r5, r4, sl
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	f000 8117 	beq.w	801d0ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ce7e:	f896 c001 	ldrb.w	ip, [r6, #1]
 801ce82:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ce86:	44a4      	add	ip, r4
 801ce88:	2900      	cmp	r1, #0
 801ce8a:	f000 8117 	beq.w	801d0bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ce8e:	18b0      	adds	r0, r6, r2
 801ce90:	5cb2      	ldrb	r2, [r6, r2]
 801ce92:	7840      	ldrb	r0, [r0, #1]
 801ce94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ce9c:	4422      	add	r2, r4
 801ce9e:	4420      	add	r0, r4
 801cea0:	b29b      	uxth	r3, r3
 801cea2:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801cea6:	b289      	uxth	r1, r1
 801cea8:	f895 b002 	ldrb.w	fp, [r5, #2]
 801ceac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ceae:	fb03 f901 	mul.w	r9, r3, r1
 801ceb2:	011b      	lsls	r3, r3, #4
 801ceb4:	f8b6 e000 	ldrh.w	lr, [r6]
 801ceb8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cebc:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801cec0:	eba3 0309 	sub.w	r3, r3, r9
 801cec4:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801cec8:	b289      	uxth	r1, r1
 801ceca:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801cece:	b29b      	uxth	r3, r3
 801ced0:	eba8 0801 	sub.w	r8, r8, r1
 801ced4:	435f      	muls	r7, r3
 801ced6:	fa1f f888 	uxth.w	r8, r8
 801ceda:	9310      	str	r3, [sp, #64]	; 0x40
 801cedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cede:	fb08 770b 	mla	r7, r8, fp, r7
 801cee2:	f892 b002 	ldrb.w	fp, [r2, #2]
 801cee6:	fb01 770b 	mla	r7, r1, fp, r7
 801ceea:	f890 b002 	ldrb.w	fp, [r0, #2]
 801ceee:	fb09 770b 	mla	r7, r9, fp, r7
 801cef2:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801cef6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801cefa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801cefe:	fb1b fb03 	smulbb	fp, fp, r3
 801cf02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf04:	fb07 b706 	mla	r7, r7, r6, fp
 801cf08:	f895 b001 	ldrb.w	fp, [r5, #1]
 801cf0c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801cf10:	f89c c000 	ldrb.w	ip, [ip]
 801cf14:	b2bf      	uxth	r7, r7
 801cf16:	435d      	muls	r5, r3
 801cf18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf1a:	fb08 550b 	mla	r5, r8, fp, r5
 801cf1e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801cf22:	fb01 550b 	mla	r5, r1, fp, r5
 801cf26:	f890 b001 	ldrb.w	fp, [r0, #1]
 801cf2a:	fb09 550b 	mla	r5, r9, fp, r5
 801cf2e:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801cf32:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cf36:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801cf3a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801cf3e:	fa5f fe8e 	uxtb.w	lr, lr
 801cf42:	fb1b fb03 	smulbb	fp, fp, r3
 801cf46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf48:	fb03 f30c 	mul.w	r3, r3, ip
 801cf4c:	f892 c000 	ldrb.w	ip, [r2]
 801cf50:	fb05 b506 	mla	r5, r5, r6, fp
 801cf54:	fb08 330a 	mla	r3, r8, sl, r3
 801cf58:	b2ad      	uxth	r5, r5
 801cf5a:	fb01 330c 	mla	r3, r1, ip, r3
 801cf5e:	f890 c000 	ldrb.w	ip, [r0]
 801cf62:	f105 0b01 	add.w	fp, r5, #1
 801cf66:	fb09 3c0c 	mla	ip, r9, ip, r3
 801cf6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf6c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801cf70:	fb1e fe03 	smulbb	lr, lr, r3
 801cf74:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cf78:	1c7b      	adds	r3, r7, #1
 801cf7a:	096d      	lsrs	r5, r5, #5
 801cf7c:	fb0c e606 	mla	r6, ip, r6, lr
 801cf80:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801cf84:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cf88:	b2b6      	uxth	r6, r6
 801cf8a:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801cf8e:	1c77      	adds	r7, r6, #1
 801cf90:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801cf94:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cf98:	431f      	orrs	r7, r3
 801cf9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf9c:	433d      	orrs	r5, r7
 801cf9e:	801d      	strh	r5, [r3, #0]
 801cfa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cfa2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cfa4:	3302      	adds	r3, #2
 801cfa6:	930c      	str	r3, [sp, #48]	; 0x30
 801cfa8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cfaa:	4413      	add	r3, r2
 801cfac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801cfae:	931f      	str	r3, [sp, #124]	; 0x7c
 801cfb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cfb2:	4413      	add	r3, r2
 801cfb4:	9320      	str	r3, [sp, #128]	; 0x80
 801cfb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cfb8:	3b01      	subs	r3, #1
 801cfba:	9311      	str	r3, [sp, #68]	; 0x44
 801cfbc:	e732      	b.n	801ce24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801cfbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cfc0:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801cfc2:	4433      	add	r3, r6
 801cfc4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801cfc6:	931f      	str	r3, [sp, #124]	; 0x7c
 801cfc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cfca:	4433      	add	r3, r6
 801cfcc:	9320      	str	r3, [sp, #128]	; 0x80
 801cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfd0:	3b01      	subs	r3, #1
 801cfd2:	9309      	str	r3, [sp, #36]	; 0x24
 801cfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfd6:	3302      	adds	r3, #2
 801cfd8:	930a      	str	r3, [sp, #40]	; 0x28
 801cfda:	e702      	b.n	801cde2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801cfdc:	d027      	beq.n	801d02e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801cfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfe0:	9821      	ldr	r0, [sp, #132]	; 0x84
 801cfe2:	3b01      	subs	r3, #1
 801cfe4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801cfe6:	fb00 5003 	mla	r0, r0, r3, r5
 801cfea:	1400      	asrs	r0, r0, #16
 801cfec:	f53f af16 	bmi.w	801ce1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cff0:	3901      	subs	r1, #1
 801cff2:	4288      	cmp	r0, r1
 801cff4:	f6bf af12 	bge.w	801ce1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cff8:	9922      	ldr	r1, [sp, #136]	; 0x88
 801cffa:	9820      	ldr	r0, [sp, #128]	; 0x80
 801cffc:	fb01 0303 	mla	r3, r1, r3, r0
 801d000:	141b      	asrs	r3, r3, #16
 801d002:	f53f af0b 	bmi.w	801ce1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d006:	3a01      	subs	r2, #1
 801d008:	4293      	cmp	r3, r2
 801d00a:	f6bf af07 	bge.w	801ce1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d010:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801d014:	9311      	str	r3, [sp, #68]	; 0x44
 801d016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d018:	930c      	str	r3, [sp, #48]	; 0x30
 801d01a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	dc70      	bgt.n	801d102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801d020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d028:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d02c:	930a      	str	r3, [sp, #40]	; 0x28
 801d02e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d030:	2b00      	cmp	r3, #0
 801d032:	f340 8124 	ble.w	801d27e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801d036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d03a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d03c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d040:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d044:	eef0 6a62 	vmov.f32	s13, s5
 801d048:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d04c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d050:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d054:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801d058:	eef0 6a43 	vmov.f32	s13, s6
 801d05c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d060:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801d064:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d068:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d06c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d070:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d074:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d078:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d07c:	ee12 2a90 	vmov	r2, s5
 801d080:	eef0 2a47 	vmov.f32	s5, s14
 801d084:	fb92 f3f3 	sdiv	r3, r2, r3
 801d088:	ee13 2a10 	vmov	r2, s6
 801d08c:	9321      	str	r3, [sp, #132]	; 0x84
 801d08e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d090:	eeb0 3a67 	vmov.f32	s6, s15
 801d094:	fb92 f3f3 	sdiv	r3, r2, r3
 801d098:	9322      	str	r3, [sp, #136]	; 0x88
 801d09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d09c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d09e:	3b01      	subs	r3, #1
 801d0a0:	930e      	str	r3, [sp, #56]	; 0x38
 801d0a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d0a4:	bf08      	it	eq
 801d0a6:	4613      	moveq	r3, r2
 801d0a8:	9309      	str	r3, [sp, #36]	; 0x24
 801d0aa:	e68c      	b.n	801cdc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d0ac:	b149      	cbz	r1, 801d0c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801d0ae:	5cb2      	ldrb	r2, [r6, r2]
 801d0b0:	4628      	mov	r0, r5
 801d0b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d0b6:	4422      	add	r2, r4
 801d0b8:	46ac      	mov	ip, r5
 801d0ba:	e6f1      	b.n	801cea0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d0bc:	4628      	mov	r0, r5
 801d0be:	462a      	mov	r2, r5
 801d0c0:	e6ee      	b.n	801cea0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d0c2:	4628      	mov	r0, r5
 801d0c4:	462a      	mov	r2, r5
 801d0c6:	e7f7      	b.n	801d0b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801d0c8:	1c47      	adds	r7, r0, #1
 801d0ca:	f53f af69 	bmi.w	801cfa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d0ce:	42ba      	cmp	r2, r7
 801d0d0:	f6ff af66 	blt.w	801cfa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d0d4:	1c6f      	adds	r7, r5, #1
 801d0d6:	f53f af63 	bmi.w	801cfa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d0da:	42be      	cmp	r6, r7
 801d0dc:	f6ff af60 	blt.w	801cfa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d0e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d0e2:	b236      	sxth	r6, r6
 801d0e4:	b212      	sxth	r2, r2
 801d0e6:	9002      	str	r0, [sp, #8]
 801d0e8:	9601      	str	r6, [sp, #4]
 801d0ea:	9200      	str	r2, [sp, #0]
 801d0ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d0ee:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801d0f2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801d0f6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801d0fa:	4623      	mov	r3, r4
 801d0fc:	f7ff fd59 	bl	801cbb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801d100:	e74e      	b.n	801cfa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d102:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d104:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d106:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d10a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801d10c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d10e:	1400      	asrs	r0, r0, #16
 801d110:	142d      	asrs	r5, r5, #16
 801d112:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d114:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d118:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d11c:	fb02 5000 	mla	r0, r2, r0, r5
 801d120:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d122:	f815 9000 	ldrb.w	r9, [r5, r0]
 801d126:	182e      	adds	r6, r5, r0
 801d128:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d12c:	eb04 0509 	add.w	r5, r4, r9
 801d130:	2b00      	cmp	r3, #0
 801d132:	f000 8096 	beq.w	801d262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801d136:	7877      	ldrb	r7, [r6, #1]
 801d138:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d13c:	4427      	add	r7, r4
 801d13e:	2900      	cmp	r1, #0
 801d140:	f000 8097 	beq.w	801d272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801d144:	18b0      	adds	r0, r6, r2
 801d146:	5cb2      	ldrb	r2, [r6, r2]
 801d148:	7840      	ldrb	r0, [r0, #1]
 801d14a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d14e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d152:	4422      	add	r2, r4
 801d154:	4420      	add	r0, r4
 801d156:	b29b      	uxth	r3, r3
 801d158:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d15a:	b289      	uxth	r1, r1
 801d15c:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d160:	f8b6 c000 	ldrh.w	ip, [r6]
 801d164:	fb03 f801 	mul.w	r8, r3, r1
 801d168:	011b      	lsls	r3, r3, #4
 801d16a:	78be      	ldrb	r6, [r7, #2]
 801d16c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d170:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d174:	eba3 0308 	sub.w	r3, r3, r8
 801d178:	f814 9009 	ldrb.w	r9, [r4, r9]
 801d17c:	b289      	uxth	r1, r1
 801d17e:	b29b      	uxth	r3, r3
 801d180:	ebae 0e01 	sub.w	lr, lr, r1
 801d184:	435e      	muls	r6, r3
 801d186:	fa1f fe8e 	uxth.w	lr, lr
 801d18a:	9310      	str	r3, [sp, #64]	; 0x40
 801d18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d18e:	fb0e 660b 	mla	r6, lr, fp, r6
 801d192:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d196:	fb01 660b 	mla	r6, r1, fp, r6
 801d19a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d19e:	fb08 660b 	mla	r6, r8, fp, r6
 801d1a2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801d1a6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d1aa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d1ae:	fb1b fb03 	smulbb	fp, fp, r3
 801d1b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1b4:	fb06 b60a 	mla	r6, r6, sl, fp
 801d1b8:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d1bc:	787d      	ldrb	r5, [r7, #1]
 801d1be:	783f      	ldrb	r7, [r7, #0]
 801d1c0:	b2b6      	uxth	r6, r6
 801d1c2:	435d      	muls	r5, r3
 801d1c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1c6:	fb0e 550b 	mla	r5, lr, fp, r5
 801d1ca:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d1ce:	fb01 550b 	mla	r5, r1, fp, r5
 801d1d2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d1d6:	fb08 550b 	mla	r5, r8, fp, r5
 801d1da:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801d1de:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d1e2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d1e6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d1ea:	fa5f fc8c 	uxtb.w	ip, ip
 801d1ee:	fb1b fb03 	smulbb	fp, fp, r3
 801d1f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1f4:	437b      	muls	r3, r7
 801d1f6:	7817      	ldrb	r7, [r2, #0]
 801d1f8:	fb05 b50a 	mla	r5, r5, sl, fp
 801d1fc:	fb0e 3309 	mla	r3, lr, r9, r3
 801d200:	b2ad      	uxth	r5, r5
 801d202:	fb01 3307 	mla	r3, r1, r7, r3
 801d206:	7807      	ldrb	r7, [r0, #0]
 801d208:	f105 0b01 	add.w	fp, r5, #1
 801d20c:	fb08 3707 	mla	r7, r8, r7, r3
 801d210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d212:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d216:	fb1c fc03 	smulbb	ip, ip, r3
 801d21a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d21e:	1c73      	adds	r3, r6, #1
 801d220:	096d      	lsrs	r5, r5, #5
 801d222:	fb07 c70a 	mla	r7, r7, sl, ip
 801d226:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d22a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d22e:	b2bf      	uxth	r7, r7
 801d230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d232:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d236:	1c7a      	adds	r2, r7, #1
 801d238:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d23c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d240:	4316      	orrs	r6, r2
 801d242:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d244:	432e      	orrs	r6, r5
 801d246:	f823 6b02 	strh.w	r6, [r3], #2
 801d24a:	930c      	str	r3, [sp, #48]	; 0x30
 801d24c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d24e:	4413      	add	r3, r2
 801d250:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d252:	931f      	str	r3, [sp, #124]	; 0x7c
 801d254:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d256:	4413      	add	r3, r2
 801d258:	9320      	str	r3, [sp, #128]	; 0x80
 801d25a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d25c:	3b01      	subs	r3, #1
 801d25e:	9311      	str	r3, [sp, #68]	; 0x44
 801d260:	e6db      	b.n	801d01a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801d262:	b149      	cbz	r1, 801d278 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801d264:	5cb2      	ldrb	r2, [r6, r2]
 801d266:	4628      	mov	r0, r5
 801d268:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d26c:	4422      	add	r2, r4
 801d26e:	462f      	mov	r7, r5
 801d270:	e771      	b.n	801d156 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d272:	4628      	mov	r0, r5
 801d274:	462a      	mov	r2, r5
 801d276:	e76e      	b.n	801d156 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d278:	4628      	mov	r0, r5
 801d27a:	462a      	mov	r2, r5
 801d27c:	e7f7      	b.n	801d26e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801d27e:	b015      	add	sp, #84	; 0x54
 801d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d284 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801d284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d288:	880f      	ldrh	r7, [r1, #0]
 801d28a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801d28e:	023c      	lsls	r4, r7, #8
 801d290:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801d294:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801d298:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801d29c:	017c      	lsls	r4, r7, #5
 801d29e:	00ff      	lsls	r7, r7, #3
 801d2a0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801d2a4:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801d2a8:	b2ff      	uxtb	r7, r7
 801d2aa:	ea4b 0404 	orr.w	r4, fp, r4
 801d2ae:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801d2b2:	4327      	orrs	r7, r4
 801d2b4:	fb05 ca0e 	mla	sl, r5, lr, ip
 801d2b8:	2d00      	cmp	r5, #0
 801d2ba:	9701      	str	r7, [sp, #4]
 801d2bc:	eb02 080a 	add.w	r8, r2, sl
 801d2c0:	db7e      	blt.n	801d3c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d2c2:	45a9      	cmp	r9, r5
 801d2c4:	dd7c      	ble.n	801d3c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d2c6:	f1bc 0f00 	cmp.w	ip, #0
 801d2ca:	db77      	blt.n	801d3bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d2cc:	45e6      	cmp	lr, ip
 801d2ce:	dd75      	ble.n	801d3bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d2d0:	f812 700a 	ldrb.w	r7, [r2, sl]
 801d2d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d2d8:	441f      	add	r7, r3
 801d2da:	f11c 0201 	adds.w	r2, ip, #1
 801d2de:	d472      	bmi.n	801d3c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d2e0:	4596      	cmp	lr, r2
 801d2e2:	dd70      	ble.n	801d3c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d2e4:	2800      	cmp	r0, #0
 801d2e6:	d06e      	beq.n	801d3c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d2e8:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d2ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d2f0:	441c      	add	r4, r3
 801d2f2:	3501      	adds	r5, #1
 801d2f4:	d46b      	bmi.n	801d3ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d2f6:	45a9      	cmp	r9, r5
 801d2f8:	dd69      	ble.n	801d3ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d2fa:	2e00      	cmp	r6, #0
 801d2fc:	d067      	beq.n	801d3ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d2fe:	f1bc 0f00 	cmp.w	ip, #0
 801d302:	db62      	blt.n	801d3ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d304:	45e6      	cmp	lr, ip
 801d306:	dd60      	ble.n	801d3ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d308:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d30c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d310:	441d      	add	r5, r3
 801d312:	f11c 0201 	adds.w	r2, ip, #1
 801d316:	d45d      	bmi.n	801d3d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d318:	4596      	cmp	lr, r2
 801d31a:	dd5b      	ble.n	801d3d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d31c:	2800      	cmp	r0, #0
 801d31e:	d059      	beq.n	801d3d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d320:	44c6      	add	lr, r8
 801d322:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d326:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d32a:	4413      	add	r3, r2
 801d32c:	b280      	uxth	r0, r0
 801d32e:	f897 e002 	ldrb.w	lr, [r7, #2]
 801d332:	b2b2      	uxth	r2, r6
 801d334:	f897 9000 	ldrb.w	r9, [r7]
 801d338:	787f      	ldrb	r7, [r7, #1]
 801d33a:	fb00 f602 	mul.w	r6, r0, r2
 801d33e:	0100      	lsls	r0, r0, #4
 801d340:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d344:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801d348:	1b80      	subs	r0, r0, r6
 801d34a:	fa1f fc82 	uxth.w	ip, r2
 801d34e:	b282      	uxth	r2, r0
 801d350:	78a0      	ldrb	r0, [r4, #2]
 801d352:	eba8 080c 	sub.w	r8, r8, ip
 801d356:	4350      	muls	r0, r2
 801d358:	fa1f f888 	uxth.w	r8, r8
 801d35c:	fb08 0e0e 	mla	lr, r8, lr, r0
 801d360:	78a8      	ldrb	r0, [r5, #2]
 801d362:	fb0c e000 	mla	r0, ip, r0, lr
 801d366:	f893 e002 	ldrb.w	lr, [r3, #2]
 801d36a:	fb06 0e0e 	mla	lr, r6, lr, r0
 801d36e:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801d372:	f894 e000 	ldrb.w	lr, [r4]
 801d376:	fb02 fe0e 	mul.w	lr, r2, lr
 801d37a:	fb08 e909 	mla	r9, r8, r9, lr
 801d37e:	f895 e000 	ldrb.w	lr, [r5]
 801d382:	fb0c 990e 	mla	r9, ip, lr, r9
 801d386:	f893 e000 	ldrb.w	lr, [r3]
 801d38a:	785b      	ldrb	r3, [r3, #1]
 801d38c:	fb06 9e0e 	mla	lr, r6, lr, r9
 801d390:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d394:	ea4e 0e00 	orr.w	lr, lr, r0
 801d398:	7860      	ldrb	r0, [r4, #1]
 801d39a:	4350      	muls	r0, r2
 801d39c:	786a      	ldrb	r2, [r5, #1]
 801d39e:	fb08 0007 	mla	r0, r8, r7, r0
 801d3a2:	fb0c 0202 	mla	r2, ip, r2, r0
 801d3a6:	fb06 2303 	mla	r3, r6, r3, r2
 801d3aa:	095b      	lsrs	r3, r3, #5
 801d3ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d3b0:	ea4e 0303 	orr.w	r3, lr, r3
 801d3b4:	800b      	strh	r3, [r1, #0]
 801d3b6:	b003      	add	sp, #12
 801d3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3bc:	af01      	add	r7, sp, #4
 801d3be:	e78c      	b.n	801d2da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801d3c0:	ac01      	add	r4, sp, #4
 801d3c2:	4627      	mov	r7, r4
 801d3c4:	e795      	b.n	801d2f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d3c6:	ac01      	add	r4, sp, #4
 801d3c8:	e793      	b.n	801d2f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d3ca:	ad01      	add	r5, sp, #4
 801d3cc:	e7a1      	b.n	801d312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801d3ce:	ab01      	add	r3, sp, #4
 801d3d0:	461d      	mov	r5, r3
 801d3d2:	e7ab      	b.n	801d32c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801d3d4:	ab01      	add	r3, sp, #4
 801d3d6:	e7a9      	b.n	801d32c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801d3d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3dc:	b08f      	sub	sp, #60	; 0x3c
 801d3de:	920c      	str	r2, [sp, #48]	; 0x30
 801d3e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d3e2:	900d      	str	r0, [sp, #52]	; 0x34
 801d3e4:	910a      	str	r1, [sp, #40]	; 0x28
 801d3e6:	6850      	ldr	r0, [r2, #4]
 801d3e8:	9306      	str	r3, [sp, #24]
 801d3ea:	6812      	ldr	r2, [r2, #0]
 801d3ec:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801d3f0:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801d3f4:	fb00 1303 	mla	r3, r0, r3, r1
 801d3f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d3fc:	9307      	str	r3, [sp, #28]
 801d3fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	9308      	str	r3, [sp, #32]
 801d404:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d406:	685c      	ldr	r4, [r3, #4]
 801d408:	3404      	adds	r4, #4
 801d40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	dc03      	bgt.n	801d418 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d412:	2b00      	cmp	r3, #0
 801d414:	f340 81d5 	ble.w	801d7c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d418:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d41a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d41e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d422:	1e48      	subs	r0, r1, #1
 801d424:	1e56      	subs	r6, r2, #1
 801d426:	9b06      	ldr	r3, [sp, #24]
 801d428:	2b00      	cmp	r3, #0
 801d42a:	f340 80b6 	ble.w	801d59a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801d42e:	ea5f 472b 	movs.w	r7, fp, asr #16
 801d432:	ea4f 4325 	mov.w	r3, r5, asr #16
 801d436:	d406      	bmi.n	801d446 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d438:	4287      	cmp	r7, r0
 801d43a:	da04      	bge.n	801d446 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	db02      	blt.n	801d446 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d440:	42b3      	cmp	r3, r6
 801d442:	f2c0 80ab 	blt.w	801d59c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801d446:	3701      	adds	r7, #1
 801d448:	f100 809c 	bmi.w	801d584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d44c:	42b9      	cmp	r1, r7
 801d44e:	f2c0 8099 	blt.w	801d584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d452:	3301      	adds	r3, #1
 801d454:	f100 8096 	bmi.w	801d584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d458:	429a      	cmp	r2, r3
 801d45a:	f2c0 8093 	blt.w	801d584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d45e:	9b06      	ldr	r3, [sp, #24]
 801d460:	930b      	str	r3, [sp, #44]	; 0x2c
 801d462:	9b07      	ldr	r3, [sp, #28]
 801d464:	9309      	str	r3, [sp, #36]	; 0x24
 801d466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d468:	2b00      	cmp	r3, #0
 801d46a:	f340 80b4 	ble.w	801d5d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801d46e:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d470:	142e      	asrs	r6, r5, #16
 801d472:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d474:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d478:	68c7      	ldr	r7, [r0, #12]
 801d47a:	ea5f 402b 	movs.w	r0, fp, asr #16
 801d47e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d482:	6892      	ldr	r2, [r2, #8]
 801d484:	f100 80fb 	bmi.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d488:	f102 3cff 	add.w	ip, r2, #4294967295
 801d48c:	4560      	cmp	r0, ip
 801d48e:	f280 80f6 	bge.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d492:	2e00      	cmp	r6, #0
 801d494:	f2c0 80f3 	blt.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d498:	f107 3cff 	add.w	ip, r7, #4294967295
 801d49c:	4566      	cmp	r6, ip
 801d49e:	f280 80ee 	bge.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d4a2:	b212      	sxth	r2, r2
 801d4a4:	fb06 0002 	mla	r0, r6, r2, r0
 801d4a8:	9e08      	ldr	r6, [sp, #32]
 801d4aa:	1837      	adds	r7, r6, r0
 801d4ac:	5c30      	ldrb	r0, [r6, r0]
 801d4ae:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801d4b2:	eb04 0c08 	add.w	ip, r4, r8
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	f000 80d3 	beq.w	801d662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d4bc:	787e      	ldrb	r6, [r7, #1]
 801d4be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d4c2:	4426      	add	r6, r4
 801d4c4:	2900      	cmp	r1, #0
 801d4c6:	f000 80d4 	beq.w	801d672 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d4ca:	18b8      	adds	r0, r7, r2
 801d4cc:	5cba      	ldrb	r2, [r7, r2]
 801d4ce:	7840      	ldrb	r0, [r0, #1]
 801d4d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d4d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d4d8:	4422      	add	r2, r4
 801d4da:	4420      	add	r0, r4
 801d4dc:	b29b      	uxth	r3, r3
 801d4de:	78b7      	ldrb	r7, [r6, #2]
 801d4e0:	b289      	uxth	r1, r1
 801d4e2:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d4e6:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d4ea:	fb03 f901 	mul.w	r9, r3, r1
 801d4ee:	011b      	lsls	r3, r3, #4
 801d4f0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d4f4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d4f8:	eba3 0309 	sub.w	r3, r3, r9
 801d4fc:	b289      	uxth	r1, r1
 801d4fe:	b29b      	uxth	r3, r3
 801d500:	ebae 0e01 	sub.w	lr, lr, r1
 801d504:	435f      	muls	r7, r3
 801d506:	fa1f fe8e 	uxth.w	lr, lr
 801d50a:	fb0e 770a 	mla	r7, lr, sl, r7
 801d50e:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d512:	fb01 770a 	mla	r7, r1, sl, r7
 801d516:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d51a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d51e:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d522:	f896 8000 	ldrb.w	r8, [r6]
 801d526:	7876      	ldrb	r6, [r6, #1]
 801d528:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801d52c:	fb03 f808 	mul.w	r8, r3, r8
 801d530:	4373      	muls	r3, r6
 801d532:	fb0e 8807 	mla	r8, lr, r7, r8
 801d536:	7817      	ldrb	r7, [r2, #0]
 801d538:	fb0e 330c 	mla	r3, lr, ip, r3
 801d53c:	fb01 8807 	mla	r8, r1, r7, r8
 801d540:	7807      	ldrb	r7, [r0, #0]
 801d542:	fb09 8707 	mla	r7, r9, r7, r8
 801d546:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d54a:	ea47 070a 	orr.w	r7, r7, sl
 801d54e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d552:	fb01 310a 	mla	r1, r1, sl, r3
 801d556:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d55c:	fb09 1a0a 	mla	sl, r9, sl, r1
 801d560:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d564:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d568:	ea47 070a 	orr.w	r7, r7, sl
 801d56c:	801f      	strh	r7, [r3, #0]
 801d56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d570:	3302      	adds	r3, #2
 801d572:	9309      	str	r3, [sp, #36]	; 0x24
 801d574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d576:	449b      	add	fp, r3
 801d578:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d57a:	441d      	add	r5, r3
 801d57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d57e:	3b01      	subs	r3, #1
 801d580:	930b      	str	r3, [sp, #44]	; 0x2c
 801d582:	e770      	b.n	801d466 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d586:	449b      	add	fp, r3
 801d588:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d58a:	441d      	add	r5, r3
 801d58c:	9b06      	ldr	r3, [sp, #24]
 801d58e:	3b01      	subs	r3, #1
 801d590:	9306      	str	r3, [sp, #24]
 801d592:	9b07      	ldr	r3, [sp, #28]
 801d594:	3302      	adds	r3, #2
 801d596:	9307      	str	r3, [sp, #28]
 801d598:	e745      	b.n	801d426 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d59a:	d023      	beq.n	801d5e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d59c:	9b06      	ldr	r3, [sp, #24]
 801d59e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801d5a0:	3b01      	subs	r3, #1
 801d5a2:	fb00 b003 	mla	r0, r0, r3, fp
 801d5a6:	1400      	asrs	r0, r0, #16
 801d5a8:	f53f af59 	bmi.w	801d45e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d5ac:	3901      	subs	r1, #1
 801d5ae:	4288      	cmp	r0, r1
 801d5b0:	f6bf af55 	bge.w	801d45e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d5b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 801d5b6:	fb01 5303 	mla	r3, r1, r3, r5
 801d5ba:	141b      	asrs	r3, r3, #16
 801d5bc:	f53f af4f 	bmi.w	801d45e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d5c0:	3a01      	subs	r2, #1
 801d5c2:	4293      	cmp	r3, r2
 801d5c4:	f6bf af4b 	bge.w	801d45e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d5c8:	9b06      	ldr	r3, [sp, #24]
 801d5ca:	9309      	str	r3, [sp, #36]	; 0x24
 801d5cc:	9b07      	ldr	r3, [sp, #28]
 801d5ce:	930b      	str	r3, [sp, #44]	; 0x2c
 801d5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	dc70      	bgt.n	801d6b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d5d6:	9b06      	ldr	r3, [sp, #24]
 801d5d8:	9a07      	ldr	r2, [sp, #28]
 801d5da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d5de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d5e2:	9307      	str	r3, [sp, #28]
 801d5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	f340 80eb 	ble.w	801d7c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d5ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d5f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d5f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5fa:	eef0 6a62 	vmov.f32	s13, s5
 801d5fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d602:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d606:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d60a:	ee16 ba90 	vmov	fp, s13
 801d60e:	eef0 6a43 	vmov.f32	s13, s6
 801d612:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d616:	ee16 5a90 	vmov	r5, s13
 801d61a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d61e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d622:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d626:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d62a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d62e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d632:	ee12 2a90 	vmov	r2, s5
 801d636:	eef0 2a47 	vmov.f32	s5, s14
 801d63a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d63e:	ee13 2a10 	vmov	r2, s6
 801d642:	931b      	str	r3, [sp, #108]	; 0x6c
 801d644:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d646:	eeb0 3a67 	vmov.f32	s6, s15
 801d64a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d64e:	931c      	str	r3, [sp, #112]	; 0x70
 801d650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d652:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d654:	3b01      	subs	r3, #1
 801d656:	930a      	str	r3, [sp, #40]	; 0x28
 801d658:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d65a:	bf08      	it	eq
 801d65c:	4613      	moveq	r3, r2
 801d65e:	9306      	str	r3, [sp, #24]
 801d660:	e6d3      	b.n	801d40a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d662:	b149      	cbz	r1, 801d678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801d664:	5cba      	ldrb	r2, [r7, r2]
 801d666:	4660      	mov	r0, ip
 801d668:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d66c:	4422      	add	r2, r4
 801d66e:	4666      	mov	r6, ip
 801d670:	e734      	b.n	801d4dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d672:	4660      	mov	r0, ip
 801d674:	4662      	mov	r2, ip
 801d676:	e731      	b.n	801d4dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d678:	4660      	mov	r0, ip
 801d67a:	4662      	mov	r2, ip
 801d67c:	e7f7      	b.n	801d66e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d67e:	f110 0c01 	adds.w	ip, r0, #1
 801d682:	f53f af74 	bmi.w	801d56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d686:	4562      	cmp	r2, ip
 801d688:	f6ff af71 	blt.w	801d56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d68c:	f116 0c01 	adds.w	ip, r6, #1
 801d690:	f53f af6d 	bmi.w	801d56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d694:	4567      	cmp	r7, ip
 801d696:	f6ff af6a 	blt.w	801d56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d69a:	b23f      	sxth	r7, r7
 801d69c:	b212      	sxth	r2, r2
 801d69e:	9701      	str	r7, [sp, #4]
 801d6a0:	9200      	str	r2, [sp, #0]
 801d6a2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d6a6:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801d6aa:	4623      	mov	r3, r4
 801d6ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d6ae:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d6b2:	f7ff fde7 	bl	801d284 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801d6b6:	e75a      	b.n	801d56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d6b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d6ba:	ea4f 462b 	mov.w	r6, fp, asr #16
 801d6be:	1428      	asrs	r0, r5, #16
 801d6c0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d6c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d6c8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d6cc:	fb02 6000 	mla	r0, r2, r0, r6
 801d6d0:	9e08      	ldr	r6, [sp, #32]
 801d6d2:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d6d6:	1837      	adds	r7, r6, r0
 801d6d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d6dc:	eb04 0c08 	add.w	ip, r4, r8
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d060      	beq.n	801d7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801d6e4:	787e      	ldrb	r6, [r7, #1]
 801d6e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d6ea:	4426      	add	r6, r4
 801d6ec:	2900      	cmp	r1, #0
 801d6ee:	d062      	beq.n	801d7b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801d6f0:	18b8      	adds	r0, r7, r2
 801d6f2:	5cba      	ldrb	r2, [r7, r2]
 801d6f4:	7840      	ldrb	r0, [r0, #1]
 801d6f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d6fe:	4422      	add	r2, r4
 801d700:	4420      	add	r0, r4
 801d702:	b29b      	uxth	r3, r3
 801d704:	78b7      	ldrb	r7, [r6, #2]
 801d706:	b289      	uxth	r1, r1
 801d708:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d70c:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d710:	fb03 f901 	mul.w	r9, r3, r1
 801d714:	011b      	lsls	r3, r3, #4
 801d716:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d71a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d71e:	eba3 0309 	sub.w	r3, r3, r9
 801d722:	b289      	uxth	r1, r1
 801d724:	b29b      	uxth	r3, r3
 801d726:	ebae 0e01 	sub.w	lr, lr, r1
 801d72a:	435f      	muls	r7, r3
 801d72c:	fa1f fe8e 	uxth.w	lr, lr
 801d730:	fb0e 770a 	mla	r7, lr, sl, r7
 801d734:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d738:	fb01 770a 	mla	r7, r1, sl, r7
 801d73c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d740:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d744:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d748:	f896 8000 	ldrb.w	r8, [r6]
 801d74c:	7876      	ldrb	r6, [r6, #1]
 801d74e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801d752:	fb03 f808 	mul.w	r8, r3, r8
 801d756:	4373      	muls	r3, r6
 801d758:	7856      	ldrb	r6, [r2, #1]
 801d75a:	fb0e 8807 	mla	r8, lr, r7, r8
 801d75e:	7817      	ldrb	r7, [r2, #0]
 801d760:	fb0e 330c 	mla	r3, lr, ip, r3
 801d764:	fb01 8807 	mla	r8, r1, r7, r8
 801d768:	7807      	ldrb	r7, [r0, #0]
 801d76a:	fb01 3306 	mla	r3, r1, r6, r3
 801d76e:	fb09 8707 	mla	r7, r9, r7, r8
 801d772:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d776:	ea47 070a 	orr.w	r7, r7, sl
 801d77a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d77e:	fb09 3a0a 	mla	sl, r9, sl, r3
 801d782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d784:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d788:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d78c:	ea47 070a 	orr.w	r7, r7, sl
 801d790:	f823 7b02 	strh.w	r7, [r3], #2
 801d794:	930b      	str	r3, [sp, #44]	; 0x2c
 801d796:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d798:	449b      	add	fp, r3
 801d79a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d79c:	441d      	add	r5, r3
 801d79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7a0:	3b01      	subs	r3, #1
 801d7a2:	9309      	str	r3, [sp, #36]	; 0x24
 801d7a4:	e714      	b.n	801d5d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801d7a6:	b149      	cbz	r1, 801d7bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801d7a8:	5cba      	ldrb	r2, [r7, r2]
 801d7aa:	4660      	mov	r0, ip
 801d7ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d7b0:	4422      	add	r2, r4
 801d7b2:	4666      	mov	r6, ip
 801d7b4:	e7a5      	b.n	801d702 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801d7b6:	4660      	mov	r0, ip
 801d7b8:	4662      	mov	r2, ip
 801d7ba:	e7a2      	b.n	801d702 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801d7bc:	4660      	mov	r0, ip
 801d7be:	4662      	mov	r2, ip
 801d7c0:	e7f7      	b.n	801d7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801d7c2:	b00f      	add	sp, #60	; 0x3c
 801d7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d7c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7cc:	b085      	sub	sp, #20
 801d7ce:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801d7d2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801d7d6:	9102      	str	r1, [sp, #8]
 801d7d8:	2c00      	cmp	r4, #0
 801d7da:	fb04 710c 	mla	r1, r4, ip, r7
 801d7de:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801d7e2:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801d7e6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801d7ea:	eb02 0e01 	add.w	lr, r2, r1
 801d7ee:	f2c0 8122 	blt.w	801da36 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801d7f2:	45a0      	cmp	r8, r4
 801d7f4:	f340 811f 	ble.w	801da36 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801d7f8:	2f00      	cmp	r7, #0
 801d7fa:	f2c0 811a 	blt.w	801da32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801d7fe:	45bc      	cmp	ip, r7
 801d800:	f340 8117 	ble.w	801da32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801d804:	5c52      	ldrb	r2, [r2, r1]
 801d806:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d80a:	1c7a      	adds	r2, r7, #1
 801d80c:	f100 8116 	bmi.w	801da3c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801d810:	4594      	cmp	ip, r2
 801d812:	f340 8113 	ble.w	801da3c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801d816:	2e00      	cmp	r6, #0
 801d818:	f000 8112 	beq.w	801da40 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801d81c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d824:	3401      	adds	r4, #1
 801d826:	f100 810f 	bmi.w	801da48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801d82a:	45a0      	cmp	r8, r4
 801d82c:	f340 810c 	ble.w	801da48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801d830:	2800      	cmp	r0, #0
 801d832:	f000 810c 	beq.w	801da4e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801d836:	2f00      	cmp	r7, #0
 801d838:	f2c0 8104 	blt.w	801da44 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801d83c:	45bc      	cmp	ip, r7
 801d83e:	f340 8101 	ble.w	801da44 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801d842:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801d846:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801d84a:	3701      	adds	r7, #1
 801d84c:	f100 8102 	bmi.w	801da54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801d850:	45bc      	cmp	ip, r7
 801d852:	f340 80ff 	ble.w	801da54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801d856:	2e00      	cmp	r6, #0
 801d858:	f000 80fe 	beq.w	801da58 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801d85c:	44f4      	add	ip, lr
 801d85e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d862:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d866:	b2b6      	uxth	r6, r6
 801d868:	b280      	uxth	r0, r0
 801d86a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801d86e:	fb00 fe06 	mul.w	lr, r0, r6
 801d872:	0136      	lsls	r6, r6, #4
 801d874:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801d878:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801d87c:	eba6 070e 	sub.w	r7, r6, lr
 801d880:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801d884:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d888:	b280      	uxth	r0, r0
 801d88a:	b2bf      	uxth	r7, r7
 801d88c:	1a1b      	subs	r3, r3, r0
 801d88e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d892:	fb0a f607 	mul.w	r6, sl, r7
 801d896:	b29b      	uxth	r3, r3
 801d898:	fb0b 6603 	mla	r6, fp, r3, r6
 801d89c:	fb00 6609 	mla	r6, r0, r9, r6
 801d8a0:	fb0e 6608 	mla	r6, lr, r8, r6
 801d8a4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d8a8:	9600      	str	r6, [sp, #0]
 801d8aa:	2e00      	cmp	r6, #0
 801d8ac:	f000 80be 	beq.w	801da2c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801d8b0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d8b4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d8b8:	9e02      	ldr	r6, [sp, #8]
 801d8ba:	fb0b fc0c 	mul.w	ip, fp, ip
 801d8be:	fb0b f505 	mul.w	r5, fp, r5
 801d8c2:	8836      	ldrh	r6, [r6, #0]
 801d8c4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d8c8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d8cc:	9501      	str	r5, [sp, #4]
 801d8ce:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d8d2:	44dc      	add	ip, fp
 801d8d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d8d8:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801d8dc:	9503      	str	r5, [sp, #12]
 801d8de:	9d01      	ldr	r5, [sp, #4]
 801d8e0:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801d8e4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d8e8:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801d8ec:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d8f0:	fb0a fc0c 	mul.w	ip, sl, ip
 801d8f4:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801d8f8:	fb0a fa01 	mul.w	sl, sl, r1
 801d8fc:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801d900:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d904:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801d908:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d90c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801d910:	4465      	add	r5, ip
 801d912:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d916:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d91a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d91e:	fb09 fc0c 	mul.w	ip, r9, ip
 801d922:	0a2d      	lsrs	r5, r5, #8
 801d924:	fb09 f904 	mul.w	r9, r9, r4
 801d928:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d92c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801d930:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d934:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801d938:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d93c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d940:	437d      	muls	r5, r7
 801d942:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801d946:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801d94a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d94e:	4461      	add	r1, ip
 801d950:	fb08 f404 	mul.w	r4, r8, r4
 801d954:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d958:	fb08 f802 	mul.w	r8, r8, r2
 801d95c:	0a09      	lsrs	r1, r1, #8
 801d95e:	0a22      	lsrs	r2, r4, #8
 801d960:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801d964:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d968:	fb07 f70a 	mul.w	r7, r7, sl
 801d96c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d970:	4414      	add	r4, r2
 801d972:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d976:	0a24      	lsrs	r4, r4, #8
 801d978:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d97c:	9a03      	ldr	r2, [sp, #12]
 801d97e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d982:	fb02 5503 	mla	r5, r2, r3, r5
 801d986:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d98a:	9a00      	ldr	r2, [sp, #0]
 801d98c:	fb04 540e 	mla	r4, r4, lr, r5
 801d990:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d994:	1235      	asrs	r5, r6, #8
 801d996:	fb01 4100 	mla	r1, r1, r0, r4
 801d99a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d99e:	0a09      	lsrs	r1, r1, #8
 801d9a0:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801d9a4:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801d9a8:	fb03 7101 	mla	r1, r3, r1, r7
 801d9ac:	fb0e 1e08 	mla	lr, lr, r8, r1
 801d9b0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801d9b4:	fb00 e101 	mla	r1, r0, r1, lr
 801d9b8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801d9bc:	b287      	uxth	r7, r0
 801d9be:	0a09      	lsrs	r1, r1, #8
 801d9c0:	437a      	muls	r2, r7
 801d9c2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d9c6:	1c53      	adds	r3, r2, #1
 801d9c8:	4321      	orrs	r1, r4
 801d9ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d9ce:	0c0a      	lsrs	r2, r1, #16
 801d9d0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801d9d4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d9d8:	b2c8      	uxtb	r0, r1
 801d9da:	fb12 f207 	smulbb	r2, r2, r7
 801d9de:	fb14 f407 	smulbb	r4, r4, r7
 801d9e2:	b2db      	uxtb	r3, r3
 801d9e4:	fb10 f007 	smulbb	r0, r0, r7
 801d9e8:	fb05 2503 	mla	r5, r5, r3, r2
 801d9ec:	10f2      	asrs	r2, r6, #3
 801d9ee:	00f6      	lsls	r6, r6, #3
 801d9f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d9f4:	b2ad      	uxth	r5, r5
 801d9f6:	b2f6      	uxtb	r6, r6
 801d9f8:	fb02 4203 	mla	r2, r2, r3, r4
 801d9fc:	fb06 0303 	mla	r3, r6, r3, r0
 801da00:	b294      	uxth	r4, r2
 801da02:	b299      	uxth	r1, r3
 801da04:	1c6b      	adds	r3, r5, #1
 801da06:	1c62      	adds	r2, r4, #1
 801da08:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801da0c:	1c4b      	adds	r3, r1, #1
 801da0e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801da12:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801da16:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801da1a:	0952      	lsrs	r2, r2, #5
 801da1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801da20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801da24:	432b      	orrs	r3, r5
 801da26:	4313      	orrs	r3, r2
 801da28:	9a02      	ldr	r2, [sp, #8]
 801da2a:	8013      	strh	r3, [r2, #0]
 801da2c:	b005      	add	sp, #20
 801da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da32:	2500      	movs	r5, #0
 801da34:	e6e9      	b.n	801d80a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801da36:	2100      	movs	r1, #0
 801da38:	460d      	mov	r5, r1
 801da3a:	e6f3      	b.n	801d824 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801da3c:	2100      	movs	r1, #0
 801da3e:	e6f1      	b.n	801d824 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801da40:	4631      	mov	r1, r6
 801da42:	e6ef      	b.n	801d824 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801da44:	2400      	movs	r4, #0
 801da46:	e700      	b.n	801d84a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801da48:	2200      	movs	r2, #0
 801da4a:	4614      	mov	r4, r2
 801da4c:	e70b      	b.n	801d866 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801da4e:	4602      	mov	r2, r0
 801da50:	4604      	mov	r4, r0
 801da52:	e708      	b.n	801d866 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801da54:	2200      	movs	r2, #0
 801da56:	e706      	b.n	801d866 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801da58:	4632      	mov	r2, r6
 801da5a:	e704      	b.n	801d866 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801da5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da60:	b09f      	sub	sp, #124	; 0x7c
 801da62:	921b      	str	r2, [sp, #108]	; 0x6c
 801da64:	9309      	str	r3, [sp, #36]	; 0x24
 801da66:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801da68:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801da6c:	901d      	str	r0, [sp, #116]	; 0x74
 801da6e:	931c      	str	r3, [sp, #112]	; 0x70
 801da70:	6850      	ldr	r0, [r2, #4]
 801da72:	9119      	str	r1, [sp, #100]	; 0x64
 801da74:	6812      	ldr	r2, [r2, #0]
 801da76:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801da78:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801da7c:	fb00 1303 	mla	r3, r0, r3, r1
 801da80:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801da84:	930c      	str	r3, [sp, #48]	; 0x30
 801da86:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	9312      	str	r3, [sp, #72]	; 0x48
 801da8c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801da8e:	685e      	ldr	r6, [r3, #4]
 801da90:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801da94:	3604      	adds	r6, #4
 801da96:	930d      	str	r3, [sp, #52]	; 0x34
 801da98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	dc03      	bgt.n	801daa6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801da9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	f340 8387 	ble.w	801e1b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801daa6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801daa8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801daac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dab0:	1e48      	subs	r0, r1, #1
 801dab2:	1e57      	subs	r7, r2, #1
 801dab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	f340 8194 	ble.w	801dde4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801dabc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801dabe:	142b      	asrs	r3, r5, #16
 801dac0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801dac4:	d406      	bmi.n	801dad4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dac6:	4584      	cmp	ip, r0
 801dac8:	da04      	bge.n	801dad4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801daca:	2b00      	cmp	r3, #0
 801dacc:	db02      	blt.n	801dad4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dace:	42bb      	cmp	r3, r7
 801dad0:	f2c0 8189 	blt.w	801dde6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801dad4:	f11c 0c01 	adds.w	ip, ip, #1
 801dad8:	f100 8177 	bmi.w	801ddca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dadc:	4561      	cmp	r1, ip
 801dade:	f2c0 8174 	blt.w	801ddca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dae2:	3301      	adds	r3, #1
 801dae4:	f100 8171 	bmi.w	801ddca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dae8:	429a      	cmp	r2, r3
 801daea:	f2c0 816e 	blt.w	801ddca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801daee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daf0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801daf2:	931a      	str	r3, [sp, #104]	; 0x68
 801daf4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	f340 8193 	ble.w	801de22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801dafc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dafe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801db02:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801db06:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801db0a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801db0c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801db10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801db12:	141b      	asrs	r3, r3, #16
 801db14:	f100 81d6 	bmi.w	801dec4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801db18:	f100 38ff 	add.w	r8, r0, #4294967295
 801db1c:	4543      	cmp	r3, r8
 801db1e:	f280 81d1 	bge.w	801dec4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801db22:	f1bc 0f00 	cmp.w	ip, #0
 801db26:	f2c0 81cd 	blt.w	801dec4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801db2a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801db2e:	45c4      	cmp	ip, r8
 801db30:	f280 81c8 	bge.w	801dec4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801db34:	b200      	sxth	r0, r0
 801db36:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801db38:	fb0c 3300 	mla	r3, ip, r0, r3
 801db3c:	eb04 0803 	add.w	r8, r4, r3
 801db40:	5ce3      	ldrb	r3, [r4, r3]
 801db42:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801db46:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801db4a:	2a00      	cmp	r2, #0
 801db4c:	f000 81af 	beq.w	801deae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801db50:	f898 c001 	ldrb.w	ip, [r8, #1]
 801db54:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801db58:	940e      	str	r4, [sp, #56]	; 0x38
 801db5a:	0e24      	lsrs	r4, r4, #24
 801db5c:	9415      	str	r4, [sp, #84]	; 0x54
 801db5e:	b179      	cbz	r1, 801db80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801db60:	eb08 0c00 	add.w	ip, r8, r0
 801db64:	f818 0000 	ldrb.w	r0, [r8, r0]
 801db68:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801db6c:	900a      	str	r0, [sp, #40]	; 0x28
 801db6e:	0e00      	lsrs	r0, r0, #24
 801db70:	9013      	str	r0, [sp, #76]	; 0x4c
 801db72:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801db76:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801db7a:	900f      	str	r0, [sp, #60]	; 0x3c
 801db7c:	0e00      	lsrs	r0, r0, #24
 801db7e:	9016      	str	r0, [sp, #88]	; 0x58
 801db80:	b292      	uxth	r2, r2
 801db82:	9815      	ldr	r0, [sp, #84]	; 0x54
 801db84:	b289      	uxth	r1, r1
 801db86:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801db88:	fb02 f901 	mul.w	r9, r2, r1
 801db8c:	0112      	lsls	r2, r2, #4
 801db8e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801db92:	eba2 0809 	sub.w	r8, r2, r9
 801db96:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801db9a:	b289      	uxth	r1, r1
 801db9c:	fa1f f888 	uxth.w	r8, r8
 801dba0:	1a52      	subs	r2, r2, r1
 801dba2:	fb08 f000 	mul.w	r0, r8, r0
 801dba6:	b292      	uxth	r2, r2
 801dba8:	fb02 000e 	mla	r0, r2, lr, r0
 801dbac:	fb01 0004 	mla	r0, r1, r4, r0
 801dbb0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dbb2:	fb09 0004 	mla	r0, r9, r4, r0
 801dbb6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dbba:	2800      	cmp	r0, #0
 801dbbc:	f000 80fa 	beq.w	801ddb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dbc0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dbc4:	d01b      	beq.n	801dbfe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801dbc6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dbca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dbce:	fb0e fa0a 	mul.w	sl, lr, sl
 801dbd2:	fb0e fe03 	mul.w	lr, lr, r3
 801dbd6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dbda:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dbde:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801dbe2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dbe6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dbea:	4453      	add	r3, sl
 801dbec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dbf0:	0a1b      	lsrs	r3, r3, #8
 801dbf2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dbf6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dbfa:	ea43 030c 	orr.w	r3, r3, ip
 801dbfe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dc00:	2cff      	cmp	r4, #255	; 0xff
 801dc02:	d021      	beq.n	801dc48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801dc04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dc06:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dc0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dc0c:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc10:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dc12:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dc16:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dc18:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dc1c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dc20:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc28:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dc2c:	44de      	add	lr, fp
 801dc2e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dc32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dc42:	ea4e 040a 	orr.w	r4, lr, sl
 801dc46:	940e      	str	r4, [sp, #56]	; 0x38
 801dc48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc4a:	2cff      	cmp	r4, #255	; 0xff
 801dc4c:	d021      	beq.n	801dc92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801dc4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dc50:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dc54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc56:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dc5c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dc60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc62:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dc66:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dc6a:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc72:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dc76:	44de      	add	lr, fp
 801dc78:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dc7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dc8c:	ea4e 040a 	orr.w	r4, lr, sl
 801dc90:	940a      	str	r4, [sp, #40]	; 0x28
 801dc92:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dc94:	2cff      	cmp	r4, #255	; 0xff
 801dc96:	d021      	beq.n	801dcdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801dc98:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dc9a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dc9e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dca0:	fb04 fb0b 	mul.w	fp, r4, fp
 801dca4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dca6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dcaa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dcac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dcb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dcb4:	fb04 fa0a 	mul.w	sl, r4, sl
 801dcb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dcbc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dcc0:	44de      	add	lr, fp
 801dcc2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dcc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dcd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dcd6:	ea4e 040a 	orr.w	r4, lr, sl
 801dcda:	940f      	str	r4, [sp, #60]	; 0x3c
 801dcdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dcde:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801dce2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dce6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dcea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dcec:	fb08 fc0c 	mul.w	ip, r8, ip
 801dcf0:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dcf4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801dcf8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dcfa:	fb01 cc0e 	mla	ip, r1, lr, ip
 801dcfe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801dd02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dd04:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dd08:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801dd0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dd0e:	fb08 f80e 	mul.w	r8, r8, lr
 801dd12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd16:	fb02 8303 	mla	r3, r2, r3, r8
 801dd1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dd1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dd20:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801dd24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dd26:	fb01 330a 	mla	r3, r1, sl, r3
 801dd2a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801dd2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd30:	fb09 3901 	mla	r9, r9, r1, r3
 801dd34:	883b      	ldrh	r3, [r7, #0]
 801dd36:	4342      	muls	r2, r0
 801dd38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dd3c:	1c50      	adds	r0, r2, #1
 801dd3e:	1219      	asrs	r1, r3, #8
 801dd40:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801dd44:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801dd48:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801dd4c:	ea4c 0c09 	orr.w	ip, ip, r9
 801dd50:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801dd54:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801dd58:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801dd5c:	b2c0      	uxtb	r0, r0
 801dd5e:	fb12 f204 	smulbb	r2, r2, r4
 801dd62:	fa5f fc8c 	uxtb.w	ip, ip
 801dd66:	fb1e fe04 	smulbb	lr, lr, r4
 801dd6a:	fb01 2100 	mla	r1, r1, r0, r2
 801dd6e:	10da      	asrs	r2, r3, #3
 801dd70:	fb1c fc04 	smulbb	ip, ip, r4
 801dd74:	00db      	lsls	r3, r3, #3
 801dd76:	b289      	uxth	r1, r1
 801dd78:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801dd7c:	b2db      	uxtb	r3, r3
 801dd7e:	fb02 e200 	mla	r2, r2, r0, lr
 801dd82:	fb03 c300 	mla	r3, r3, r0, ip
 801dd86:	b292      	uxth	r2, r2
 801dd88:	fa1f fc83 	uxth.w	ip, r3
 801dd8c:	1c4b      	adds	r3, r1, #1
 801dd8e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801dd92:	f10c 0301 	add.w	r3, ip, #1
 801dd96:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801dd9a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801dd9e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dda2:	430b      	orrs	r3, r1
 801dda4:	1c51      	adds	r1, r2, #1
 801dda6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ddaa:	0952      	lsrs	r2, r2, #5
 801ddac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ddb0:	4313      	orrs	r3, r2
 801ddb2:	803b      	strh	r3, [r7, #0]
 801ddb4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ddb6:	3702      	adds	r7, #2
 801ddb8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ddba:	441a      	add	r2, r3
 801ddbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ddbe:	441d      	add	r5, r3
 801ddc0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ddc2:	9229      	str	r2, [sp, #164]	; 0xa4
 801ddc4:	3b01      	subs	r3, #1
 801ddc6:	931a      	str	r3, [sp, #104]	; 0x68
 801ddc8:	e694      	b.n	801daf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ddca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ddcc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ddce:	441c      	add	r4, r3
 801ddd0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ddd2:	441d      	add	r5, r3
 801ddd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddd6:	9429      	str	r4, [sp, #164]	; 0xa4
 801ddd8:	3b01      	subs	r3, #1
 801ddda:	9309      	str	r3, [sp, #36]	; 0x24
 801dddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddde:	3302      	adds	r3, #2
 801dde0:	930c      	str	r3, [sp, #48]	; 0x30
 801dde2:	e667      	b.n	801dab4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801dde4:	d024      	beq.n	801de30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801dde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dde8:	982b      	ldr	r0, [sp, #172]	; 0xac
 801ddea:	3b01      	subs	r3, #1
 801ddec:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ddee:	fb00 4003 	mla	r0, r0, r3, r4
 801ddf2:	1400      	asrs	r0, r0, #16
 801ddf4:	f53f ae7b 	bmi.w	801daee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ddf8:	3901      	subs	r1, #1
 801ddfa:	4288      	cmp	r0, r1
 801ddfc:	f6bf ae77 	bge.w	801daee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801de00:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801de02:	fb01 5303 	mla	r3, r1, r3, r5
 801de06:	141b      	asrs	r3, r3, #16
 801de08:	f53f ae71 	bmi.w	801daee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801de0c:	3a01      	subs	r2, #1
 801de0e:	4293      	cmp	r3, r2
 801de10:	f6bf ae6d 	bge.w	801daee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801de14:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801de18:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801de1c:	f1bb 0f00 	cmp.w	fp, #0
 801de20:	dc70      	bgt.n	801df04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801de22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de24:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801de28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de2a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801de2e:	930c      	str	r3, [sp, #48]	; 0x30
 801de30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de32:	2b00      	cmp	r3, #0
 801de34:	f340 81be 	ble.w	801e1b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801de38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801de3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de46:	eef0 6a62 	vmov.f32	s13, s5
 801de4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de56:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801de5a:	eef0 6a43 	vmov.f32	s13, s6
 801de5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de62:	ee16 5a90 	vmov	r5, s13
 801de66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de7e:	ee12 2a90 	vmov	r2, s5
 801de82:	eef0 2a47 	vmov.f32	s5, s14
 801de86:	fb92 f3f3 	sdiv	r3, r2, r3
 801de8a:	ee13 2a10 	vmov	r2, s6
 801de8e:	932b      	str	r3, [sp, #172]	; 0xac
 801de90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801de92:	eeb0 3a67 	vmov.f32	s6, s15
 801de96:	fb92 f3f3 	sdiv	r3, r2, r3
 801de9a:	932c      	str	r3, [sp, #176]	; 0xb0
 801de9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801dea0:	3b01      	subs	r3, #1
 801dea2:	9319      	str	r3, [sp, #100]	; 0x64
 801dea4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dea6:	bf08      	it	eq
 801dea8:	4613      	moveq	r3, r2
 801deaa:	9309      	str	r3, [sp, #36]	; 0x24
 801deac:	e5f4      	b.n	801da98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801deae:	2900      	cmp	r1, #0
 801deb0:	f43f ae66 	beq.w	801db80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801deb4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801deb8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801debc:	900a      	str	r0, [sp, #40]	; 0x28
 801debe:	0e00      	lsrs	r0, r0, #24
 801dec0:	9013      	str	r0, [sp, #76]	; 0x4c
 801dec2:	e65d      	b.n	801db80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801dec4:	f113 0801 	adds.w	r8, r3, #1
 801dec8:	f53f af74 	bmi.w	801ddb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801decc:	4540      	cmp	r0, r8
 801dece:	f6ff af71 	blt.w	801ddb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801ded2:	f11c 0801 	adds.w	r8, ip, #1
 801ded6:	f53f af6d 	bmi.w	801ddb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801deda:	45c6      	cmp	lr, r8
 801dedc:	f6ff af6a 	blt.w	801ddb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dee0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801dee2:	b200      	sxth	r0, r0
 801dee4:	9302      	str	r3, [sp, #8]
 801dee6:	fa0f f38e 	sxth.w	r3, lr
 801deea:	9000      	str	r0, [sp, #0]
 801deec:	9301      	str	r3, [sp, #4]
 801deee:	4633      	mov	r3, r6
 801def0:	981d      	ldr	r0, [sp, #116]	; 0x74
 801def2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801def6:	e9cd c203 	strd	ip, r2, [sp, #12]
 801defa:	4639      	mov	r1, r7
 801defc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801defe:	f7ff fc63 	bl	801d7c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801df02:	e757      	b.n	801ddb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801df04:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801df06:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801df0a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801df0c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801df10:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801df12:	1427      	asrs	r7, r4, #16
 801df14:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801df16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df1a:	142b      	asrs	r3, r5, #16
 801df1c:	fb01 7303 	mla	r3, r1, r3, r7
 801df20:	18e7      	adds	r7, r4, r3
 801df22:	5ce3      	ldrb	r3, [r4, r3]
 801df24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801df28:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801df2c:	2a00      	cmp	r2, #0
 801df2e:	f000 8137 	beq.w	801e1a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801df32:	f897 e001 	ldrb.w	lr, [r7, #1]
 801df36:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801df3a:	9410      	str	r4, [sp, #64]	; 0x40
 801df3c:	0e24      	lsrs	r4, r4, #24
 801df3e:	9417      	str	r4, [sp, #92]	; 0x5c
 801df40:	b170      	cbz	r0, 801df60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801df42:	eb07 0e01 	add.w	lr, r7, r1
 801df46:	5c79      	ldrb	r1, [r7, r1]
 801df48:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801df4c:	910b      	str	r1, [sp, #44]	; 0x2c
 801df4e:	0e09      	lsrs	r1, r1, #24
 801df50:	9114      	str	r1, [sp, #80]	; 0x50
 801df52:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801df56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801df5a:	9111      	str	r1, [sp, #68]	; 0x44
 801df5c:	0e09      	lsrs	r1, r1, #24
 801df5e:	9118      	str	r1, [sp, #96]	; 0x60
 801df60:	b292      	uxth	r2, r2
 801df62:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801df64:	b280      	uxth	r0, r0
 801df66:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801df68:	fb02 f800 	mul.w	r8, r2, r0
 801df6c:	0112      	lsls	r2, r2, #4
 801df6e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801df72:	eba2 0e08 	sub.w	lr, r2, r8
 801df76:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801df7a:	b280      	uxth	r0, r0
 801df7c:	fa1f fe8e 	uxth.w	lr, lr
 801df80:	1a12      	subs	r2, r2, r0
 801df82:	fb0e f101 	mul.w	r1, lr, r1
 801df86:	b292      	uxth	r2, r2
 801df88:	fb02 110c 	mla	r1, r2, ip, r1
 801df8c:	fb00 1104 	mla	r1, r0, r4, r1
 801df90:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801df92:	fb08 1104 	mla	r1, r8, r4, r1
 801df96:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801df9a:	2900      	cmp	r1, #0
 801df9c:	f000 80f5 	beq.w	801e18a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801dfa0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dfa4:	d019      	beq.n	801dfda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801dfa6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dfaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dfae:	fb0c fa0a 	mul.w	sl, ip, sl
 801dfb2:	fb0c fc03 	mul.w	ip, ip, r3
 801dfb6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dfba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dfbe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801dfc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dfc6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dfca:	4453      	add	r3, sl
 801dfcc:	0a3f      	lsrs	r7, r7, #8
 801dfce:	0a1b      	lsrs	r3, r3, #8
 801dfd0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dfd4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dfd8:	433b      	orrs	r3, r7
 801dfda:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dfdc:	2cff      	cmp	r4, #255	; 0xff
 801dfde:	d020      	beq.n	801e022 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801dfe0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dfe2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dfe6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dfe8:	4367      	muls	r7, r4
 801dfea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dfec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dff0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dff4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dff6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dffa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dffe:	fb04 fa0a 	mul.w	sl, r4, sl
 801e002:	44bc      	add	ip, r7
 801e004:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e008:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e00c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e010:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e014:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e018:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e01c:	ea4c 040a 	orr.w	r4, ip, sl
 801e020:	9410      	str	r4, [sp, #64]	; 0x40
 801e022:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e024:	2cff      	cmp	r4, #255	; 0xff
 801e026:	d020      	beq.n	801e06a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801e028:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e02a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e02e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e030:	4367      	muls	r7, r4
 801e032:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e034:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e038:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e03c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e03e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e042:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e046:	fb04 fa0a 	mul.w	sl, r4, sl
 801e04a:	44bc      	add	ip, r7
 801e04c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e050:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e054:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e058:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e05c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e060:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e064:	ea4c 040a 	orr.w	r4, ip, sl
 801e068:	940b      	str	r4, [sp, #44]	; 0x2c
 801e06a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e06c:	2cff      	cmp	r4, #255	; 0xff
 801e06e:	d020      	beq.n	801e0b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801e070:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e072:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e076:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e078:	4367      	muls	r7, r4
 801e07a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e07c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e080:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e084:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e086:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e08a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e08e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e092:	44bc      	add	ip, r7
 801e094:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e098:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e09c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e0a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e0ac:	ea4c 040a 	orr.w	r4, ip, sl
 801e0b0:	9411      	str	r4, [sp, #68]	; 0x44
 801e0b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e0b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e0b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e0bc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e0c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e0c2:	fb0e f707 	mul.w	r7, lr, r7
 801e0c6:	fb02 770c 	mla	r7, r2, ip, r7
 801e0ca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e0ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e0d0:	fb00 770c 	mla	r7, r0, ip, r7
 801e0d4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e0d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e0da:	fb08 770c 	mla	r7, r8, ip, r7
 801e0de:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e0e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e0e4:	fb0e fe0c 	mul.w	lr, lr, ip
 801e0e8:	0a3f      	lsrs	r7, r7, #8
 801e0ea:	fb02 e303 	mla	r3, r2, r3, lr
 801e0ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e0f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e0f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e0f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e0fa:	fb00 330a 	mla	r3, r0, sl, r3
 801e0fe:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e102:	f8b9 0000 	ldrh.w	r0, [r9]
 801e106:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e10c:	1202      	asrs	r2, r0, #8
 801e10e:	434b      	muls	r3, r1
 801e110:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e114:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e118:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e11c:	1c59      	adds	r1, r3, #1
 801e11e:	ea47 070c 	orr.w	r7, r7, ip
 801e122:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e126:	0c3b      	lsrs	r3, r7, #16
 801e128:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e12c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801e130:	b2ff      	uxtb	r7, r7
 801e132:	fb13 f304 	smulbb	r3, r3, r4
 801e136:	b2c9      	uxtb	r1, r1
 801e138:	fb1c fc04 	smulbb	ip, ip, r4
 801e13c:	fb02 3201 	mla	r2, r2, r1, r3
 801e140:	10c3      	asrs	r3, r0, #3
 801e142:	fb17 f704 	smulbb	r7, r7, r4
 801e146:	00c0      	lsls	r0, r0, #3
 801e148:	b292      	uxth	r2, r2
 801e14a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e14e:	b2c0      	uxtb	r0, r0
 801e150:	fb03 c301 	mla	r3, r3, r1, ip
 801e154:	f102 0c01 	add.w	ip, r2, #1
 801e158:	fb00 7001 	mla	r0, r0, r1, r7
 801e15c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e160:	b280      	uxth	r0, r0
 801e162:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801e166:	b29b      	uxth	r3, r3
 801e168:	1c42      	adds	r2, r0, #1
 801e16a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e16e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e172:	ea42 020c 	orr.w	r2, r2, ip
 801e176:	f103 0c01 	add.w	ip, r3, #1
 801e17a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e17e:	095b      	lsrs	r3, r3, #5
 801e180:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e184:	431a      	orrs	r2, r3
 801e186:	f8a9 2000 	strh.w	r2, [r9]
 801e18a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e18c:	f109 0902 	add.w	r9, r9, #2
 801e190:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e192:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e196:	441a      	add	r2, r3
 801e198:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e19a:	9229      	str	r2, [sp, #164]	; 0xa4
 801e19c:	441d      	add	r5, r3
 801e19e:	e63d      	b.n	801de1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e1a0:	2800      	cmp	r0, #0
 801e1a2:	f43f aedd 	beq.w	801df60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e1a6:	5c79      	ldrb	r1, [r7, r1]
 801e1a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e1ac:	910b      	str	r1, [sp, #44]	; 0x2c
 801e1ae:	0e09      	lsrs	r1, r1, #24
 801e1b0:	9114      	str	r1, [sp, #80]	; 0x50
 801e1b2:	e6d5      	b.n	801df60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e1b4:	b01f      	add	sp, #124	; 0x7c
 801e1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e1ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801e1ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1be:	b089      	sub	sp, #36	; 0x24
 801e1c0:	9101      	str	r1, [sp, #4]
 801e1c2:	9801      	ldr	r0, [sp, #4]
 801e1c4:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801e1c8:	8800      	ldrh	r0, [r0, #0]
 801e1ca:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801e1ce:	1206      	asrs	r6, r0, #8
 801e1d0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801e1d4:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801e1d8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e1dc:	9602      	str	r6, [sp, #8]
 801e1de:	10c6      	asrs	r6, r0, #3
 801e1e0:	00c0      	lsls	r0, r0, #3
 801e1e2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e1e6:	b2c0      	uxtb	r0, r0
 801e1e8:	9603      	str	r6, [sp, #12]
 801e1ea:	9004      	str	r0, [sp, #16]
 801e1ec:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801e1f0:	fb07 100c 	mla	r0, r7, ip, r1
 801e1f4:	2f00      	cmp	r7, #0
 801e1f6:	eb02 0e00 	add.w	lr, r2, r0
 801e1fa:	f2c0 810a 	blt.w	801e412 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e1fe:	45b8      	cmp	r8, r7
 801e200:	f340 8107 	ble.w	801e412 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e204:	2900      	cmp	r1, #0
 801e206:	f2c0 8102 	blt.w	801e40e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e20a:	458c      	cmp	ip, r1
 801e20c:	f340 80ff 	ble.w	801e40e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e210:	5c12      	ldrb	r2, [r2, r0]
 801e212:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e216:	1c4a      	adds	r2, r1, #1
 801e218:	f100 80fe 	bmi.w	801e418 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e21c:	4594      	cmp	ip, r2
 801e21e:	f340 80fb 	ble.w	801e418 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e222:	2d00      	cmp	r5, #0
 801e224:	f000 80fa 	beq.w	801e41c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801e228:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e22c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e230:	3701      	adds	r7, #1
 801e232:	f100 80f7 	bmi.w	801e424 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e236:	45b8      	cmp	r8, r7
 801e238:	f340 80f4 	ble.w	801e424 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e23c:	2c00      	cmp	r4, #0
 801e23e:	f000 80f4 	beq.w	801e42a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801e242:	2900      	cmp	r1, #0
 801e244:	eb0e 020c 	add.w	r2, lr, ip
 801e248:	f2c0 80ea 	blt.w	801e420 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e24c:	458c      	cmp	ip, r1
 801e24e:	f340 80e7 	ble.w	801e420 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e252:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801e256:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801e25a:	3101      	adds	r1, #1
 801e25c:	f100 80e8 	bmi.w	801e430 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e260:	458c      	cmp	ip, r1
 801e262:	f340 80e5 	ble.w	801e430 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e266:	2d00      	cmp	r5, #0
 801e268:	f000 80e4 	beq.w	801e434 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801e26c:	7852      	ldrb	r2, [r2, #1]
 801e26e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e272:	0e0b      	lsrs	r3, r1, #24
 801e274:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e278:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e27c:	9300      	str	r3, [sp, #0]
 801e27e:	b2a4      	uxth	r4, r4
 801e280:	b2ab      	uxth	r3, r5
 801e282:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801e286:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e28a:	fb03 f904 	mul.w	r9, r3, r4
 801e28e:	011b      	lsls	r3, r3, #4
 801e290:	fb0a f505 	mul.w	r5, sl, r5
 801e294:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801e298:	eba3 0e09 	sub.w	lr, r3, r9
 801e29c:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801e2a0:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801e2a4:	0a28      	lsrs	r0, r5, #8
 801e2a6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801e2aa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e2ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e2b2:	fb0a f303 	mul.w	r3, sl, r3
 801e2b6:	fb08 f707 	mul.w	r7, r8, r7
 801e2ba:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801e2be:	4405      	add	r5, r0
 801e2c0:	fb08 fc0c 	mul.w	ip, r8, ip
 801e2c4:	b2a4      	uxth	r4, r4
 801e2c6:	0a2d      	lsrs	r5, r5, #8
 801e2c8:	fa1f fe8e 	uxth.w	lr, lr
 801e2cc:	1b12      	subs	r2, r2, r4
 801e2ce:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801e2d2:	b292      	uxth	r2, r2
 801e2d4:	9005      	str	r0, [sp, #20]
 801e2d6:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801e2da:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e2de:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801e2e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e2e6:	0a1b      	lsrs	r3, r3, #8
 801e2e8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e2ec:	9306      	str	r3, [sp, #24]
 801e2ee:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801e2f2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e2f6:	4460      	add	r0, ip
 801e2f8:	fb0b f303 	mul.w	r3, fp, r3
 801e2fc:	fb0b f606 	mul.w	r6, fp, r6
 801e300:	0a00      	lsrs	r0, r0, #8
 801e302:	0a1d      	lsrs	r5, r3, #8
 801e304:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e308:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e30c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e310:	441d      	add	r5, r3
 801e312:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801e316:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e31a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e31e:	0a2d      	lsrs	r5, r5, #8
 801e320:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801e324:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801e328:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e32c:	0a36      	lsrs	r6, r6, #8
 801e32e:	0a1b      	lsrs	r3, r3, #8
 801e330:	fb05 f50e 	mul.w	r5, r5, lr
 801e334:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e338:	9307      	str	r3, [sp, #28]
 801e33a:	0e0b      	lsrs	r3, r1, #24
 801e33c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e340:	fb0e f606 	mul.w	r6, lr, r6
 801e344:	435f      	muls	r7, r3
 801e346:	4359      	muls	r1, r3
 801e348:	9b05      	ldr	r3, [sp, #20]
 801e34a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e34e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e352:	fb03 5502 	mla	r5, r3, r2, r5
 801e356:	9b06      	ldr	r3, [sp, #24]
 801e358:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e35c:	fb0e fe0b 	mul.w	lr, lr, fp
 801e360:	44bc      	add	ip, r7
 801e362:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801e366:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e36a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801e36e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e372:	0a09      	lsrs	r1, r1, #8
 801e374:	fb0c 5509 	mla	r5, ip, r9, r5
 801e378:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e37c:	fb00 5504 	mla	r5, r0, r4, r5
 801e380:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801e384:	9b07      	ldr	r3, [sp, #28]
 801e386:	fb02 6000 	mla	r0, r2, r0, r6
 801e38a:	0a2d      	lsrs	r5, r5, #8
 801e38c:	fb02 e20a 	mla	r2, r2, sl, lr
 801e390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e394:	fb09 0001 	mla	r0, r9, r1, r0
 801e398:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e39c:	fb04 0003 	mla	r0, r4, r3, r0
 801e3a0:	9b00      	ldr	r3, [sp, #0]
 801e3a2:	fb04 2408 	mla	r4, r4, r8, r2
 801e3a6:	9a04      	ldr	r2, [sp, #16]
 801e3a8:	0a00      	lsrs	r0, r0, #8
 801e3aa:	fb09 4903 	mla	r9, r9, r3, r4
 801e3ae:	9b02      	ldr	r3, [sp, #8]
 801e3b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e3b4:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801e3b8:	4305      	orrs	r5, r0
 801e3ba:	fa5f f989 	uxtb.w	r9, r9
 801e3be:	fb03 f109 	mul.w	r1, r3, r9
 801e3c2:	9b03      	ldr	r3, [sp, #12]
 801e3c4:	fb03 f309 	mul.w	r3, r3, r9
 801e3c8:	fb02 f909 	mul.w	r9, r2, r9
 801e3cc:	1c4a      	adds	r2, r1, #1
 801e3ce:	1c58      	adds	r0, r3, #1
 801e3d0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e3d4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e3d8:	0c2a      	lsrs	r2, r5, #16
 801e3da:	0a2b      	lsrs	r3, r5, #8
 801e3dc:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e3e0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e3e4:	0212      	lsls	r2, r2, #8
 801e3e6:	00db      	lsls	r3, r3, #3
 801e3e8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801e3ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e3f0:	4313      	orrs	r3, r2
 801e3f2:	f109 0201 	add.w	r2, r9, #1
 801e3f6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e3fa:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801e3fe:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e402:	431d      	orrs	r5, r3
 801e404:	9b01      	ldr	r3, [sp, #4]
 801e406:	801d      	strh	r5, [r3, #0]
 801e408:	b009      	add	sp, #36	; 0x24
 801e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e40e:	2000      	movs	r0, #0
 801e410:	e701      	b.n	801e216 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801e412:	2600      	movs	r6, #0
 801e414:	4630      	mov	r0, r6
 801e416:	e70b      	b.n	801e230 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e418:	2600      	movs	r6, #0
 801e41a:	e709      	b.n	801e230 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e41c:	462e      	mov	r6, r5
 801e41e:	e707      	b.n	801e230 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e420:	2700      	movs	r7, #0
 801e422:	e71a      	b.n	801e25a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801e424:	2100      	movs	r1, #0
 801e426:	460f      	mov	r7, r1
 801e428:	e723      	b.n	801e272 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e42a:	4621      	mov	r1, r4
 801e42c:	4627      	mov	r7, r4
 801e42e:	e720      	b.n	801e272 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e430:	2100      	movs	r1, #0
 801e432:	e71e      	b.n	801e272 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e434:	4629      	mov	r1, r5
 801e436:	e71c      	b.n	801e272 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801e438 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e43c:	b09b      	sub	sp, #108	; 0x6c
 801e43e:	9218      	str	r2, [sp, #96]	; 0x60
 801e440:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e442:	9019      	str	r0, [sp, #100]	; 0x64
 801e444:	9116      	str	r1, [sp, #88]	; 0x58
 801e446:	6850      	ldr	r0, [r2, #4]
 801e448:	9307      	str	r3, [sp, #28]
 801e44a:	6812      	ldr	r2, [r2, #0]
 801e44c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801e44e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e452:	fb00 1303 	mla	r3, r0, r3, r1
 801e456:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e45a:	930a      	str	r3, [sp, #40]	; 0x28
 801e45c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	930f      	str	r3, [sp, #60]	; 0x3c
 801e462:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e464:	685e      	ldr	r6, [r3, #4]
 801e466:	3604      	adds	r6, #4
 801e468:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	dc03      	bgt.n	801e476 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e46e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e470:	2b00      	cmp	r3, #0
 801e472:	f340 8373 	ble.w	801eb5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801e476:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e478:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e47c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e480:	1e48      	subs	r0, r1, #1
 801e482:	1e57      	subs	r7, r2, #1
 801e484:	9b07      	ldr	r3, [sp, #28]
 801e486:	2b00      	cmp	r3, #0
 801e488:	f340 818f 	ble.w	801e7aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801e48c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e48e:	142b      	asrs	r3, r5, #16
 801e490:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e494:	d406      	bmi.n	801e4a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e496:	4584      	cmp	ip, r0
 801e498:	da04      	bge.n	801e4a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	db02      	blt.n	801e4a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e49e:	42bb      	cmp	r3, r7
 801e4a0:	f2c0 8184 	blt.w	801e7ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801e4a4:	f11c 0c01 	adds.w	ip, ip, #1
 801e4a8:	f100 8172 	bmi.w	801e790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e4ac:	4561      	cmp	r1, ip
 801e4ae:	f2c0 816f 	blt.w	801e790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e4b2:	3301      	adds	r3, #1
 801e4b4:	f100 816c 	bmi.w	801e790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e4b8:	429a      	cmp	r2, r3
 801e4ba:	f2c0 8169 	blt.w	801e790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e4be:	9b07      	ldr	r3, [sp, #28]
 801e4c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e4c2:	9317      	str	r3, [sp, #92]	; 0x5c
 801e4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	f340 818e 	ble.w	801e7e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801e4cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e4ce:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e4d2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e4d6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e4da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e4dc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e4e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e4e2:	141b      	asrs	r3, r3, #16
 801e4e4:	f100 81d1 	bmi.w	801e88a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e4e8:	f101 38ff 	add.w	r8, r1, #4294967295
 801e4ec:	4543      	cmp	r3, r8
 801e4ee:	f280 81cc 	bge.w	801e88a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e4f2:	f1bc 0f00 	cmp.w	ip, #0
 801e4f6:	f2c0 81c8 	blt.w	801e88a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e4fa:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e4fe:	45c4      	cmp	ip, r8
 801e500:	f280 81c3 	bge.w	801e88a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e504:	b209      	sxth	r1, r1
 801e506:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e508:	fb0c 3301 	mla	r3, ip, r1, r3
 801e50c:	eb04 0803 	add.w	r8, r4, r3
 801e510:	5ce3      	ldrb	r3, [r4, r3]
 801e512:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e516:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e51a:	2a00      	cmp	r2, #0
 801e51c:	f000 81aa 	beq.w	801e874 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801e520:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e524:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e528:	940b      	str	r4, [sp, #44]	; 0x2c
 801e52a:	0e24      	lsrs	r4, r4, #24
 801e52c:	9412      	str	r4, [sp, #72]	; 0x48
 801e52e:	b178      	cbz	r0, 801e550 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e530:	eb08 0c01 	add.w	ip, r8, r1
 801e534:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e538:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e53c:	9108      	str	r1, [sp, #32]
 801e53e:	0e09      	lsrs	r1, r1, #24
 801e540:	9110      	str	r1, [sp, #64]	; 0x40
 801e542:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e546:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e54a:	910c      	str	r1, [sp, #48]	; 0x30
 801e54c:	0e09      	lsrs	r1, r1, #24
 801e54e:	9113      	str	r1, [sp, #76]	; 0x4c
 801e550:	b292      	uxth	r2, r2
 801e552:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e554:	b280      	uxth	r0, r0
 801e556:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e558:	fb02 f900 	mul.w	r9, r2, r0
 801e55c:	0112      	lsls	r2, r2, #4
 801e55e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e562:	eba2 0809 	sub.w	r8, r2, r9
 801e566:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e56a:	b280      	uxth	r0, r0
 801e56c:	fa1f f888 	uxth.w	r8, r8
 801e570:	1a12      	subs	r2, r2, r0
 801e572:	fb08 f101 	mul.w	r1, r8, r1
 801e576:	b292      	uxth	r2, r2
 801e578:	fb02 110e 	mla	r1, r2, lr, r1
 801e57c:	fb00 1104 	mla	r1, r0, r4, r1
 801e580:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e582:	fb09 1104 	mla	r1, r9, r4, r1
 801e586:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e58a:	2900      	cmp	r1, #0
 801e58c:	f000 80f5 	beq.w	801e77a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e590:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e594:	d01b      	beq.n	801e5ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801e596:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e59a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e59e:	fb0e fa0a 	mul.w	sl, lr, sl
 801e5a2:	fb0e fe03 	mul.w	lr, lr, r3
 801e5a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e5aa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e5ae:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e5b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e5b6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e5ba:	4453      	add	r3, sl
 801e5bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e5c0:	0a1b      	lsrs	r3, r3, #8
 801e5c2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e5c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e5ca:	ea43 030c 	orr.w	r3, r3, ip
 801e5ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e5d0:	2cff      	cmp	r4, #255	; 0xff
 801e5d2:	d021      	beq.n	801e618 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e5d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e5d6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e5da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e5dc:	fb04 fb0b 	mul.w	fp, r4, fp
 801e5e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e5e2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e5e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e5e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e5ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e5f0:	fb04 fa0a 	mul.w	sl, r4, sl
 801e5f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e5f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e5fc:	44de      	add	lr, fp
 801e5fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e602:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e606:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e60a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e60e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e612:	ea4e 040a 	orr.w	r4, lr, sl
 801e616:	940b      	str	r4, [sp, #44]	; 0x2c
 801e618:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e61a:	2cff      	cmp	r4, #255	; 0xff
 801e61c:	d021      	beq.n	801e662 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e61e:	9c08      	ldr	r4, [sp, #32]
 801e620:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e624:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e626:	fb04 fb0b 	mul.w	fp, r4, fp
 801e62a:	9c08      	ldr	r4, [sp, #32]
 801e62c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e630:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e632:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e636:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e63a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e63e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e642:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e646:	44de      	add	lr, fp
 801e648:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e64c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e650:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e654:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e658:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e65c:	ea4e 040a 	orr.w	r4, lr, sl
 801e660:	9408      	str	r4, [sp, #32]
 801e662:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e664:	2cff      	cmp	r4, #255	; 0xff
 801e666:	d021      	beq.n	801e6ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801e668:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e66a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e66e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e670:	fb04 fb0b 	mul.w	fp, r4, fp
 801e674:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e676:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e67a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e67c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e680:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e684:	fb04 fa0a 	mul.w	sl, r4, sl
 801e688:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e68c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e690:	44de      	add	lr, fp
 801e692:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e696:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e69a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e69e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e6a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e6a6:	ea4e 040a 	orr.w	r4, lr, sl
 801e6aa:	940c      	str	r4, [sp, #48]	; 0x30
 801e6ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e6ae:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e6b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e6b6:	43c9      	mvns	r1, r1
 801e6b8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e6bc:	9c08      	ldr	r4, [sp, #32]
 801e6be:	fb08 fc0c 	mul.w	ip, r8, ip
 801e6c2:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e6c6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e6ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e6cc:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e6d0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e6d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e6d6:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e6da:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e6de:	fb08 f80e 	mul.w	r8, r8, lr
 801e6e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6e6:	fa5f fe81 	uxtb.w	lr, r1
 801e6ea:	fb02 8303 	mla	r3, r2, r3, r8
 801e6ee:	9a08      	ldr	r2, [sp, #32]
 801e6f0:	f8b7 8000 	ldrh.w	r8, [r7]
 801e6f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e6f8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e6fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801e702:	fb00 330a 	mla	r3, r0, sl, r3
 801e706:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801e70a:	ea4f 2228 	mov.w	r2, r8, asr #8
 801e70e:	fb09 3900 	mla	r9, r9, r0, r3
 801e712:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801e716:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e71a:	b2c9      	uxtb	r1, r1
 801e71c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e720:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e724:	fb02 f20e 	mul.w	r2, r2, lr
 801e728:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e72c:	fb00 f00e 	mul.w	r0, r0, lr
 801e730:	1c53      	adds	r3, r2, #1
 801e732:	fb01 f10e 	mul.w	r1, r1, lr
 801e736:	ea4c 0c09 	orr.w	ip, ip, r9
 801e73a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e73e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801e742:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e746:	4a60      	ldr	r2, [pc, #384]	; (801e8c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801e748:	b2db      	uxtb	r3, r3
 801e74a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801e74e:	1c43      	adds	r3, r0, #1
 801e750:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e754:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e758:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e75c:	00db      	lsls	r3, r3, #3
 801e75e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e762:	4313      	orrs	r3, r2
 801e764:	1c4a      	adds	r2, r1, #1
 801e766:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e76a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e76e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801e772:	ea4c 0c03 	orr.w	ip, ip, r3
 801e776:	f8a7 c000 	strh.w	ip, [r7]
 801e77a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e77c:	3702      	adds	r7, #2
 801e77e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e780:	441a      	add	r2, r3
 801e782:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e784:	441d      	add	r5, r3
 801e786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e788:	9225      	str	r2, [sp, #148]	; 0x94
 801e78a:	3b01      	subs	r3, #1
 801e78c:	9317      	str	r3, [sp, #92]	; 0x5c
 801e78e:	e699      	b.n	801e4c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e790:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e792:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e794:	441c      	add	r4, r3
 801e796:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e798:	441d      	add	r5, r3
 801e79a:	9b07      	ldr	r3, [sp, #28]
 801e79c:	9425      	str	r4, [sp, #148]	; 0x94
 801e79e:	3b01      	subs	r3, #1
 801e7a0:	9307      	str	r3, [sp, #28]
 801e7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7a4:	3302      	adds	r3, #2
 801e7a6:	930a      	str	r3, [sp, #40]	; 0x28
 801e7a8:	e66c      	b.n	801e484 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e7aa:	d024      	beq.n	801e7f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801e7ac:	9b07      	ldr	r3, [sp, #28]
 801e7ae:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e7b0:	3b01      	subs	r3, #1
 801e7b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e7b4:	fb00 4003 	mla	r0, r0, r3, r4
 801e7b8:	1400      	asrs	r0, r0, #16
 801e7ba:	f53f ae80 	bmi.w	801e4be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e7be:	3901      	subs	r1, #1
 801e7c0:	4288      	cmp	r0, r1
 801e7c2:	f6bf ae7c 	bge.w	801e4be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e7c6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e7c8:	fb01 5303 	mla	r3, r1, r3, r5
 801e7cc:	141b      	asrs	r3, r3, #16
 801e7ce:	f53f ae76 	bmi.w	801e4be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e7d2:	3a01      	subs	r2, #1
 801e7d4:	4293      	cmp	r3, r2
 801e7d6:	f6bf ae72 	bge.w	801e4be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e7da:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e7de:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e7e2:	f1bb 0f00 	cmp.w	fp, #0
 801e7e6:	dc71      	bgt.n	801e8cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801e7e8:	9b07      	ldr	r3, [sp, #28]
 801e7ea:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7f0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e7f4:	930a      	str	r3, [sp, #40]	; 0x28
 801e7f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e7f8:	2b00      	cmp	r3, #0
 801e7fa:	f340 81af 	ble.w	801eb5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801e7fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e802:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e804:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e808:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e80c:	eef0 6a62 	vmov.f32	s13, s5
 801e810:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e814:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e818:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e81c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801e820:	eef0 6a43 	vmov.f32	s13, s6
 801e824:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e828:	ee16 5a90 	vmov	r5, s13
 801e82c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e830:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e834:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e838:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e83c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e840:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e844:	ee12 2a90 	vmov	r2, s5
 801e848:	eef0 2a47 	vmov.f32	s5, s14
 801e84c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e850:	ee13 2a10 	vmov	r2, s6
 801e854:	9327      	str	r3, [sp, #156]	; 0x9c
 801e856:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e858:	eeb0 3a67 	vmov.f32	s6, s15
 801e85c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e860:	9328      	str	r3, [sp, #160]	; 0xa0
 801e862:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e864:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e866:	3b01      	subs	r3, #1
 801e868:	9316      	str	r3, [sp, #88]	; 0x58
 801e86a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e86c:	bf08      	it	eq
 801e86e:	4613      	moveq	r3, r2
 801e870:	9307      	str	r3, [sp, #28]
 801e872:	e5f9      	b.n	801e468 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e874:	2800      	cmp	r0, #0
 801e876:	f43f ae6b 	beq.w	801e550 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e87a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e87e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e882:	9108      	str	r1, [sp, #32]
 801e884:	0e09      	lsrs	r1, r1, #24
 801e886:	9110      	str	r1, [sp, #64]	; 0x40
 801e888:	e662      	b.n	801e550 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e88a:	f113 0801 	adds.w	r8, r3, #1
 801e88e:	f53f af74 	bmi.w	801e77a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e892:	4541      	cmp	r1, r8
 801e894:	f6ff af71 	blt.w	801e77a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e898:	f11c 0801 	adds.w	r8, ip, #1
 801e89c:	f53f af6d 	bmi.w	801e77a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e8a0:	45c6      	cmp	lr, r8
 801e8a2:	f6ff af6a 	blt.w	801e77a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e8a6:	b209      	sxth	r1, r1
 801e8a8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e8ac:	fa0f f38e 	sxth.w	r3, lr
 801e8b0:	9100      	str	r1, [sp, #0]
 801e8b2:	4639      	mov	r1, r7
 801e8b4:	9301      	str	r3, [sp, #4]
 801e8b6:	4633      	mov	r3, r6
 801e8b8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e8bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e8be:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e8c0:	f7ff fc7b 	bl	801e1ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801e8c4:	e759      	b.n	801e77a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e8c6:	bf00      	nop
 801e8c8:	fffff800 	.word	0xfffff800
 801e8cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e8ce:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e8d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e8d4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e8d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e8da:	1427      	asrs	r7, r4, #16
 801e8dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e8de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e8e2:	142b      	asrs	r3, r5, #16
 801e8e4:	fb01 7303 	mla	r3, r1, r3, r7
 801e8e8:	18e7      	adds	r7, r4, r3
 801e8ea:	5ce3      	ldrb	r3, [r4, r3]
 801e8ec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e8f0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e8f4:	2a00      	cmp	r2, #0
 801e8f6:	f000 8127 	beq.w	801eb48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801e8fa:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e8fe:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e902:	940d      	str	r4, [sp, #52]	; 0x34
 801e904:	0e24      	lsrs	r4, r4, #24
 801e906:	9414      	str	r4, [sp, #80]	; 0x50
 801e908:	b170      	cbz	r0, 801e928 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801e90a:	eb07 0e01 	add.w	lr, r7, r1
 801e90e:	5c79      	ldrb	r1, [r7, r1]
 801e910:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e914:	9109      	str	r1, [sp, #36]	; 0x24
 801e916:	0e09      	lsrs	r1, r1, #24
 801e918:	9111      	str	r1, [sp, #68]	; 0x44
 801e91a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e91e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e922:	910e      	str	r1, [sp, #56]	; 0x38
 801e924:	0e09      	lsrs	r1, r1, #24
 801e926:	9115      	str	r1, [sp, #84]	; 0x54
 801e928:	b292      	uxth	r2, r2
 801e92a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e92c:	b280      	uxth	r0, r0
 801e92e:	fb02 f800 	mul.w	r8, r2, r0
 801e932:	0112      	lsls	r2, r2, #4
 801e934:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e938:	eba2 0e08 	sub.w	lr, r2, r8
 801e93c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e940:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e942:	b280      	uxth	r0, r0
 801e944:	fa1f fe8e 	uxth.w	lr, lr
 801e948:	1a09      	subs	r1, r1, r0
 801e94a:	fb0e f202 	mul.w	r2, lr, r2
 801e94e:	b289      	uxth	r1, r1
 801e950:	fb01 220c 	mla	r2, r1, ip, r2
 801e954:	fb00 2204 	mla	r2, r0, r4, r2
 801e958:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e95a:	fb08 2204 	mla	r2, r8, r4, r2
 801e95e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e962:	2a00      	cmp	r2, #0
 801e964:	f000 80e5 	beq.w	801eb32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801e968:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e96c:	d019      	beq.n	801e9a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801e96e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e972:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e976:	fb0c fa0a 	mul.w	sl, ip, sl
 801e97a:	fb0c fc03 	mul.w	ip, ip, r3
 801e97e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e982:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e986:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e98a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e98e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e992:	4453      	add	r3, sl
 801e994:	0a3f      	lsrs	r7, r7, #8
 801e996:	0a1b      	lsrs	r3, r3, #8
 801e998:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e99c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e9a0:	433b      	orrs	r3, r7
 801e9a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e9a4:	2cff      	cmp	r4, #255	; 0xff
 801e9a6:	d020      	beq.n	801e9ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801e9a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e9aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e9ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e9b0:	4367      	muls	r7, r4
 801e9b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e9b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e9b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e9bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e9be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e9c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9c6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9ca:	44bc      	add	ip, r7
 801e9cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e9d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e9e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e9e4:	ea4c 040a 	orr.w	r4, ip, sl
 801e9e8:	940d      	str	r4, [sp, #52]	; 0x34
 801e9ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e9ec:	2cff      	cmp	r4, #255	; 0xff
 801e9ee:	d020      	beq.n	801ea32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801e9f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e9f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e9f8:	4367      	muls	r7, r4
 801e9fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9fc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea04:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ea06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ea0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea0e:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea12:	44bc      	add	ip, r7
 801ea14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ea18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea2c:	ea4c 040a 	orr.w	r4, ip, sl
 801ea30:	9409      	str	r4, [sp, #36]	; 0x24
 801ea32:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea34:	2cff      	cmp	r4, #255	; 0xff
 801ea36:	d020      	beq.n	801ea7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801ea38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea3a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ea3e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea40:	4367      	muls	r7, r4
 801ea42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea48:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ea52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea56:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea5a:	44bc      	add	ip, r7
 801ea5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ea60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea74:	ea4c 040a 	orr.w	r4, ip, sl
 801ea78:	940e      	str	r4, [sp, #56]	; 0x38
 801ea7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ea7c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ea80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ea84:	43d2      	mvns	r2, r2
 801ea86:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ea8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ea8c:	b2d2      	uxtb	r2, r2
 801ea8e:	fb0e f707 	mul.w	r7, lr, r7
 801ea92:	fb01 770c 	mla	r7, r1, ip, r7
 801ea96:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ea9a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea9c:	fb00 770c 	mla	r7, r0, ip, r7
 801eaa0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801eaa4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eaa6:	fb08 770c 	mla	r7, r8, ip, r7
 801eaaa:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801eaae:	fb0e fe0c 	mul.w	lr, lr, ip
 801eab2:	0a3f      	lsrs	r7, r7, #8
 801eab4:	fb01 e303 	mla	r3, r1, r3, lr
 801eab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801eaba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801eabe:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801eac2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801eac4:	fb00 330a 	mla	r3, r0, sl, r3
 801eac8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801eacc:	fb08 3c0c 	mla	ip, r8, ip, r3
 801ead0:	f8b9 3000 	ldrh.w	r3, [r9]
 801ead4:	1218      	asrs	r0, r3, #8
 801ead6:	10d9      	asrs	r1, r3, #3
 801ead8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eadc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eae0:	00db      	lsls	r3, r3, #3
 801eae2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eae6:	4350      	muls	r0, r2
 801eae8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801eaec:	b2db      	uxtb	r3, r3
 801eaee:	4351      	muls	r1, r2
 801eaf0:	ea47 070c 	orr.w	r7, r7, ip
 801eaf4:	4353      	muls	r3, r2
 801eaf6:	1c42      	adds	r2, r0, #1
 801eaf8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801eafc:	0c3a      	lsrs	r2, r7, #16
 801eafe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801eb02:	4a18      	ldr	r2, [pc, #96]	; (801eb64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801eb04:	b2c0      	uxtb	r0, r0
 801eb06:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801eb0a:	1c4a      	adds	r2, r1, #1
 801eb0c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801eb10:	0a3a      	lsrs	r2, r7, #8
 801eb12:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801eb16:	00c9      	lsls	r1, r1, #3
 801eb18:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eb1c:	4301      	orrs	r1, r0
 801eb1e:	1c58      	adds	r0, r3, #1
 801eb20:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801eb24:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801eb28:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801eb2c:	4308      	orrs	r0, r1
 801eb2e:	f8a9 0000 	strh.w	r0, [r9]
 801eb32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eb34:	f109 0902 	add.w	r9, r9, #2
 801eb38:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801eb3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb3e:	441a      	add	r2, r3
 801eb40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb42:	9225      	str	r2, [sp, #148]	; 0x94
 801eb44:	441d      	add	r5, r3
 801eb46:	e64c      	b.n	801e7e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801eb48:	2800      	cmp	r0, #0
 801eb4a:	f43f aeed 	beq.w	801e928 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801eb4e:	5c79      	ldrb	r1, [r7, r1]
 801eb50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801eb54:	9109      	str	r1, [sp, #36]	; 0x24
 801eb56:	0e09      	lsrs	r1, r1, #24
 801eb58:	9111      	str	r1, [sp, #68]	; 0x44
 801eb5a:	e6e5      	b.n	801e928 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801eb5c:	b01b      	add	sp, #108	; 0x6c
 801eb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb62:	bf00      	nop
 801eb64:	fffff800 	.word	0xfffff800

0801eb68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb6c:	b085      	sub	sp, #20
 801eb6e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801eb72:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801eb76:	2800      	cmp	r0, #0
 801eb78:	9103      	str	r1, [sp, #12]
 801eb7a:	fb00 7406 	mla	r4, r0, r6, r7
 801eb7e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801eb82:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801eb86:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801eb8a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801eb8e:	eb03 0904 	add.w	r9, r3, r4
 801eb92:	9501      	str	r5, [sp, #4]
 801eb94:	f2c0 8150 	blt.w	801ee38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801eb98:	4583      	cmp	fp, r0
 801eb9a:	f340 814d 	ble.w	801ee38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801eb9e:	2f00      	cmp	r7, #0
 801eba0:	f2c0 8146 	blt.w	801ee30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801eba4:	42be      	cmp	r6, r7
 801eba6:	f340 8143 	ble.w	801ee30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801ebaa:	f813 c004 	ldrb.w	ip, [r3, r4]
 801ebae:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801ebb2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801ebb6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ebba:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801ebbe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ebc2:	4355      	muls	r5, r2
 801ebc4:	fb0c f203 	mul.w	r2, ip, r3
 801ebc8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801ebcc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801ebd0:	441d      	add	r5, r3
 801ebd2:	f102 0320 	add.w	r3, r2, #32
 801ebd6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ebda:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801ebde:	0a1b      	lsrs	r3, r3, #8
 801ebe0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ebe4:	431c      	orrs	r4, r3
 801ebe6:	1c7b      	adds	r3, r7, #1
 801ebe8:	f100 812b 	bmi.w	801ee42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801ebec:	429e      	cmp	r6, r3
 801ebee:	f340 8128 	ble.w	801ee42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801ebf2:	2900      	cmp	r1, #0
 801ebf4:	f000 8128 	beq.w	801ee48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801ebf8:	9a01      	ldr	r2, [sp, #4]
 801ebfa:	f899 3001 	ldrb.w	r3, [r9, #1]
 801ebfe:	8855      	ldrh	r5, [r2, #2]
 801ec00:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801ec04:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801ec08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ec0c:	fb08 f802 	mul.w	r8, r8, r2
 801ec10:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801ec14:	435d      	muls	r5, r3
 801ec16:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801ec1a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ec1e:	44d0      	add	r8, sl
 801ec20:	f105 0a20 	add.w	sl, r5, #32
 801ec24:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801ec28:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801ec2c:	0a2d      	lsrs	r5, r5, #8
 801ec2e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ec32:	432a      	orrs	r2, r5
 801ec34:	3001      	adds	r0, #1
 801ec36:	f100 810d 	bmi.w	801ee54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801ec3a:	4583      	cmp	fp, r0
 801ec3c:	f340 810a 	ble.w	801ee54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801ec40:	f1be 0f00 	cmp.w	lr, #0
 801ec44:	f000 810b 	beq.w	801ee5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801ec48:	2f00      	cmp	r7, #0
 801ec4a:	f2c0 8100 	blt.w	801ee4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801ec4e:	42be      	cmp	r6, r7
 801ec50:	f340 80fd 	ble.w	801ee4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801ec54:	9801      	ldr	r0, [sp, #4]
 801ec56:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801ec5a:	f819 5006 	ldrb.w	r5, [r9, r6]
 801ec5e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801ec62:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ec66:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801ec6a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ec6e:	fb0a fa00 	mul.w	sl, sl, r0
 801ec72:	fb05 f808 	mul.w	r8, r5, r8
 801ec76:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801ec7a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801ec7e:	4482      	add	sl, r0
 801ec80:	f108 0020 	add.w	r0, r8, #32
 801ec84:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801ec88:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801ec8c:	0a00      	lsrs	r0, r0, #8
 801ec8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ec92:	ea4b 0b00 	orr.w	fp, fp, r0
 801ec96:	3701      	adds	r7, #1
 801ec98:	f100 80e6 	bmi.w	801ee68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801ec9c:	42be      	cmp	r6, r7
 801ec9e:	f340 80e3 	ble.w	801ee68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801eca2:	2900      	cmp	r1, #0
 801eca4:	f000 80e3 	beq.w	801ee6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801eca8:	3601      	adds	r6, #1
 801ecaa:	9801      	ldr	r0, [sp, #4]
 801ecac:	f819 7006 	ldrb.w	r7, [r9, r6]
 801ecb0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801ecb4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801ecb8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801ecbc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ecc0:	fb09 f906 	mul.w	r9, r9, r6
 801ecc4:	fb07 f800 	mul.w	r8, r7, r0
 801ecc8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801eccc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801ecd0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801ecd4:	44d1      	add	r9, sl
 801ecd6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801ecda:	f108 0020 	add.w	r0, r8, #32
 801ecde:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801ece2:	0a00      	lsrs	r0, r0, #8
 801ece4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ece8:	4330      	orrs	r0, r6
 801ecea:	b28e      	uxth	r6, r1
 801ecec:	fa1f f98e 	uxth.w	r9, lr
 801ecf0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801ecf4:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801ecf8:	fb06 f809 	mul.w	r8, r6, r9
 801ecfc:	0136      	lsls	r6, r6, #4
 801ecfe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ed02:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801ed06:	9601      	str	r6, [sp, #4]
 801ed08:	ea4a 0404 	orr.w	r4, sl, r4
 801ed0c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ed10:	fa1f f689 	uxth.w	r6, r9
 801ed14:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ed18:	fb11 f90e 	smulbb	r9, r1, lr
 801ed1c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ed20:	9602      	str	r6, [sp, #8]
 801ed22:	4626      	mov	r6, r4
 801ed24:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801ed28:	f1ce 0410 	rsb	r4, lr, #16
 801ed2c:	ea4a 0202 	orr.w	r2, sl, r2
 801ed30:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801ed34:	1a64      	subs	r4, r4, r1
 801ed36:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801ed3a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ed3e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ed42:	434a      	muls	r2, r1
 801ed44:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801ed48:	ea4a 0000 	orr.w	r0, sl, r0
 801ed4c:	9903      	ldr	r1, [sp, #12]
 801ed4e:	fb04 2406 	mla	r4, r4, r6, r2
 801ed52:	9e02      	ldr	r6, [sp, #8]
 801ed54:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801ed58:	fb09 4200 	mla	r2, r9, r0, r4
 801ed5c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801ed60:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801ed64:	8808      	ldrh	r0, [r1, #0]
 801ed66:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ed6a:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801ed6e:	ea44 0b0b 	orr.w	fp, r4, fp
 801ed72:	9c01      	ldr	r4, [sp, #4]
 801ed74:	b289      	uxth	r1, r1
 801ed76:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801ed7a:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801ed7e:	1ba4      	subs	r4, r4, r6
 801ed80:	9e01      	ldr	r6, [sp, #4]
 801ed82:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801ed86:	eba6 0608 	sub.w	r6, r6, r8
 801ed8a:	b2a4      	uxth	r4, r4
 801ed8c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ed90:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ed94:	b2b6      	uxth	r6, r6
 801ed96:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ed9a:	4373      	muls	r3, r6
 801ed9c:	ea42 0e0e 	orr.w	lr, r2, lr
 801eda0:	fb0c 3304 	mla	r3, ip, r4, r3
 801eda4:	9c02      	ldr	r4, [sp, #8]
 801eda6:	fa1f f28e 	uxth.w	r2, lr
 801edaa:	fb04 3505 	mla	r5, r4, r5, r3
 801edae:	10d4      	asrs	r4, r2, #3
 801edb0:	fb08 5707 	mla	r7, r8, r7, r5
 801edb4:	1215      	asrs	r5, r2, #8
 801edb6:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801edba:	00d2      	lsls	r2, r2, #3
 801edbc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801edc0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801edc4:	b2d2      	uxtb	r2, r2
 801edc6:	434f      	muls	r7, r1
 801edc8:	1c7b      	adds	r3, r7, #1
 801edca:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801edce:	1203      	asrs	r3, r0, #8
 801edd0:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801edd4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801edd8:	b2ff      	uxtb	r7, r7
 801edda:	fb13 f307 	smulbb	r3, r3, r7
 801edde:	fb05 3501 	mla	r5, r5, r1, r3
 801ede2:	10c3      	asrs	r3, r0, #3
 801ede4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801ede8:	b2ad      	uxth	r5, r5
 801edea:	fb13 f307 	smulbb	r3, r3, r7
 801edee:	fb04 3401 	mla	r4, r4, r1, r3
 801edf2:	00c3      	lsls	r3, r0, #3
 801edf4:	b2db      	uxtb	r3, r3
 801edf6:	b2a4      	uxth	r4, r4
 801edf8:	fb13 f307 	smulbb	r3, r3, r7
 801edfc:	fb02 3101 	mla	r1, r2, r1, r3
 801ee00:	1c6b      	adds	r3, r5, #1
 801ee02:	1c62      	adds	r2, r4, #1
 801ee04:	b289      	uxth	r1, r1
 801ee06:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ee0a:	1c4b      	adds	r3, r1, #1
 801ee0c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801ee10:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ee14:	9a03      	ldr	r2, [sp, #12]
 801ee16:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ee1a:	0964      	lsrs	r4, r4, #5
 801ee1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ee20:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801ee24:	432b      	orrs	r3, r5
 801ee26:	4323      	orrs	r3, r4
 801ee28:	8013      	strh	r3, [r2, #0]
 801ee2a:	b005      	add	sp, #20
 801ee2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee30:	f04f 0c00 	mov.w	ip, #0
 801ee34:	4664      	mov	r4, ip
 801ee36:	e6d6      	b.n	801ebe6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801ee38:	2300      	movs	r3, #0
 801ee3a:	469c      	mov	ip, r3
 801ee3c:	461a      	mov	r2, r3
 801ee3e:	461c      	mov	r4, r3
 801ee40:	e6f8      	b.n	801ec34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801ee42:	2300      	movs	r3, #0
 801ee44:	461a      	mov	r2, r3
 801ee46:	e6f5      	b.n	801ec34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801ee48:	460b      	mov	r3, r1
 801ee4a:	460a      	mov	r2, r1
 801ee4c:	e6f2      	b.n	801ec34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801ee4e:	2500      	movs	r5, #0
 801ee50:	46ab      	mov	fp, r5
 801ee52:	e720      	b.n	801ec96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801ee54:	2700      	movs	r7, #0
 801ee56:	463d      	mov	r5, r7
 801ee58:	4638      	mov	r0, r7
 801ee5a:	46bb      	mov	fp, r7
 801ee5c:	e745      	b.n	801ecea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801ee5e:	4677      	mov	r7, lr
 801ee60:	4675      	mov	r5, lr
 801ee62:	4670      	mov	r0, lr
 801ee64:	46f3      	mov	fp, lr
 801ee66:	e740      	b.n	801ecea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801ee68:	2700      	movs	r7, #0
 801ee6a:	4638      	mov	r0, r7
 801ee6c:	e73d      	b.n	801ecea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801ee6e:	460f      	mov	r7, r1
 801ee70:	4608      	mov	r0, r1
 801ee72:	e73a      	b.n	801ecea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801ee74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee78:	b097      	sub	sp, #92	; 0x5c
 801ee7a:	9214      	str	r2, [sp, #80]	; 0x50
 801ee7c:	9308      	str	r3, [sp, #32]
 801ee7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ee80:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801ee84:	9015      	str	r0, [sp, #84]	; 0x54
 801ee86:	9312      	str	r3, [sp, #72]	; 0x48
 801ee88:	6850      	ldr	r0, [r2, #4]
 801ee8a:	9111      	str	r1, [sp, #68]	; 0x44
 801ee8c:	6812      	ldr	r2, [r2, #0]
 801ee8e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801ee92:	fb00 1303 	mla	r3, r0, r3, r1
 801ee96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ee9a:	9309      	str	r3, [sp, #36]	; 0x24
 801ee9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	930b      	str	r3, [sp, #44]	; 0x2c
 801eea2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eea4:	685b      	ldr	r3, [r3, #4]
 801eea6:	930c      	str	r3, [sp, #48]	; 0x30
 801eea8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801eeac:	930a      	str	r3, [sp, #40]	; 0x28
 801eeae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	dc03      	bgt.n	801eebc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801eeb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	f340 83cd 	ble.w	801f656 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801eebc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eebe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eec2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eec6:	1e48      	subs	r0, r1, #1
 801eec8:	1e55      	subs	r5, r2, #1
 801eeca:	9b08      	ldr	r3, [sp, #32]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	f340 81a5 	ble.w	801f21c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801eed2:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801eed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eed6:	1436      	asrs	r6, r6, #16
 801eed8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801eedc:	d406      	bmi.n	801eeec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eede:	4286      	cmp	r6, r0
 801eee0:	da04      	bge.n	801eeec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	db02      	blt.n	801eeec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eee6:	42ab      	cmp	r3, r5
 801eee8:	f2c0 8199 	blt.w	801f21e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801eeec:	3601      	adds	r6, #1
 801eeee:	f100 8186 	bmi.w	801f1fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801eef2:	42b1      	cmp	r1, r6
 801eef4:	f2c0 8183 	blt.w	801f1fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801eef8:	3301      	adds	r3, #1
 801eefa:	f100 8180 	bmi.w	801f1fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801eefe:	429a      	cmp	r2, r3
 801ef00:	f2c0 817d 	blt.w	801f1fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ef04:	9b08      	ldr	r3, [sp, #32]
 801ef06:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801ef0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ef0c:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	f340 81a6 	ble.w	801f262 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ef16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ef18:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801ef1a:	1418      	asrs	r0, r3, #16
 801ef1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ef1e:	142d      	asrs	r5, r5, #16
 801ef20:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801ef24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ef26:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801ef2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ef2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801ef30:	f100 81fa 	bmi.w	801f328 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801ef34:	f102 3eff 	add.w	lr, r2, #4294967295
 801ef38:	4575      	cmp	r5, lr
 801ef3a:	f280 81f5 	bge.w	801f328 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801ef3e:	2800      	cmp	r0, #0
 801ef40:	f2c0 81f2 	blt.w	801f328 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801ef44:	f103 3eff 	add.w	lr, r3, #4294967295
 801ef48:	4570      	cmp	r0, lr
 801ef4a:	f280 81ed 	bge.w	801f328 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801ef4e:	b212      	sxth	r2, r2
 801ef50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef52:	fa1f fe81 	uxth.w	lr, r1
 801ef56:	fb00 5002 	mla	r0, r0, r2, r5
 801ef5a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801ef5e:	eb03 0a00 	add.w	sl, r3, r0
 801ef62:	f813 9000 	ldrb.w	r9, [r3, r0]
 801ef66:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801ef6a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ef6e:	b29b      	uxth	r3, r3
 801ef70:	f1bc 0f00 	cmp.w	ip, #0
 801ef74:	f000 81bb 	beq.w	801f2ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801ef78:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801ef7c:	eb0a 0b02 	add.w	fp, sl, r2
 801ef80:	fa1f fa8c 	uxth.w	sl, ip
 801ef84:	940d      	str	r4, [sp, #52]	; 0x34
 801ef86:	fb0a fe0e 	mul.w	lr, sl, lr
 801ef8a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ef8e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801ef92:	eba5 050e 	sub.w	r5, r5, lr
 801ef96:	940e      	str	r4, [sp, #56]	; 0x38
 801ef98:	fa1f fa8a 	uxth.w	sl, sl
 801ef9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ef9e:	b2ad      	uxth	r5, r5
 801efa0:	eba3 030a 	sub.w	r3, r3, sl
 801efa4:	fb08 f505 	mul.w	r5, r8, r5
 801efa8:	b29b      	uxth	r3, r3
 801efaa:	fb09 5303 	mla	r3, r9, r3, r5
 801efae:	fb0a 3304 	mla	r3, sl, r4, r3
 801efb2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801efb4:	fb0e 3304 	mla	r3, lr, r4, r3
 801efb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	f000 8111 	beq.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801efc2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801efc4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801efc8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801efcc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801efd0:	f000 8192 	beq.w	801f2f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801efd4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801efd8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801efdc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801efe0:	fb0a fe0e 	mul.w	lr, sl, lr
 801efe4:	fb09 f000 	mul.w	r0, r9, r0
 801efe8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801efec:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801eff0:	f100 0b20 	add.w	fp, r0, #32
 801eff4:	44ce      	add	lr, r9
 801eff6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801effa:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801effe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f002:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f006:	ea4e 0909 	orr.w	r9, lr, r9
 801f00a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f00e:	8868      	ldrh	r0, [r5, #2]
 801f010:	d019      	beq.n	801f046 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f012:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f016:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f01a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f01e:	fb0a fe0e 	mul.w	lr, sl, lr
 801f022:	fb08 f800 	mul.w	r8, r8, r0
 801f026:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f02a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f02e:	f108 0b20 	add.w	fp, r8, #32
 801f032:	4486      	add	lr, r0
 801f034:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f038:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f03c:	0a00      	lsrs	r0, r0, #8
 801f03e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f042:	ea4e 0000 	orr.w	r0, lr, r0
 801f046:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f04a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f04e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f052:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f056:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f05a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f05e:	ea4e 0909 	orr.w	r9, lr, r9
 801f062:	ea4a 0000 	orr.w	r0, sl, r0
 801f066:	f1bc 0f00 	cmp.w	ip, #0
 801f06a:	f000 8147 	beq.w	801f2fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f06e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f072:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f074:	3a01      	subs	r2, #1
 801f076:	2cff      	cmp	r4, #255	; 0xff
 801f078:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f07c:	f102 0202 	add.w	r2, r2, #2
 801f080:	eb05 0e02 	add.w	lr, r5, r2
 801f084:	5aaa      	ldrh	r2, [r5, r2]
 801f086:	d018      	beq.n	801f0ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801f088:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f08c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f090:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f094:	fb04 fa02 	mul.w	sl, r4, r2
 801f098:	fb08 f805 	mul.w	r8, r8, r5
 801f09c:	f10a 0520 	add.w	r5, sl, #32
 801f0a0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f0a4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f0a8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f0ac:	4442      	add	r2, r8
 801f0ae:	0a2d      	lsrs	r5, r5, #8
 801f0b0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f0b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f0b8:	432a      	orrs	r2, r5
 801f0ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f0bc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f0c0:	2cff      	cmp	r4, #255	; 0xff
 801f0c2:	d01a      	beq.n	801f0fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801f0c4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f0c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f0cc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f0d0:	fb04 fa05 	mul.w	sl, r4, r5
 801f0d4:	fb08 f80e 	mul.w	r8, r8, lr
 801f0d8:	f10a 0e20 	add.w	lr, sl, #32
 801f0dc:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f0e0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f0e4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f0e8:	4445      	add	r5, r8
 801f0ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f0ee:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f0f2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f0f6:	ea45 050e 	orr.w	r5, r5, lr
 801f0fa:	fb1c fe01 	smulbb	lr, ip, r1
 801f0fe:	f1cc 0810 	rsb	r8, ip, #16
 801f102:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f106:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f10a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f10e:	eba8 0801 	sub.w	r8, r8, r1
 801f112:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f116:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f11a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f11e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f122:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f126:	ea4a 0202 	orr.w	r2, sl, r2
 801f12a:	4341      	muls	r1, r0
 801f12c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f130:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f134:	fb09 1108 	mla	r1, r9, r8, r1
 801f138:	ea4b 0505 	orr.w	r5, fp, r5
 801f13c:	fb0c 1102 	mla	r1, ip, r2, r1
 801f140:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f144:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f148:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f14c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f150:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f154:	ea42 0e0e 	orr.w	lr, r2, lr
 801f158:	fa1f f28e 	uxth.w	r2, lr
 801f15c:	2bff      	cmp	r3, #255	; 0xff
 801f15e:	d103      	bne.n	801f168 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f160:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f162:	29ff      	cmp	r1, #255	; 0xff
 801f164:	f000 80de 	beq.w	801f324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801f168:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f16a:	1215      	asrs	r5, r2, #8
 801f16c:	8838      	ldrh	r0, [r7, #0]
 801f16e:	434b      	muls	r3, r1
 801f170:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f174:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f176:	f103 0c01 	add.w	ip, r3, #1
 801f17a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801f17e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f182:	fa5f fc83 	uxtb.w	ip, r3
 801f186:	1203      	asrs	r3, r0, #8
 801f188:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f18c:	fb13 f30c 	smulbb	r3, r3, ip
 801f190:	fb05 3501 	mla	r5, r5, r1, r3
 801f194:	10c3      	asrs	r3, r0, #3
 801f196:	10d1      	asrs	r1, r2, #3
 801f198:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f19c:	00d2      	lsls	r2, r2, #3
 801f19e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f1a2:	b2ad      	uxth	r5, r5
 801f1a4:	fb13 f30c 	smulbb	r3, r3, ip
 801f1a8:	b2d2      	uxtb	r2, r2
 801f1aa:	fb01 3104 	mla	r1, r1, r4, r3
 801f1ae:	00c3      	lsls	r3, r0, #3
 801f1b0:	b2db      	uxtb	r3, r3
 801f1b2:	b289      	uxth	r1, r1
 801f1b4:	fb13 f30c 	smulbb	r3, r3, ip
 801f1b8:	fb02 3304 	mla	r3, r2, r4, r3
 801f1bc:	b29a      	uxth	r2, r3
 801f1be:	1c6b      	adds	r3, r5, #1
 801f1c0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f1c4:	1c53      	adds	r3, r2, #1
 801f1c6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f1ca:	1c4a      	adds	r2, r1, #1
 801f1cc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f1d0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f1d4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f1d8:	0949      	lsrs	r1, r1, #5
 801f1da:	432b      	orrs	r3, r5
 801f1dc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f1e0:	430b      	orrs	r3, r1
 801f1e2:	803b      	strh	r3, [r7, #0]
 801f1e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f1e6:	3702      	adds	r7, #2
 801f1e8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f1ea:	4413      	add	r3, r2
 801f1ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f1ee:	9321      	str	r3, [sp, #132]	; 0x84
 801f1f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f1f2:	441a      	add	r2, r3
 801f1f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f1f6:	3b01      	subs	r3, #1
 801f1f8:	9222      	str	r2, [sp, #136]	; 0x88
 801f1fa:	9313      	str	r3, [sp, #76]	; 0x4c
 801f1fc:	e687      	b.n	801ef0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f200:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801f202:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801f204:	4433      	add	r3, r6
 801f206:	9321      	str	r3, [sp, #132]	; 0x84
 801f208:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f20a:	441c      	add	r4, r3
 801f20c:	9b08      	ldr	r3, [sp, #32]
 801f20e:	3b01      	subs	r3, #1
 801f210:	9422      	str	r4, [sp, #136]	; 0x88
 801f212:	9308      	str	r3, [sp, #32]
 801f214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f216:	3302      	adds	r3, #2
 801f218:	9309      	str	r3, [sp, #36]	; 0x24
 801f21a:	e656      	b.n	801eeca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f21c:	d028      	beq.n	801f270 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801f21e:	9b08      	ldr	r3, [sp, #32]
 801f220:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f222:	3b01      	subs	r3, #1
 801f224:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f226:	fb00 5003 	mla	r0, r0, r3, r5
 801f22a:	1400      	asrs	r0, r0, #16
 801f22c:	f53f ae6a 	bmi.w	801ef04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f230:	3901      	subs	r1, #1
 801f232:	4288      	cmp	r0, r1
 801f234:	f6bf ae66 	bge.w	801ef04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f238:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f23a:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f23c:	fb01 0303 	mla	r3, r1, r3, r0
 801f240:	141b      	asrs	r3, r3, #16
 801f242:	f53f ae5f 	bmi.w	801ef04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f246:	3a01      	subs	r2, #1
 801f248:	4293      	cmp	r3, r2
 801f24a:	f6bf ae5b 	bge.w	801ef04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f24e:	9b08      	ldr	r3, [sp, #32]
 801f250:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f254:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f258:	9313      	str	r3, [sp, #76]	; 0x4c
 801f25a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f25c:	2b00      	cmp	r3, #0
 801f25e:	f300 8082 	bgt.w	801f366 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801f262:	9b08      	ldr	r3, [sp, #32]
 801f264:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f26a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f26e:	9309      	str	r3, [sp, #36]	; 0x24
 801f270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f272:	2b00      	cmp	r3, #0
 801f274:	f340 81ef 	ble.w	801f656 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801f278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f27c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f27e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f282:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f286:	eef0 6a62 	vmov.f32	s13, s5
 801f28a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f28e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f292:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f296:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801f29a:	eef0 6a43 	vmov.f32	s13, s6
 801f29e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2a2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801f2a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2be:	ee12 2a90 	vmov	r2, s5
 801f2c2:	eef0 2a47 	vmov.f32	s5, s14
 801f2c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ca:	ee13 2a10 	vmov	r2, s6
 801f2ce:	9323      	str	r3, [sp, #140]	; 0x8c
 801f2d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f2d2:	eeb0 3a67 	vmov.f32	s6, s15
 801f2d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2da:	9324      	str	r3, [sp, #144]	; 0x90
 801f2dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f2de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2e0:	3b01      	subs	r3, #1
 801f2e2:	9311      	str	r3, [sp, #68]	; 0x44
 801f2e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f2e6:	bf08      	it	eq
 801f2e8:	4613      	moveq	r3, r2
 801f2ea:	9308      	str	r3, [sp, #32]
 801f2ec:	e5df      	b.n	801eeae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f2ee:	fb08 f505 	mul.w	r5, r8, r5
 801f2f2:	fb09 5303 	mla	r3, r9, r3, r5
 801f2f6:	e65f      	b.n	801efb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801f2f8:	4681      	mov	r9, r0
 801f2fa:	e686      	b.n	801f00a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f2fc:	f1c1 0210 	rsb	r2, r1, #16
 801f300:	4341      	muls	r1, r0
 801f302:	fb09 1902 	mla	r9, r9, r2, r1
 801f306:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f30a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f30e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f312:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f316:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f31a:	ea42 0909 	orr.w	r9, r2, r9
 801f31e:	fa1f f289 	uxth.w	r2, r9
 801f322:	e71b      	b.n	801f15c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f324:	803a      	strh	r2, [r7, #0]
 801f326:	e75d      	b.n	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f328:	f115 0e01 	adds.w	lr, r5, #1
 801f32c:	f53f af5a 	bmi.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f330:	4572      	cmp	r2, lr
 801f332:	f6ff af57 	blt.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f336:	f110 0e01 	adds.w	lr, r0, #1
 801f33a:	f53f af53 	bmi.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f33e:	4573      	cmp	r3, lr
 801f340:	f6ff af50 	blt.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f344:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f346:	b21b      	sxth	r3, r3
 801f348:	b212      	sxth	r2, r2
 801f34a:	9502      	str	r5, [sp, #8]
 801f34c:	9301      	str	r3, [sp, #4]
 801f34e:	9200      	str	r2, [sp, #0]
 801f350:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801f354:	e9cd c405 	strd	ip, r4, [sp, #20]
 801f358:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801f35c:	4639      	mov	r1, r7
 801f35e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f360:	f7ff fc02 	bl	801eb68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801f364:	e73e      	b.n	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f368:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f36c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f36e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f372:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f374:	fa1f fc82 	uxth.w	ip, r2
 801f378:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f37c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f37e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f382:	141f      	asrs	r7, r3, #16
 801f384:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f386:	141b      	asrs	r3, r3, #16
 801f388:	fb01 3707 	mla	r7, r1, r7, r3
 801f38c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f38e:	eb03 0a07 	add.w	sl, r3, r7
 801f392:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f396:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f39a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f39e:	b29b      	uxth	r3, r3
 801f3a0:	2d00      	cmp	r5, #0
 801f3a2:	f000 813d 	beq.w	801f620 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 801f3a6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f3aa:	eb0a 0b01 	add.w	fp, sl, r1
 801f3ae:	fa1f fa85 	uxth.w	sl, r5
 801f3b2:	940f      	str	r4, [sp, #60]	; 0x3c
 801f3b4:	fb0a fc0c 	mul.w	ip, sl, ip
 801f3b8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f3bc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f3c0:	eba0 000c 	sub.w	r0, r0, ip
 801f3c4:	9410      	str	r4, [sp, #64]	; 0x40
 801f3c6:	fa1f fa8a 	uxth.w	sl, sl
 801f3ca:	b280      	uxth	r0, r0
 801f3cc:	eba3 030a 	sub.w	r3, r3, sl
 801f3d0:	fb08 f000 	mul.w	r0, r8, r0
 801f3d4:	b29b      	uxth	r3, r3
 801f3d6:	fb09 0303 	mla	r3, r9, r3, r0
 801f3da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f3dc:	fb0a 3300 	mla	r3, sl, r0, r3
 801f3e0:	fb0c 3304 	mla	r3, ip, r4, r3
 801f3e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	f000 810b 	beq.w	801f604 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801f3ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f3f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f3f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f3f6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f3fa:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f3fe:	f000 8114 	beq.w	801f62a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801f402:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f406:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f40a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f40e:	fb0a fc0c 	mul.w	ip, sl, ip
 801f412:	fb09 f707 	mul.w	r7, r9, r7
 801f416:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f41a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f41e:	f107 0b20 	add.w	fp, r7, #32
 801f422:	44cc      	add	ip, r9
 801f424:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f428:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f42c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f430:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f434:	ea4c 0909 	orr.w	r9, ip, r9
 801f438:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f43c:	8847      	ldrh	r7, [r0, #2]
 801f43e:	d019      	beq.n	801f474 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801f440:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f444:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f448:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f44c:	fb0a fc0c 	mul.w	ip, sl, ip
 801f450:	fb08 f807 	mul.w	r8, r8, r7
 801f454:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f458:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f45c:	f108 0b20 	add.w	fp, r8, #32
 801f460:	44bc      	add	ip, r7
 801f462:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f466:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f46a:	0a3f      	lsrs	r7, r7, #8
 801f46c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f470:	ea4c 0707 	orr.w	r7, ip, r7
 801f474:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f478:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f47c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f480:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f484:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f488:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f48c:	ea4c 0909 	orr.w	r9, ip, r9
 801f490:	ea4a 0707 	orr.w	r7, sl, r7
 801f494:	2d00      	cmp	r5, #0
 801f496:	f000 80ca 	beq.w	801f62e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 801f49a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f49e:	3901      	subs	r1, #1
 801f4a0:	0049      	lsls	r1, r1, #1
 801f4a2:	3102      	adds	r1, #2
 801f4a4:	eb00 0c01 	add.w	ip, r0, r1
 801f4a8:	5a41      	ldrh	r1, [r0, r1]
 801f4aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f4ac:	28ff      	cmp	r0, #255	; 0xff
 801f4ae:	d019      	beq.n	801f4e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801f4b0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f4b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f4b6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f4ba:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f4be:	fb04 fa01 	mul.w	sl, r4, r1
 801f4c2:	fb08 f800 	mul.w	r8, r8, r0
 801f4c6:	f10a 0020 	add.w	r0, sl, #32
 801f4ca:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f4ce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f4d2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f4d6:	4441      	add	r1, r8
 801f4d8:	0a00      	lsrs	r0, r0, #8
 801f4da:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f4de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4e2:	4301      	orrs	r1, r0
 801f4e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f4e6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f4ea:	2cff      	cmp	r4, #255	; 0xff
 801f4ec:	d01a      	beq.n	801f524 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801f4ee:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801f4f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4f6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f4fa:	fb04 fa00 	mul.w	sl, r4, r0
 801f4fe:	fb08 f80c 	mul.w	r8, r8, ip
 801f502:	f10a 0c20 	add.w	ip, sl, #32
 801f506:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f50a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f50e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f512:	4440      	add	r0, r8
 801f514:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f518:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f51c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f520:	ea40 000c 	orr.w	r0, r0, ip
 801f524:	fb15 fc02 	smulbb	ip, r5, r2
 801f528:	f1c5 0810 	rsb	r8, r5, #16
 801f52c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f530:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f534:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f538:	eba8 0802 	sub.w	r8, r8, r2
 801f53c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f540:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f544:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f548:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f54c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f550:	ea4a 0101 	orr.w	r1, sl, r1
 801f554:	437a      	muls	r2, r7
 801f556:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f55a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f55e:	fb09 2208 	mla	r2, r9, r8, r2
 801f562:	ea4b 0000 	orr.w	r0, fp, r0
 801f566:	fb05 2201 	mla	r2, r5, r1, r2
 801f56a:	fb0c 2200 	mla	r2, ip, r0, r2
 801f56e:	0d57      	lsrs	r7, r2, #21
 801f570:	0952      	lsrs	r2, r2, #5
 801f572:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f576:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f57a:	433a      	orrs	r2, r7
 801f57c:	2bff      	cmp	r3, #255	; 0xff
 801f57e:	b292      	uxth	r2, r2
 801f580:	d102      	bne.n	801f588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801f582:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f584:	29ff      	cmp	r1, #255	; 0xff
 801f586:	d063      	beq.n	801f650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 801f588:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f58a:	1215      	asrs	r5, r2, #8
 801f58c:	f8be 1000 	ldrh.w	r1, [lr]
 801f590:	4343      	muls	r3, r0
 801f592:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f594:	10cf      	asrs	r7, r1, #3
 801f596:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f59a:	1c58      	adds	r0, r3, #1
 801f59c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f5a0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801f5a4:	1208      	asrs	r0, r1, #8
 801f5a6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f5aa:	00c9      	lsls	r1, r1, #3
 801f5ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f5b0:	b2db      	uxtb	r3, r3
 801f5b2:	b2c9      	uxtb	r1, r1
 801f5b4:	fb10 f003 	smulbb	r0, r0, r3
 801f5b8:	fb11 f103 	smulbb	r1, r1, r3
 801f5bc:	fb05 0504 	mla	r5, r5, r4, r0
 801f5c0:	10d0      	asrs	r0, r2, #3
 801f5c2:	fb17 f703 	smulbb	r7, r7, r3
 801f5c6:	00d2      	lsls	r2, r2, #3
 801f5c8:	b2ad      	uxth	r5, r5
 801f5ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f5ce:	b2d2      	uxtb	r2, r2
 801f5d0:	fb00 7004 	mla	r0, r0, r4, r7
 801f5d4:	1c6b      	adds	r3, r5, #1
 801f5d6:	fb02 1204 	mla	r2, r2, r4, r1
 801f5da:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f5de:	b292      	uxth	r2, r2
 801f5e0:	b280      	uxth	r0, r0
 801f5e2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f5e6:	1c57      	adds	r7, r2, #1
 801f5e8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f5ec:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f5f0:	433d      	orrs	r5, r7
 801f5f2:	1c47      	adds	r7, r0, #1
 801f5f4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801f5f8:	097f      	lsrs	r7, r7, #5
 801f5fa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f5fe:	433d      	orrs	r5, r7
 801f600:	f8ae 5000 	strh.w	r5, [lr]
 801f604:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f606:	f10e 0e02 	add.w	lr, lr, #2
 801f60a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f60c:	4413      	add	r3, r2
 801f60e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f610:	9321      	str	r3, [sp, #132]	; 0x84
 801f612:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f614:	441a      	add	r2, r3
 801f616:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f618:	3b01      	subs	r3, #1
 801f61a:	9222      	str	r2, [sp, #136]	; 0x88
 801f61c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f61e:	e61c      	b.n	801f25a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801f620:	fb08 f000 	mul.w	r0, r8, r0
 801f624:	fb09 0303 	mla	r3, r9, r3, r0
 801f628:	e6dc      	b.n	801f3e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801f62a:	46b9      	mov	r9, r7
 801f62c:	e704      	b.n	801f438 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801f62e:	f1c2 0110 	rsb	r1, r2, #16
 801f632:	437a      	muls	r2, r7
 801f634:	fb09 2901 	mla	r9, r9, r1, r2
 801f638:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f63c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801f640:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801f644:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f648:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f64c:	4302      	orrs	r2, r0
 801f64e:	e795      	b.n	801f57c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801f650:	f8ae 2000 	strh.w	r2, [lr]
 801f654:	e7d6      	b.n	801f604 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801f656:	b017      	add	sp, #92	; 0x5c
 801f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f65c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f660:	b085      	sub	sp, #20
 801f662:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801f666:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801f66a:	2800      	cmp	r0, #0
 801f66c:	9103      	str	r1, [sp, #12]
 801f66e:	fb00 7406 	mla	r4, r0, r6, r7
 801f672:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801f676:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801f67a:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801f67e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801f682:	eb02 0904 	add.w	r9, r2, r4
 801f686:	9501      	str	r5, [sp, #4]
 801f688:	f2c0 8141 	blt.w	801f90e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801f68c:	4583      	cmp	fp, r0
 801f68e:	f340 813e 	ble.w	801f90e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801f692:	2f00      	cmp	r7, #0
 801f694:	f2c0 8137 	blt.w	801f906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801f698:	42be      	cmp	r6, r7
 801f69a:	f340 8134 	ble.w	801f906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801f69e:	f812 c004 	ldrb.w	ip, [r2, r4]
 801f6a2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801f6a6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801f6aa:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801f6ae:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801f6b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f6b6:	4355      	muls	r5, r2
 801f6b8:	fb0c f203 	mul.w	r2, ip, r3
 801f6bc:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801f6c0:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801f6c4:	441d      	add	r5, r3
 801f6c6:	f102 0320 	add.w	r3, r2, #32
 801f6ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f6ce:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801f6d2:	0a1b      	lsrs	r3, r3, #8
 801f6d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f6d8:	431c      	orrs	r4, r3
 801f6da:	1c7b      	adds	r3, r7, #1
 801f6dc:	f100 811c 	bmi.w	801f918 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801f6e0:	429e      	cmp	r6, r3
 801f6e2:	f340 8119 	ble.w	801f918 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801f6e6:	2900      	cmp	r1, #0
 801f6e8:	f000 8119 	beq.w	801f91e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801f6ec:	9a01      	ldr	r2, [sp, #4]
 801f6ee:	f899 3001 	ldrb.w	r3, [r9, #1]
 801f6f2:	8855      	ldrh	r5, [r2, #2]
 801f6f4:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801f6f8:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801f6fc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f700:	fb08 f802 	mul.w	r8, r8, r2
 801f704:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801f708:	435d      	muls	r5, r3
 801f70a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801f70e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f712:	44d0      	add	r8, sl
 801f714:	f105 0a20 	add.w	sl, r5, #32
 801f718:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f71c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801f720:	0a2d      	lsrs	r5, r5, #8
 801f722:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f726:	432a      	orrs	r2, r5
 801f728:	3001      	adds	r0, #1
 801f72a:	f100 80fe 	bmi.w	801f92a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801f72e:	4583      	cmp	fp, r0
 801f730:	f340 80fb 	ble.w	801f92a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801f734:	f1be 0f00 	cmp.w	lr, #0
 801f738:	f000 80fc 	beq.w	801f934 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801f73c:	2f00      	cmp	r7, #0
 801f73e:	f2c0 80f1 	blt.w	801f924 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801f742:	42be      	cmp	r6, r7
 801f744:	f340 80ee 	ble.w	801f924 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801f748:	9801      	ldr	r0, [sp, #4]
 801f74a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f74e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801f752:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801f756:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f75a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801f75e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f762:	fb0a fa00 	mul.w	sl, sl, r0
 801f766:	fb05 f808 	mul.w	r8, r5, r8
 801f76a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801f76e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801f772:	4482      	add	sl, r0
 801f774:	f108 0020 	add.w	r0, r8, #32
 801f778:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f77c:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801f780:	0a00      	lsrs	r0, r0, #8
 801f782:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f786:	ea4b 0b00 	orr.w	fp, fp, r0
 801f78a:	3701      	adds	r7, #1
 801f78c:	f100 80d7 	bmi.w	801f93e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801f790:	42be      	cmp	r6, r7
 801f792:	f340 80d4 	ble.w	801f93e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801f796:	2900      	cmp	r1, #0
 801f798:	f000 80d4 	beq.w	801f944 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801f79c:	3601      	adds	r6, #1
 801f79e:	9801      	ldr	r0, [sp, #4]
 801f7a0:	f819 7006 	ldrb.w	r7, [r9, r6]
 801f7a4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801f7a8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801f7ac:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801f7b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f7b4:	fb09 f906 	mul.w	r9, r9, r6
 801f7b8:	fb07 f800 	mul.w	r8, r7, r0
 801f7bc:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801f7c0:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801f7c4:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801f7c8:	44d1      	add	r9, sl
 801f7ca:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801f7ce:	f108 0020 	add.w	r0, r8, #32
 801f7d2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f7d6:	0a00      	lsrs	r0, r0, #8
 801f7d8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f7dc:	4330      	orrs	r0, r6
 801f7de:	b28e      	uxth	r6, r1
 801f7e0:	fa1f f98e 	uxth.w	r9, lr
 801f7e4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801f7e8:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f7ec:	fb06 f809 	mul.w	r8, r6, r9
 801f7f0:	0136      	lsls	r6, r6, #4
 801f7f2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f7f6:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801f7fa:	9601      	str	r6, [sp, #4]
 801f7fc:	ea4a 0404 	orr.w	r4, sl, r4
 801f800:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f804:	fa1f f689 	uxth.w	r6, r9
 801f808:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f80c:	fb11 f90e 	smulbb	r9, r1, lr
 801f810:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f814:	9602      	str	r6, [sp, #8]
 801f816:	4626      	mov	r6, r4
 801f818:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801f81c:	f1ce 0410 	rsb	r4, lr, #16
 801f820:	ea4a 0202 	orr.w	r2, sl, r2
 801f824:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f828:	1a64      	subs	r4, r4, r1
 801f82a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801f82e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f832:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f836:	434a      	muls	r2, r1
 801f838:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801f83c:	ea4a 0000 	orr.w	r0, sl, r0
 801f840:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801f844:	fb04 2406 	mla	r4, r4, r6, r2
 801f848:	9903      	ldr	r1, [sp, #12]
 801f84a:	fb09 4200 	mla	r2, r9, r0, r4
 801f84e:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801f852:	9801      	ldr	r0, [sp, #4]
 801f854:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f858:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f85c:	8809      	ldrh	r1, [r1, #0]
 801f85e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801f862:	ea44 0b0b 	orr.w	fp, r4, fp
 801f866:	9c02      	ldr	r4, [sp, #8]
 801f868:	1b00      	subs	r0, r0, r4
 801f86a:	9c01      	ldr	r4, [sp, #4]
 801f86c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801f870:	eba4 0608 	sub.w	r6, r4, r8
 801f874:	b280      	uxth	r0, r0
 801f876:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f87a:	b2b6      	uxth	r6, r6
 801f87c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f880:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f884:	4373      	muls	r3, r6
 801f886:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f88a:	fb0c 3300 	mla	r3, ip, r0, r3
 801f88e:	9802      	ldr	r0, [sp, #8]
 801f890:	ea42 0e0e 	orr.w	lr, r2, lr
 801f894:	fb00 3505 	mla	r5, r0, r5, r3
 801f898:	120b      	asrs	r3, r1, #8
 801f89a:	10c8      	asrs	r0, r1, #3
 801f89c:	fb08 5707 	mla	r7, r8, r7, r5
 801f8a0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f8a4:	00c9      	lsls	r1, r1, #3
 801f8a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f8aa:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801f8ae:	fa1f f28e 	uxth.w	r2, lr
 801f8b2:	b2c9      	uxtb	r1, r1
 801f8b4:	b2ff      	uxtb	r7, r7
 801f8b6:	437b      	muls	r3, r7
 801f8b8:	4378      	muls	r0, r7
 801f8ba:	434f      	muls	r7, r1
 801f8bc:	1c59      	adds	r1, r3, #1
 801f8be:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f8c2:	1213      	asrs	r3, r2, #8
 801f8c4:	f023 0307 	bic.w	r3, r3, #7
 801f8c8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f8cc:	1c41      	adds	r1, r0, #1
 801f8ce:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f8d2:	10d1      	asrs	r1, r2, #3
 801f8d4:	021b      	lsls	r3, r3, #8
 801f8d6:	f021 0103 	bic.w	r1, r1, #3
 801f8da:	00d2      	lsls	r2, r2, #3
 801f8dc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f8e0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f8e4:	00c9      	lsls	r1, r1, #3
 801f8e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f8ea:	430b      	orrs	r3, r1
 801f8ec:	1c79      	adds	r1, r7, #1
 801f8ee:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f8f2:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f8f6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f8fa:	431a      	orrs	r2, r3
 801f8fc:	9b03      	ldr	r3, [sp, #12]
 801f8fe:	801a      	strh	r2, [r3, #0]
 801f900:	b005      	add	sp, #20
 801f902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f906:	f04f 0c00 	mov.w	ip, #0
 801f90a:	4664      	mov	r4, ip
 801f90c:	e6e5      	b.n	801f6da <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801f90e:	2300      	movs	r3, #0
 801f910:	469c      	mov	ip, r3
 801f912:	461a      	mov	r2, r3
 801f914:	461c      	mov	r4, r3
 801f916:	e707      	b.n	801f728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801f918:	2300      	movs	r3, #0
 801f91a:	461a      	mov	r2, r3
 801f91c:	e704      	b.n	801f728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801f91e:	460b      	mov	r3, r1
 801f920:	460a      	mov	r2, r1
 801f922:	e701      	b.n	801f728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801f924:	2500      	movs	r5, #0
 801f926:	46ab      	mov	fp, r5
 801f928:	e72f      	b.n	801f78a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801f92a:	2700      	movs	r7, #0
 801f92c:	463d      	mov	r5, r7
 801f92e:	4638      	mov	r0, r7
 801f930:	46bb      	mov	fp, r7
 801f932:	e754      	b.n	801f7de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801f934:	4677      	mov	r7, lr
 801f936:	4675      	mov	r5, lr
 801f938:	4670      	mov	r0, lr
 801f93a:	46f3      	mov	fp, lr
 801f93c:	e74f      	b.n	801f7de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801f93e:	2700      	movs	r7, #0
 801f940:	4638      	mov	r0, r7
 801f942:	e74c      	b.n	801f7de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801f944:	460f      	mov	r7, r1
 801f946:	4608      	mov	r0, r1
 801f948:	e749      	b.n	801f7de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801f94c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f950:	b093      	sub	sp, #76	; 0x4c
 801f952:	9210      	str	r2, [sp, #64]	; 0x40
 801f954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f956:	9011      	str	r0, [sp, #68]	; 0x44
 801f958:	910e      	str	r1, [sp, #56]	; 0x38
 801f95a:	6850      	ldr	r0, [r2, #4]
 801f95c:	9306      	str	r3, [sp, #24]
 801f95e:	6812      	ldr	r2, [r2, #0]
 801f960:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f964:	fb00 1303 	mla	r3, r0, r3, r1
 801f968:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f96c:	9307      	str	r3, [sp, #28]
 801f96e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f970:	681b      	ldr	r3, [r3, #0]
 801f972:	9308      	str	r3, [sp, #32]
 801f974:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f976:	685b      	ldr	r3, [r3, #4]
 801f978:	9309      	str	r3, [sp, #36]	; 0x24
 801f97a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	dc03      	bgt.n	801f988 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f982:	2b00      	cmp	r3, #0
 801f984:	f340 83b6 	ble.w	80200f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801f988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f98a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f98e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f992:	1e48      	subs	r0, r1, #1
 801f994:	1e55      	subs	r5, r2, #1
 801f996:	9b06      	ldr	r3, [sp, #24]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	f340 8165 	ble.w	801fc68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f99e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801f9a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f9a2:	1436      	asrs	r6, r6, #16
 801f9a4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f9a8:	d406      	bmi.n	801f9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f9aa:	4286      	cmp	r6, r0
 801f9ac:	da04      	bge.n	801f9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	db02      	blt.n	801f9b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f9b2:	42ab      	cmp	r3, r5
 801f9b4:	f2c0 8159 	blt.w	801fc6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f9b8:	3601      	adds	r6, #1
 801f9ba:	f100 8146 	bmi.w	801fc4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f9be:	42b1      	cmp	r1, r6
 801f9c0:	f2c0 8143 	blt.w	801fc4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f9c4:	3301      	adds	r3, #1
 801f9c6:	f100 8140 	bmi.w	801fc4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f9ca:	429a      	cmp	r2, r3
 801f9cc:	f2c0 813d 	blt.w	801fc4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f9d0:	9b06      	ldr	r3, [sp, #24]
 801f9d2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f9d6:	9f07      	ldr	r7, [sp, #28]
 801f9d8:	930f      	str	r3, [sp, #60]	; 0x3c
 801f9da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	f340 8166 	ble.w	801fcae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f9e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f9e4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801f9e6:	1418      	asrs	r0, r3, #16
 801f9e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f9ea:	142d      	asrs	r5, r5, #16
 801f9ec:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f9f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f9f2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f9f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f9fc:	f100 81f0 	bmi.w	801fde0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fa00:	f102 3eff 	add.w	lr, r2, #4294967295
 801fa04:	4575      	cmp	r5, lr
 801fa06:	f280 81eb 	bge.w	801fde0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fa0a:	2800      	cmp	r0, #0
 801fa0c:	f2c0 81e8 	blt.w	801fde0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fa10:	f103 3eff 	add.w	lr, r3, #4294967295
 801fa14:	4570      	cmp	r0, lr
 801fa16:	f280 81e3 	bge.w	801fde0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fa1a:	b212      	sxth	r2, r2
 801fa1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa1e:	fa1f fe81 	uxth.w	lr, r1
 801fa22:	fb00 5002 	mla	r0, r0, r2, r5
 801fa26:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801fa2a:	eb03 0a00 	add.w	sl, r3, r0
 801fa2e:	f813 9000 	ldrb.w	r9, [r3, r0]
 801fa32:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801fa36:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fa3a:	b29b      	uxth	r3, r3
 801fa3c:	f1bc 0f00 	cmp.w	ip, #0
 801fa40:	f000 817b 	beq.w	801fd3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fa44:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801fa48:	eb0a 0b02 	add.w	fp, sl, r2
 801fa4c:	fa1f fa8c 	uxth.w	sl, ip
 801fa50:	940a      	str	r4, [sp, #40]	; 0x28
 801fa52:	fb0a fe0e 	mul.w	lr, sl, lr
 801fa56:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801fa5a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801fa5e:	eba5 050e 	sub.w	r5, r5, lr
 801fa62:	940b      	str	r4, [sp, #44]	; 0x2c
 801fa64:	fa1f fa8a 	uxth.w	sl, sl
 801fa68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fa6a:	b2ad      	uxth	r5, r5
 801fa6c:	eba3 030a 	sub.w	r3, r3, sl
 801fa70:	fb08 f505 	mul.w	r5, r8, r5
 801fa74:	b29b      	uxth	r3, r3
 801fa76:	fb09 5303 	mla	r3, r9, r3, r5
 801fa7a:	fb0a 3304 	mla	r3, sl, r4, r3
 801fa7e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fa80:	fb0e 3304 	mla	r3, lr, r4, r3
 801fa84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	f000 80d1 	beq.w	801fc30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fa8e:	9c08      	ldr	r4, [sp, #32]
 801fa90:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fa94:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801fa98:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801fa9c:	f000 8152 	beq.w	801fd44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801faa0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801faa4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801faa8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801faac:	fb0a fe0e 	mul.w	lr, sl, lr
 801fab0:	fb09 f000 	mul.w	r0, r9, r0
 801fab4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801fab8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801fabc:	f100 0b20 	add.w	fp, r0, #32
 801fac0:	44ce      	add	lr, r9
 801fac2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801fac6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801faca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801face:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fad2:	ea4e 0909 	orr.w	r9, lr, r9
 801fad6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fada:	8868      	ldrh	r0, [r5, #2]
 801fadc:	d019      	beq.n	801fb12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801fade:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801fae2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801fae6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801faea:	fb0a fe0e 	mul.w	lr, sl, lr
 801faee:	fb08 f800 	mul.w	r8, r8, r0
 801faf2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801faf6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801fafa:	f108 0b20 	add.w	fp, r8, #32
 801fafe:	4486      	add	lr, r0
 801fb00:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801fb04:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801fb08:	0a00      	lsrs	r0, r0, #8
 801fb0a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fb0e:	ea4e 0000 	orr.w	r0, lr, r0
 801fb12:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801fb16:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801fb1a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801fb1e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fb22:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801fb26:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fb2a:	ea4e 0909 	orr.w	r9, lr, r9
 801fb2e:	ea4a 0000 	orr.w	r0, sl, r0
 801fb32:	f1bc 0f00 	cmp.w	ip, #0
 801fb36:	f000 8107 	beq.w	801fd48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801fb3a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801fb3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb40:	3a01      	subs	r2, #1
 801fb42:	2cff      	cmp	r4, #255	; 0xff
 801fb44:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801fb48:	f102 0202 	add.w	r2, r2, #2
 801fb4c:	eb05 0e02 	add.w	lr, r5, r2
 801fb50:	5aaa      	ldrh	r2, [r5, r2]
 801fb52:	d018      	beq.n	801fb86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801fb54:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801fb58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb5c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fb60:	fb04 fa02 	mul.w	sl, r4, r2
 801fb64:	fb08 f805 	mul.w	r8, r8, r5
 801fb68:	f10a 0520 	add.w	r5, sl, #32
 801fb6c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801fb70:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fb74:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801fb78:	4442      	add	r2, r8
 801fb7a:	0a2d      	lsrs	r5, r5, #8
 801fb7c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801fb80:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fb84:	432a      	orrs	r2, r5
 801fb86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fb88:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801fb8c:	2cff      	cmp	r4, #255	; 0xff
 801fb8e:	d01a      	beq.n	801fbc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fb90:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801fb94:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fb98:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fb9c:	fb04 fa05 	mul.w	sl, r4, r5
 801fba0:	fb08 f80e 	mul.w	r8, r8, lr
 801fba4:	f10a 0e20 	add.w	lr, sl, #32
 801fba8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801fbac:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fbb0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801fbb4:	4445      	add	r5, r8
 801fbb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fbba:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801fbbe:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801fbc2:	ea45 050e 	orr.w	r5, r5, lr
 801fbc6:	fb1c fe01 	smulbb	lr, ip, r1
 801fbca:	f1cc 0810 	rsb	r8, ip, #16
 801fbce:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801fbd2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fbd6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801fbda:	eba8 0801 	sub.w	r8, r8, r1
 801fbde:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801fbe2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fbe6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801fbea:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801fbee:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801fbf2:	ea4a 0202 	orr.w	r2, sl, r2
 801fbf6:	4341      	muls	r1, r0
 801fbf8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801fbfc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fc00:	fb09 1108 	mla	r1, r9, r8, r1
 801fc04:	ea4b 0505 	orr.w	r5, fp, r5
 801fc08:	fb0c 1102 	mla	r1, ip, r2, r1
 801fc0c:	fb0e 1e05 	mla	lr, lr, r5, r1
 801fc10:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801fc14:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fc18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fc1c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fc20:	ea42 0e0e 	orr.w	lr, r2, lr
 801fc24:	fa1f f28e 	uxth.w	r2, lr
 801fc28:	2bff      	cmp	r3, #255	; 0xff
 801fc2a:	f040 80a1 	bne.w	801fd70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801fc2e:	803a      	strh	r2, [r7, #0]
 801fc30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fc32:	3702      	adds	r7, #2
 801fc34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801fc36:	4413      	add	r3, r2
 801fc38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801fc3a:	931d      	str	r3, [sp, #116]	; 0x74
 801fc3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fc3e:	441a      	add	r2, r3
 801fc40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc42:	3b01      	subs	r3, #1
 801fc44:	921e      	str	r2, [sp, #120]	; 0x78
 801fc46:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc48:	e6c7      	b.n	801f9da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fc4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fc4c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801fc4e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801fc50:	4433      	add	r3, r6
 801fc52:	931d      	str	r3, [sp, #116]	; 0x74
 801fc54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fc56:	441c      	add	r4, r3
 801fc58:	9b06      	ldr	r3, [sp, #24]
 801fc5a:	3b01      	subs	r3, #1
 801fc5c:	941e      	str	r4, [sp, #120]	; 0x78
 801fc5e:	9306      	str	r3, [sp, #24]
 801fc60:	9b07      	ldr	r3, [sp, #28]
 801fc62:	3302      	adds	r3, #2
 801fc64:	9307      	str	r3, [sp, #28]
 801fc66:	e696      	b.n	801f996 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fc68:	d028      	beq.n	801fcbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801fc6a:	9b06      	ldr	r3, [sp, #24]
 801fc6c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fc6e:	3b01      	subs	r3, #1
 801fc70:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801fc72:	fb00 5003 	mla	r0, r0, r3, r5
 801fc76:	1400      	asrs	r0, r0, #16
 801fc78:	f53f aeaa 	bmi.w	801f9d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc7c:	3901      	subs	r1, #1
 801fc7e:	4288      	cmp	r0, r1
 801fc80:	f6bf aea6 	bge.w	801f9d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc84:	9920      	ldr	r1, [sp, #128]	; 0x80
 801fc86:	981e      	ldr	r0, [sp, #120]	; 0x78
 801fc88:	fb01 0303 	mla	r3, r1, r3, r0
 801fc8c:	141b      	asrs	r3, r3, #16
 801fc8e:	f53f ae9f 	bmi.w	801f9d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc92:	3a01      	subs	r2, #1
 801fc94:	4293      	cmp	r3, r2
 801fc96:	f6bf ae9b 	bge.w	801f9d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc9a:	9b06      	ldr	r3, [sp, #24]
 801fc9c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801fca0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801fca4:	930f      	str	r3, [sp, #60]	; 0x3c
 801fca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	f300 80b6 	bgt.w	801fe1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801fcae:	9b06      	ldr	r3, [sp, #24]
 801fcb0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcb4:	9b07      	ldr	r3, [sp, #28]
 801fcb6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801fcba:	9307      	str	r3, [sp, #28]
 801fcbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	f340 8218 	ble.w	80200f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801fcc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fcc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fcca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcd2:	eef0 6a62 	vmov.f32	s13, s5
 801fcd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fcda:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fcde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fce2:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801fce6:	eef0 6a43 	vmov.f32	s13, s6
 801fcea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcee:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801fcf2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fcf6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fcfa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fcfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd0a:	ee12 2a90 	vmov	r2, s5
 801fd0e:	eef0 2a47 	vmov.f32	s5, s14
 801fd12:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd16:	ee13 2a10 	vmov	r2, s6
 801fd1a:	931f      	str	r3, [sp, #124]	; 0x7c
 801fd1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fd1e:	eeb0 3a67 	vmov.f32	s6, s15
 801fd22:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd26:	9320      	str	r3, [sp, #128]	; 0x80
 801fd28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fd2c:	3b01      	subs	r3, #1
 801fd2e:	930e      	str	r3, [sp, #56]	; 0x38
 801fd30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fd32:	bf08      	it	eq
 801fd34:	4613      	moveq	r3, r2
 801fd36:	9306      	str	r3, [sp, #24]
 801fd38:	e61f      	b.n	801f97a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fd3a:	fb08 f505 	mul.w	r5, r8, r5
 801fd3e:	fb09 5303 	mla	r3, r9, r3, r5
 801fd42:	e69f      	b.n	801fa84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fd44:	4681      	mov	r9, r0
 801fd46:	e6c6      	b.n	801fad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801fd48:	f1c1 0210 	rsb	r2, r1, #16
 801fd4c:	4341      	muls	r1, r0
 801fd4e:	fb09 1902 	mla	r9, r9, r2, r1
 801fd52:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fd56:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801fd5a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fd5e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fd62:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801fd66:	ea42 0909 	orr.w	r9, r2, r9
 801fd6a:	fa1f f289 	uxth.w	r2, r9
 801fd6e:	e75b      	b.n	801fc28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 801fd70:	f8b7 c000 	ldrh.w	ip, [r7]
 801fd74:	43db      	mvns	r3, r3
 801fd76:	ea4f 202c 	mov.w	r0, ip, asr #8
 801fd7a:	fa5f fe83 	uxtb.w	lr, r3
 801fd7e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fd82:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801fd86:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801fd8a:	fb00 f00e 	mul.w	r0, r0, lr
 801fd8e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fd92:	b2db      	uxtb	r3, r3
 801fd94:	1c41      	adds	r1, r0, #1
 801fd96:	fb05 f50e 	mul.w	r5, r5, lr
 801fd9a:	fb03 f30e 	mul.w	r3, r3, lr
 801fd9e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801fda2:	1211      	asrs	r1, r2, #8
 801fda4:	f021 0107 	bic.w	r1, r1, #7
 801fda8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801fdac:	48d3      	ldr	r0, [pc, #844]	; (80200fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 801fdae:	b2c9      	uxtb	r1, r1
 801fdb0:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801fdb4:	1c69      	adds	r1, r5, #1
 801fdb6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fdba:	10d1      	asrs	r1, r2, #3
 801fdbc:	00d2      	lsls	r2, r2, #3
 801fdbe:	f021 0103 	bic.w	r1, r1, #3
 801fdc2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801fdc6:	00c9      	lsls	r1, r1, #3
 801fdc8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fdcc:	4301      	orrs	r1, r0
 801fdce:	1c58      	adds	r0, r3, #1
 801fdd0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fdd4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fdd8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fddc:	430a      	orrs	r2, r1
 801fdde:	e726      	b.n	801fc2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801fde0:	f115 0e01 	adds.w	lr, r5, #1
 801fde4:	f53f af24 	bmi.w	801fc30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fde8:	4572      	cmp	r2, lr
 801fdea:	f6ff af21 	blt.w	801fc30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fdee:	f110 0e01 	adds.w	lr, r0, #1
 801fdf2:	f53f af1d 	bmi.w	801fc30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fdf6:	4573      	cmp	r3, lr
 801fdf8:	f6ff af1a 	blt.w	801fc30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fdfc:	b21b      	sxth	r3, r3
 801fdfe:	b212      	sxth	r2, r2
 801fe00:	9301      	str	r3, [sp, #4]
 801fe02:	9200      	str	r2, [sp, #0]
 801fe04:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801fe08:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801fe0c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801fe10:	4639      	mov	r1, r7
 801fe12:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe14:	f7ff fc22 	bl	801f65c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801fe18:	e70a      	b.n	801fc30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fe1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fe1c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fe20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fe22:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801fe26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe28:	fa1f fc82 	uxth.w	ip, r2
 801fe2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fe32:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801fe36:	141f      	asrs	r7, r3, #16
 801fe38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fe3a:	141b      	asrs	r3, r3, #16
 801fe3c:	fb01 3707 	mla	r7, r1, r7, r3
 801fe40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe42:	eb03 0a07 	add.w	sl, r3, r7
 801fe46:	f813 9007 	ldrb.w	r9, [r3, r7]
 801fe4a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801fe4e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fe52:	b29b      	uxth	r3, r3
 801fe54:	2d00      	cmp	r5, #0
 801fe56:	f000 80fe 	beq.w	8020056 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 801fe5a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801fe5e:	eb0a 0b01 	add.w	fp, sl, r1
 801fe62:	fa1f fa85 	uxth.w	sl, r5
 801fe66:	940c      	str	r4, [sp, #48]	; 0x30
 801fe68:	fb0a fc0c 	mul.w	ip, sl, ip
 801fe6c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801fe70:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801fe74:	eba0 000c 	sub.w	r0, r0, ip
 801fe78:	940d      	str	r4, [sp, #52]	; 0x34
 801fe7a:	fa1f fa8a 	uxth.w	sl, sl
 801fe7e:	b280      	uxth	r0, r0
 801fe80:	eba3 030a 	sub.w	r3, r3, sl
 801fe84:	fb08 f000 	mul.w	r0, r8, r0
 801fe88:	b29b      	uxth	r3, r3
 801fe8a:	fb09 0303 	mla	r3, r9, r3, r0
 801fe8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fe90:	fb0a 3300 	mla	r3, sl, r0, r3
 801fe94:	fb0c 3304 	mla	r3, ip, r4, r3
 801fe98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	f000 80cc 	beq.w	802003a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801fea2:	9808      	ldr	r0, [sp, #32]
 801fea4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fea8:	9c08      	ldr	r4, [sp, #32]
 801feaa:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801feae:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801feb2:	f000 80d5 	beq.w	8020060 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801feb6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801feba:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801febe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fec2:	fb0a fc0c 	mul.w	ip, sl, ip
 801fec6:	fb09 f707 	mul.w	r7, r9, r7
 801feca:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801fece:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801fed2:	f107 0b20 	add.w	fp, r7, #32
 801fed6:	44cc      	add	ip, r9
 801fed8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801fedc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801fee0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fee4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fee8:	ea4c 0909 	orr.w	r9, ip, r9
 801feec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fef0:	8847      	ldrh	r7, [r0, #2]
 801fef2:	d019      	beq.n	801ff28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 801fef4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801fef8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801fefc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ff00:	fb0a fc0c 	mul.w	ip, sl, ip
 801ff04:	fb08 f807 	mul.w	r8, r8, r7
 801ff08:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801ff0c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801ff10:	f108 0b20 	add.w	fp, r8, #32
 801ff14:	44bc      	add	ip, r7
 801ff16:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801ff1a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ff1e:	0a3f      	lsrs	r7, r7, #8
 801ff20:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ff24:	ea4c 0707 	orr.w	r7, ip, r7
 801ff28:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801ff2c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ff30:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801ff34:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ff38:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ff3c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ff40:	ea4c 0909 	orr.w	r9, ip, r9
 801ff44:	ea4a 0707 	orr.w	r7, sl, r7
 801ff48:	2d00      	cmp	r5, #0
 801ff4a:	f000 808b 	beq.w	8020064 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801ff4e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801ff52:	3901      	subs	r1, #1
 801ff54:	0049      	lsls	r1, r1, #1
 801ff56:	3102      	adds	r1, #2
 801ff58:	eb00 0c01 	add.w	ip, r0, r1
 801ff5c:	5a41      	ldrh	r1, [r0, r1]
 801ff5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ff60:	28ff      	cmp	r0, #255	; 0xff
 801ff62:	d019      	beq.n	801ff98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801ff64:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801ff68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ff6a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ff6e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ff72:	fb04 fa01 	mul.w	sl, r4, r1
 801ff76:	fb08 f800 	mul.w	r8, r8, r0
 801ff7a:	f10a 0020 	add.w	r0, sl, #32
 801ff7e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801ff82:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ff86:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801ff8a:	4441      	add	r1, r8
 801ff8c:	0a00      	lsrs	r0, r0, #8
 801ff8e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801ff92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ff96:	4301      	orrs	r1, r0
 801ff98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ff9a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801ff9e:	2cff      	cmp	r4, #255	; 0xff
 801ffa0:	d01a      	beq.n	801ffd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 801ffa2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801ffa6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ffaa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ffae:	fb04 fa00 	mul.w	sl, r4, r0
 801ffb2:	fb08 f80c 	mul.w	r8, r8, ip
 801ffb6:	f10a 0c20 	add.w	ip, sl, #32
 801ffba:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801ffbe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ffc2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801ffc6:	4440      	add	r0, r8
 801ffc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffcc:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801ffd0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801ffd4:	ea40 000c 	orr.w	r0, r0, ip
 801ffd8:	fb15 fc02 	smulbb	ip, r5, r2
 801ffdc:	f1c5 0810 	rsb	r8, r5, #16
 801ffe0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ffe4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ffe8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801ffec:	eba8 0802 	sub.w	r8, r8, r2
 801fff0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801fff4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fff8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801fffc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020000:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8020004:	ea4a 0101 	orr.w	r1, sl, r1
 8020008:	437a      	muls	r2, r7
 802000a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802000e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020012:	fb09 2208 	mla	r2, r9, r8, r2
 8020016:	ea4b 0000 	orr.w	r0, fp, r0
 802001a:	fb05 2201 	mla	r2, r5, r1, r2
 802001e:	fb0c 2200 	mla	r2, ip, r0, r2
 8020022:	0d57      	lsrs	r7, r2, #21
 8020024:	0952      	lsrs	r2, r2, #5
 8020026:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802002a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802002e:	433a      	orrs	r2, r7
 8020030:	2bff      	cmp	r3, #255	; 0xff
 8020032:	b292      	uxth	r2, r2
 8020034:	d127      	bne.n	8020086 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8020036:	f8ae 2000 	strh.w	r2, [lr]
 802003a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802003c:	f10e 0e02 	add.w	lr, lr, #2
 8020040:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020042:	4413      	add	r3, r2
 8020044:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020046:	931d      	str	r3, [sp, #116]	; 0x74
 8020048:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802004a:	441a      	add	r2, r3
 802004c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802004e:	3b01      	subs	r3, #1
 8020050:	921e      	str	r2, [sp, #120]	; 0x78
 8020052:	930f      	str	r3, [sp, #60]	; 0x3c
 8020054:	e627      	b.n	801fca6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020056:	fb08 f000 	mul.w	r0, r8, r0
 802005a:	fb09 0303 	mla	r3, r9, r3, r0
 802005e:	e71b      	b.n	801fe98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8020060:	46b9      	mov	r9, r7
 8020062:	e743      	b.n	801feec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8020064:	f1c2 0110 	rsb	r1, r2, #16
 8020068:	437a      	muls	r2, r7
 802006a:	fb09 2901 	mla	r9, r9, r1, r2
 802006e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020072:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8020076:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802007a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802007e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020082:	4302      	orrs	r2, r0
 8020084:	e7d4      	b.n	8020030 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8020086:	f8be 7000 	ldrh.w	r7, [lr]
 802008a:	43db      	mvns	r3, r3
 802008c:	4c1b      	ldr	r4, [pc, #108]	; (80200fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802008e:	1238      	asrs	r0, r7, #8
 8020090:	fa5f fc83 	uxtb.w	ip, r3
 8020094:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020098:	10fd      	asrs	r5, r7, #3
 802009a:	00fb      	lsls	r3, r7, #3
 802009c:	fb00 f00c 	mul.w	r0, r0, ip
 80200a0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80200a4:	b2db      	uxtb	r3, r3
 80200a6:	fb05 f10c 	mul.w	r1, r5, ip
 80200aa:	1c45      	adds	r5, r0, #1
 80200ac:	fb03 f30c 	mul.w	r3, r3, ip
 80200b0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80200b4:	1215      	asrs	r5, r2, #8
 80200b6:	f025 0507 	bic.w	r5, r5, #7
 80200ba:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80200be:	1c4d      	adds	r5, r1, #1
 80200c0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80200c4:	10d1      	asrs	r1, r2, #3
 80200c6:	b2c0      	uxtb	r0, r0
 80200c8:	f021 0103 	bic.w	r1, r1, #3
 80200cc:	00d2      	lsls	r2, r2, #3
 80200ce:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80200d2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80200d6:	00c9      	lsls	r1, r1, #3
 80200d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80200dc:	4308      	orrs	r0, r1
 80200de:	1c59      	adds	r1, r3, #1
 80200e0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80200e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80200e8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80200ec:	4318      	orrs	r0, r3
 80200ee:	f8ae 0000 	strh.w	r0, [lr]
 80200f2:	e7a2      	b.n	802003a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80200f4:	b013      	add	sp, #76	; 0x4c
 80200f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200fa:	bf00      	nop
 80200fc:	fffff800 	.word	0xfffff800

08020100 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8020100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020104:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8020108:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802010c:	fb05 4c03 	mla	ip, r5, r3, r4
 8020110:	2d00      	cmp	r5, #0
 8020112:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8020116:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802011a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802011e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8020122:	8808      	ldrh	r0, [r1, #0]
 8020124:	f2c0 80a7 	blt.w	8020276 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8020128:	45aa      	cmp	sl, r5
 802012a:	f340 80a4 	ble.w	8020276 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802012e:	2c00      	cmp	r4, #0
 8020130:	f2c0 809f 	blt.w	8020272 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8020134:	42a3      	cmp	r3, r4
 8020136:	f340 809c 	ble.w	8020272 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802013a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802013e:	1c62      	adds	r2, r4, #1
 8020140:	f100 809c 	bmi.w	802027c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8020144:	4293      	cmp	r3, r2
 8020146:	f340 8099 	ble.w	802027c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802014a:	f1b9 0f00 	cmp.w	r9, #0
 802014e:	f000 8095 	beq.w	802027c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8020152:	f8be c002 	ldrh.w	ip, [lr, #2]
 8020156:	3501      	adds	r5, #1
 8020158:	f100 8094 	bmi.w	8020284 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802015c:	45aa      	cmp	sl, r5
 802015e:	f340 8091 	ble.w	8020284 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020162:	2f00      	cmp	r7, #0
 8020164:	f000 808e 	beq.w	8020284 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020168:	2c00      	cmp	r4, #0
 802016a:	f2c0 8089 	blt.w	8020280 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802016e:	42a3      	cmp	r3, r4
 8020170:	f340 8086 	ble.w	8020280 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8020174:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8020178:	3401      	adds	r4, #1
 802017a:	f100 8086 	bmi.w	802028a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802017e:	42a3      	cmp	r3, r4
 8020180:	f340 8083 	ble.w	802028a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020184:	f1b9 0f00 	cmp.w	r9, #0
 8020188:	d07f      	beq.n	802028a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802018a:	3301      	adds	r3, #1
 802018c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8020190:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8020194:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8020198:	fb19 fe07 	smulbb	lr, r9, r7
 802019c:	f1c7 0210 	rsb	r2, r7, #16
 80201a0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80201a4:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80201a8:	eba2 0209 	sub.w	r2, r2, r9
 80201ac:	ea44 0808 	orr.w	r8, r4, r8
 80201b0:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80201b4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80201b8:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80201bc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80201c0:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80201c4:	ea44 0c0c 	orr.w	ip, r4, ip
 80201c8:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80201cc:	fb04 f40c 	mul.w	r4, r4, ip
 80201d0:	fb02 4808 	mla	r8, r2, r8, r4
 80201d4:	041a      	lsls	r2, r3, #16
 80201d6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80201da:	b2b4      	uxth	r4, r6
 80201dc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80201e0:	43f6      	mvns	r6, r6
 80201e2:	4313      	orrs	r3, r2
 80201e4:	042a      	lsls	r2, r5, #16
 80201e6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80201ea:	b2f6      	uxtb	r6, r6
 80201ec:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80201f0:	fb0e 8303 	mla	r3, lr, r3, r8
 80201f4:	432a      	orrs	r2, r5
 80201f6:	fb07 3202 	mla	r2, r7, r2, r3
 80201fa:	10c7      	asrs	r7, r0, #3
 80201fc:	0d53      	lsrs	r3, r2, #21
 80201fe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020202:	0952      	lsrs	r2, r2, #5
 8020204:	fb17 f706 	smulbb	r7, r7, r6
 8020208:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802020c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020210:	431a      	orrs	r2, r3
 8020212:	b293      	uxth	r3, r2
 8020214:	1202      	asrs	r2, r0, #8
 8020216:	121d      	asrs	r5, r3, #8
 8020218:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802021c:	00c0      	lsls	r0, r0, #3
 802021e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020222:	fb12 f206 	smulbb	r2, r2, r6
 8020226:	b2c0      	uxtb	r0, r0
 8020228:	fb05 2504 	mla	r5, r5, r4, r2
 802022c:	10da      	asrs	r2, r3, #3
 802022e:	fb10 f006 	smulbb	r0, r0, r6
 8020232:	00db      	lsls	r3, r3, #3
 8020234:	b2ad      	uxth	r5, r5
 8020236:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802023a:	b2db      	uxtb	r3, r3
 802023c:	fb02 7204 	mla	r2, r2, r4, r7
 8020240:	fb03 0004 	mla	r0, r3, r4, r0
 8020244:	1c6b      	adds	r3, r5, #1
 8020246:	b292      	uxth	r2, r2
 8020248:	b280      	uxth	r0, r0
 802024a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802024e:	1c43      	adds	r3, r0, #1
 8020250:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020254:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020258:	1c50      	adds	r0, r2, #1
 802025a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802025e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020262:	0952      	lsrs	r2, r2, #5
 8020264:	432b      	orrs	r3, r5
 8020266:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802026a:	4313      	orrs	r3, r2
 802026c:	800b      	strh	r3, [r1, #0]
 802026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020272:	4680      	mov	r8, r0
 8020274:	e763      	b.n	802013e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8020276:	4684      	mov	ip, r0
 8020278:	4680      	mov	r8, r0
 802027a:	e76c      	b.n	8020156 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802027c:	4684      	mov	ip, r0
 802027e:	e76a      	b.n	8020156 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8020280:	4605      	mov	r5, r0
 8020282:	e779      	b.n	8020178 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8020284:	4603      	mov	r3, r0
 8020286:	4605      	mov	r5, r0
 8020288:	e782      	b.n	8020190 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 802028a:	4603      	mov	r3, r0
 802028c:	e780      	b.n	8020190 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802028e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802028e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020292:	b093      	sub	sp, #76	; 0x4c
 8020294:	461d      	mov	r5, r3
 8020296:	9210      	str	r2, [sp, #64]	; 0x40
 8020298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802029a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802029e:	910a      	str	r1, [sp, #40]	; 0x28
 80202a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80202a2:	6859      	ldr	r1, [r3, #4]
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	9011      	str	r0, [sp, #68]	; 0x44
 80202a8:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80202ac:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80202b0:	fb01 2707 	mla	r7, r1, r7, r2
 80202b4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80202b8:	9307      	str	r3, [sp, #28]
 80202ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80202bc:	681b      	ldr	r3, [r3, #0]
 80202be:	9309      	str	r3, [sp, #36]	; 0x24
 80202c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202c2:	43db      	mvns	r3, r3
 80202c4:	b2db      	uxtb	r3, r3
 80202c6:	9308      	str	r3, [sp, #32]
 80202c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	dc03      	bgt.n	80202d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80202ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202d0:	2b00      	cmp	r3, #0
 80202d2:	f340 8205 	ble.w	80206e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80202d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80202d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80202e0:	1e48      	subs	r0, r1, #1
 80202e2:	f102 3cff 	add.w	ip, r2, #4294967295
 80202e6:	2d00      	cmp	r5, #0
 80202e8:	f340 80da 	ble.w	80204a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80202ec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80202f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80202f4:	d406      	bmi.n	8020304 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80202f6:	4586      	cmp	lr, r0
 80202f8:	da04      	bge.n	8020304 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	db02      	blt.n	8020304 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80202fe:	4563      	cmp	r3, ip
 8020300:	f2c0 80cf 	blt.w	80204a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020304:	f11e 0e01 	adds.w	lr, lr, #1
 8020308:	f100 80c1 	bmi.w	802048e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802030c:	4571      	cmp	r1, lr
 802030e:	f2c0 80be 	blt.w	802048e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020312:	3301      	adds	r3, #1
 8020314:	f100 80bb 	bmi.w	802048e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020318:	429a      	cmp	r2, r3
 802031a:	f2c0 80b8 	blt.w	802048e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802031e:	46a9      	mov	r9, r5
 8020320:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020324:	f1b9 0f00 	cmp.w	r9, #0
 8020328:	f340 80d8 	ble.w	80204dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802032c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802032e:	1421      	asrs	r1, r4, #16
 8020330:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020334:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020338:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802033c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020340:	f100 8112 	bmi.w	8020568 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020344:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020348:	4551      	cmp	r1, sl
 802034a:	f280 810d 	bge.w	8020568 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802034e:	2800      	cmp	r0, #0
 8020350:	f2c0 810a 	blt.w	8020568 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020354:	f103 3aff 	add.w	sl, r3, #4294967295
 8020358:	4550      	cmp	r0, sl
 802035a:	f280 8105 	bge.w	8020568 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802035e:	fa0f f38e 	sxth.w	r3, lr
 8020362:	fb00 1103 	mla	r1, r0, r3, r1
 8020366:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020368:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802036c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8020370:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8020374:	f1bc 0f00 	cmp.w	ip, #0
 8020378:	d007      	beq.n	802038a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 802037a:	005b      	lsls	r3, r3, #1
 802037c:	eb0a 0003 	add.w	r0, sl, r3
 8020380:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8020384:	930c      	str	r3, [sp, #48]	; 0x30
 8020386:	8843      	ldrh	r3, [r0, #2]
 8020388:	930d      	str	r3, [sp, #52]	; 0x34
 802038a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802038e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020392:	fb12 f30c 	smulbb	r3, r2, ip
 8020396:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802039a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802039e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80203a2:	10db      	asrs	r3, r3, #3
 80203a4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80203a8:	ea40 000e 	orr.w	r0, r0, lr
 80203ac:	f1cc 0e10 	rsb	lr, ip, #16
 80203b0:	ea4a 0101 	orr.w	r1, sl, r1
 80203b4:	9f08      	ldr	r7, [sp, #32]
 80203b6:	ebae 0e02 	sub.w	lr, lr, r2
 80203ba:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80203be:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80203c2:	4351      	muls	r1, r2
 80203c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80203c6:	fb0e 1e00 	mla	lr, lr, r0, r1
 80203ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80203cc:	0410      	lsls	r0, r2, #16
 80203ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80203d2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80203d6:	4310      	orrs	r0, r2
 80203d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80203da:	0412      	lsls	r2, r2, #16
 80203dc:	fb03 e000 	mla	r0, r3, r0, lr
 80203e0:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80203e4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80203e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80203ec:	ea42 020e 	orr.w	r2, r2, lr
 80203f0:	fb03 0302 	mla	r3, r3, r2, r0
 80203f4:	f8b8 0000 	ldrh.w	r0, [r8]
 80203f8:	0d5a      	lsrs	r2, r3, #21
 80203fa:	095b      	lsrs	r3, r3, #5
 80203fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020400:	1201      	asrs	r1, r0, #8
 8020402:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020406:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802040a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802040e:	00c0      	lsls	r0, r0, #3
 8020410:	4313      	orrs	r3, r2
 8020412:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8020416:	fb11 f107 	smulbb	r1, r1, r7
 802041a:	b2c0      	uxtb	r0, r0
 802041c:	b29b      	uxth	r3, r3
 802041e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020422:	fb10 f007 	smulbb	r0, r0, r7
 8020426:	fb1e fe07 	smulbb	lr, lr, r7
 802042a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802042e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020432:	fb0c 1c02 	mla	ip, ip, r2, r1
 8020436:	10d9      	asrs	r1, r3, #3
 8020438:	00db      	lsls	r3, r3, #3
 802043a:	fa1f fc8c 	uxth.w	ip, ip
 802043e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020442:	b2db      	uxtb	r3, r3
 8020444:	fb01 e102 	mla	r1, r1, r2, lr
 8020448:	fb03 0302 	mla	r3, r3, r2, r0
 802044c:	b289      	uxth	r1, r1
 802044e:	b29a      	uxth	r2, r3
 8020450:	f10c 0301 	add.w	r3, ip, #1
 8020454:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020458:	1c53      	adds	r3, r2, #1
 802045a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802045e:	1c4a      	adds	r2, r1, #1
 8020460:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020464:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020468:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802046c:	0949      	lsrs	r1, r1, #5
 802046e:	ea43 030c 	orr.w	r3, r3, ip
 8020472:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020476:	430b      	orrs	r3, r1
 8020478:	f8a8 3000 	strh.w	r3, [r8]
 802047c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802047e:	f108 0802 	add.w	r8, r8, #2
 8020482:	f109 39ff 	add.w	r9, r9, #4294967295
 8020486:	441c      	add	r4, r3
 8020488:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802048a:	441e      	add	r6, r3
 802048c:	e74a      	b.n	8020324 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802048e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020490:	3d01      	subs	r5, #1
 8020492:	441c      	add	r4, r3
 8020494:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020496:	441e      	add	r6, r3
 8020498:	9b07      	ldr	r3, [sp, #28]
 802049a:	3302      	adds	r3, #2
 802049c:	9307      	str	r3, [sp, #28]
 802049e:	e722      	b.n	80202e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80204a0:	d022      	beq.n	80204e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80204a2:	1e6b      	subs	r3, r5, #1
 80204a4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80204a6:	fb00 4003 	mla	r0, r0, r3, r4
 80204aa:	1400      	asrs	r0, r0, #16
 80204ac:	f53f af37 	bmi.w	802031e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80204b0:	3901      	subs	r1, #1
 80204b2:	4288      	cmp	r0, r1
 80204b4:	f6bf af33 	bge.w	802031e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80204b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80204ba:	fb01 6303 	mla	r3, r1, r3, r6
 80204be:	141b      	asrs	r3, r3, #16
 80204c0:	f53f af2d 	bmi.w	802031e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80204c4:	3a01      	subs	r2, #1
 80204c6:	4293      	cmp	r3, r2
 80204c8:	f6bf af29 	bge.w	802031e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80204cc:	46a8      	mov	r8, r5
 80204ce:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80204d2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80204d6:	f1b8 0f00 	cmp.w	r8, #0
 80204da:	dc60      	bgt.n	802059e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80204dc:	9b07      	ldr	r3, [sp, #28]
 80204de:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80204e2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80204e6:	9307      	str	r3, [sp, #28]
 80204e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204ea:	2b00      	cmp	r3, #0
 80204ec:	f340 80f8 	ble.w	80206e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80204f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80204f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204fe:	eef0 6a62 	vmov.f32	s13, s5
 8020502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020506:	ee31 1a05 	vadd.f32	s2, s2, s10
 802050a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802050e:	ee16 4a90 	vmov	r4, s13
 8020512:	eef0 6a43 	vmov.f32	s13, s6
 8020516:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802051a:	ee16 6a90 	vmov	r6, s13
 802051e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020522:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020526:	ee77 2a62 	vsub.f32	s5, s14, s5
 802052a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802052e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020532:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020536:	ee12 2a90 	vmov	r2, s5
 802053a:	eef0 2a47 	vmov.f32	s5, s14
 802053e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020542:	ee13 2a10 	vmov	r2, s6
 8020546:	931f      	str	r3, [sp, #124]	; 0x7c
 8020548:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802054a:	eeb0 3a67 	vmov.f32	s6, s15
 802054e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020552:	9320      	str	r3, [sp, #128]	; 0x80
 8020554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020556:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020558:	3b01      	subs	r3, #1
 802055a:	930a      	str	r3, [sp, #40]	; 0x28
 802055c:	bf08      	it	eq
 802055e:	4615      	moveq	r5, r2
 8020560:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020562:	bf18      	it	ne
 8020564:	461d      	movne	r5, r3
 8020566:	e6af      	b.n	80202c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020568:	f111 0a01 	adds.w	sl, r1, #1
 802056c:	d486      	bmi.n	802047c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802056e:	45d6      	cmp	lr, sl
 8020570:	db84      	blt.n	802047c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020572:	f110 0a01 	adds.w	sl, r0, #1
 8020576:	d481      	bmi.n	802047c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020578:	4553      	cmp	r3, sl
 802057a:	f6ff af7f 	blt.w	802047c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802057e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020580:	b21b      	sxth	r3, r3
 8020582:	9101      	str	r1, [sp, #4]
 8020584:	4641      	mov	r1, r8
 8020586:	9300      	str	r3, [sp, #0]
 8020588:	fa0f f38e 	sxth.w	r3, lr
 802058c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8020590:	e9cd c704 	strd	ip, r7, [sp, #16]
 8020594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020596:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020598:	f7ff fdb2 	bl	8020100 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802059c:	e76e      	b.n	802047c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802059e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80205a0:	1430      	asrs	r0, r6, #16
 80205a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80205a4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80205a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80205ac:	1423      	asrs	r3, r4, #16
 80205ae:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80205b2:	fb01 3000 	mla	r0, r1, r0, r3
 80205b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205b8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80205bc:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80205c0:	8858      	ldrh	r0, [r3, #2]
 80205c2:	f1be 0f00 	cmp.w	lr, #0
 80205c6:	d00b      	beq.n	80205e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80205c8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80205cc:	3901      	subs	r1, #1
 80205ce:	0049      	lsls	r1, r1, #1
 80205d0:	3102      	adds	r1, #2
 80205d2:	eb03 0b01 	add.w	fp, r3, r1
 80205d6:	5a5b      	ldrh	r3, [r3, r1]
 80205d8:	930e      	str	r3, [sp, #56]	; 0x38
 80205da:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80205de:	930f      	str	r3, [sp, #60]	; 0x3c
 80205e0:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80205e4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80205e8:	fb12 f30e 	smulbb	r3, r2, lr
 80205ec:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80205f0:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80205f4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80205f8:	10db      	asrs	r3, r3, #3
 80205fa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80205fe:	ea41 010c 	orr.w	r1, r1, ip
 8020602:	f1ce 0c10 	rsb	ip, lr, #16
 8020606:	ea4b 0000 	orr.w	r0, fp, r0
 802060a:	9f08      	ldr	r7, [sp, #32]
 802060c:	ebac 0c02 	sub.w	ip, ip, r2
 8020610:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020614:	f108 38ff 	add.w	r8, r8, #4294967295
 8020618:	4350      	muls	r0, r2
 802061a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802061e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020620:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020624:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020626:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802062a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802062e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020630:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020634:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020638:	0412      	lsls	r2, r2, #16
 802063a:	ea4b 0101 	orr.w	r1, fp, r1
 802063e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020642:	fb03 c101 	mla	r1, r3, r1, ip
 8020646:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802064a:	4302      	orrs	r2, r0
 802064c:	fb03 1202 	mla	r2, r3, r2, r1
 8020650:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8020654:	0952      	lsrs	r2, r2, #5
 8020656:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802065a:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802065e:	f8b9 2000 	ldrh.w	r2, [r9]
 8020662:	ea4b 0303 	orr.w	r3, fp, r3
 8020666:	1211      	asrs	r1, r2, #8
 8020668:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802066c:	b29b      	uxth	r3, r3
 802066e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020672:	00d2      	lsls	r2, r2, #3
 8020674:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020678:	fb11 f107 	smulbb	r1, r1, r7
 802067c:	1218      	asrs	r0, r3, #8
 802067e:	fb1c fc07 	smulbb	ip, ip, r7
 8020682:	b2d2      	uxtb	r2, r2
 8020684:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020688:	fb12 f207 	smulbb	r2, r2, r7
 802068c:	fb00 100a 	mla	r0, r0, sl, r1
 8020690:	10d9      	asrs	r1, r3, #3
 8020692:	00db      	lsls	r3, r3, #3
 8020694:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020698:	b280      	uxth	r0, r0
 802069a:	b2db      	uxtb	r3, r3
 802069c:	fb01 c10a 	mla	r1, r1, sl, ip
 80206a0:	fb03 230a 	mla	r3, r3, sl, r2
 80206a4:	1c42      	adds	r2, r0, #1
 80206a6:	b289      	uxth	r1, r1
 80206a8:	b29b      	uxth	r3, r3
 80206aa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80206ae:	f101 0c01 	add.w	ip, r1, #1
 80206b2:	1c5a      	adds	r2, r3, #1
 80206b4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80206b8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80206bc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80206c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80206c2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80206c6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80206ca:	441c      	add	r4, r3
 80206cc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80206d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80206d2:	4310      	orrs	r0, r2
 80206d4:	441e      	add	r6, r3
 80206d6:	ea40 000c 	orr.w	r0, r0, ip
 80206da:	f829 0b02 	strh.w	r0, [r9], #2
 80206de:	e6fa      	b.n	80204d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80206e0:	b013      	add	sp, #76	; 0x4c
 80206e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80206e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80206ea:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80206ee:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80206f2:	fb0e 4703 	mla	r7, lr, r3, r4
 80206f6:	f1be 0f00 	cmp.w	lr, #0
 80206fa:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80206fe:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8020702:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8020706:	8808      	ldrh	r0, [r1, #0]
 8020708:	db60      	blt.n	80207cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802070a:	45f1      	cmp	r9, lr
 802070c:	dd5e      	ble.n	80207cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802070e:	2c00      	cmp	r4, #0
 8020710:	db5a      	blt.n	80207c8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8020712:	42a3      	cmp	r3, r4
 8020714:	dd58      	ble.n	80207c8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8020716:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802071a:	1c62      	adds	r2, r4, #1
 802071c:	d459      	bmi.n	80207d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802071e:	4293      	cmp	r3, r2
 8020720:	dd57      	ble.n	80207d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020722:	2d00      	cmp	r5, #0
 8020724:	d055      	beq.n	80207d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020726:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802072a:	f11e 0e01 	adds.w	lr, lr, #1
 802072e:	d454      	bmi.n	80207da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020730:	45f1      	cmp	r9, lr
 8020732:	dd52      	ble.n	80207da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020734:	2e00      	cmp	r6, #0
 8020736:	d050      	beq.n	80207da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020738:	2c00      	cmp	r4, #0
 802073a:	db4c      	blt.n	80207d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802073c:	42a3      	cmp	r3, r4
 802073e:	dd4a      	ble.n	80207d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020740:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8020744:	3401      	adds	r4, #1
 8020746:	d405      	bmi.n	8020754 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020748:	42a3      	cmp	r3, r4
 802074a:	dd03      	ble.n	8020754 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802074c:	b115      	cbz	r5, 8020754 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802074e:	3301      	adds	r3, #1
 8020750:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8020754:	fb15 f406 	smulbb	r4, r5, r6
 8020758:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802075c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8020760:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020764:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020768:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802076c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020770:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020774:	ea43 0c0c 	orr.w	ip, r3, ip
 8020778:	f1c6 0310 	rsb	r3, r6, #16
 802077c:	ea4e 0707 	orr.w	r7, lr, r7
 8020780:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8020784:	1b5b      	subs	r3, r3, r5
 8020786:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802078a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802078e:	437d      	muls	r5, r7
 8020790:	fb03 5c0c 	mla	ip, r3, ip, r5
 8020794:	0403      	lsls	r3, r0, #16
 8020796:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802079a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802079e:	4318      	orrs	r0, r3
 80207a0:	0413      	lsls	r3, r2, #16
 80207a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80207a6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80207aa:	fb04 c000 	mla	r0, r4, r0, ip
 80207ae:	4313      	orrs	r3, r2
 80207b0:	fb06 0003 	mla	r0, r6, r3, r0
 80207b4:	0d43      	lsrs	r3, r0, #21
 80207b6:	0940      	lsrs	r0, r0, #5
 80207b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80207bc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80207c0:	4318      	orrs	r0, r3
 80207c2:	8008      	strh	r0, [r1, #0]
 80207c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80207c8:	4684      	mov	ip, r0
 80207ca:	e7a6      	b.n	802071a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80207cc:	4607      	mov	r7, r0
 80207ce:	4684      	mov	ip, r0
 80207d0:	e7ab      	b.n	802072a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80207d2:	4607      	mov	r7, r0
 80207d4:	e7a9      	b.n	802072a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80207d6:	4602      	mov	r2, r0
 80207d8:	e7b4      	b.n	8020744 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80207da:	4602      	mov	r2, r0
 80207dc:	e7ba      	b.n	8020754 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080207de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207e2:	b08f      	sub	sp, #60	; 0x3c
 80207e4:	461d      	mov	r5, r3
 80207e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80207e8:	9107      	str	r1, [sp, #28]
 80207ea:	920c      	str	r2, [sp, #48]	; 0x30
 80207ec:	6859      	ldr	r1, [r3, #4]
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	900d      	str	r0, [sp, #52]	; 0x34
 80207f2:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80207f6:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80207fa:	fb01 2707 	mla	r7, r1, r7, r2
 80207fe:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8020802:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020804:	f8d3 8000 	ldr.w	r8, [r3]
 8020808:	9b07      	ldr	r3, [sp, #28]
 802080a:	2b00      	cmp	r3, #0
 802080c:	dc03      	bgt.n	8020816 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802080e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020810:	2b00      	cmp	r3, #0
 8020812:	f340 8182 	ble.w	8020b1a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8020816:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020818:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802081c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020820:	1e48      	subs	r0, r1, #1
 8020822:	f102 3cff 	add.w	ip, r2, #4294967295
 8020826:	2d00      	cmp	r5, #0
 8020828:	f340 809b 	ble.w	8020962 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802082c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020830:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020834:	d406      	bmi.n	8020844 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020836:	4586      	cmp	lr, r0
 8020838:	da04      	bge.n	8020844 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802083a:	2b00      	cmp	r3, #0
 802083c:	db02      	blt.n	8020844 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802083e:	4563      	cmp	r3, ip
 8020840:	f2c0 8090 	blt.w	8020964 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020844:	f11e 0e01 	adds.w	lr, lr, #1
 8020848:	f100 8084 	bmi.w	8020954 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802084c:	4571      	cmp	r1, lr
 802084e:	f2c0 8081 	blt.w	8020954 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020852:	3301      	adds	r3, #1
 8020854:	d47e      	bmi.n	8020954 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020856:	429a      	cmp	r2, r3
 8020858:	db7c      	blt.n	8020954 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802085a:	46aa      	mov	sl, r5
 802085c:	46b9      	mov	r9, r7
 802085e:	f1ba 0f00 	cmp.w	sl, #0
 8020862:	f340 8099 	ble.w	8020998 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020866:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020868:	1421      	asrs	r1, r4, #16
 802086a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802086e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020872:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020876:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802087a:	f100 80d1 	bmi.w	8020a20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802087e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020882:	4559      	cmp	r1, fp
 8020884:	f280 80cc 	bge.w	8020a20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020888:	2800      	cmp	r0, #0
 802088a:	f2c0 80c9 	blt.w	8020a20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802088e:	f103 3bff 	add.w	fp, r3, #4294967295
 8020892:	4558      	cmp	r0, fp
 8020894:	f280 80c4 	bge.w	8020a20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020898:	fa0f fe8e 	sxth.w	lr, lr
 802089c:	fb00 110e 	mla	r1, r0, lr, r1
 80208a0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80208a4:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80208a8:	8841      	ldrh	r1, [r0, #2]
 80208aa:	f1bc 0f00 	cmp.w	ip, #0
 80208ae:	d00b      	beq.n	80208c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80208b0:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80208b4:	3b01      	subs	r3, #1
 80208b6:	005b      	lsls	r3, r3, #1
 80208b8:	3302      	adds	r3, #2
 80208ba:	eb00 0e03 	add.w	lr, r0, r3
 80208be:	5ac3      	ldrh	r3, [r0, r3]
 80208c0:	9308      	str	r3, [sp, #32]
 80208c2:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80208c6:	9309      	str	r3, [sp, #36]	; 0x24
 80208c8:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80208cc:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80208d0:	fb12 f30c 	smulbb	r3, r2, ip
 80208d4:	f1cc 0e10 	rsb	lr, ip, #16
 80208d8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80208dc:	10db      	asrs	r3, r3, #3
 80208de:	ebae 0e02 	sub.w	lr, lr, r2
 80208e2:	ea40 000b 	orr.w	r0, r0, fp
 80208e6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80208ea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80208ee:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80208f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80208f6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80208fa:	ea4b 0101 	orr.w	r1, fp, r1
 80208fe:	4351      	muls	r1, r2
 8020900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020902:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020906:	0410      	lsls	r0, r2, #16
 8020908:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802090c:	9908      	ldr	r1, [sp, #32]
 802090e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020912:	4310      	orrs	r0, r2
 8020914:	9a08      	ldr	r2, [sp, #32]
 8020916:	0412      	lsls	r2, r2, #16
 8020918:	fb03 e000 	mla	r0, r3, r0, lr
 802091c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020920:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020924:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020928:	ea42 020e 	orr.w	r2, r2, lr
 802092c:	fb03 0302 	mla	r3, r3, r2, r0
 8020930:	0d5a      	lsrs	r2, r3, #21
 8020932:	095b      	lsrs	r3, r3, #5
 8020934:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020938:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802093c:	4313      	orrs	r3, r2
 802093e:	f8a9 3000 	strh.w	r3, [r9]
 8020942:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020944:	f109 0902 	add.w	r9, r9, #2
 8020948:	f10a 3aff 	add.w	sl, sl, #4294967295
 802094c:	441c      	add	r4, r3
 802094e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020950:	441e      	add	r6, r3
 8020952:	e784      	b.n	802085e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020956:	3d01      	subs	r5, #1
 8020958:	3702      	adds	r7, #2
 802095a:	441c      	add	r4, r3
 802095c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802095e:	441e      	add	r6, r3
 8020960:	e761      	b.n	8020826 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020962:	d01d      	beq.n	80209a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020964:	1e6b      	subs	r3, r5, #1
 8020966:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020968:	fb00 4003 	mla	r0, r0, r3, r4
 802096c:	1400      	asrs	r0, r0, #16
 802096e:	f53f af74 	bmi.w	802085a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020972:	3901      	subs	r1, #1
 8020974:	4288      	cmp	r0, r1
 8020976:	f6bf af70 	bge.w	802085a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802097a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802097c:	fb01 6303 	mla	r3, r1, r3, r6
 8020980:	141b      	asrs	r3, r3, #16
 8020982:	f53f af6a 	bmi.w	802085a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020986:	3a01      	subs	r2, #1
 8020988:	4293      	cmp	r3, r2
 802098a:	f6bf af66 	bge.w	802085a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802098e:	46a9      	mov	r9, r5
 8020990:	46ba      	mov	sl, r7
 8020992:	f1b9 0f00 	cmp.w	r9, #0
 8020996:	dc5b      	bgt.n	8020a50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020998:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802099c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80209a0:	9b07      	ldr	r3, [sp, #28]
 80209a2:	2b00      	cmp	r3, #0
 80209a4:	f340 80b9 	ble.w	8020b1a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80209a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80209ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80209ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209b6:	eef0 6a62 	vmov.f32	s13, s5
 80209ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80209be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209c6:	ee16 4a90 	vmov	r4, s13
 80209ca:	eef0 6a43 	vmov.f32	s13, s6
 80209ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209d2:	ee16 6a90 	vmov	r6, s13
 80209d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80209da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80209e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80209ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80209ee:	ee12 2a90 	vmov	r2, s5
 80209f2:	eef0 2a47 	vmov.f32	s5, s14
 80209f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80209fa:	ee13 2a10 	vmov	r2, s6
 80209fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8020a00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020a02:	eeb0 3a67 	vmov.f32	s6, s15
 8020a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a0a:	931c      	str	r3, [sp, #112]	; 0x70
 8020a0c:	9b07      	ldr	r3, [sp, #28]
 8020a0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020a10:	3b01      	subs	r3, #1
 8020a12:	9307      	str	r3, [sp, #28]
 8020a14:	bf08      	it	eq
 8020a16:	4615      	moveq	r5, r2
 8020a18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020a1a:	bf18      	it	ne
 8020a1c:	461d      	movne	r5, r3
 8020a1e:	e6f3      	b.n	8020808 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020a20:	f111 0b01 	adds.w	fp, r1, #1
 8020a24:	d48d      	bmi.n	8020942 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020a26:	45de      	cmp	lr, fp
 8020a28:	db8b      	blt.n	8020942 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020a2a:	f110 0b01 	adds.w	fp, r0, #1
 8020a2e:	d488      	bmi.n	8020942 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020a30:	455b      	cmp	r3, fp
 8020a32:	db86      	blt.n	8020942 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020a34:	b21b      	sxth	r3, r3
 8020a36:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8020a3a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8020a3e:	9300      	str	r3, [sp, #0]
 8020a40:	4642      	mov	r2, r8
 8020a42:	fa0f f38e 	sxth.w	r3, lr
 8020a46:	4649      	mov	r1, r9
 8020a48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020a4a:	f7ff fe4c 	bl	80206e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8020a4e:	e778      	b.n	8020942 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020a50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a52:	1420      	asrs	r0, r4, #16
 8020a54:	1431      	asrs	r1, r6, #16
 8020a56:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020a5e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020a62:	fb03 0101 	mla	r1, r3, r1, r0
 8020a66:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020a6a:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8020a6e:	8841      	ldrh	r1, [r0, #2]
 8020a70:	f1be 0f00 	cmp.w	lr, #0
 8020a74:	d00b      	beq.n	8020a8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020a76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020a7a:	3b01      	subs	r3, #1
 8020a7c:	005b      	lsls	r3, r3, #1
 8020a7e:	3302      	adds	r3, #2
 8020a80:	eb00 0b03 	add.w	fp, r0, r3
 8020a84:	5ac3      	ldrh	r3, [r0, r3]
 8020a86:	930a      	str	r3, [sp, #40]	; 0x28
 8020a88:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8020a8e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020a92:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020a96:	fb12 f30e 	smulbb	r3, r2, lr
 8020a9a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020a9e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020aa2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020aa6:	10db      	asrs	r3, r3, #3
 8020aa8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020aac:	ea40 000c 	orr.w	r0, r0, ip
 8020ab0:	f1ce 0c10 	rsb	ip, lr, #16
 8020ab4:	ea4b 0101 	orr.w	r1, fp, r1
 8020ab8:	f109 39ff 	add.w	r9, r9, #4294967295
 8020abc:	ebac 0c02 	sub.w	ip, ip, r2
 8020ac0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020ac4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020ac8:	4351      	muls	r1, r2
 8020aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020acc:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020ad0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020ad2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020ad6:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8020ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020adc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020ae0:	0412      	lsls	r2, r2, #16
 8020ae2:	ea4b 0000 	orr.w	r0, fp, r0
 8020ae6:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8020aea:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020aee:	fb03 c000 	mla	r0, r3, r0, ip
 8020af2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020af6:	ea42 0b0b 	orr.w	fp, r2, fp
 8020afa:	fb03 000b 	mla	r0, r3, fp, r0
 8020afe:	0d43      	lsrs	r3, r0, #21
 8020b00:	0940      	lsrs	r0, r0, #5
 8020b02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b06:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020b0a:	4318      	orrs	r0, r3
 8020b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020b0e:	441c      	add	r4, r3
 8020b10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020b12:	f82a 0b02 	strh.w	r0, [sl], #2
 8020b16:	441e      	add	r6, r3
 8020b18:	e73b      	b.n	8020992 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020b1a:	b00f      	add	sp, #60	; 0x3c
 8020b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8020b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b24:	b085      	sub	sp, #20
 8020b26:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8020b2a:	9102      	str	r1, [sp, #8]
 8020b2c:	2c00      	cmp	r4, #0
 8020b2e:	fb04 7103 	mla	r1, r4, r3, r7
 8020b32:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8020b36:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020b3a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8020b3e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020b42:	f2c0 811b 	blt.w	8020d7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020b46:	45a6      	cmp	lr, r4
 8020b48:	f340 8118 	ble.w	8020d7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020b4c:	2f00      	cmp	r7, #0
 8020b4e:	f2c0 8113 	blt.w	8020d78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020b52:	42bb      	cmp	r3, r7
 8020b54:	f340 8110 	ble.w	8020d78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020b58:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020b5c:	1c7a      	adds	r2, r7, #1
 8020b5e:	f100 8110 	bmi.w	8020d82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8020b62:	4293      	cmp	r3, r2
 8020b64:	f340 810d 	ble.w	8020d82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8020b68:	2e00      	cmp	r6, #0
 8020b6a:	f000 810c 	beq.w	8020d86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8020b6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020b72:	3401      	adds	r4, #1
 8020b74:	f100 810b 	bmi.w	8020d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020b78:	45a6      	cmp	lr, r4
 8020b7a:	f340 8108 	ble.w	8020d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020b7e:	2800      	cmp	r0, #0
 8020b80:	f000 8108 	beq.w	8020d94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8020b84:	2f00      	cmp	r7, #0
 8020b86:	f2c0 8100 	blt.w	8020d8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020b8a:	42bb      	cmp	r3, r7
 8020b8c:	f340 80fd 	ble.w	8020d8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020b90:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020b94:	3701      	adds	r7, #1
 8020b96:	f100 8100 	bmi.w	8020d9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020b9a:	42bb      	cmp	r3, r7
 8020b9c:	f340 80fd 	ble.w	8020d9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020ba0:	2e00      	cmp	r6, #0
 8020ba2:	f000 80fc 	beq.w	8020d9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8020ba6:	3301      	adds	r3, #1
 8020ba8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020bac:	b2b6      	uxth	r6, r6
 8020bae:	b280      	uxth	r0, r0
 8020bb0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020bb4:	fb00 fe06 	mul.w	lr, r0, r6
 8020bb8:	0136      	lsls	r6, r6, #4
 8020bba:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020bbe:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020bc2:	eba6 070e 	sub.w	r7, r6, lr
 8020bc6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020bca:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020bce:	b280      	uxth	r0, r0
 8020bd0:	b2bf      	uxth	r7, r7
 8020bd2:	1a1b      	subs	r3, r3, r0
 8020bd4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020bd8:	fb0a f607 	mul.w	r6, sl, r7
 8020bdc:	b29b      	uxth	r3, r3
 8020bde:	fb0b 6603 	mla	r6, fp, r3, r6
 8020be2:	fb00 6609 	mla	r6, r0, r9, r6
 8020be6:	fb0e 6608 	mla	r6, lr, r8, r6
 8020bea:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020bee:	9600      	str	r6, [sp, #0]
 8020bf0:	2e00      	cmp	r6, #0
 8020bf2:	f000 80be 	beq.w	8020d72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8020bf6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020bfa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020bfe:	9e02      	ldr	r6, [sp, #8]
 8020c00:	fb0b fc0c 	mul.w	ip, fp, ip
 8020c04:	fb0b f505 	mul.w	r5, fp, r5
 8020c08:	8836      	ldrh	r6, [r6, #0]
 8020c0a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020c0e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c12:	9501      	str	r5, [sp, #4]
 8020c14:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020c18:	44dc      	add	ip, fp
 8020c1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c1e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020c22:	9503      	str	r5, [sp, #12]
 8020c24:	9d01      	ldr	r5, [sp, #4]
 8020c26:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020c2a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020c2e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8020c32:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020c36:	fb0a fc0c 	mul.w	ip, sl, ip
 8020c3a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020c3e:	fb0a fa01 	mul.w	sl, sl, r1
 8020c42:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020c46:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c4a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8020c4e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020c52:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020c56:	4465      	add	r5, ip
 8020c58:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020c5c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020c60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c64:	fb09 fc0c 	mul.w	ip, r9, ip
 8020c68:	0a2d      	lsrs	r5, r5, #8
 8020c6a:	fb09 f904 	mul.w	r9, r9, r4
 8020c6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c72:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020c76:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020c7a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020c7e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c82:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020c86:	437d      	muls	r5, r7
 8020c88:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020c8c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8020c90:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020c94:	4461      	add	r1, ip
 8020c96:	fb08 f404 	mul.w	r4, r8, r4
 8020c9a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020c9e:	fb08 f802 	mul.w	r8, r8, r2
 8020ca2:	0a09      	lsrs	r1, r1, #8
 8020ca4:	0a22      	lsrs	r2, r4, #8
 8020ca6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020caa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020cae:	fb07 f70a 	mul.w	r7, r7, sl
 8020cb2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020cb6:	4414      	add	r4, r2
 8020cb8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020cbc:	0a24      	lsrs	r4, r4, #8
 8020cbe:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020cc2:	9a03      	ldr	r2, [sp, #12]
 8020cc4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020cc8:	fb02 5503 	mla	r5, r2, r3, r5
 8020ccc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020cd0:	9a00      	ldr	r2, [sp, #0]
 8020cd2:	fb04 540e 	mla	r4, r4, lr, r5
 8020cd6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020cda:	1235      	asrs	r5, r6, #8
 8020cdc:	fb01 4100 	mla	r1, r1, r0, r4
 8020ce0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020ce4:	0a09      	lsrs	r1, r1, #8
 8020ce6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8020cea:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8020cee:	fb03 7101 	mla	r1, r3, r1, r7
 8020cf2:	fb0e 1e08 	mla	lr, lr, r8, r1
 8020cf6:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8020cfa:	fb00 e101 	mla	r1, r0, r1, lr
 8020cfe:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8020d02:	b287      	uxth	r7, r0
 8020d04:	0a09      	lsrs	r1, r1, #8
 8020d06:	437a      	muls	r2, r7
 8020d08:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020d0c:	1c53      	adds	r3, r2, #1
 8020d0e:	4321      	orrs	r1, r4
 8020d10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020d14:	0c0a      	lsrs	r2, r1, #16
 8020d16:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8020d1a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020d1e:	b2c8      	uxtb	r0, r1
 8020d20:	fb12 f207 	smulbb	r2, r2, r7
 8020d24:	fb14 f407 	smulbb	r4, r4, r7
 8020d28:	b2db      	uxtb	r3, r3
 8020d2a:	fb10 f007 	smulbb	r0, r0, r7
 8020d2e:	fb05 2503 	mla	r5, r5, r3, r2
 8020d32:	10f2      	asrs	r2, r6, #3
 8020d34:	00f6      	lsls	r6, r6, #3
 8020d36:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020d3a:	b2ad      	uxth	r5, r5
 8020d3c:	b2f6      	uxtb	r6, r6
 8020d3e:	fb02 4203 	mla	r2, r2, r3, r4
 8020d42:	fb06 0303 	mla	r3, r6, r3, r0
 8020d46:	b294      	uxth	r4, r2
 8020d48:	b299      	uxth	r1, r3
 8020d4a:	1c6b      	adds	r3, r5, #1
 8020d4c:	1c62      	adds	r2, r4, #1
 8020d4e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020d52:	1c4b      	adds	r3, r1, #1
 8020d54:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020d58:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020d5c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020d60:	0952      	lsrs	r2, r2, #5
 8020d62:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020d66:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020d6a:	432b      	orrs	r3, r5
 8020d6c:	4313      	orrs	r3, r2
 8020d6e:	9a02      	ldr	r2, [sp, #8]
 8020d70:	8013      	strh	r3, [r2, #0]
 8020d72:	b005      	add	sp, #20
 8020d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d78:	2500      	movs	r5, #0
 8020d7a:	e6ef      	b.n	8020b5c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8020d7c:	2100      	movs	r1, #0
 8020d7e:	460d      	mov	r5, r1
 8020d80:	e6f7      	b.n	8020b72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020d82:	2100      	movs	r1, #0
 8020d84:	e6f5      	b.n	8020b72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020d86:	4631      	mov	r1, r6
 8020d88:	e6f3      	b.n	8020b72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020d8a:	2400      	movs	r4, #0
 8020d8c:	e702      	b.n	8020b94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8020d8e:	2200      	movs	r2, #0
 8020d90:	4614      	mov	r4, r2
 8020d92:	e70b      	b.n	8020bac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020d94:	4602      	mov	r2, r0
 8020d96:	4604      	mov	r4, r0
 8020d98:	e708      	b.n	8020bac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020d9a:	2200      	movs	r2, #0
 8020d9c:	e706      	b.n	8020bac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020d9e:	4632      	mov	r2, r6
 8020da0:	e704      	b.n	8020bac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08020da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020da6:	b09d      	sub	sp, #116	; 0x74
 8020da8:	9219      	str	r2, [sp, #100]	; 0x64
 8020daa:	9307      	str	r3, [sp, #28]
 8020dac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020dae:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8020db2:	901b      	str	r0, [sp, #108]	; 0x6c
 8020db4:	931a      	str	r3, [sp, #104]	; 0x68
 8020db6:	6850      	ldr	r0, [r2, #4]
 8020db8:	9117      	str	r1, [sp, #92]	; 0x5c
 8020dba:	6812      	ldr	r2, [r2, #0]
 8020dbc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020dc0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8020dc4:	fb00 1303 	mla	r3, r0, r3, r1
 8020dc8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020dcc:	930a      	str	r3, [sp, #40]	; 0x28
 8020dce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8020dd4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8020dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8020dda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	dc03      	bgt.n	8020de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020de0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	f340 8375 	ble.w	80214d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020de8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020dea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020dee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020df2:	1e48      	subs	r0, r1, #1
 8020df4:	1e57      	subs	r7, r2, #1
 8020df6:	9b07      	ldr	r3, [sp, #28]
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	f340 818e 	ble.w	802111a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8020dfe:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020e02:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020e06:	d406      	bmi.n	8020e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020e08:	4584      	cmp	ip, r0
 8020e0a:	da04      	bge.n	8020e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	db02      	blt.n	8020e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020e10:	42bb      	cmp	r3, r7
 8020e12:	f2c0 8183 	blt.w	802111c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8020e16:	f11c 0c01 	adds.w	ip, ip, #1
 8020e1a:	f100 8173 	bmi.w	8021104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020e1e:	4561      	cmp	r1, ip
 8020e20:	f2c0 8170 	blt.w	8021104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020e24:	3301      	adds	r3, #1
 8020e26:	f100 816d 	bmi.w	8021104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020e2a:	429a      	cmp	r2, r3
 8020e2c:	f2c0 816a 	blt.w	8021104 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020e30:	9b07      	ldr	r3, [sp, #28]
 8020e32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020e34:	9318      	str	r3, [sp, #96]	; 0x60
 8020e36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	f340 818c 	ble.w	8021156 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8020e3e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020e40:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020e44:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020e46:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020e4a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020e4e:	1422      	asrs	r2, r4, #16
 8020e50:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020e54:	689b      	ldr	r3, [r3, #8]
 8020e56:	f100 81cd 	bmi.w	80211f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020e5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8020e5e:	4542      	cmp	r2, r8
 8020e60:	f280 81c8 	bge.w	80211f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020e64:	f1bc 0f00 	cmp.w	ip, #0
 8020e68:	f2c0 81c4 	blt.w	80211f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020e6c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020e70:	45c4      	cmp	ip, r8
 8020e72:	f280 81bf 	bge.w	80211f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020e76:	b21b      	sxth	r3, r3
 8020e78:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020e7a:	fb0c 2203 	mla	r2, ip, r3, r2
 8020e7e:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020e82:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020e86:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020e8a:	2800      	cmp	r0, #0
 8020e8c:	f000 81a9 	beq.w	80211e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8020e90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020e94:	950c      	str	r5, [sp, #48]	; 0x30
 8020e96:	0e2d      	lsrs	r5, r5, #24
 8020e98:	9513      	str	r5, [sp, #76]	; 0x4c
 8020e9a:	b181      	cbz	r1, 8020ebe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020ea0:	3b01      	subs	r3, #1
 8020ea2:	009b      	lsls	r3, r3, #2
 8020ea4:	3304      	adds	r3, #4
 8020ea6:	eb08 0c03 	add.w	ip, r8, r3
 8020eaa:	f858 3003 	ldr.w	r3, [r8, r3]
 8020eae:	9308      	str	r3, [sp, #32]
 8020eb0:	0e1b      	lsrs	r3, r3, #24
 8020eb2:	9311      	str	r3, [sp, #68]	; 0x44
 8020eb4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020eb8:	930d      	str	r3, [sp, #52]	; 0x34
 8020eba:	0e1b      	lsrs	r3, r3, #24
 8020ebc:	9314      	str	r3, [sp, #80]	; 0x50
 8020ebe:	b280      	uxth	r0, r0
 8020ec0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020ec2:	b289      	uxth	r1, r1
 8020ec4:	fb00 f901 	mul.w	r9, r0, r1
 8020ec8:	0100      	lsls	r0, r0, #4
 8020eca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020ece:	eba0 0809 	sub.w	r8, r0, r9
 8020ed2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8020ed6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020ed8:	b289      	uxth	r1, r1
 8020eda:	fa1f f888 	uxth.w	r8, r8
 8020ede:	1a5b      	subs	r3, r3, r1
 8020ee0:	fb08 f000 	mul.w	r0, r8, r0
 8020ee4:	b29b      	uxth	r3, r3
 8020ee6:	fb03 000e 	mla	r0, r3, lr, r0
 8020eea:	fb01 0005 	mla	r0, r1, r5, r0
 8020eee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020ef0:	fb09 0005 	mla	r0, r9, r5, r0
 8020ef4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020ef8:	2800      	cmp	r0, #0
 8020efa:	f000 80fa 	beq.w	80210f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020efe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020f02:	d01b      	beq.n	8020f3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020f04:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8020f08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020f0c:	fb0e fa0a 	mul.w	sl, lr, sl
 8020f10:	fb0e fe02 	mul.w	lr, lr, r2
 8020f14:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020f18:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020f1c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020f20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020f24:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020f28:	4452      	add	r2, sl
 8020f2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f2e:	0a12      	lsrs	r2, r2, #8
 8020f30:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020f34:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020f38:	ea42 020c 	orr.w	r2, r2, ip
 8020f3c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020f3e:	2dff      	cmp	r5, #255	; 0xff
 8020f40:	d021      	beq.n	8020f86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8020f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020f44:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020f48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020f4a:	fb05 fb0b 	mul.w	fp, r5, fp
 8020f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020f50:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020f54:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020f56:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020f5a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020f5e:	fb05 fa0a 	mul.w	sl, r5, sl
 8020f62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f66:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020f6a:	44de      	add	lr, fp
 8020f6c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020f70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f80:	ea4e 050a 	orr.w	r5, lr, sl
 8020f84:	950c      	str	r5, [sp, #48]	; 0x30
 8020f86:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020f88:	2dff      	cmp	r5, #255	; 0xff
 8020f8a:	d021      	beq.n	8020fd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020f8c:	9d08      	ldr	r5, [sp, #32]
 8020f8e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020f92:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020f94:	fb05 fb0b 	mul.w	fp, r5, fp
 8020f98:	9d08      	ldr	r5, [sp, #32]
 8020f9a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020f9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020fa0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fa4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020fa8:	fb05 fa0a 	mul.w	sl, r5, sl
 8020fac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fb0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020fb4:	44de      	add	lr, fp
 8020fb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020fba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fca:	ea4e 050a 	orr.w	r5, lr, sl
 8020fce:	9508      	str	r5, [sp, #32]
 8020fd0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020fd2:	2dff      	cmp	r5, #255	; 0xff
 8020fd4:	d021      	beq.n	802101a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020fd6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020fd8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020fdc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020fde:	fb05 fb0b 	mul.w	fp, r5, fp
 8020fe2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020fe4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020fe8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020fea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020ff2:	fb05 fa0a 	mul.w	sl, r5, sl
 8020ff6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ffa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020ffe:	44de      	add	lr, fp
 8021000:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021004:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021008:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802100c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021010:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021014:	ea4e 050a 	orr.w	r5, lr, sl
 8021018:	950d      	str	r5, [sp, #52]	; 0x34
 802101a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802101c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021020:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021024:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021028:	9d08      	ldr	r5, [sp, #32]
 802102a:	fb08 fc0c 	mul.w	ip, r8, ip
 802102e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8021032:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021036:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021038:	fb01 cc0e 	mla	ip, r1, lr, ip
 802103c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021040:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021042:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021046:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802104a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802104c:	fb08 f80e 	mul.w	r8, r8, lr
 8021050:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021054:	fb03 8202 	mla	r2, r3, r2, r8
 8021058:	9b08      	ldr	r3, [sp, #32]
 802105a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802105e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8021062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021064:	fb01 220a 	mla	r2, r1, sl, r2
 8021068:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802106c:	883b      	ldrh	r3, [r7, #0]
 802106e:	fb09 2901 	mla	r9, r9, r1, r2
 8021072:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021074:	1219      	asrs	r1, r3, #8
 8021076:	4342      	muls	r2, r0
 8021078:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802107c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021080:	1c50      	adds	r0, r2, #1
 8021082:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021086:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802108a:	ea4c 0c09 	orr.w	ip, ip, r9
 802108e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021092:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8021096:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802109a:	fa5f fc8c 	uxtb.w	ip, ip
 802109e:	fb12 f205 	smulbb	r2, r2, r5
 80210a2:	b2c0      	uxtb	r0, r0
 80210a4:	fb1c fc05 	smulbb	ip, ip, r5
 80210a8:	fb01 2100 	mla	r1, r1, r0, r2
 80210ac:	10da      	asrs	r2, r3, #3
 80210ae:	fb1e fe05 	smulbb	lr, lr, r5
 80210b2:	00db      	lsls	r3, r3, #3
 80210b4:	b289      	uxth	r1, r1
 80210b6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80210ba:	b2db      	uxtb	r3, r3
 80210bc:	fb02 e200 	mla	r2, r2, r0, lr
 80210c0:	fb03 c300 	mla	r3, r3, r0, ip
 80210c4:	b292      	uxth	r2, r2
 80210c6:	fa1f fc83 	uxth.w	ip, r3
 80210ca:	1c4b      	adds	r3, r1, #1
 80210cc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80210d0:	f10c 0301 	add.w	r3, ip, #1
 80210d4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80210d8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80210dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80210e0:	430b      	orrs	r3, r1
 80210e2:	1c51      	adds	r1, r2, #1
 80210e4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80210e8:	0952      	lsrs	r2, r2, #5
 80210ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80210ee:	4313      	orrs	r3, r2
 80210f0:	803b      	strh	r3, [r7, #0]
 80210f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80210f4:	3702      	adds	r7, #2
 80210f6:	441c      	add	r4, r3
 80210f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80210fa:	441e      	add	r6, r3
 80210fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80210fe:	3b01      	subs	r3, #1
 8021100:	9318      	str	r3, [sp, #96]	; 0x60
 8021102:	e698      	b.n	8020e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021104:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021106:	441c      	add	r4, r3
 8021108:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802110a:	441e      	add	r6, r3
 802110c:	9b07      	ldr	r3, [sp, #28]
 802110e:	3b01      	subs	r3, #1
 8021110:	9307      	str	r3, [sp, #28]
 8021112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021114:	3302      	adds	r3, #2
 8021116:	930a      	str	r3, [sp, #40]	; 0x28
 8021118:	e66d      	b.n	8020df6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802111a:	d023      	beq.n	8021164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802111c:	9b07      	ldr	r3, [sp, #28]
 802111e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8021120:	3b01      	subs	r3, #1
 8021122:	fb00 4003 	mla	r0, r0, r3, r4
 8021126:	1400      	asrs	r0, r0, #16
 8021128:	f53f ae82 	bmi.w	8020e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802112c:	3901      	subs	r1, #1
 802112e:	4288      	cmp	r0, r1
 8021130:	f6bf ae7e 	bge.w	8020e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021134:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021136:	fb01 6303 	mla	r3, r1, r3, r6
 802113a:	141b      	asrs	r3, r3, #16
 802113c:	f53f ae78 	bmi.w	8020e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021140:	3a01      	subs	r2, #1
 8021142:	4293      	cmp	r3, r2
 8021144:	f6bf ae74 	bge.w	8020e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021148:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802114c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8021150:	f1bb 0f00 	cmp.w	fp, #0
 8021154:	dc6c      	bgt.n	8021230 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8021156:	9b07      	ldr	r3, [sp, #28]
 8021158:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802115c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802115e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021162:	930a      	str	r3, [sp, #40]	; 0x28
 8021164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021166:	2b00      	cmp	r3, #0
 8021168:	f340 81b3 	ble.w	80214d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802116c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021170:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021172:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021176:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802117a:	eef0 6a62 	vmov.f32	s13, s5
 802117e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021182:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021186:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802118a:	ee16 4a90 	vmov	r4, s13
 802118e:	eef0 6a43 	vmov.f32	s13, s6
 8021192:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021196:	ee16 6a90 	vmov	r6, s13
 802119a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802119e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80211a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80211a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80211aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80211ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80211b2:	ee12 2a90 	vmov	r2, s5
 80211b6:	eef0 2a47 	vmov.f32	s5, s14
 80211ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80211be:	ee13 2a10 	vmov	r2, s6
 80211c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80211c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80211c6:	eeb0 3a67 	vmov.f32	s6, s15
 80211ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80211ce:	932a      	str	r3, [sp, #168]	; 0xa8
 80211d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80211d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80211d4:	3b01      	subs	r3, #1
 80211d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80211d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80211da:	bf08      	it	eq
 80211dc:	4613      	moveq	r3, r2
 80211de:	9307      	str	r3, [sp, #28]
 80211e0:	e5fb      	b.n	8020dda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80211e2:	2900      	cmp	r1, #0
 80211e4:	f43f ae6b 	beq.w	8020ebe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80211e8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80211ec:	9308      	str	r3, [sp, #32]
 80211ee:	0e1b      	lsrs	r3, r3, #24
 80211f0:	9311      	str	r3, [sp, #68]	; 0x44
 80211f2:	e664      	b.n	8020ebe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80211f4:	f112 0801 	adds.w	r8, r2, #1
 80211f8:	f53f af7b 	bmi.w	80210f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80211fc:	4543      	cmp	r3, r8
 80211fe:	f6ff af78 	blt.w	80210f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021202:	f11c 0801 	adds.w	r8, ip, #1
 8021206:	f53f af74 	bmi.w	80210f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802120a:	45c6      	cmp	lr, r8
 802120c:	f6ff af71 	blt.w	80210f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021210:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8021212:	b21b      	sxth	r3, r3
 8021214:	9201      	str	r2, [sp, #4]
 8021216:	fa0f f28e 	sxth.w	r2, lr
 802121a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802121e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8021222:	9200      	str	r2, [sp, #0]
 8021224:	4639      	mov	r1, r7
 8021226:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021228:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802122a:	f7ff fc79 	bl	8020b20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802122e:	e760      	b.n	80210f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021230:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021232:	1427      	asrs	r7, r4, #16
 8021234:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021236:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802123a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802123e:	1433      	asrs	r3, r6, #16
 8021240:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021244:	fb01 7303 	mla	r3, r1, r3, r7
 8021248:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802124c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021250:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021254:	2a00      	cmp	r2, #0
 8021256:	f000 8133 	beq.w	80214c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802125a:	687d      	ldr	r5, [r7, #4]
 802125c:	950e      	str	r5, [sp, #56]	; 0x38
 802125e:	0e2d      	lsrs	r5, r5, #24
 8021260:	9515      	str	r5, [sp, #84]	; 0x54
 8021262:	b178      	cbz	r0, 8021284 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8021264:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8021268:	3901      	subs	r1, #1
 802126a:	0089      	lsls	r1, r1, #2
 802126c:	3104      	adds	r1, #4
 802126e:	eb07 0e01 	add.w	lr, r7, r1
 8021272:	5879      	ldr	r1, [r7, r1]
 8021274:	9109      	str	r1, [sp, #36]	; 0x24
 8021276:	0e09      	lsrs	r1, r1, #24
 8021278:	9112      	str	r1, [sp, #72]	; 0x48
 802127a:	f8de 1004 	ldr.w	r1, [lr, #4]
 802127e:	910f      	str	r1, [sp, #60]	; 0x3c
 8021280:	0e09      	lsrs	r1, r1, #24
 8021282:	9116      	str	r1, [sp, #88]	; 0x58
 8021284:	b292      	uxth	r2, r2
 8021286:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021288:	b280      	uxth	r0, r0
 802128a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802128c:	fb02 f800 	mul.w	r8, r2, r0
 8021290:	0112      	lsls	r2, r2, #4
 8021292:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8021296:	eba2 0e08 	sub.w	lr, r2, r8
 802129a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802129e:	b280      	uxth	r0, r0
 80212a0:	fa1f fe8e 	uxth.w	lr, lr
 80212a4:	1a12      	subs	r2, r2, r0
 80212a6:	fb0e f101 	mul.w	r1, lr, r1
 80212aa:	b292      	uxth	r2, r2
 80212ac:	fb02 110c 	mla	r1, r2, ip, r1
 80212b0:	fb00 1105 	mla	r1, r0, r5, r1
 80212b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80212b6:	fb08 1105 	mla	r1, r8, r5, r1
 80212ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80212be:	2900      	cmp	r1, #0
 80212c0:	f000 80f5 	beq.w	80214ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80212c4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80212c8:	d019      	beq.n	80212fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80212ca:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80212ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212d2:	fb0c fa0a 	mul.w	sl, ip, sl
 80212d6:	fb0c fc03 	mul.w	ip, ip, r3
 80212da:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80212de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80212e2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80212e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80212ea:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80212ee:	4453      	add	r3, sl
 80212f0:	0a3f      	lsrs	r7, r7, #8
 80212f2:	0a1b      	lsrs	r3, r3, #8
 80212f4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80212f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80212fc:	433b      	orrs	r3, r7
 80212fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021300:	2dff      	cmp	r5, #255	; 0xff
 8021302:	d020      	beq.n	8021346 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8021304:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021306:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802130a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802130c:	436f      	muls	r7, r5
 802130e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021310:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021314:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021318:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802131a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802131e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021322:	fb05 fa0a 	mul.w	sl, r5, sl
 8021326:	44bc      	add	ip, r7
 8021328:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802132c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021330:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021334:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021338:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802133c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021340:	ea4c 050a 	orr.w	r5, ip, sl
 8021344:	950e      	str	r5, [sp, #56]	; 0x38
 8021346:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021348:	2dff      	cmp	r5, #255	; 0xff
 802134a:	d020      	beq.n	802138e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802134c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802134e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021352:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021354:	436f      	muls	r7, r5
 8021356:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021358:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802135c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021360:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021362:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021366:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802136a:	fb05 fa0a 	mul.w	sl, r5, sl
 802136e:	44bc      	add	ip, r7
 8021370:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021374:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021378:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802137c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021380:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021384:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021388:	ea4c 050a 	orr.w	r5, ip, sl
 802138c:	9509      	str	r5, [sp, #36]	; 0x24
 802138e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021390:	2dff      	cmp	r5, #255	; 0xff
 8021392:	d020      	beq.n	80213d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8021394:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021396:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802139a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802139c:	436f      	muls	r7, r5
 802139e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80213a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213a4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80213a8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80213aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80213ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213b2:	fb05 fa0a 	mul.w	sl, r5, sl
 80213b6:	44bc      	add	ip, r7
 80213b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80213bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213d0:	ea4c 050a 	orr.w	r5, ip, sl
 80213d4:	950f      	str	r5, [sp, #60]	; 0x3c
 80213d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80213d8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80213dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213e0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80213e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80213e6:	fb0e f707 	mul.w	r7, lr, r7
 80213ea:	fb02 770c 	mla	r7, r2, ip, r7
 80213ee:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80213f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80213f4:	fb00 770c 	mla	r7, r0, ip, r7
 80213f8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80213fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80213fe:	fb08 770c 	mla	r7, r8, ip, r7
 8021402:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021406:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021408:	fb0e fe0c 	mul.w	lr, lr, ip
 802140c:	0a3f      	lsrs	r7, r7, #8
 802140e:	fb02 e303 	mla	r3, r2, r3, lr
 8021412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021414:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021418:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802141c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802141e:	fb00 330a 	mla	r3, r0, sl, r3
 8021422:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021426:	f8b9 0000 	ldrh.w	r0, [r9]
 802142a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802142e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021430:	1202      	asrs	r2, r0, #8
 8021432:	4359      	muls	r1, r3
 8021434:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021438:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802143c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021440:	1c4b      	adds	r3, r1, #1
 8021442:	ea47 070c 	orr.w	r7, r7, ip
 8021446:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802144a:	0c3b      	lsrs	r3, r7, #16
 802144c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021450:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8021454:	b2ff      	uxtb	r7, r7
 8021456:	fb13 f305 	smulbb	r3, r3, r5
 802145a:	b2c9      	uxtb	r1, r1
 802145c:	fb17 f705 	smulbb	r7, r7, r5
 8021460:	fb02 3201 	mla	r2, r2, r1, r3
 8021464:	10c3      	asrs	r3, r0, #3
 8021466:	fb1c fc05 	smulbb	ip, ip, r5
 802146a:	00c0      	lsls	r0, r0, #3
 802146c:	b292      	uxth	r2, r2
 802146e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021472:	b2c0      	uxtb	r0, r0
 8021474:	fb03 c301 	mla	r3, r3, r1, ip
 8021478:	fb00 7001 	mla	r0, r0, r1, r7
 802147c:	1c51      	adds	r1, r2, #1
 802147e:	b29b      	uxth	r3, r3
 8021480:	b280      	uxth	r0, r0
 8021482:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021486:	f100 0c01 	add.w	ip, r0, #1
 802148a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802148e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8021492:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021496:	ea4c 0202 	orr.w	r2, ip, r2
 802149a:	f103 0c01 	add.w	ip, r3, #1
 802149e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80214a2:	095b      	lsrs	r3, r3, #5
 80214a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214a8:	431a      	orrs	r2, r3
 80214aa:	f8a9 2000 	strh.w	r2, [r9]
 80214ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80214b0:	f109 0902 	add.w	r9, r9, #2
 80214b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80214b8:	441c      	add	r4, r3
 80214ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80214bc:	441e      	add	r6, r3
 80214be:	e647      	b.n	8021150 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80214c0:	2800      	cmp	r0, #0
 80214c2:	f43f aedf 	beq.w	8021284 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80214c6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80214ca:	9109      	str	r1, [sp, #36]	; 0x24
 80214cc:	0e09      	lsrs	r1, r1, #24
 80214ce:	9112      	str	r1, [sp, #72]	; 0x48
 80214d0:	e6d8      	b.n	8021284 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80214d2:	b01d      	add	sp, #116	; 0x74
 80214d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080214d8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80214d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214dc:	b085      	sub	sp, #20
 80214de:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80214e2:	9102      	str	r1, [sp, #8]
 80214e4:	2c00      	cmp	r4, #0
 80214e6:	fb04 7103 	mla	r1, r4, r3, r7
 80214ea:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80214ee:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80214f2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80214f6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80214fa:	f2c0 810c 	blt.w	8021716 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80214fe:	45a6      	cmp	lr, r4
 8021500:	f340 8109 	ble.w	8021716 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8021504:	2f00      	cmp	r7, #0
 8021506:	f2c0 8104 	blt.w	8021712 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802150a:	42bb      	cmp	r3, r7
 802150c:	f340 8101 	ble.w	8021712 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8021510:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8021514:	1c7a      	adds	r2, r7, #1
 8021516:	f100 8101 	bmi.w	802171c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802151a:	4293      	cmp	r3, r2
 802151c:	f340 80fe 	ble.w	802171c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8021520:	2e00      	cmp	r6, #0
 8021522:	f000 80fd 	beq.w	8021720 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8021526:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802152a:	3401      	adds	r4, #1
 802152c:	f100 80fc 	bmi.w	8021728 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8021530:	45a6      	cmp	lr, r4
 8021532:	f340 80f9 	ble.w	8021728 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8021536:	2800      	cmp	r0, #0
 8021538:	f000 80f9 	beq.w	802172e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802153c:	2f00      	cmp	r7, #0
 802153e:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8021542:	f2c0 80ef 	blt.w	8021724 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8021546:	42bb      	cmp	r3, r7
 8021548:	f340 80ec 	ble.w	8021724 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802154c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8021550:	3701      	adds	r7, #1
 8021552:	f100 80ef 	bmi.w	8021734 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8021556:	42bb      	cmp	r3, r7
 8021558:	f340 80ec 	ble.w	8021734 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802155c:	2e00      	cmp	r6, #0
 802155e:	f000 80eb 	beq.w	8021738 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8021562:	6852      	ldr	r2, [r2, #4]
 8021564:	b2b6      	uxth	r6, r6
 8021566:	b280      	uxth	r0, r0
 8021568:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802156c:	fb00 fe06 	mul.w	lr, r0, r6
 8021570:	0136      	lsls	r6, r6, #4
 8021572:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8021576:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802157a:	eba6 070e 	sub.w	r7, r6, lr
 802157e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8021582:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021586:	b280      	uxth	r0, r0
 8021588:	b2bf      	uxth	r7, r7
 802158a:	1a1b      	subs	r3, r3, r0
 802158c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021590:	fb07 f60a 	mul.w	r6, r7, sl
 8021594:	b29b      	uxth	r3, r3
 8021596:	fb0b 6603 	mla	r6, fp, r3, r6
 802159a:	fb00 6609 	mla	r6, r0, r9, r6
 802159e:	fb0e 6608 	mla	r6, lr, r8, r6
 80215a2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80215a6:	9600      	str	r6, [sp, #0]
 80215a8:	2e00      	cmp	r6, #0
 80215aa:	f000 80af 	beq.w	802170c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80215ae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80215b2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80215b6:	9e02      	ldr	r6, [sp, #8]
 80215b8:	fb0b fc0c 	mul.w	ip, fp, ip
 80215bc:	fb0b f505 	mul.w	r5, fp, r5
 80215c0:	8836      	ldrh	r6, [r6, #0]
 80215c2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80215c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80215ca:	9501      	str	r5, [sp, #4]
 80215cc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80215d0:	44dc      	add	ip, fp
 80215d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215d6:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80215da:	9503      	str	r5, [sp, #12]
 80215dc:	9d01      	ldr	r5, [sp, #4]
 80215de:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80215e2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80215e6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80215ea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80215ee:	fb0a fc0c 	mul.w	ip, sl, ip
 80215f2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80215f6:	fb0a fa01 	mul.w	sl, sl, r1
 80215fa:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80215fe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021602:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8021606:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802160a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802160e:	4465      	add	r5, ip
 8021610:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021614:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021618:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802161c:	fb09 fc0c 	mul.w	ip, r9, ip
 8021620:	0a2d      	lsrs	r5, r5, #8
 8021622:	fb09 f904 	mul.w	r9, r9, r4
 8021626:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802162a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802162e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021632:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021636:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802163a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802163e:	437d      	muls	r5, r7
 8021640:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021644:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021648:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802164c:	4461      	add	r1, ip
 802164e:	fb08 f404 	mul.w	r4, r8, r4
 8021652:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021656:	fb08 f802 	mul.w	r8, r8, r2
 802165a:	0a09      	lsrs	r1, r1, #8
 802165c:	0a22      	lsrs	r2, r4, #8
 802165e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021662:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021666:	fb07 f70a 	mul.w	r7, r7, sl
 802166a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802166e:	4414      	add	r4, r2
 8021670:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021674:	0a24      	lsrs	r4, r4, #8
 8021676:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802167a:	9a03      	ldr	r2, [sp, #12]
 802167c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021680:	fb02 5503 	mla	r5, r2, r3, r5
 8021684:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021688:	fb04 540e 	mla	r4, r4, lr, r5
 802168c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021690:	fb01 4100 	mla	r1, r1, r0, r4
 8021694:	0a09      	lsrs	r1, r1, #8
 8021696:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802169a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802169e:	fb03 7101 	mla	r1, r3, r1, r7
 80216a2:	9b00      	ldr	r3, [sp, #0]
 80216a4:	fb0e 1e08 	mla	lr, lr, r8, r1
 80216a8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80216ac:	43da      	mvns	r2, r3
 80216ae:	1233      	asrs	r3, r6, #8
 80216b0:	fb00 e101 	mla	r1, r0, r1, lr
 80216b4:	10f0      	asrs	r0, r6, #3
 80216b6:	b2d2      	uxtb	r2, r2
 80216b8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80216bc:	0a09      	lsrs	r1, r1, #8
 80216be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80216c2:	00f6      	lsls	r6, r6, #3
 80216c4:	4353      	muls	r3, r2
 80216c6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80216ca:	4350      	muls	r0, r2
 80216cc:	b2f6      	uxtb	r6, r6
 80216ce:	4321      	orrs	r1, r4
 80216d0:	4356      	muls	r6, r2
 80216d2:	1c5a      	adds	r2, r3, #1
 80216d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80216d8:	0c0b      	lsrs	r3, r1, #16
 80216da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80216de:	1c42      	adds	r2, r0, #1
 80216e0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80216e4:	0a0a      	lsrs	r2, r1, #8
 80216e6:	021b      	lsls	r3, r3, #8
 80216e8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80216ec:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80216f0:	00d2      	lsls	r2, r2, #3
 80216f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80216f6:	4313      	orrs	r3, r2
 80216f8:	1c72      	adds	r2, r6, #1
 80216fa:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80216fe:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8021702:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021706:	4319      	orrs	r1, r3
 8021708:	9b02      	ldr	r3, [sp, #8]
 802170a:	8019      	strh	r1, [r3, #0]
 802170c:	b005      	add	sp, #20
 802170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021712:	2500      	movs	r5, #0
 8021714:	e6fe      	b.n	8021514 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8021716:	2100      	movs	r1, #0
 8021718:	460d      	mov	r5, r1
 802171a:	e706      	b.n	802152a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802171c:	2100      	movs	r1, #0
 802171e:	e704      	b.n	802152a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021720:	4631      	mov	r1, r6
 8021722:	e702      	b.n	802152a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021724:	2400      	movs	r4, #0
 8021726:	e713      	b.n	8021550 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8021728:	2200      	movs	r2, #0
 802172a:	4614      	mov	r4, r2
 802172c:	e71a      	b.n	8021564 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802172e:	4602      	mov	r2, r0
 8021730:	4604      	mov	r4, r0
 8021732:	e717      	b.n	8021564 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021734:	2200      	movs	r2, #0
 8021736:	e715      	b.n	8021564 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021738:	4632      	mov	r2, r6
 802173a:	e713      	b.n	8021564 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

0802173c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802173c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021740:	b09b      	sub	sp, #108	; 0x6c
 8021742:	9218      	str	r2, [sp, #96]	; 0x60
 8021744:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021746:	9019      	str	r0, [sp, #100]	; 0x64
 8021748:	9116      	str	r1, [sp, #88]	; 0x58
 802174a:	6850      	ldr	r0, [r2, #4]
 802174c:	9307      	str	r3, [sp, #28]
 802174e:	6812      	ldr	r2, [r2, #0]
 8021750:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021754:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8021758:	fb00 1303 	mla	r3, r0, r3, r1
 802175c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021760:	930a      	str	r3, [sp, #40]	; 0x28
 8021762:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	930f      	str	r3, [sp, #60]	; 0x3c
 8021768:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802176a:	2b00      	cmp	r3, #0
 802176c:	dc03      	bgt.n	8021776 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802176e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021770:	2b00      	cmp	r3, #0
 8021772:	f340 8387 	ble.w	8021e84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021776:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021778:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802177c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021780:	1e48      	subs	r0, r1, #1
 8021782:	1e57      	subs	r7, r2, #1
 8021784:	9b07      	ldr	r3, [sp, #28]
 8021786:	2b00      	cmp	r3, #0
 8021788:	f340 8166 	ble.w	8021a58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802178c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021790:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021794:	d406      	bmi.n	80217a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021796:	4584      	cmp	ip, r0
 8021798:	da04      	bge.n	80217a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802179a:	2b00      	cmp	r3, #0
 802179c:	db02      	blt.n	80217a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802179e:	42bb      	cmp	r3, r7
 80217a0:	f2c0 815b 	blt.w	8021a5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80217a4:	f11c 0c01 	adds.w	ip, ip, #1
 80217a8:	f100 814b 	bmi.w	8021a42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80217ac:	4561      	cmp	r1, ip
 80217ae:	f2c0 8148 	blt.w	8021a42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80217b2:	3301      	adds	r3, #1
 80217b4:	f100 8145 	bmi.w	8021a42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80217b8:	429a      	cmp	r2, r3
 80217ba:	f2c0 8142 	blt.w	8021a42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80217be:	9b07      	ldr	r3, [sp, #28]
 80217c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80217c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80217c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	f340 8165 	ble.w	8021a96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80217cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80217ce:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80217d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80217d4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80217d8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80217dc:	1422      	asrs	r2, r4, #16
 80217de:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80217e2:	689b      	ldr	r3, [r3, #8]
 80217e4:	f100 81d5 	bmi.w	8021b92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80217e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80217ec:	4542      	cmp	r2, r8
 80217ee:	f280 81d0 	bge.w	8021b92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80217f2:	f1bc 0f00 	cmp.w	ip, #0
 80217f6:	f2c0 81cc 	blt.w	8021b92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80217fa:	f10e 38ff 	add.w	r8, lr, #4294967295
 80217fe:	45c4      	cmp	ip, r8
 8021800:	f280 81c7 	bge.w	8021b92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021804:	b21b      	sxth	r3, r3
 8021806:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021808:	fb0c 2203 	mla	r2, ip, r3, r2
 802180c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021810:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021814:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021818:	2900      	cmp	r1, #0
 802181a:	f000 8182 	beq.w	8021b22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802181e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021822:	950b      	str	r5, [sp, #44]	; 0x2c
 8021824:	0e2d      	lsrs	r5, r5, #24
 8021826:	9512      	str	r5, [sp, #72]	; 0x48
 8021828:	b180      	cbz	r0, 802184c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802182a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802182e:	3b01      	subs	r3, #1
 8021830:	009b      	lsls	r3, r3, #2
 8021832:	3304      	adds	r3, #4
 8021834:	eb08 0c03 	add.w	ip, r8, r3
 8021838:	f858 3003 	ldr.w	r3, [r8, r3]
 802183c:	9308      	str	r3, [sp, #32]
 802183e:	0e1b      	lsrs	r3, r3, #24
 8021840:	9310      	str	r3, [sp, #64]	; 0x40
 8021842:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021846:	930c      	str	r3, [sp, #48]	; 0x30
 8021848:	0e1b      	lsrs	r3, r3, #24
 802184a:	9313      	str	r3, [sp, #76]	; 0x4c
 802184c:	b289      	uxth	r1, r1
 802184e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021850:	b280      	uxth	r0, r0
 8021852:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021854:	fb01 f900 	mul.w	r9, r1, r0
 8021858:	0109      	lsls	r1, r1, #4
 802185a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802185e:	eba1 0809 	sub.w	r8, r1, r9
 8021862:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021866:	b280      	uxth	r0, r0
 8021868:	fa1f f888 	uxth.w	r8, r8
 802186c:	1a09      	subs	r1, r1, r0
 802186e:	fb08 f303 	mul.w	r3, r8, r3
 8021872:	b289      	uxth	r1, r1
 8021874:	fb01 330e 	mla	r3, r1, lr, r3
 8021878:	fb00 3305 	mla	r3, r0, r5, r3
 802187c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802187e:	fb09 3305 	mla	r3, r9, r5, r3
 8021882:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021886:	2b00      	cmp	r3, #0
 8021888:	f000 80d2 	beq.w	8021a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802188c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021890:	d01b      	beq.n	80218ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8021892:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8021896:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802189a:	fb0e fa0a 	mul.w	sl, lr, sl
 802189e:	fb0e fe02 	mul.w	lr, lr, r2
 80218a2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80218a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80218aa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80218ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80218b2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80218b6:	4452      	add	r2, sl
 80218b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218bc:	0a12      	lsrs	r2, r2, #8
 80218be:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80218c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80218c6:	ea42 020c 	orr.w	r2, r2, ip
 80218ca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80218cc:	2dff      	cmp	r5, #255	; 0xff
 80218ce:	d021      	beq.n	8021914 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80218d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80218d2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80218d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80218d8:	fb05 fb0b 	mul.w	fp, r5, fp
 80218dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80218de:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80218e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80218e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80218e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80218ec:	fb05 fa0a 	mul.w	sl, r5, sl
 80218f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80218f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80218f8:	44de      	add	lr, fp
 80218fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80218fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021902:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021906:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802190a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802190e:	ea4e 050a 	orr.w	r5, lr, sl
 8021912:	950b      	str	r5, [sp, #44]	; 0x2c
 8021914:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021916:	2dff      	cmp	r5, #255	; 0xff
 8021918:	d021      	beq.n	802195e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802191a:	9d08      	ldr	r5, [sp, #32]
 802191c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021920:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021922:	fb05 fb0b 	mul.w	fp, r5, fp
 8021926:	9d08      	ldr	r5, [sp, #32]
 8021928:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802192c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802192e:	fb05 fa0e 	mul.w	sl, r5, lr
 8021932:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021936:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802193a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802193e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021942:	44de      	add	lr, fp
 8021944:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021948:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802194c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021950:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021954:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021958:	ea4e 050a 	orr.w	r5, lr, sl
 802195c:	9508      	str	r5, [sp, #32]
 802195e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021960:	2dff      	cmp	r5, #255	; 0xff
 8021962:	d021      	beq.n	80219a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8021964:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021966:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802196a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802196c:	fb05 fb0b 	mul.w	fp, r5, fp
 8021970:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021972:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021976:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021978:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802197c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021980:	fb05 fa0a 	mul.w	sl, r5, sl
 8021984:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021988:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802198c:	44de      	add	lr, fp
 802198e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021992:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021996:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802199a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802199e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80219a2:	ea4e 050a 	orr.w	r5, lr, sl
 80219a6:	950c      	str	r5, [sp, #48]	; 0x30
 80219a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80219aa:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80219ae:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80219b2:	2bff      	cmp	r3, #255	; 0xff
 80219b4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80219b8:	9d08      	ldr	r5, [sp, #32]
 80219ba:	fb08 fc0c 	mul.w	ip, r8, ip
 80219be:	fb01 cc0e 	mla	ip, r1, lr, ip
 80219c2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80219c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80219c8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80219cc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80219d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80219d2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80219d6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80219da:	fb08 f80e 	mul.w	r8, r8, lr
 80219de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219e2:	fb01 8202 	mla	r2, r1, r2, r8
 80219e6:	9908      	ldr	r1, [sp, #32]
 80219e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219ec:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80219f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80219f2:	fb00 220a 	mla	r2, r0, sl, r2
 80219f6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80219fa:	fb09 2900 	mla	r9, r9, r0, r2
 80219fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021a02:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021a06:	ea4c 0c09 	orr.w	ip, ip, r9
 8021a0a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8021a0e:	f040 8091 	bne.w	8021b34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021a12:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8021a16:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8021a1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a1e:	f022 0207 	bic.w	r2, r2, #7
 8021a22:	431a      	orrs	r2, r3
 8021a24:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021a28:	ea4c 0c02 	orr.w	ip, ip, r2
 8021a2c:	f8a7 c000 	strh.w	ip, [r7]
 8021a30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021a32:	3702      	adds	r7, #2
 8021a34:	441c      	add	r4, r3
 8021a36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021a38:	441e      	add	r6, r3
 8021a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021a3c:	3b01      	subs	r3, #1
 8021a3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8021a40:	e6c0      	b.n	80217c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021a42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021a44:	441c      	add	r4, r3
 8021a46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021a48:	441e      	add	r6, r3
 8021a4a:	9b07      	ldr	r3, [sp, #28]
 8021a4c:	3b01      	subs	r3, #1
 8021a4e:	9307      	str	r3, [sp, #28]
 8021a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a52:	3302      	adds	r3, #2
 8021a54:	930a      	str	r3, [sp, #40]	; 0x28
 8021a56:	e695      	b.n	8021784 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021a58:	d024      	beq.n	8021aa4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021a5a:	9b07      	ldr	r3, [sp, #28]
 8021a5c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021a5e:	3b01      	subs	r3, #1
 8021a60:	fb00 4003 	mla	r0, r0, r3, r4
 8021a64:	1400      	asrs	r0, r0, #16
 8021a66:	f53f aeaa 	bmi.w	80217be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021a6a:	3901      	subs	r1, #1
 8021a6c:	4288      	cmp	r0, r1
 8021a6e:	f6bf aea6 	bge.w	80217be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021a72:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021a74:	fb01 6303 	mla	r3, r1, r3, r6
 8021a78:	141b      	asrs	r3, r3, #16
 8021a7a:	f53f aea0 	bmi.w	80217be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021a7e:	3a01      	subs	r2, #1
 8021a80:	4293      	cmp	r3, r2
 8021a82:	f6bf ae9c 	bge.w	80217be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021a86:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021a8a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8021a8e:	f1bb 0f00 	cmp.w	fp, #0
 8021a92:	f300 809a 	bgt.w	8021bca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8021a96:	9b07      	ldr	r3, [sp, #28]
 8021a98:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a9e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8021aa4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	f340 81ec 	ble.w	8021e84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021ab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ab2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021ab6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021aba:	eef0 6a62 	vmov.f32	s13, s5
 8021abe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ac2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ac6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021aca:	ee16 4a90 	vmov	r4, s13
 8021ace:	eef0 6a43 	vmov.f32	s13, s6
 8021ad2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ad6:	ee16 6a90 	vmov	r6, s13
 8021ada:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ade:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021ae2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021ae6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021aea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021aee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021af2:	ee12 2a90 	vmov	r2, s5
 8021af6:	eef0 2a47 	vmov.f32	s5, s14
 8021afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8021afe:	ee13 2a10 	vmov	r2, s6
 8021b02:	9327      	str	r3, [sp, #156]	; 0x9c
 8021b04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b06:	eeb0 3a67 	vmov.f32	s6, s15
 8021b0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b0e:	9328      	str	r3, [sp, #160]	; 0xa0
 8021b10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021b12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021b14:	3b01      	subs	r3, #1
 8021b16:	9316      	str	r3, [sp, #88]	; 0x58
 8021b18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b1a:	bf08      	it	eq
 8021b1c:	4613      	moveq	r3, r2
 8021b1e:	9307      	str	r3, [sp, #28]
 8021b20:	e622      	b.n	8021768 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8021b22:	2800      	cmp	r0, #0
 8021b24:	f43f ae92 	beq.w	802184c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021b28:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021b2c:	9308      	str	r3, [sp, #32]
 8021b2e:	0e1b      	lsrs	r3, r3, #24
 8021b30:	9310      	str	r3, [sp, #64]	; 0x40
 8021b32:	e68b      	b.n	802184c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021b34:	8839      	ldrh	r1, [r7, #0]
 8021b36:	43db      	mvns	r3, r3
 8021b38:	4dd4      	ldr	r5, [pc, #848]	; (8021e8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8021b3a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8021b3e:	fa5f f883 	uxtb.w	r8, r3
 8021b42:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021b46:	10c8      	asrs	r0, r1, #3
 8021b48:	00cb      	lsls	r3, r1, #3
 8021b4a:	fb0e fe08 	mul.w	lr, lr, r8
 8021b4e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021b52:	b2db      	uxtb	r3, r3
 8021b54:	f10e 0101 	add.w	r1, lr, #1
 8021b58:	fb00 f008 	mul.w	r0, r0, r8
 8021b5c:	fb03 f308 	mul.w	r3, r3, r8
 8021b60:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8021b64:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8021b68:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8021b6c:	f100 0e01 	add.w	lr, r0, #1
 8021b70:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8021b74:	b2c9      	uxtb	r1, r1
 8021b76:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021b7a:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8021b7e:	00d2      	lsls	r2, r2, #3
 8021b80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b84:	430a      	orrs	r2, r1
 8021b86:	1c59      	adds	r1, r3, #1
 8021b88:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021b8c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021b90:	e748      	b.n	8021a24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8021b92:	f112 0801 	adds.w	r8, r2, #1
 8021b96:	f53f af4b 	bmi.w	8021a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021b9a:	4543      	cmp	r3, r8
 8021b9c:	f6ff af48 	blt.w	8021a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021ba0:	f11c 0801 	adds.w	r8, ip, #1
 8021ba4:	f53f af44 	bmi.w	8021a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021ba8:	45c6      	cmp	lr, r8
 8021baa:	f6ff af41 	blt.w	8021a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021bae:	b21b      	sxth	r3, r3
 8021bb0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021bb4:	fa0f f28e 	sxth.w	r2, lr
 8021bb8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021bbc:	9200      	str	r2, [sp, #0]
 8021bbe:	4639      	mov	r1, r7
 8021bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021bc2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021bc4:	f7ff fc88 	bl	80214d8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8021bc8:	e732      	b.n	8021a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021bca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021bcc:	1421      	asrs	r1, r4, #16
 8021bce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021bd0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021bd4:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8021bd8:	1433      	asrs	r3, r6, #16
 8021bda:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021bde:	fb07 1303 	mla	r3, r7, r3, r1
 8021be2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021be4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8021be8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021bec:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021bf0:	2a00      	cmp	r2, #0
 8021bf2:	f000 8108 	beq.w	8021e06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8021bf6:	684d      	ldr	r5, [r1, #4]
 8021bf8:	950d      	str	r5, [sp, #52]	; 0x34
 8021bfa:	0e2d      	lsrs	r5, r5, #24
 8021bfc:	9514      	str	r5, [sp, #80]	; 0x50
 8021bfe:	b178      	cbz	r0, 8021c20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021c00:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8021c04:	3f01      	subs	r7, #1
 8021c06:	00bf      	lsls	r7, r7, #2
 8021c08:	3704      	adds	r7, #4
 8021c0a:	eb01 0e07 	add.w	lr, r1, r7
 8021c0e:	59c9      	ldr	r1, [r1, r7]
 8021c10:	9109      	str	r1, [sp, #36]	; 0x24
 8021c12:	0e09      	lsrs	r1, r1, #24
 8021c14:	9111      	str	r1, [sp, #68]	; 0x44
 8021c16:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021c1a:	910e      	str	r1, [sp, #56]	; 0x38
 8021c1c:	0e09      	lsrs	r1, r1, #24
 8021c1e:	9115      	str	r1, [sp, #84]	; 0x54
 8021c20:	b292      	uxth	r2, r2
 8021c22:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021c24:	b280      	uxth	r0, r0
 8021c26:	fb02 f900 	mul.w	r9, r2, r0
 8021c2a:	0112      	lsls	r2, r2, #4
 8021c2c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021c30:	eba2 0e09 	sub.w	lr, r2, r9
 8021c34:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021c38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021c3a:	b280      	uxth	r0, r0
 8021c3c:	fa1f fe8e 	uxth.w	lr, lr
 8021c40:	1a09      	subs	r1, r1, r0
 8021c42:	fb0e f202 	mul.w	r2, lr, r2
 8021c46:	b289      	uxth	r1, r1
 8021c48:	fb01 220c 	mla	r2, r1, ip, r2
 8021c4c:	fb00 2205 	mla	r2, r0, r5, r2
 8021c50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021c52:	fb09 2205 	mla	r2, r9, r5, r2
 8021c56:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021c5a:	2a00      	cmp	r2, #0
 8021c5c:	f000 80ca 	beq.w	8021df4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021c60:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021c64:	d019      	beq.n	8021c9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8021c66:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021c6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c6e:	fb0c fa0a 	mul.w	sl, ip, sl
 8021c72:	fb0c fc03 	mul.w	ip, ip, r3
 8021c76:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021c7a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021c7e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021c82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c86:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021c8a:	4453      	add	r3, sl
 8021c8c:	0a3f      	lsrs	r7, r7, #8
 8021c8e:	0a1b      	lsrs	r3, r3, #8
 8021c90:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021c94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c98:	433b      	orrs	r3, r7
 8021c9a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021c9c:	2dff      	cmp	r5, #255	; 0xff
 8021c9e:	d020      	beq.n	8021ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8021ca0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021ca2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021ca6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021ca8:	436f      	muls	r7, r5
 8021caa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021cac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021cb0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021cb4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021cb6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021cba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021cbe:	fb05 fa0a 	mul.w	sl, r5, sl
 8021cc2:	44bc      	add	ip, r7
 8021cc4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021cc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ccc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021cd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021cd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021cd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021cdc:	ea4c 050a 	orr.w	r5, ip, sl
 8021ce0:	950d      	str	r5, [sp, #52]	; 0x34
 8021ce2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021ce4:	2dff      	cmp	r5, #255	; 0xff
 8021ce6:	d020      	beq.n	8021d2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8021ce8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021cea:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021cee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021cf0:	436f      	muls	r7, r5
 8021cf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021cf4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021cf8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021cfa:	fb05 fa0c 	mul.w	sl, r5, ip
 8021cfe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021d02:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021d06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d0a:	44bc      	add	ip, r7
 8021d0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021d10:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021d14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d24:	ea4c 050a 	orr.w	r5, ip, sl
 8021d28:	9509      	str	r5, [sp, #36]	; 0x24
 8021d2a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021d2c:	2dff      	cmp	r5, #255	; 0xff
 8021d2e:	d020      	beq.n	8021d72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8021d30:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021d32:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021d36:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021d38:	436f      	muls	r7, r5
 8021d3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021d3c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021d40:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021d44:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021d46:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021d4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d4e:	fb05 fa0a 	mul.w	sl, r5, sl
 8021d52:	44bc      	add	ip, r7
 8021d54:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021d58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021d60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d6c:	ea4c 050a 	orr.w	r5, ip, sl
 8021d70:	950e      	str	r5, [sp, #56]	; 0x38
 8021d72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021d74:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d7c:	2aff      	cmp	r2, #255	; 0xff
 8021d7e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021d82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021d84:	fb0e f707 	mul.w	r7, lr, r7
 8021d88:	fb01 770c 	mla	r7, r1, ip, r7
 8021d8c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021d90:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021d92:	fb00 770c 	mla	r7, r0, ip, r7
 8021d96:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021d9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021d9c:	fb09 770c 	mla	r7, r9, ip, r7
 8021da0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021da4:	fb0e fe0c 	mul.w	lr, lr, ip
 8021da8:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8021dac:	fb01 e303 	mla	r3, r1, r3, lr
 8021db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021db2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021db6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021dba:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021dbc:	fb00 330a 	mla	r3, r0, sl, r3
 8021dc0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021dc4:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021dc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dcc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021dd0:	ea47 070c 	orr.w	r7, r7, ip
 8021dd4:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8021dd8:	d11e      	bne.n	8021e18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021dda:	097a      	lsrs	r2, r7, #5
 8021ddc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8021de0:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8021de4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021de8:	f023 0307 	bic.w	r3, r3, #7
 8021dec:	4313      	orrs	r3, r2
 8021dee:	431f      	orrs	r7, r3
 8021df0:	f8a8 7000 	strh.w	r7, [r8]
 8021df4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021df6:	f108 0802 	add.w	r8, r8, #2
 8021dfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021dfe:	441c      	add	r4, r3
 8021e00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e02:	441e      	add	r6, r3
 8021e04:	e643      	b.n	8021a8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8021e06:	2800      	cmp	r0, #0
 8021e08:	f43f af0a 	beq.w	8021c20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021e0c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8021e10:	9109      	str	r1, [sp, #36]	; 0x24
 8021e12:	0e09      	lsrs	r1, r1, #24
 8021e14:	9111      	str	r1, [sp, #68]	; 0x44
 8021e16:	e703      	b.n	8021c20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021e18:	f8b8 1000 	ldrh.w	r1, [r8]
 8021e1c:	43d2      	mvns	r2, r2
 8021e1e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8021e22:	fa5f fe82 	uxtb.w	lr, r2
 8021e26:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021e2a:	10c8      	asrs	r0, r1, #3
 8021e2c:	00ca      	lsls	r2, r1, #3
 8021e2e:	fb0c fc0e 	mul.w	ip, ip, lr
 8021e32:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021e36:	b2d2      	uxtb	r2, r2
 8021e38:	f10c 0101 	add.w	r1, ip, #1
 8021e3c:	fb00 f00e 	mul.w	r0, r0, lr
 8021e40:	fb02 f20e 	mul.w	r2, r2, lr
 8021e44:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021e48:	0c39      	lsrs	r1, r7, #16
 8021e4a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021e4e:	490f      	ldr	r1, [pc, #60]	; (8021e8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8021e50:	fa5f fc8c 	uxtb.w	ip, ip
 8021e54:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8021e58:	1c41      	adds	r1, r0, #1
 8021e5a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021e5e:	1c51      	adds	r1, r2, #1
 8021e60:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021e64:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021e68:	00c0      	lsls	r0, r0, #3
 8021e6a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021e6e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021e72:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8021e76:	ea4c 0c00 	orr.w	ip, ip, r0
 8021e7a:	ea47 0c0c 	orr.w	ip, r7, ip
 8021e7e:	f8a8 c000 	strh.w	ip, [r8]
 8021e82:	e7b7      	b.n	8021df4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021e84:	b01b      	add	sp, #108	; 0x6c
 8021e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e8a:	bf00      	nop
 8021e8c:	fffff800 	.word	0xfffff800

08021e90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8021e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e94:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8021e98:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8021e9c:	2d00      	cmp	r5, #0
 8021e9e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021ea2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8021ea6:	fb05 0e03 	mla	lr, r5, r3, r0
 8021eaa:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021eae:	f2c0 808c 	blt.w	8021fca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8021eb2:	45a9      	cmp	r9, r5
 8021eb4:	f340 8089 	ble.w	8021fca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8021eb8:	2800      	cmp	r0, #0
 8021eba:	f2c0 8084 	blt.w	8021fc6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8021ebe:	4580      	cmp	r8, r0
 8021ec0:	f340 8081 	ble.w	8021fc6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8021ec4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021ec8:	f01e 0f01 	tst.w	lr, #1
 8021ecc:	5d16      	ldrb	r6, [r2, r4]
 8021ece:	bf0c      	ite	eq
 8021ed0:	f006 060f 	andeq.w	r6, r6, #15
 8021ed4:	1136      	asrne	r6, r6, #4
 8021ed6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021eda:	b2f6      	uxtb	r6, r6
 8021edc:	1c44      	adds	r4, r0, #1
 8021ede:	d477      	bmi.n	8021fd0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8021ee0:	45a0      	cmp	r8, r4
 8021ee2:	dd75      	ble.n	8021fd0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8021ee4:	2f00      	cmp	r7, #0
 8021ee6:	d075      	beq.n	8021fd4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8021ee8:	f10e 0a01 	add.w	sl, lr, #1
 8021eec:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8021ef0:	f01a 0f01 	tst.w	sl, #1
 8021ef4:	5d14      	ldrb	r4, [r2, r4]
 8021ef6:	bf0c      	ite	eq
 8021ef8:	f004 040f 	andeq.w	r4, r4, #15
 8021efc:	1124      	asrne	r4, r4, #4
 8021efe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021f02:	b2e4      	uxtb	r4, r4
 8021f04:	3501      	adds	r5, #1
 8021f06:	d469      	bmi.n	8021fdc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8021f08:	45a9      	cmp	r9, r5
 8021f0a:	dd67      	ble.n	8021fdc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8021f0c:	f1bc 0f00 	cmp.w	ip, #0
 8021f10:	d067      	beq.n	8021fe2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8021f12:	2800      	cmp	r0, #0
 8021f14:	db60      	blt.n	8021fd8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8021f16:	4580      	cmp	r8, r0
 8021f18:	dd5e      	ble.n	8021fd8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8021f1a:	eb03 090e 	add.w	r9, r3, lr
 8021f1e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8021f22:	f019 0f01 	tst.w	r9, #1
 8021f26:	5d55      	ldrb	r5, [r2, r5]
 8021f28:	bf0c      	ite	eq
 8021f2a:	f005 050f 	andeq.w	r5, r5, #15
 8021f2e:	112d      	asrne	r5, r5, #4
 8021f30:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8021f34:	b2ed      	uxtb	r5, r5
 8021f36:	3001      	adds	r0, #1
 8021f38:	d456      	bmi.n	8021fe8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8021f3a:	4580      	cmp	r8, r0
 8021f3c:	dd54      	ble.n	8021fe8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8021f3e:	2f00      	cmp	r7, #0
 8021f40:	d054      	beq.n	8021fec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8021f42:	3301      	adds	r3, #1
 8021f44:	449e      	add	lr, r3
 8021f46:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021f4a:	f01e 0f01 	tst.w	lr, #1
 8021f4e:	5cd0      	ldrb	r0, [r2, r3]
 8021f50:	bf0c      	ite	eq
 8021f52:	f000 000f 	andeq.w	r0, r0, #15
 8021f56:	1100      	asrne	r0, r0, #4
 8021f58:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021f5c:	b2c3      	uxtb	r3, r0
 8021f5e:	b2ba      	uxth	r2, r7
 8021f60:	fa1f fc8c 	uxth.w	ip, ip
 8021f64:	fb02 f00c 	mul.w	r0, r2, ip
 8021f68:	0112      	lsls	r2, r2, #4
 8021f6a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021f6e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021f72:	1a12      	subs	r2, r2, r0
 8021f74:	fa1f fc8c 	uxth.w	ip, ip
 8021f78:	b292      	uxth	r2, r2
 8021f7a:	eba7 070c 	sub.w	r7, r7, ip
 8021f7e:	4362      	muls	r2, r4
 8021f80:	b2bf      	uxth	r7, r7
 8021f82:	fb06 2207 	mla	r2, r6, r7, r2
 8021f86:	fb0c 2505 	mla	r5, ip, r5, r2
 8021f8a:	fb00 5303 	mla	r3, r0, r3, r5
 8021f8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f92:	b1b3      	cbz	r3, 8021fc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8021f94:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8021f98:	435a      	muls	r2, r3
 8021f9a:	1c53      	adds	r3, r2, #1
 8021f9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021fa0:	4a2d      	ldr	r2, [pc, #180]	; (8022058 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8021fa2:	121b      	asrs	r3, r3, #8
 8021fa4:	6812      	ldr	r2, [r2, #0]
 8021fa6:	2bff      	cmp	r3, #255	; 0xff
 8021fa8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8021fac:	d120      	bne.n	8021ff0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8021fae:	0950      	lsrs	r0, r2, #5
 8021fb0:	4b2a      	ldr	r3, [pc, #168]	; (802205c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8021fb2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021fb6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021fba:	4033      	ands	r3, r6
 8021fbc:	4318      	orrs	r0, r3
 8021fbe:	4302      	orrs	r2, r0
 8021fc0:	800a      	strh	r2, [r1, #0]
 8021fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021fc6:	2600      	movs	r6, #0
 8021fc8:	e788      	b.n	8021edc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8021fca:	2400      	movs	r4, #0
 8021fcc:	4626      	mov	r6, r4
 8021fce:	e799      	b.n	8021f04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8021fd0:	2400      	movs	r4, #0
 8021fd2:	e797      	b.n	8021f04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8021fd4:	463c      	mov	r4, r7
 8021fd6:	e795      	b.n	8021f04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8021fd8:	2500      	movs	r5, #0
 8021fda:	e7ac      	b.n	8021f36 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8021fdc:	2300      	movs	r3, #0
 8021fde:	461d      	mov	r5, r3
 8021fe0:	e7bd      	b.n	8021f5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021fe2:	4663      	mov	r3, ip
 8021fe4:	4665      	mov	r5, ip
 8021fe6:	e7ba      	b.n	8021f5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021fe8:	2300      	movs	r3, #0
 8021fea:	e7b8      	b.n	8021f5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021fec:	463b      	mov	r3, r7
 8021fee:	e7b6      	b.n	8021f5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021ff0:	880d      	ldrh	r5, [r1, #0]
 8021ff2:	b29f      	uxth	r7, r3
 8021ff4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8021ff8:	43db      	mvns	r3, r3
 8021ffa:	122c      	asrs	r4, r5, #8
 8021ffc:	fb10 f007 	smulbb	r0, r0, r7
 8022000:	b2db      	uxtb	r3, r3
 8022002:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022006:	b2f6      	uxtb	r6, r6
 8022008:	b2d2      	uxtb	r2, r2
 802200a:	fb04 0403 	mla	r4, r4, r3, r0
 802200e:	10e8      	asrs	r0, r5, #3
 8022010:	fb12 f207 	smulbb	r2, r2, r7
 8022014:	00ed      	lsls	r5, r5, #3
 8022016:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802201a:	b2a4      	uxth	r4, r4
 802201c:	fb16 f607 	smulbb	r6, r6, r7
 8022020:	b2ed      	uxtb	r5, r5
 8022022:	fb00 6603 	mla	r6, r0, r3, r6
 8022026:	fb05 2303 	mla	r3, r5, r3, r2
 802202a:	b2b0      	uxth	r0, r6
 802202c:	b29a      	uxth	r2, r3
 802202e:	1c63      	adds	r3, r4, #1
 8022030:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022034:	1c53      	adds	r3, r2, #1
 8022036:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802203a:	1c42      	adds	r2, r0, #1
 802203c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022040:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022044:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022048:	0940      	lsrs	r0, r0, #5
 802204a:	4323      	orrs	r3, r4
 802204c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022050:	4303      	orrs	r3, r0
 8022052:	800b      	strh	r3, [r1, #0]
 8022054:	e7b5      	b.n	8021fc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8022056:	bf00      	nop
 8022058:	20027ea8 	.word	0x20027ea8
 802205c:	00fff800 	.word	0x00fff800

08022060 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022064:	b097      	sub	sp, #92	; 0x5c
 8022066:	9214      	str	r2, [sp, #80]	; 0x50
 8022068:	9309      	str	r3, [sp, #36]	; 0x24
 802206a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802206c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022070:	9015      	str	r0, [sp, #84]	; 0x54
 8022072:	910d      	str	r1, [sp, #52]	; 0x34
 8022074:	6850      	ldr	r0, [r2, #4]
 8022076:	930f      	str	r3, [sp, #60]	; 0x3c
 8022078:	6812      	ldr	r2, [r2, #0]
 802207a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802207e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8022082:	fb00 1303 	mla	r3, r0, r3, r1
 8022086:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802208a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802208c:	689b      	ldr	r3, [r3, #8]
 802208e:	3301      	adds	r3, #1
 8022090:	f023 0301 	bic.w	r3, r3, #1
 8022094:	930a      	str	r3, [sp, #40]	; 0x28
 8022096:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022098:	681f      	ldr	r7, [r3, #0]
 802209a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802209c:	2b00      	cmp	r3, #0
 802209e:	dc03      	bgt.n	80220a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80220a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	f340 8289 	ble.w	80225ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80220a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80220aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80220ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80220b2:	1e48      	subs	r0, r1, #1
 80220b4:	f102 3cff 	add.w	ip, r2, #4294967295
 80220b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220ba:	2b00      	cmp	r3, #0
 80220bc:	f340 80c5 	ble.w	802224a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80220c0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80220c4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80220c8:	d406      	bmi.n	80220d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80220ca:	4586      	cmp	lr, r0
 80220cc:	da04      	bge.n	80220d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	db02      	blt.n	80220d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80220d2:	4563      	cmp	r3, ip
 80220d4:	f2c0 80ba 	blt.w	802224c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80220d8:	f11e 0e01 	adds.w	lr, lr, #1
 80220dc:	f100 80ab 	bmi.w	8022236 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80220e0:	4571      	cmp	r1, lr
 80220e2:	f2c0 80a8 	blt.w	8022236 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80220e6:	3301      	adds	r3, #1
 80220e8:	f100 80a5 	bmi.w	8022236 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80220ec:	429a      	cmp	r2, r3
 80220ee:	f2c0 80a2 	blt.w	8022236 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80220f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220f4:	46c8      	mov	r8, r9
 80220f6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80220fa:	930e      	str	r3, [sp, #56]	; 0x38
 80220fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80220fe:	2b00      	cmp	r3, #0
 8022100:	f340 80c4 	ble.w	802228c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8022104:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022106:	1430      	asrs	r0, r6, #16
 8022108:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802210c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022110:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022114:	1423      	asrs	r3, r4, #16
 8022116:	f100 814f 	bmi.w	80223b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802211a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802211e:	455b      	cmp	r3, fp
 8022120:	f280 814a 	bge.w	80223b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022124:	2800      	cmp	r0, #0
 8022126:	f2c0 8147 	blt.w	80223b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802212a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802212e:	4558      	cmp	r0, fp
 8022130:	f280 8142 	bge.w	80223b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022134:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022136:	fb00 3305 	mla	r3, r0, r5, r3
 802213a:	0858      	lsrs	r0, r3, #1
 802213c:	07dd      	lsls	r5, r3, #31
 802213e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022142:	bf54      	ite	pl
 8022144:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022148:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802214c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022150:	fa5f fc8c 	uxtb.w	ip, ip
 8022154:	2a00      	cmp	r2, #0
 8022156:	f000 80dd 	beq.w	8022314 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802215a:	1c58      	adds	r0, r3, #1
 802215c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022160:	07c0      	lsls	r0, r0, #31
 8022162:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022166:	bf54      	ite	pl
 8022168:	f00e 0e0f 	andpl.w	lr, lr, #15
 802216c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022170:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022174:	fa5f f08e 	uxtb.w	r0, lr
 8022178:	9010      	str	r0, [sp, #64]	; 0x40
 802217a:	b1d9      	cbz	r1, 80221b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802217c:	4453      	add	r3, sl
 802217e:	0858      	lsrs	r0, r3, #1
 8022180:	07dd      	lsls	r5, r3, #31
 8022182:	f103 0301 	add.w	r3, r3, #1
 8022186:	5c38      	ldrb	r0, [r7, r0]
 8022188:	bf54      	ite	pl
 802218a:	f000 000f 	andpl.w	r0, r0, #15
 802218e:	1100      	asrmi	r0, r0, #4
 8022190:	07dd      	lsls	r5, r3, #31
 8022192:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022196:	b2c0      	uxtb	r0, r0
 8022198:	900b      	str	r0, [sp, #44]	; 0x2c
 802219a:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802219e:	f817 e000 	ldrb.w	lr, [r7, r0]
 80221a2:	bf54      	ite	pl
 80221a4:	f00e 030f 	andpl.w	r3, lr, #15
 80221a8:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80221ac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80221b0:	b2db      	uxtb	r3, r3
 80221b2:	9311      	str	r3, [sp, #68]	; 0x44
 80221b4:	b292      	uxth	r2, r2
 80221b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80221b8:	b289      	uxth	r1, r1
 80221ba:	fb02 f301 	mul.w	r3, r2, r1
 80221be:	0112      	lsls	r2, r2, #4
 80221c0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80221c4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80221c8:	1ad2      	subs	r2, r2, r3
 80221ca:	b289      	uxth	r1, r1
 80221cc:	b292      	uxth	r2, r2
 80221ce:	1a40      	subs	r0, r0, r1
 80221d0:	436a      	muls	r2, r5
 80221d2:	b280      	uxth	r0, r0
 80221d4:	fb0c 2c00 	mla	ip, ip, r0, r2
 80221d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80221da:	fb01 c102 	mla	r1, r1, r2, ip
 80221de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80221e0:	fb03 1302 	mla	r3, r3, r2, r1
 80221e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80221e8:	b1db      	cbz	r3, 8022222 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80221ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80221ec:	4353      	muls	r3, r2
 80221ee:	1c5a      	adds	r2, r3, #1
 80221f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80221f4:	4ac6      	ldr	r2, [pc, #792]	; (8022510 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80221f6:	121b      	asrs	r3, r3, #8
 80221f8:	6812      	ldr	r2, [r2, #0]
 80221fa:	2bff      	cmp	r3, #255	; 0xff
 80221fc:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8022200:	f040 8099 	bne.w	8022336 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8022204:	0953      	lsrs	r3, r2, #5
 8022206:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802220a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802220e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022212:	f02c 0c07 	bic.w	ip, ip, #7
 8022216:	ea43 0c0c 	orr.w	ip, r3, ip
 802221a:	ea4c 0202 	orr.w	r2, ip, r2
 802221e:	f8a8 2000 	strh.w	r2, [r8]
 8022222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022224:	f108 0802 	add.w	r8, r8, #2
 8022228:	441c      	add	r4, r3
 802222a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802222c:	441e      	add	r6, r3
 802222e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022230:	3b01      	subs	r3, #1
 8022232:	930e      	str	r3, [sp, #56]	; 0x38
 8022234:	e762      	b.n	80220fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022236:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022238:	f109 0902 	add.w	r9, r9, #2
 802223c:	441c      	add	r4, r3
 802223e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022240:	441e      	add	r6, r3
 8022242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022244:	3b01      	subs	r3, #1
 8022246:	9309      	str	r3, [sp, #36]	; 0x24
 8022248:	e736      	b.n	80220b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802224a:	d024      	beq.n	8022296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802224c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802224e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022250:	3b01      	subs	r3, #1
 8022252:	fb00 4003 	mla	r0, r0, r3, r4
 8022256:	1400      	asrs	r0, r0, #16
 8022258:	f53f af4b 	bmi.w	80220f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802225c:	3901      	subs	r1, #1
 802225e:	4288      	cmp	r0, r1
 8022260:	f6bf af47 	bge.w	80220f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022264:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022266:	fb01 6303 	mla	r3, r1, r3, r6
 802226a:	141b      	asrs	r3, r3, #16
 802226c:	f53f af41 	bmi.w	80220f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022270:	3a01      	subs	r2, #1
 8022272:	4293      	cmp	r3, r2
 8022274:	f6bf af3d 	bge.w	80220f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022278:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802227c:	46c8      	mov	r8, r9
 802227e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022282:	930e      	str	r3, [sp, #56]	; 0x38
 8022284:	f1bb 0f00 	cmp.w	fp, #0
 8022288:	f300 80b7 	bgt.w	80223fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802228c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802228e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022292:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022298:	2b00      	cmp	r3, #0
 802229a:	f340 818e 	ble.w	80225ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802229e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80222a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80222a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80222a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80222ac:	eef0 6a62 	vmov.f32	s13, s5
 80222b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80222b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80222b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222bc:	ee16 4a90 	vmov	r4, s13
 80222c0:	eef0 6a43 	vmov.f32	s13, s6
 80222c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222c8:	ee16 6a90 	vmov	r6, s13
 80222cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80222d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80222d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80222d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80222dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80222e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80222e4:	ee12 2a90 	vmov	r2, s5
 80222e8:	eef0 2a47 	vmov.f32	s5, s14
 80222ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80222f0:	ee13 2a10 	vmov	r2, s6
 80222f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80222f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80222f8:	eeb0 3a67 	vmov.f32	s6, s15
 80222fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022300:	9324      	str	r3, [sp, #144]	; 0x90
 8022302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022306:	3b01      	subs	r3, #1
 8022308:	930d      	str	r3, [sp, #52]	; 0x34
 802230a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802230c:	bf08      	it	eq
 802230e:	4613      	moveq	r3, r2
 8022310:	9309      	str	r3, [sp, #36]	; 0x24
 8022312:	e6c2      	b.n	802209a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022314:	2900      	cmp	r1, #0
 8022316:	f43f af4d 	beq.w	80221b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802231a:	eb0a 0003 	add.w	r0, sl, r3
 802231e:	0843      	lsrs	r3, r0, #1
 8022320:	07c0      	lsls	r0, r0, #31
 8022322:	5cfb      	ldrb	r3, [r7, r3]
 8022324:	bf54      	ite	pl
 8022326:	f003 030f 	andpl.w	r3, r3, #15
 802232a:	111b      	asrmi	r3, r3, #4
 802232c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022330:	b2db      	uxtb	r3, r3
 8022332:	930b      	str	r3, [sp, #44]	; 0x2c
 8022334:	e73e      	b.n	80221b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022336:	f8b8 e000 	ldrh.w	lr, [r8]
 802233a:	fa1f fb83 	uxth.w	fp, r3
 802233e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8022342:	43db      	mvns	r3, r3
 8022344:	ea4f 202e 	mov.w	r0, lr, asr #8
 8022348:	fb11 f10b 	smulbb	r1, r1, fp
 802234c:	b2db      	uxtb	r3, r3
 802234e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022352:	fa5f fc8c 	uxtb.w	ip, ip
 8022356:	b2d2      	uxtb	r2, r2
 8022358:	fb00 1003 	mla	r0, r0, r3, r1
 802235c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8022360:	fb1c fc0b 	smulbb	ip, ip, fp
 8022364:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022368:	b280      	uxth	r0, r0
 802236a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802236e:	fb12 fb0b 	smulbb	fp, r2, fp
 8022372:	fa5f fe8e 	uxtb.w	lr, lr
 8022376:	fb01 cc03 	mla	ip, r1, r3, ip
 802237a:	fb0e bb03 	mla	fp, lr, r3, fp
 802237e:	1c43      	adds	r3, r0, #1
 8022380:	fa1f fc8c 	uxth.w	ip, ip
 8022384:	fa1f fb8b 	uxth.w	fp, fp
 8022388:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802238c:	f10c 0101 	add.w	r1, ip, #1
 8022390:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8022394:	f10b 0001 	add.w	r0, fp, #1
 8022398:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802239c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80223a0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80223a4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80223a8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80223ac:	4318      	orrs	r0, r3
 80223ae:	ea40 000c 	orr.w	r0, r0, ip
 80223b2:	f8a8 0000 	strh.w	r0, [r8]
 80223b6:	e734      	b.n	8022222 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223b8:	f113 0b01 	adds.w	fp, r3, #1
 80223bc:	f53f af31 	bmi.w	8022222 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223c0:	45dc      	cmp	ip, fp
 80223c2:	f6ff af2e 	blt.w	8022222 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223c6:	f110 0b01 	adds.w	fp, r0, #1
 80223ca:	f53f af2a 	bmi.w	8022222 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223ce:	45de      	cmp	lr, fp
 80223d0:	f6ff af27 	blt.w	8022222 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223d4:	9302      	str	r3, [sp, #8]
 80223d6:	fa0f f38e 	sxth.w	r3, lr
 80223da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80223dc:	9301      	str	r3, [sp, #4]
 80223de:	fa0f f38c 	sxth.w	r3, ip
 80223e2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80223e6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80223ea:	9300      	str	r3, [sp, #0]
 80223ec:	463a      	mov	r2, r7
 80223ee:	4653      	mov	r3, sl
 80223f0:	4641      	mov	r1, r8
 80223f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80223f4:	f7ff fd4c 	bl	8021e90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80223f8:	e713      	b.n	8022222 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223fa:	1422      	asrs	r2, r4, #16
 80223fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80223fe:	1433      	asrs	r3, r6, #16
 8022400:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022404:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022408:	fb05 2303 	mla	r3, r5, r3, r2
 802240c:	085a      	lsrs	r2, r3, #1
 802240e:	07dd      	lsls	r5, r3, #31
 8022410:	5cba      	ldrb	r2, [r7, r2]
 8022412:	bf54      	ite	pl
 8022414:	f002 020f 	andpl.w	r2, r2, #15
 8022418:	1112      	asrmi	r2, r2, #4
 802241a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802241e:	b2d2      	uxtb	r2, r2
 8022420:	2900      	cmp	r1, #0
 8022422:	d077      	beq.n	8022514 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8022424:	f103 0e01 	add.w	lr, r3, #1
 8022428:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802242c:	f01e 0f01 	tst.w	lr, #1
 8022430:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022434:	bf0c      	ite	eq
 8022436:	f00c 0c0f 	andeq.w	ip, ip, #15
 802243a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802243e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022442:	fa5f f58c 	uxtb.w	r5, ip
 8022446:	9512      	str	r5, [sp, #72]	; 0x48
 8022448:	b308      	cbz	r0, 802248e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802244a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802244c:	442b      	add	r3, r5
 802244e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022452:	07dd      	lsls	r5, r3, #31
 8022454:	f103 0301 	add.w	r3, r3, #1
 8022458:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802245c:	bf54      	ite	pl
 802245e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022462:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022466:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802246a:	fa5f f58c 	uxtb.w	r5, ip
 802246e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022472:	950c      	str	r5, [sp, #48]	; 0x30
 8022474:	07dd      	lsls	r5, r3, #31
 8022476:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802247a:	bf54      	ite	pl
 802247c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022480:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022484:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022488:	fa5f f38c 	uxtb.w	r3, ip
 802248c:	9313      	str	r3, [sp, #76]	; 0x4c
 802248e:	b289      	uxth	r1, r1
 8022490:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022492:	b280      	uxth	r0, r0
 8022494:	fb01 f300 	mul.w	r3, r1, r0
 8022498:	0109      	lsls	r1, r1, #4
 802249a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802249e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80224a2:	1ac9      	subs	r1, r1, r3
 80224a4:	b280      	uxth	r0, r0
 80224a6:	b289      	uxth	r1, r1
 80224a8:	ebac 0c00 	sub.w	ip, ip, r0
 80224ac:	4369      	muls	r1, r5
 80224ae:	fa1f fc8c 	uxth.w	ip, ip
 80224b2:	fb02 120c 	mla	r2, r2, ip, r1
 80224b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80224b8:	fb00 2001 	mla	r0, r0, r1, r2
 80224bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80224be:	fb03 0302 	mla	r3, r3, r2, r0
 80224c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80224c6:	b1d3      	cbz	r3, 80224fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80224c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80224ca:	4353      	muls	r3, r2
 80224cc:	1c5a      	adds	r2, r3, #1
 80224ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80224d2:	4a0f      	ldr	r2, [pc, #60]	; (8022510 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80224d4:	121b      	asrs	r3, r3, #8
 80224d6:	6812      	ldr	r2, [r2, #0]
 80224d8:	2bff      	cmp	r3, #255	; 0xff
 80224da:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80224de:	d12d      	bne.n	802253c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80224e0:	0953      	lsrs	r3, r2, #5
 80224e2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80224e6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80224ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80224ee:	f02c 0c07 	bic.w	ip, ip, #7
 80224f2:	ea43 0c0c 	orr.w	ip, r3, ip
 80224f6:	ea4c 0202 	orr.w	r2, ip, r2
 80224fa:	f8a8 2000 	strh.w	r2, [r8]
 80224fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022500:	f108 0802 	add.w	r8, r8, #2
 8022504:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022508:	441c      	add	r4, r3
 802250a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802250c:	441e      	add	r6, r3
 802250e:	e6b9      	b.n	8022284 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022510:	20027ea8 	.word	0x20027ea8
 8022514:	2800      	cmp	r0, #0
 8022516:	d0ba      	beq.n	802248e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022518:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802251a:	442b      	add	r3, r5
 802251c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022520:	07db      	lsls	r3, r3, #31
 8022522:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022526:	bf54      	ite	pl
 8022528:	f00c 0c0f 	andpl.w	ip, ip, #15
 802252c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022530:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022534:	fa5f f38c 	uxtb.w	r3, ip
 8022538:	930c      	str	r3, [sp, #48]	; 0x30
 802253a:	e7a8      	b.n	802248e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802253c:	f8b8 e000 	ldrh.w	lr, [r8]
 8022540:	fa1f fa83 	uxth.w	sl, r3
 8022544:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8022548:	43db      	mvns	r3, r3
 802254a:	ea4f 202e 	mov.w	r0, lr, asr #8
 802254e:	fb11 f10a 	smulbb	r1, r1, sl
 8022552:	b2db      	uxtb	r3, r3
 8022554:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022558:	b2d2      	uxtb	r2, r2
 802255a:	fa5f fc8c 	uxtb.w	ip, ip
 802255e:	fb00 1003 	mla	r0, r0, r3, r1
 8022562:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8022566:	fb12 f20a 	smulbb	r2, r2, sl
 802256a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802256e:	b280      	uxth	r0, r0
 8022570:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022574:	fb1c fc0a 	smulbb	ip, ip, sl
 8022578:	fa5f fe8e 	uxtb.w	lr, lr
 802257c:	fb0e 2203 	mla	r2, lr, r3, r2
 8022580:	fb01 cc03 	mla	ip, r1, r3, ip
 8022584:	1c43      	adds	r3, r0, #1
 8022586:	b292      	uxth	r2, r2
 8022588:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802258c:	1c51      	adds	r1, r2, #1
 802258e:	fa1f fc8c 	uxth.w	ip, ip
 8022592:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022596:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802259a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802259e:	4308      	orrs	r0, r1
 80225a0:	f10c 0101 	add.w	r1, ip, #1
 80225a4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80225a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80225ac:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80225b0:	ea40 000c 	orr.w	r0, r0, ip
 80225b4:	f8a8 0000 	strh.w	r0, [r8]
 80225b8:	e7a1      	b.n	80224fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80225ba:	b017      	add	sp, #92	; 0x5c
 80225bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080225c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80225c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225c4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80225c8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80225cc:	2d00      	cmp	r5, #0
 80225ce:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80225d2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80225d6:	fb05 0e03 	mla	lr, r5, r3, r0
 80225da:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80225de:	f2c0 80b0 	blt.w	8022742 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80225e2:	45a9      	cmp	r9, r5
 80225e4:	f340 80ad 	ble.w	8022742 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80225e8:	2800      	cmp	r0, #0
 80225ea:	f2c0 80a8 	blt.w	802273e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80225ee:	4580      	cmp	r8, r0
 80225f0:	f340 80a5 	ble.w	802273e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80225f4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80225f8:	f01e 0f01 	tst.w	lr, #1
 80225fc:	5d16      	ldrb	r6, [r2, r4]
 80225fe:	bf0c      	ite	eq
 8022600:	f006 060f 	andeq.w	r6, r6, #15
 8022604:	1136      	asrne	r6, r6, #4
 8022606:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802260a:	b2f6      	uxtb	r6, r6
 802260c:	1c44      	adds	r4, r0, #1
 802260e:	f100 809b 	bmi.w	8022748 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8022612:	45a0      	cmp	r8, r4
 8022614:	f340 8098 	ble.w	8022748 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8022618:	2f00      	cmp	r7, #0
 802261a:	f000 8097 	beq.w	802274c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802261e:	f10e 0a01 	add.w	sl, lr, #1
 8022622:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8022626:	f01a 0f01 	tst.w	sl, #1
 802262a:	5d14      	ldrb	r4, [r2, r4]
 802262c:	bf0c      	ite	eq
 802262e:	f004 040f 	andeq.w	r4, r4, #15
 8022632:	1124      	asrne	r4, r4, #4
 8022634:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022638:	b2e4      	uxtb	r4, r4
 802263a:	3501      	adds	r5, #1
 802263c:	f100 808a 	bmi.w	8022754 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022640:	45a9      	cmp	r9, r5
 8022642:	f340 8087 	ble.w	8022754 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022646:	f1bc 0f00 	cmp.w	ip, #0
 802264a:	f000 8086 	beq.w	802275a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802264e:	2800      	cmp	r0, #0
 8022650:	db7e      	blt.n	8022750 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8022652:	4580      	cmp	r8, r0
 8022654:	dd7c      	ble.n	8022750 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8022656:	eb03 090e 	add.w	r9, r3, lr
 802265a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802265e:	f019 0f01 	tst.w	r9, #1
 8022662:	5d55      	ldrb	r5, [r2, r5]
 8022664:	bf0c      	ite	eq
 8022666:	f005 050f 	andeq.w	r5, r5, #15
 802266a:	112d      	asrne	r5, r5, #4
 802266c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022670:	b2ed      	uxtb	r5, r5
 8022672:	3001      	adds	r0, #1
 8022674:	d474      	bmi.n	8022760 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022676:	4580      	cmp	r8, r0
 8022678:	dd72      	ble.n	8022760 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802267a:	2f00      	cmp	r7, #0
 802267c:	d072      	beq.n	8022764 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802267e:	3301      	adds	r3, #1
 8022680:	449e      	add	lr, r3
 8022682:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022686:	f01e 0f01 	tst.w	lr, #1
 802268a:	5cd0      	ldrb	r0, [r2, r3]
 802268c:	bf0c      	ite	eq
 802268e:	f000 000f 	andeq.w	r0, r0, #15
 8022692:	1100      	asrne	r0, r0, #4
 8022694:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022698:	b2c3      	uxtb	r3, r0
 802269a:	b2ba      	uxth	r2, r7
 802269c:	fa1f fc8c 	uxth.w	ip, ip
 80226a0:	fb02 f00c 	mul.w	r0, r2, ip
 80226a4:	0112      	lsls	r2, r2, #4
 80226a6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80226aa:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80226ae:	1a12      	subs	r2, r2, r0
 80226b0:	fa1f fc8c 	uxth.w	ip, ip
 80226b4:	b292      	uxth	r2, r2
 80226b6:	eba7 070c 	sub.w	r7, r7, ip
 80226ba:	4362      	muls	r2, r4
 80226bc:	b2bf      	uxth	r7, r7
 80226be:	fb06 2207 	mla	r2, r6, r7, r2
 80226c2:	fb0c 2505 	mla	r5, ip, r5, r2
 80226c6:	fb00 5303 	mla	r3, r0, r3, r5
 80226ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80226ce:	b3a3      	cbz	r3, 802273a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80226d0:	4a25      	ldr	r2, [pc, #148]	; (8022768 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80226d2:	880e      	ldrh	r6, [r1, #0]
 80226d4:	6815      	ldr	r5, [r2, #0]
 80226d6:	b29a      	uxth	r2, r3
 80226d8:	1234      	asrs	r4, r6, #8
 80226da:	43db      	mvns	r3, r3
 80226dc:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80226e0:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80226e4:	b2db      	uxtb	r3, r3
 80226e6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80226ea:	fb10 f002 	smulbb	r0, r0, r2
 80226ee:	b2ed      	uxtb	r5, r5
 80226f0:	fb17 f702 	smulbb	r7, r7, r2
 80226f4:	fb04 0403 	mla	r4, r4, r3, r0
 80226f8:	10f0      	asrs	r0, r6, #3
 80226fa:	fb15 f202 	smulbb	r2, r5, r2
 80226fe:	00f6      	lsls	r6, r6, #3
 8022700:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022704:	b2a4      	uxth	r4, r4
 8022706:	b2f6      	uxtb	r6, r6
 8022708:	fb00 7003 	mla	r0, r0, r3, r7
 802270c:	fb06 2303 	mla	r3, r6, r3, r2
 8022710:	b280      	uxth	r0, r0
 8022712:	b29a      	uxth	r2, r3
 8022714:	1c63      	adds	r3, r4, #1
 8022716:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802271a:	1c53      	adds	r3, r2, #1
 802271c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022720:	1c42      	adds	r2, r0, #1
 8022722:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022726:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802272a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802272e:	0940      	lsrs	r0, r0, #5
 8022730:	4323      	orrs	r3, r4
 8022732:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022736:	4303      	orrs	r3, r0
 8022738:	800b      	strh	r3, [r1, #0]
 802273a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802273e:	2600      	movs	r6, #0
 8022740:	e764      	b.n	802260c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8022742:	2400      	movs	r4, #0
 8022744:	4626      	mov	r6, r4
 8022746:	e778      	b.n	802263a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022748:	2400      	movs	r4, #0
 802274a:	e776      	b.n	802263a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802274c:	463c      	mov	r4, r7
 802274e:	e774      	b.n	802263a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022750:	2500      	movs	r5, #0
 8022752:	e78e      	b.n	8022672 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8022754:	2300      	movs	r3, #0
 8022756:	461d      	mov	r5, r3
 8022758:	e79f      	b.n	802269a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802275a:	4663      	mov	r3, ip
 802275c:	4665      	mov	r5, ip
 802275e:	e79c      	b.n	802269a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022760:	2300      	movs	r3, #0
 8022762:	e79a      	b.n	802269a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022764:	463b      	mov	r3, r7
 8022766:	e798      	b.n	802269a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022768:	20027ea8 	.word	0x20027ea8

0802276c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022770:	b093      	sub	sp, #76	; 0x4c
 8022772:	461d      	mov	r5, r3
 8022774:	920c      	str	r2, [sp, #48]	; 0x30
 8022776:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022778:	9011      	str	r0, [sp, #68]	; 0x44
 802277a:	9107      	str	r1, [sp, #28]
 802277c:	6850      	ldr	r0, [r2, #4]
 802277e:	6812      	ldr	r2, [r2, #0]
 8022780:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022784:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022788:	fb00 1303 	mla	r3, r0, r3, r1
 802278c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022790:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022792:	689b      	ldr	r3, [r3, #8]
 8022794:	3301      	adds	r3, #1
 8022796:	f023 0301 	bic.w	r3, r3, #1
 802279a:	9306      	str	r3, [sp, #24]
 802279c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802279e:	681f      	ldr	r7, [r3, #0]
 80227a0:	9b07      	ldr	r3, [sp, #28]
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	dc03      	bgt.n	80227ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80227a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80227a8:	2b00      	cmp	r3, #0
 80227aa:	f340 8267 	ble.w	8022c7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80227ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80227b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80227b8:	1e48      	subs	r0, r1, #1
 80227ba:	f102 3cff 	add.w	ip, r2, #4294967295
 80227be:	2d00      	cmp	r5, #0
 80227c0:	f340 80b7 	ble.w	8022932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80227c4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80227c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80227cc:	d406      	bmi.n	80227dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80227ce:	4586      	cmp	lr, r0
 80227d0:	da04      	bge.n	80227dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	db02      	blt.n	80227dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80227d6:	4563      	cmp	r3, ip
 80227d8:	f2c0 80ac 	blt.w	8022934 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80227dc:	f11e 0e01 	adds.w	lr, lr, #1
 80227e0:	f100 809f 	bmi.w	8022922 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80227e4:	4571      	cmp	r1, lr
 80227e6:	f2c0 809c 	blt.w	8022922 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80227ea:	3301      	adds	r3, #1
 80227ec:	f100 8099 	bmi.w	8022922 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80227f0:	429a      	cmp	r2, r3
 80227f2:	f2c0 8096 	blt.w	8022922 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80227f6:	46c8      	mov	r8, r9
 80227f8:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80227fc:	9509      	str	r5, [sp, #36]	; 0x24
 80227fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022800:	2b00      	cmp	r3, #0
 8022802:	f340 80b5 	ble.w	8022970 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022806:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802280a:	1430      	asrs	r0, r6, #16
 802280c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022810:	9308      	str	r3, [sp, #32]
 8022812:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022814:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022818:	1423      	asrs	r3, r4, #16
 802281a:	f100 813f 	bmi.w	8022a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802281e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022822:	455b      	cmp	r3, fp
 8022824:	f280 813a 	bge.w	8022a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022828:	2800      	cmp	r0, #0
 802282a:	f2c0 8137 	blt.w	8022a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802282e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022832:	4558      	cmp	r0, fp
 8022834:	f280 8132 	bge.w	8022a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022838:	9a06      	ldr	r2, [sp, #24]
 802283a:	fb00 3302 	mla	r3, r0, r2, r3
 802283e:	0858      	lsrs	r0, r3, #1
 8022840:	07da      	lsls	r2, r3, #31
 8022842:	9a08      	ldr	r2, [sp, #32]
 8022844:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022848:	bf54      	ite	pl
 802284a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802284e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022852:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022856:	fa5f fc8c 	uxtb.w	ip, ip
 802285a:	2a00      	cmp	r2, #0
 802285c:	f000 80cc 	beq.w	80229f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022860:	1c58      	adds	r0, r3, #1
 8022862:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022866:	07c0      	lsls	r0, r0, #31
 8022868:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802286c:	bf54      	ite	pl
 802286e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022872:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022876:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802287a:	fa5f fe8e 	uxtb.w	lr, lr
 802287e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022882:	b1b9      	cbz	r1, 80228b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022884:	4453      	add	r3, sl
 8022886:	0858      	lsrs	r0, r3, #1
 8022888:	07da      	lsls	r2, r3, #31
 802288a:	5c38      	ldrb	r0, [r7, r0]
 802288c:	bf54      	ite	pl
 802288e:	f000 000f 	andpl.w	r0, r0, #15
 8022892:	1100      	asrmi	r0, r0, #4
 8022894:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022898:	b2c0      	uxtb	r0, r0
 802289a:	900a      	str	r0, [sp, #40]	; 0x28
 802289c:	1c58      	adds	r0, r3, #1
 802289e:	0843      	lsrs	r3, r0, #1
 80228a0:	07c2      	lsls	r2, r0, #31
 80228a2:	5cfb      	ldrb	r3, [r7, r3]
 80228a4:	bf54      	ite	pl
 80228a6:	f003 030f 	andpl.w	r3, r3, #15
 80228aa:	111b      	asrmi	r3, r3, #4
 80228ac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80228b0:	b2db      	uxtb	r3, r3
 80228b2:	930e      	str	r3, [sp, #56]	; 0x38
 80228b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80228b8:	b289      	uxth	r1, r1
 80228ba:	fb02 f301 	mul.w	r3, r2, r1
 80228be:	0112      	lsls	r2, r2, #4
 80228c0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80228c4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80228c8:	1ad2      	subs	r2, r2, r3
 80228ca:	b289      	uxth	r1, r1
 80228cc:	b292      	uxth	r2, r2
 80228ce:	1a40      	subs	r0, r0, r1
 80228d0:	fa1f fe80 	uxth.w	lr, r0
 80228d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80228d6:	4342      	muls	r2, r0
 80228d8:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80228dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80228de:	fb01 c102 	mla	r1, r1, r2, ip
 80228e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80228e4:	fb03 1302 	mla	r3, r3, r2, r1
 80228e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80228ec:	2bff      	cmp	r3, #255	; 0xff
 80228ee:	f040 8094 	bne.w	8022a1a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80228f2:	4bbf      	ldr	r3, [pc, #764]	; (8022bf0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80228f4:	681a      	ldr	r2, [r3, #0]
 80228f6:	4bbf      	ldr	r3, [pc, #764]	; (8022bf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80228f8:	0951      	lsrs	r1, r2, #5
 80228fa:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80228fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022902:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022906:	430b      	orrs	r3, r1
 8022908:	4313      	orrs	r3, r2
 802290a:	f8a8 3000 	strh.w	r3, [r8]
 802290e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022910:	f108 0802 	add.w	r8, r8, #2
 8022914:	441c      	add	r4, r3
 8022916:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022918:	441e      	add	r6, r3
 802291a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802291c:	3b01      	subs	r3, #1
 802291e:	9309      	str	r3, [sp, #36]	; 0x24
 8022920:	e76d      	b.n	80227fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022924:	3d01      	subs	r5, #1
 8022926:	f109 0902 	add.w	r9, r9, #2
 802292a:	441c      	add	r4, r3
 802292c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802292e:	441e      	add	r6, r3
 8022930:	e745      	b.n	80227be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022932:	d021      	beq.n	8022978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022934:	1e6b      	subs	r3, r5, #1
 8022936:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022938:	fb00 4003 	mla	r0, r0, r3, r4
 802293c:	1400      	asrs	r0, r0, #16
 802293e:	f53f af5a 	bmi.w	80227f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022942:	3901      	subs	r1, #1
 8022944:	4288      	cmp	r0, r1
 8022946:	f6bf af56 	bge.w	80227f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802294a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802294c:	fb01 6303 	mla	r3, r1, r3, r6
 8022950:	141b      	asrs	r3, r3, #16
 8022952:	f53f af50 	bmi.w	80227f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022956:	3a01      	subs	r2, #1
 8022958:	4293      	cmp	r3, r2
 802295a:	f6bf af4c 	bge.w	80227f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802295e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8022962:	46a8      	mov	r8, r5
 8022964:	46ce      	mov	lr, r9
 8022966:	9308      	str	r3, [sp, #32]
 8022968:	f1b8 0f00 	cmp.w	r8, #0
 802296c:	f300 80b6 	bgt.w	8022adc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022970:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022974:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022978:	9b07      	ldr	r3, [sp, #28]
 802297a:	2b00      	cmp	r3, #0
 802297c:	f340 817e 	ble.w	8022c7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022984:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022986:	ee30 0a04 	vadd.f32	s0, s0, s8
 802298a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802298e:	eef0 6a62 	vmov.f32	s13, s5
 8022992:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022996:	ee31 1a05 	vadd.f32	s2, s2, s10
 802299a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802299e:	ee16 4a90 	vmov	r4, s13
 80229a2:	eef0 6a43 	vmov.f32	s13, s6
 80229a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229aa:	ee16 6a90 	vmov	r6, s13
 80229ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80229b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80229b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80229ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80229be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80229c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80229c6:	ee12 2a90 	vmov	r2, s5
 80229ca:	eef0 2a47 	vmov.f32	s5, s14
 80229ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80229d2:	ee13 2a10 	vmov	r2, s6
 80229d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80229d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229da:	eeb0 3a67 	vmov.f32	s6, s15
 80229de:	fb92 f3f3 	sdiv	r3, r2, r3
 80229e2:	9320      	str	r3, [sp, #128]	; 0x80
 80229e4:	9b07      	ldr	r3, [sp, #28]
 80229e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80229e8:	3b01      	subs	r3, #1
 80229ea:	9307      	str	r3, [sp, #28]
 80229ec:	bf08      	it	eq
 80229ee:	4615      	moveq	r5, r2
 80229f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229f2:	bf18      	it	ne
 80229f4:	461d      	movne	r5, r3
 80229f6:	e6d3      	b.n	80227a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80229f8:	2900      	cmp	r1, #0
 80229fa:	f43f af5b 	beq.w	80228b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80229fe:	eb0a 0003 	add.w	r0, sl, r3
 8022a02:	0843      	lsrs	r3, r0, #1
 8022a04:	07c0      	lsls	r0, r0, #31
 8022a06:	5cfb      	ldrb	r3, [r7, r3]
 8022a08:	bf54      	ite	pl
 8022a0a:	f003 030f 	andpl.w	r3, r3, #15
 8022a0e:	111b      	asrmi	r3, r3, #4
 8022a10:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022a14:	b2db      	uxtb	r3, r3
 8022a16:	930a      	str	r3, [sp, #40]	; 0x28
 8022a18:	e74c      	b.n	80228b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	f43f af77 	beq.w	802290e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022a20:	4a73      	ldr	r2, [pc, #460]	; (8022bf0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022a22:	fa1f fe83 	uxth.w	lr, r3
 8022a26:	f8b8 c000 	ldrh.w	ip, [r8]
 8022a2a:	43db      	mvns	r3, r3
 8022a2c:	6810      	ldr	r0, [r2, #0]
 8022a2e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022a32:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022a36:	b2db      	uxtb	r3, r3
 8022a38:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022a3c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022a40:	fb12 f20e 	smulbb	r2, r2, lr
 8022a44:	b2c0      	uxtb	r0, r0
 8022a46:	fb1b fb0e 	smulbb	fp, fp, lr
 8022a4a:	fb01 2103 	mla	r1, r1, r3, r2
 8022a4e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022a52:	fb10 fe0e 	smulbb	lr, r0, lr
 8022a56:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022a5a:	b289      	uxth	r1, r1
 8022a5c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022a60:	fa5f fc8c 	uxtb.w	ip, ip
 8022a64:	fb02 b203 	mla	r2, r2, r3, fp
 8022a68:	1c48      	adds	r0, r1, #1
 8022a6a:	fb0c e303 	mla	r3, ip, r3, lr
 8022a6e:	b292      	uxth	r2, r2
 8022a70:	b29b      	uxth	r3, r3
 8022a72:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022a76:	f102 0b01 	add.w	fp, r2, #1
 8022a7a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8022a7e:	1c59      	adds	r1, r3, #1
 8022a80:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022a84:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022a88:	0952      	lsrs	r2, r2, #5
 8022a8a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022a8e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022a92:	4301      	orrs	r1, r0
 8022a94:	4311      	orrs	r1, r2
 8022a96:	f8a8 1000 	strh.w	r1, [r8]
 8022a9a:	e738      	b.n	802290e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022a9c:	f113 0b01 	adds.w	fp, r3, #1
 8022aa0:	f53f af35 	bmi.w	802290e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022aa4:	45dc      	cmp	ip, fp
 8022aa6:	f6ff af32 	blt.w	802290e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022aaa:	f110 0b01 	adds.w	fp, r0, #1
 8022aae:	f53f af2e 	bmi.w	802290e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022ab2:	45de      	cmp	lr, fp
 8022ab4:	f6ff af2b 	blt.w	802290e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022ab8:	9302      	str	r3, [sp, #8]
 8022aba:	fa0f f38e 	sxth.w	r3, lr
 8022abe:	9a08      	ldr	r2, [sp, #32]
 8022ac0:	9301      	str	r3, [sp, #4]
 8022ac2:	fa0f f38c 	sxth.w	r3, ip
 8022ac6:	9105      	str	r1, [sp, #20]
 8022ac8:	4641      	mov	r1, r8
 8022aca:	9300      	str	r3, [sp, #0]
 8022acc:	4653      	mov	r3, sl
 8022ace:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022ad2:	463a      	mov	r2, r7
 8022ad4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022ad6:	f7ff fd73 	bl	80225c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8022ada:	e718      	b.n	802290e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022adc:	1422      	asrs	r2, r4, #16
 8022ade:	9906      	ldr	r1, [sp, #24]
 8022ae0:	1433      	asrs	r3, r6, #16
 8022ae2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022ae6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022aea:	fb01 2303 	mla	r3, r1, r3, r2
 8022aee:	085a      	lsrs	r2, r3, #1
 8022af0:	07d9      	lsls	r1, r3, #31
 8022af2:	5cba      	ldrb	r2, [r7, r2]
 8022af4:	bf54      	ite	pl
 8022af6:	f002 020f 	andpl.w	r2, r2, #15
 8022afa:	1112      	asrmi	r2, r2, #4
 8022afc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022b00:	b2d2      	uxtb	r2, r2
 8022b02:	2800      	cmp	r0, #0
 8022b04:	d063      	beq.n	8022bce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022b06:	f103 0a01 	add.w	sl, r3, #1
 8022b0a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022b0e:	f01a 0f01 	tst.w	sl, #1
 8022b12:	5c79      	ldrb	r1, [r7, r1]
 8022b14:	bf0c      	ite	eq
 8022b16:	f001 010f 	andeq.w	r1, r1, #15
 8022b1a:	1109      	asrne	r1, r1, #4
 8022b1c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022b20:	b2c9      	uxtb	r1, r1
 8022b22:	910f      	str	r1, [sp, #60]	; 0x3c
 8022b24:	f1bc 0f00 	cmp.w	ip, #0
 8022b28:	d01a      	beq.n	8022b60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022b2a:	9908      	ldr	r1, [sp, #32]
 8022b2c:	440b      	add	r3, r1
 8022b2e:	0859      	lsrs	r1, r3, #1
 8022b30:	f013 0f01 	tst.w	r3, #1
 8022b34:	f103 0301 	add.w	r3, r3, #1
 8022b38:	5c79      	ldrb	r1, [r7, r1]
 8022b3a:	bf0c      	ite	eq
 8022b3c:	f001 010f 	andeq.w	r1, r1, #15
 8022b40:	1109      	asrne	r1, r1, #4
 8022b42:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022b46:	b2c9      	uxtb	r1, r1
 8022b48:	910b      	str	r1, [sp, #44]	; 0x2c
 8022b4a:	0859      	lsrs	r1, r3, #1
 8022b4c:	07db      	lsls	r3, r3, #31
 8022b4e:	5c79      	ldrb	r1, [r7, r1]
 8022b50:	bf54      	ite	pl
 8022b52:	f001 010f 	andpl.w	r1, r1, #15
 8022b56:	1109      	asrmi	r1, r1, #4
 8022b58:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022b5c:	b2c9      	uxtb	r1, r1
 8022b5e:	9110      	str	r1, [sp, #64]	; 0x40
 8022b60:	b280      	uxth	r0, r0
 8022b62:	fa1f fc8c 	uxth.w	ip, ip
 8022b66:	fb00 f30c 	mul.w	r3, r0, ip
 8022b6a:	0100      	lsls	r0, r0, #4
 8022b6c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8022b70:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022b74:	1ac0      	subs	r0, r0, r3
 8022b76:	fa1f fc8c 	uxth.w	ip, ip
 8022b7a:	b280      	uxth	r0, r0
 8022b7c:	eba1 010c 	sub.w	r1, r1, ip
 8022b80:	fa1f fa81 	uxth.w	sl, r1
 8022b84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022b86:	4348      	muls	r0, r1
 8022b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022b8a:	fb02 020a 	mla	r2, r2, sl, r0
 8022b8e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022b92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022b94:	fb03 c302 	mla	r3, r3, r2, ip
 8022b98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b9c:	2bff      	cmp	r3, #255	; 0xff
 8022b9e:	d12b      	bne.n	8022bf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8022ba0:	4b13      	ldr	r3, [pc, #76]	; (8022bf0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022ba2:	681a      	ldr	r2, [r3, #0]
 8022ba4:	4b13      	ldr	r3, [pc, #76]	; (8022bf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022ba6:	0951      	lsrs	r1, r2, #5
 8022ba8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022bac:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022bb0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022bb4:	430b      	orrs	r3, r1
 8022bb6:	4313      	orrs	r3, r2
 8022bb8:	f8ae 3000 	strh.w	r3, [lr]
 8022bbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022bbe:	f10e 0e02 	add.w	lr, lr, #2
 8022bc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8022bc6:	441c      	add	r4, r3
 8022bc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022bca:	441e      	add	r6, r3
 8022bcc:	e6cc      	b.n	8022968 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022bce:	f1bc 0f00 	cmp.w	ip, #0
 8022bd2:	d0c5      	beq.n	8022b60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022bd4:	9908      	ldr	r1, [sp, #32]
 8022bd6:	440b      	add	r3, r1
 8022bd8:	0859      	lsrs	r1, r3, #1
 8022bda:	07db      	lsls	r3, r3, #31
 8022bdc:	5c79      	ldrb	r1, [r7, r1]
 8022bde:	bf54      	ite	pl
 8022be0:	f001 010f 	andpl.w	r1, r1, #15
 8022be4:	1109      	asrmi	r1, r1, #4
 8022be6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022bea:	b2c9      	uxtb	r1, r1
 8022bec:	910b      	str	r1, [sp, #44]	; 0x2c
 8022bee:	e7b7      	b.n	8022b60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022bf0:	20027ea8 	.word	0x20027ea8
 8022bf4:	fffff800 	.word	0xfffff800
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	d0df      	beq.n	8022bbc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8022bfc:	4a21      	ldr	r2, [pc, #132]	; (8022c84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8022bfe:	fa1f fa83 	uxth.w	sl, r3
 8022c02:	f8be c000 	ldrh.w	ip, [lr]
 8022c06:	43db      	mvns	r3, r3
 8022c08:	6810      	ldr	r0, [r2, #0]
 8022c0a:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022c0e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022c12:	b2db      	uxtb	r3, r3
 8022c14:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022c18:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022c1c:	fb12 f20a 	smulbb	r2, r2, sl
 8022c20:	b2c0      	uxtb	r0, r0
 8022c22:	fb1b fb0a 	smulbb	fp, fp, sl
 8022c26:	fb01 2103 	mla	r1, r1, r3, r2
 8022c2a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022c2e:	fb10 f00a 	smulbb	r0, r0, sl
 8022c32:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022c36:	b289      	uxth	r1, r1
 8022c38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022c3c:	fa5f fc8c 	uxtb.w	ip, ip
 8022c40:	fb02 b203 	mla	r2, r2, r3, fp
 8022c44:	fb0c 0003 	mla	r0, ip, r3, r0
 8022c48:	1c4b      	adds	r3, r1, #1
 8022c4a:	b292      	uxth	r2, r2
 8022c4c:	b280      	uxth	r0, r0
 8022c4e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022c52:	f100 0b01 	add.w	fp, r0, #1
 8022c56:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8022c5a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8022c5e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8022c62:	ea4b 0101 	orr.w	r1, fp, r1
 8022c66:	f102 0b01 	add.w	fp, r2, #1
 8022c6a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022c6e:	0952      	lsrs	r2, r2, #5
 8022c70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c74:	4311      	orrs	r1, r2
 8022c76:	f8ae 1000 	strh.w	r1, [lr]
 8022c7a:	e79f      	b.n	8022bbc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8022c7c:	b013      	add	sp, #76	; 0x4c
 8022c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c82:	bf00      	nop
 8022c84:	20027ea8 	.word	0x20027ea8

08022c88 <CRC_Lock>:
 8022c88:	4a20      	ldr	r2, [pc, #128]	; (8022d0c <CRC_Lock+0x84>)
 8022c8a:	b530      	push	{r4, r5, lr}
 8022c8c:	6813      	ldr	r3, [r2, #0]
 8022c8e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8022c92:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022c96:	f023 0301 	bic.w	r3, r3, #1
 8022c9a:	6013      	str	r3, [r2, #0]
 8022c9c:	4b1c      	ldr	r3, [pc, #112]	; (8022d10 <CRC_Lock+0x88>)
 8022c9e:	681a      	ldr	r2, [r3, #0]
 8022ca0:	4022      	ands	r2, r4
 8022ca2:	42aa      	cmp	r2, r5
 8022ca4:	d005      	beq.n	8022cb2 <CRC_Lock+0x2a>
 8022ca6:	681b      	ldr	r3, [r3, #0]
 8022ca8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022cac:	4023      	ands	r3, r4
 8022cae:	4293      	cmp	r3, r2
 8022cb0:	d124      	bne.n	8022cfc <CRC_Lock+0x74>
 8022cb2:	4b18      	ldr	r3, [pc, #96]	; (8022d14 <CRC_Lock+0x8c>)
 8022cb4:	681b      	ldr	r3, [r3, #0]
 8022cb6:	bb0b      	cbnz	r3, 8022cfc <CRC_Lock+0x74>
 8022cb8:	4b17      	ldr	r3, [pc, #92]	; (8022d18 <CRC_Lock+0x90>)
 8022cba:	681a      	ldr	r2, [r3, #0]
 8022cbc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022cc0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8022cc4:	d00d      	beq.n	8022ce2 <CRC_Lock+0x5a>
 8022cc6:	681a      	ldr	r2, [r3, #0]
 8022cc8:	f240 4483 	movw	r4, #1155	; 0x483
 8022ccc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022cd0:	42a2      	cmp	r2, r4
 8022cd2:	d006      	beq.n	8022ce2 <CRC_Lock+0x5a>
 8022cd4:	681b      	ldr	r3, [r3, #0]
 8022cd6:	f240 4285 	movw	r2, #1157	; 0x485
 8022cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022cde:	4293      	cmp	r3, r2
 8022ce0:	d10c      	bne.n	8022cfc <CRC_Lock+0x74>
 8022ce2:	4b0e      	ldr	r3, [pc, #56]	; (8022d1c <CRC_Lock+0x94>)
 8022ce4:	2201      	movs	r2, #1
 8022ce6:	601a      	str	r2, [r3, #0]
 8022ce8:	681a      	ldr	r2, [r3, #0]
 8022cea:	2a00      	cmp	r2, #0
 8022cec:	d1fc      	bne.n	8022ce8 <CRC_Lock+0x60>
 8022cee:	4b0c      	ldr	r3, [pc, #48]	; (8022d20 <CRC_Lock+0x98>)
 8022cf0:	6018      	str	r0, [r3, #0]
 8022cf2:	6818      	ldr	r0, [r3, #0]
 8022cf4:	1a43      	subs	r3, r0, r1
 8022cf6:	4258      	negs	r0, r3
 8022cf8:	4158      	adcs	r0, r3
 8022cfa:	bd30      	pop	{r4, r5, pc}
 8022cfc:	4b09      	ldr	r3, [pc, #36]	; (8022d24 <CRC_Lock+0x9c>)
 8022cfe:	2201      	movs	r2, #1
 8022d00:	601a      	str	r2, [r3, #0]
 8022d02:	681a      	ldr	r2, [r3, #0]
 8022d04:	2a00      	cmp	r2, #0
 8022d06:	d1fc      	bne.n	8022d02 <CRC_Lock+0x7a>
 8022d08:	4b07      	ldr	r3, [pc, #28]	; (8022d28 <CRC_Lock+0xa0>)
 8022d0a:	e7f1      	b.n	8022cf0 <CRC_Lock+0x68>
 8022d0c:	e0002000 	.word	0xe0002000
 8022d10:	e000ed00 	.word	0xe000ed00
 8022d14:	e0042000 	.word	0xe0042000
 8022d18:	5c001000 	.word	0x5c001000
 8022d1c:	58024c08 	.word	0x58024c08
 8022d20:	58024c00 	.word	0x58024c00
 8022d24:	40023008 	.word	0x40023008
 8022d28:	40023000 	.word	0x40023000

08022d2c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022d2c:	6101      	str	r1, [r0, #16]
 8022d2e:	4770      	bx	lr

08022d30 <_ZN8touchgfx8Gestures4tickEv>:
 8022d30:	7b83      	ldrb	r3, [r0, #14]
 8022d32:	b14b      	cbz	r3, 8022d48 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022d34:	8903      	ldrh	r3, [r0, #8]
 8022d36:	3301      	adds	r3, #1
 8022d38:	b29b      	uxth	r3, r3
 8022d3a:	2b07      	cmp	r3, #7
 8022d3c:	8103      	strh	r3, [r0, #8]
 8022d3e:	bf81      	itttt	hi
 8022d40:	2300      	movhi	r3, #0
 8022d42:	8143      	strhhi	r3, [r0, #10]
 8022d44:	8183      	strhhi	r3, [r0, #12]
 8022d46:	7383      	strbhi	r3, [r0, #14]
 8022d48:	4770      	bx	lr
	...

08022d4c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022d4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022d50:	4698      	mov	r8, r3
 8022d52:	8883      	ldrh	r3, [r0, #4]
 8022d54:	4604      	mov	r4, r0
 8022d56:	4617      	mov	r7, r2
 8022d58:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022d5c:	eba8 0303 	sub.w	r3, r8, r3
 8022d60:	4a19      	ldr	r2, [pc, #100]	; (8022dc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8022d62:	460e      	mov	r6, r1
 8022d64:	b21b      	sxth	r3, r3
 8022d66:	88c1      	ldrh	r1, [r0, #6]
 8022d68:	9200      	str	r2, [sp, #0]
 8022d6a:	2000      	movs	r0, #0
 8022d6c:	2b00      	cmp	r3, #0
 8022d6e:	8aa2      	ldrh	r2, [r4, #20]
 8022d70:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8022d74:	bfb8      	it	lt
 8022d76:	425b      	neglt	r3, r3
 8022d78:	f88d 0004 	strb.w	r0, [sp, #4]
 8022d7c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022d80:	b21b      	sxth	r3, r3
 8022d82:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022d86:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022d8a:	4293      	cmp	r3, r2
 8022d8c:	dc07      	bgt.n	8022d9e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8022d8e:	1a69      	subs	r1, r5, r1
 8022d90:	b209      	sxth	r1, r1
 8022d92:	2900      	cmp	r1, #0
 8022d94:	bfb8      	it	lt
 8022d96:	4249      	neglt	r1, r1
 8022d98:	b209      	sxth	r1, r1
 8022d9a:	428a      	cmp	r2, r1
 8022d9c:	da10      	bge.n	8022dc0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8022d9e:	6920      	ldr	r0, [r4, #16]
 8022da0:	4669      	mov	r1, sp
 8022da2:	eba8 0606 	sub.w	r6, r8, r6
 8022da6:	1bef      	subs	r7, r5, r7
 8022da8:	6803      	ldr	r3, [r0, #0]
 8022daa:	685b      	ldr	r3, [r3, #4]
 8022dac:	4798      	blx	r3
 8022dae:	2300      	movs	r3, #0
 8022db0:	2001      	movs	r0, #1
 8022db2:	8166      	strh	r6, [r4, #10]
 8022db4:	8123      	strh	r3, [r4, #8]
 8022db6:	81a7      	strh	r7, [r4, #12]
 8022db8:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022dbc:	80e5      	strh	r5, [r4, #6]
 8022dbe:	73a0      	strb	r0, [r4, #14]
 8022dc0:	b004      	add	sp, #16
 8022dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022dc6:	bf00      	nop
 8022dc8:	08029f8c 	.word	0x08029f8c

08022dcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022dce:	461e      	mov	r6, r3
 8022dd0:	1e4b      	subs	r3, r1, #1
 8022dd2:	b085      	sub	sp, #20
 8022dd4:	4604      	mov	r4, r0
 8022dd6:	2b01      	cmp	r3, #1
 8022dd8:	460d      	mov	r5, r1
 8022dda:	4617      	mov	r7, r2
 8022ddc:	d84b      	bhi.n	8022e76 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022dde:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022de2:	1cd3      	adds	r3, r2, #3
 8022de4:	b29b      	uxth	r3, r3
 8022de6:	2b06      	cmp	r3, #6
 8022de8:	d916      	bls.n	8022e18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022dea:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8022e8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022dee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022df2:	f8cd c004 	str.w	ip, [sp, #4]
 8022df6:	f04f 0c00 	mov.w	ip, #0
 8022dfa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022dfe:	6900      	ldr	r0, [r0, #16]
 8022e00:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022e04:	a901      	add	r1, sp, #4
 8022e06:	f88d c008 	strb.w	ip, [sp, #8]
 8022e0a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022e0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022e12:	6803      	ldr	r3, [r0, #0]
 8022e14:	689b      	ldr	r3, [r3, #8]
 8022e16:	4798      	blx	r3
 8022e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022e1c:	1cd3      	adds	r3, r2, #3
 8022e1e:	b29b      	uxth	r3, r3
 8022e20:	2b06      	cmp	r3, #6
 8022e22:	d916      	bls.n	8022e52 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022e24:	f8df c064 	ldr.w	ip, [pc, #100]	; 8022e8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022e28:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022e2c:	f8cd c004 	str.w	ip, [sp, #4]
 8022e30:	f04f 0c01 	mov.w	ip, #1
 8022e34:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022e38:	6920      	ldr	r0, [r4, #16]
 8022e3a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022e3e:	a901      	add	r1, sp, #4
 8022e40:	f88d c008 	strb.w	ip, [sp, #8]
 8022e44:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022e48:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022e4c:	6803      	ldr	r3, [r0, #0]
 8022e4e:	689b      	ldr	r3, [r3, #8]
 8022e50:	4798      	blx	r3
 8022e52:	4b0d      	ldr	r3, [pc, #52]	; (8022e88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8022e54:	a901      	add	r1, sp, #4
 8022e56:	6920      	ldr	r0, [r4, #16]
 8022e58:	9301      	str	r3, [sp, #4]
 8022e5a:	2300      	movs	r3, #0
 8022e5c:	f88d 5008 	strb.w	r5, [sp, #8]
 8022e60:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022e64:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022e68:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022e6c:	6803      	ldr	r3, [r0, #0]
 8022e6e:	681b      	ldr	r3, [r3, #0]
 8022e70:	4798      	blx	r3
 8022e72:	b005      	add	sp, #20
 8022e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e76:	2900      	cmp	r1, #0
 8022e78:	d1eb      	bne.n	8022e52 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022e7a:	80a2      	strh	r2, [r4, #4]
 8022e7c:	80c6      	strh	r6, [r0, #6]
 8022e7e:	60a1      	str	r1, [r4, #8]
 8022e80:	81a1      	strh	r1, [r4, #12]
 8022e82:	73a1      	strb	r1, [r4, #14]
 8022e84:	e7e5      	b.n	8022e52 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022e86:	bf00      	nop
 8022e88:	08029f78 	.word	0x08029f78
 8022e8c:	08029fa0 	.word	0x08029fa0

08022e90 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8022e90:	10c9      	asrs	r1, r1, #3
 8022e92:	2900      	cmp	r1, #0
 8022e94:	bfb8      	it	lt
 8022e96:	4249      	neglt	r1, r1
 8022e98:	2801      	cmp	r0, #1
 8022e9a:	d108      	bne.n	8022eae <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8022e9c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8022ea0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8022ea4:	4601      	mov	r1, r0
 8022ea6:	dd02      	ble.n	8022eae <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8022ea8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8022eac:	4770      	bx	lr
 8022eae:	29ff      	cmp	r1, #255	; 0xff
 8022eb0:	bfa8      	it	ge
 8022eb2:	21ff      	movge	r1, #255	; 0xff
 8022eb4:	4608      	mov	r0, r1
 8022eb6:	4770      	bx	lr

08022eb8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8022eb8:	b410      	push	{r4}
 8022eba:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8022ebe:	429c      	cmp	r4, r3
 8022ec0:	d803      	bhi.n	8022eca <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8022ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022ec6:	f7ef ba71 	b.w	80123ac <_ZN8touchgfx7Outline6lineToEii>
 8022eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022ece:	4770      	bx	lr

08022ed0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8022ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ed4:	b08b      	sub	sp, #44	; 0x2c
 8022ed6:	4606      	mov	r6, r0
 8022ed8:	468a      	mov	sl, r1
 8022eda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022ede:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8022ee2:	9308      	str	r3, [sp, #32]
 8022ee4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8022ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8022eea:	f7ef fbca 	bl	8012682 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8022eee:	68b5      	ldr	r5, [r6, #8]
 8022ef0:	4604      	mov	r4, r0
 8022ef2:	2d00      	cmp	r5, #0
 8022ef4:	d044      	beq.n	8022f80 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8022ef6:	6873      	ldr	r3, [r6, #4]
 8022ef8:	42ab      	cmp	r3, r5
 8022efa:	d33d      	bcc.n	8022f78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8022efc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8022f00:	f04f 0800 	mov.w	r8, #0
 8022f04:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8022f08:	eb02 0b03 	add.w	fp, r2, r3
 8022f0c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8022f10:	fb02 1203 	mla	r2, r2, r3, r1
 8022f14:	9205      	str	r2, [sp, #20]
 8022f16:	1e6a      	subs	r2, r5, #1
 8022f18:	9204      	str	r2, [sp, #16]
 8022f1a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8022f1e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022f22:	454b      	cmp	r3, r9
 8022f24:	463a      	mov	r2, r7
 8022f26:	d008      	beq.n	8022f3a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8022f28:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8022f2c:	eb03 0b09 	add.w	fp, r3, r9
 8022f30:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8022f34:	fb03 1309 	mla	r3, r3, r9, r1
 8022f38:	9305      	str	r3, [sp, #20]
 8022f3a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8022f3e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8022f42:	4498      	add	r8, r3
 8022f44:	9b04      	ldr	r3, [sp, #16]
 8022f46:	3b01      	subs	r3, #1
 8022f48:	9304      	str	r3, [sp, #16]
 8022f4a:	9b04      	ldr	r3, [sp, #16]
 8022f4c:	3301      	adds	r3, #1
 8022f4e:	d015      	beq.n	8022f7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8022f50:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8022f54:	42bb      	cmp	r3, r7
 8022f56:	d117      	bne.n	8022f88 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8022f58:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8022f5c:	9b04      	ldr	r3, [sp, #16]
 8022f5e:	4548      	cmp	r0, r9
 8022f60:	f103 33ff 	add.w	r3, r3, #4294967295
 8022f64:	d17d      	bne.n	8023062 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8022f66:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8022f6a:	4401      	add	r1, r0
 8022f6c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022f70:	4480      	add	r8, r0
 8022f72:	e7e9      	b.n	8022f48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8022f74:	461f      	mov	r7, r3
 8022f76:	e042      	b.n	8022ffe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8022f78:	2000      	movs	r0, #0
 8022f7a:	e002      	b.n	8022f82 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8022f7c:	2900      	cmp	r1, #0
 8022f7e:	d16d      	bne.n	802305c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8022f80:	2001      	movs	r0, #1
 8022f82:	b00b      	add	sp, #44	; 0x2c
 8022f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f88:	b379      	cbz	r1, 8022fea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8022f8a:	2f00      	cmp	r7, #0
 8022f8c:	db29      	blt.n	8022fe2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022f8e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8022f92:	42bb      	cmp	r3, r7
 8022f94:	dd25      	ble.n	8022fe2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022f96:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8022f9a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8022f9e:	f7ff ff77 	bl	8022e90 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8022fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fa4:	fb10 f003 	smulbb	r0, r0, r3
 8022fa8:	b280      	uxth	r0, r0
 8022faa:	1c41      	adds	r1, r0, #1
 8022fac:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022fb0:	1209      	asrs	r1, r1, #8
 8022fb2:	f011 0fff 	tst.w	r1, #255	; 0xff
 8022fb6:	d014      	beq.n	8022fe2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022fb8:	b2c9      	uxtb	r1, r1
 8022fba:	9808      	ldr	r0, [sp, #32]
 8022fbc:	b2ba      	uxth	r2, r7
 8022fbe:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8022fc0:	9102      	str	r1, [sp, #8]
 8022fc2:	2101      	movs	r1, #1
 8022fc4:	4413      	add	r3, r2
 8022fc6:	4402      	add	r2, r0
 8022fc8:	9101      	str	r1, [sp, #4]
 8022fca:	fa0f f18b 	sxth.w	r1, fp
 8022fce:	f8da 0000 	ldr.w	r0, [sl]
 8022fd2:	b21b      	sxth	r3, r3
 8022fd4:	9100      	str	r1, [sp, #0]
 8022fd6:	b212      	sxth	r2, r2
 8022fd8:	6941      	ldr	r1, [r0, #20]
 8022fda:	4650      	mov	r0, sl
 8022fdc:	460d      	mov	r5, r1
 8022fde:	9905      	ldr	r1, [sp, #20]
 8022fe0:	47a8      	blx	r5
 8022fe2:	9b04      	ldr	r3, [sp, #16]
 8022fe4:	1c7a      	adds	r2, r7, #1
 8022fe6:	3301      	adds	r3, #1
 8022fe8:	d0ca      	beq.n	8022f80 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8022fea:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022fee:	1abb      	subs	r3, r7, r2
 8022ff0:	2b00      	cmp	r3, #0
 8022ff2:	dd31      	ble.n	8023058 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8022ff4:	2a00      	cmp	r2, #0
 8022ff6:	dabd      	bge.n	8022f74 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8022ff8:	2f00      	cmp	r7, #0
 8022ffa:	dd2d      	ble.n	8023058 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8022ffc:	2200      	movs	r2, #0
 8022ffe:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8023002:	19d1      	adds	r1, r2, r7
 8023004:	4299      	cmp	r1, r3
 8023006:	db02      	blt.n	802300e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8023008:	1a9f      	subs	r7, r3, r2
 802300a:	2f00      	cmp	r7, #0
 802300c:	dd24      	ble.n	8023058 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802300e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8023012:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8023016:	f7ff ff3b 	bl	8022e90 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802301a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802301c:	fb10 f003 	smulbb	r0, r0, r3
 8023020:	b280      	uxth	r0, r0
 8023022:	1c41      	adds	r1, r0, #1
 8023024:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023028:	1209      	asrs	r1, r1, #8
 802302a:	f011 0fff 	tst.w	r1, #255	; 0xff
 802302e:	d013      	beq.n	8023058 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8023030:	b292      	uxth	r2, r2
 8023032:	9808      	ldr	r0, [sp, #32]
 8023034:	b2c9      	uxtb	r1, r1
 8023036:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8023038:	b23f      	sxth	r7, r7
 802303a:	4413      	add	r3, r2
 802303c:	9102      	str	r1, [sp, #8]
 802303e:	4402      	add	r2, r0
 8023040:	fa0f f18b 	sxth.w	r1, fp
 8023044:	f8da 0000 	ldr.w	r0, [sl]
 8023048:	b21b      	sxth	r3, r3
 802304a:	9100      	str	r1, [sp, #0]
 802304c:	b212      	sxth	r2, r2
 802304e:	9701      	str	r7, [sp, #4]
 8023050:	9905      	ldr	r1, [sp, #20]
 8023052:	6947      	ldr	r7, [r0, #20]
 8023054:	4650      	mov	r0, sl
 8023056:	47b8      	blx	r7
 8023058:	464b      	mov	r3, r9
 802305a:	e75e      	b.n	8022f1a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802305c:	2f00      	cmp	r7, #0
 802305e:	da96      	bge.n	8022f8e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8023060:	e78e      	b.n	8022f80 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8023062:	2900      	cmp	r1, #0
 8023064:	d0f8      	beq.n	8023058 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8023066:	e790      	b.n	8022f8a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08023068 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023068:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802306c:	4b4b      	ldr	r3, [pc, #300]	; (802319c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 802306e:	2500      	movs	r5, #0
 8023070:	f100 0620 	add.w	r6, r0, #32
 8023074:	4604      	mov	r4, r0
 8023076:	f100 0718 	add.w	r7, r0, #24
 802307a:	4690      	mov	r8, r2
 802307c:	e9c0 3100 	strd	r3, r1, [r0]
 8023080:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8023084:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8023088:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802308c:	4630      	mov	r0, r6
 802308e:	f7ee fcd3 	bl	8011a38 <_ZN8touchgfx7OutlineC1Ev>
 8023092:	2301      	movs	r3, #1
 8023094:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8023098:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802309c:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80230a0:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80230a4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80230a8:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80230ac:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80230b0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80230b4:	9500      	str	r5, [sp, #0]
 80230b6:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80230ba:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80230be:	f9b8 2000 	ldrsh.w	r2, [r8]
 80230c2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80230c6:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80230ca:	4410      	add	r0, r2
 80230cc:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80230d0:	b280      	uxth	r0, r0
 80230d2:	fa0f fa80 	sxth.w	sl, r0
 80230d6:	45aa      	cmp	sl, r5
 80230d8:	dd5c      	ble.n	8023194 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80230da:	4591      	cmp	r9, r2
 80230dc:	dd5a      	ble.n	8023194 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80230de:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80230e2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80230e6:	440b      	add	r3, r1
 80230e8:	b29b      	uxth	r3, r3
 80230ea:	b21d      	sxth	r5, r3
 80230ec:	2d00      	cmp	r5, #0
 80230ee:	dd51      	ble.n	8023194 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80230f0:	458e      	cmp	lr, r1
 80230f2:	dd4f      	ble.n	8023194 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80230f4:	45d1      	cmp	r9, sl
 80230f6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80230fa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80230fe:	bfb8      	it	lt
 8023100:	fa1f f089 	uxthlt.w	r0, r9
 8023104:	45ae      	cmp	lr, r5
 8023106:	f8ad 2000 	strh.w	r2, [sp]
 802310a:	bfb8      	it	lt
 802310c:	fa1f f38e 	uxthlt.w	r3, lr
 8023110:	1a80      	subs	r0, r0, r2
 8023112:	f8ad 1002 	strh.w	r1, [sp, #2]
 8023116:	1a5b      	subs	r3, r3, r1
 8023118:	f8ad 0004 	strh.w	r0, [sp, #4]
 802311c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023120:	466d      	mov	r5, sp
 8023122:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023126:	e887 0003 	stmia.w	r7, {r0, r1}
 802312a:	f8dc 3000 	ldr.w	r3, [ip]
 802312e:	4660      	mov	r0, ip
 8023130:	4639      	mov	r1, r7
 8023132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023134:	4798      	blx	r3
 8023136:	6861      	ldr	r1, [r4, #4]
 8023138:	4628      	mov	r0, r5
 802313a:	3104      	adds	r1, #4
 802313c:	f7f0 fe1a 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023140:	4638      	mov	r0, r7
 8023142:	f7f0 fdd3 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023146:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802314a:	f8bd 2000 	ldrh.w	r2, [sp]
 802314e:	4630      	mov	r0, r6
 8023150:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8023154:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8023158:	f7ee fc52 	bl	8011a00 <_ZN8touchgfx7Outline5resetEv>
 802315c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8023160:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8023164:	4620      	mov	r0, r4
 8023166:	015b      	lsls	r3, r3, #5
 8023168:	60a3      	str	r3, [r4, #8]
 802316a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802316e:	015b      	lsls	r3, r3, #5
 8023170:	60e3      	str	r3, [r4, #12]
 8023172:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8023176:	015b      	lsls	r3, r3, #5
 8023178:	6123      	str	r3, [r4, #16]
 802317a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802317e:	015b      	lsls	r3, r3, #5
 8023180:	6163      	str	r3, [r4, #20]
 8023182:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8023186:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802318a:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802318e:	b002      	add	sp, #8
 8023190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023194:	2300      	movs	r3, #0
 8023196:	9301      	str	r3, [sp, #4]
 8023198:	e7c2      	b.n	8023120 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 802319a:	bf00      	nop
 802319c:	08029998 	.word	0x08029998

080231a0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80231a0:	4b07      	ldr	r3, [pc, #28]	; (80231c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80231a2:	b510      	push	{r4, lr}
 80231a4:	781b      	ldrb	r3, [r3, #0]
 80231a6:	2b01      	cmp	r3, #1
 80231a8:	d108      	bne.n	80231bc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80231aa:	6843      	ldr	r3, [r0, #4]
 80231ac:	6814      	ldr	r4, [r2, #0]
 80231ae:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80231b2:	680b      	ldr	r3, [r1, #0]
 80231b4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80231b8:	6013      	str	r3, [r2, #0]
 80231ba:	600c      	str	r4, [r1, #0]
 80231bc:	bd10      	pop	{r4, pc}
 80231be:	bf00      	nop
 80231c0:	20027e90 	.word	0x20027e90

080231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80231c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80231c6:	ab02      	add	r3, sp, #8
 80231c8:	4604      	mov	r4, r0
 80231ca:	9101      	str	r1, [sp, #4]
 80231cc:	a901      	add	r1, sp, #4
 80231ce:	f843 2d08 	str.w	r2, [r3, #-8]!
 80231d2:	461a      	mov	r2, r3
 80231d4:	f7ff ffe4 	bl	80231a0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80231d8:	68a3      	ldr	r3, [r4, #8]
 80231da:	9901      	ldr	r1, [sp, #4]
 80231dc:	9a00      	ldr	r2, [sp, #0]
 80231de:	1ac9      	subs	r1, r1, r3
 80231e0:	68e3      	ldr	r3, [r4, #12]
 80231e2:	1ad2      	subs	r2, r2, r3
 80231e4:	9101      	str	r1, [sp, #4]
 80231e6:	2a00      	cmp	r2, #0
 80231e8:	9200      	str	r2, [sp, #0]
 80231ea:	db1c      	blt.n	8023226 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80231ec:	6963      	ldr	r3, [r4, #20]
 80231ee:	429a      	cmp	r2, r3
 80231f0:	bfac      	ite	ge
 80231f2:	2002      	movge	r0, #2
 80231f4:	2000      	movlt	r0, #0
 80231f6:	2900      	cmp	r1, #0
 80231f8:	db17      	blt.n	802322a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80231fa:	6923      	ldr	r3, [r4, #16]
 80231fc:	4299      	cmp	r1, r3
 80231fe:	bfac      	ite	ge
 8023200:	2308      	movge	r3, #8
 8023202:	2300      	movlt	r3, #0
 8023204:	4303      	orrs	r3, r0
 8023206:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802320a:	b2dd      	uxtb	r5, r3
 802320c:	b978      	cbnz	r0, 802322e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802320e:	f104 0020 	add.w	r0, r4, #32
 8023212:	f7ff fe51 	bl	8022eb8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023216:	9b01      	ldr	r3, [sp, #4]
 8023218:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802321c:	65e3      	str	r3, [r4, #92]	; 0x5c
 802321e:	9b00      	ldr	r3, [sp, #0]
 8023220:	6623      	str	r3, [r4, #96]	; 0x60
 8023222:	b002      	add	sp, #8
 8023224:	bd70      	pop	{r4, r5, r6, pc}
 8023226:	2001      	movs	r0, #1
 8023228:	e7e5      	b.n	80231f6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802322a:	2304      	movs	r3, #4
 802322c:	e7ea      	b.n	8023204 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802322e:	b113      	cbz	r3, 8023236 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8023230:	ea10 0305 	ands.w	r3, r0, r5
 8023234:	d11d      	bne.n	8023272 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 8023236:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802323a:	f104 0620 	add.w	r6, r4, #32
 802323e:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8023242:	b193      	cbz	r3, 802326a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023244:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8023248:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802324c:	4298      	cmp	r0, r3
 802324e:	d802      	bhi.n	8023256 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8023250:	4630      	mov	r0, r6
 8023252:	f7ef f8c5 	bl	80123e0 <_ZN8touchgfx7Outline6moveToEii>
 8023256:	2300      	movs	r3, #0
 8023258:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802325c:	2301      	movs	r3, #1
 802325e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8023262:	4630      	mov	r0, r6
 8023264:	e9dd 2100 	ldrd	r2, r1, [sp]
 8023268:	e7d3      	b.n	8023212 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802326a:	4630      	mov	r0, r6
 802326c:	f7ff fe24 	bl	8022eb8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023270:	e7f7      	b.n	8023262 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8023272:	461d      	mov	r5, r3
 8023274:	e7cf      	b.n	8023216 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

08023276 <_ZN8touchgfx6Canvas5closeEv>:
 8023276:	b538      	push	{r3, r4, r5, lr}
 8023278:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802327c:	4604      	mov	r4, r0
 802327e:	b993      	cbnz	r3, 80232a6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023280:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8023284:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8023288:	4213      	tst	r3, r2
 802328a:	d10c      	bne.n	80232a6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802328c:	f100 0520 	add.w	r5, r0, #32
 8023290:	b123      	cbz	r3, 802329c <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023292:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8023296:	4628      	mov	r0, r5
 8023298:	f7ff fe0e 	bl	8022eb8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802329c:	4628      	mov	r0, r5
 802329e:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 80232a2:	f7ff fe09 	bl	8022eb8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80232a6:	2300      	movs	r3, #0
 80232a8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80232ac:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80232b0:	4298      	cmp	r0, r3
 80232b2:	bf34      	ite	cc
 80232b4:	2000      	movcc	r0, #0
 80232b6:	2001      	movcs	r0, #1
 80232b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080232bc <_ZN8touchgfx6Canvas6renderEh>:
 80232bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80232c0:	4604      	mov	r4, r0
 80232c2:	6840      	ldr	r0, [r0, #4]
 80232c4:	460d      	mov	r5, r1
 80232c6:	6803      	ldr	r3, [r0, #0]
 80232c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80232ca:	4798      	blx	r3
 80232cc:	fb10 f105 	smulbb	r1, r0, r5
 80232d0:	b289      	uxth	r1, r1
 80232d2:	1c4d      	adds	r5, r1, #1
 80232d4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80232d8:	122d      	asrs	r5, r5, #8
 80232da:	f000 8097 	beq.w	802340c <_ZN8touchgfx6Canvas6renderEh+0x150>
 80232de:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	f000 8092 	beq.w	802340c <_ZN8touchgfx6Canvas6renderEh+0x150>
 80232e8:	4620      	mov	r0, r4
 80232ea:	f7ff ffc4 	bl	8023276 <_ZN8touchgfx6Canvas5closeEv>
 80232ee:	4607      	mov	r7, r0
 80232f0:	2800      	cmp	r0, #0
 80232f2:	d043      	beq.n	802337c <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80232f4:	6863      	ldr	r3, [r4, #4]
 80232f6:	4e46      	ldr	r6, [pc, #280]	; (8023410 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 80232f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80232fa:	6837      	ldr	r7, [r6, #0]
 80232fc:	6803      	ldr	r3, [r0, #0]
 80232fe:	689b      	ldr	r3, [r3, #8]
 8023300:	4798      	blx	r3
 8023302:	4601      	mov	r1, r0
 8023304:	4638      	mov	r0, r7
 8023306:	f7ec fce1 	bl	800fccc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802330a:	4607      	mov	r7, r0
 802330c:	f7ec f8a2 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 8023310:	6803      	ldr	r3, [r0, #0]
 8023312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023314:	4798      	blx	r3
 8023316:	4680      	mov	r8, r0
 8023318:	f7ec f89c 	bl	800f454 <_ZN8touchgfx3HAL3lcdEv>
 802331c:	6803      	ldr	r3, [r0, #0]
 802331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023320:	4798      	blx	r3
 8023322:	280b      	cmp	r0, #11
 8023324:	d857      	bhi.n	80233d6 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8023326:	e8df f000 	tbb	[pc, r0]
 802332a:	584d      	.short	0x584d
 802332c:	2d560668 	.word	0x2d560668
 8023330:	6161613d 	.word	0x6161613d
 8023334:	6161      	.short	0x6161
 8023336:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802333a:	2208      	movs	r2, #8
 802333c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8023340:	fb91 f2f2 	sdiv	r2, r1, r2
 8023344:	fb08 2303 	mla	r3, r8, r3, r2
 8023348:	441f      	add	r7, r3
 802334a:	424b      	negs	r3, r1
 802334c:	f001 0107 	and.w	r1, r1, #7
 8023350:	f003 0307 	and.w	r3, r3, #7
 8023354:	bf58      	it	pl
 8023356:	4259      	negpl	r1, r3
 8023358:	b2c9      	uxtb	r1, r1
 802335a:	6860      	ldr	r0, [r4, #4]
 802335c:	b2ed      	uxtb	r5, r5
 802335e:	fa0f f388 	sxth.w	r3, r8
 8023362:	463a      	mov	r2, r7
 8023364:	e9cd 1500 	strd	r1, r5, [sp]
 8023368:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802336a:	f104 0020 	add.w	r0, r4, #32
 802336e:	f7ff fdaf 	bl	8022ed0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8023372:	4607      	mov	r7, r0
 8023374:	6830      	ldr	r0, [r6, #0]
 8023376:	6803      	ldr	r3, [r0, #0]
 8023378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802337a:	4798      	blx	r3
 802337c:	4638      	mov	r0, r7
 802337e:	b002      	add	sp, #8
 8023380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023384:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8023388:	2204      	movs	r2, #4
 802338a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802338e:	fb91 f2f2 	sdiv	r2, r1, r2
 8023392:	fb08 2303 	mla	r3, r8, r3, r2
 8023396:	441f      	add	r7, r3
 8023398:	424b      	negs	r3, r1
 802339a:	f001 0103 	and.w	r1, r1, #3
 802339e:	f003 0303 	and.w	r3, r3, #3
 80233a2:	e7d7      	b.n	8023354 <_ZN8touchgfx6Canvas6renderEh+0x98>
 80233a4:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80233a8:	2202      	movs	r2, #2
 80233aa:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80233ae:	2900      	cmp	r1, #0
 80233b0:	fb91 f2f2 	sdiv	r2, r1, r2
 80233b4:	f001 0101 	and.w	r1, r1, #1
 80233b8:	fb08 2303 	mla	r3, r8, r3, r2
 80233bc:	bfb8      	it	lt
 80233be:	4249      	neglt	r1, r1
 80233c0:	441f      	add	r7, r3
 80233c2:	e7c9      	b.n	8023358 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 80233c4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80233c8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80233cc:	fb08 f303 	mul.w	r3, r8, r3
 80233d0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80233d4:	441f      	add	r7, r3
 80233d6:	2100      	movs	r1, #0
 80233d8:	e7bf      	b.n	802335a <_ZN8touchgfx6Canvas6renderEh+0x9e>
 80233da:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80233de:	2103      	movs	r1, #3
 80233e0:	fb08 f203 	mul.w	r2, r8, r3
 80233e4:	8b23      	ldrh	r3, [r4, #24]
 80233e6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80233ea:	e7f3      	b.n	80233d4 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80233ec:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80233f0:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80233f4:	fb08 2303 	mla	r3, r8, r3, r2
 80233f8:	e7ec      	b.n	80233d4 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80233fa:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80233fe:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8023402:	fb08 f303 	mul.w	r3, r8, r3
 8023406:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802340a:	e7e3      	b.n	80233d4 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802340c:	2701      	movs	r7, #1
 802340e:	e7b5      	b.n	802337c <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8023410:	20027e98 	.word	0x20027e98

08023414 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023414:	b513      	push	{r0, r1, r4, lr}
 8023416:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802341a:	4604      	mov	r4, r0
 802341c:	e9cd 2100 	strd	r2, r1, [sp]
 8023420:	b1a3      	cbz	r3, 802344c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8023422:	466a      	mov	r2, sp
 8023424:	a901      	add	r1, sp, #4
 8023426:	4620      	mov	r0, r4
 8023428:	f7ff feba 	bl	80231a0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802342c:	68a3      	ldr	r3, [r4, #8]
 802342e:	9901      	ldr	r1, [sp, #4]
 8023430:	9a00      	ldr	r2, [sp, #0]
 8023432:	1ac9      	subs	r1, r1, r3
 8023434:	68e3      	ldr	r3, [r4, #12]
 8023436:	1ad2      	subs	r2, r2, r3
 8023438:	9101      	str	r1, [sp, #4]
 802343a:	2a00      	cmp	r2, #0
 802343c:	9200      	str	r2, [sp, #0]
 802343e:	da0b      	bge.n	8023458 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8023440:	2301      	movs	r3, #1
 8023442:	2900      	cmp	r1, #0
 8023444:	da0e      	bge.n	8023464 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8023446:	f043 0304 	orr.w	r3, r3, #4
 802344a:	e013      	b.n	8023474 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802344c:	f7ff ff13 	bl	8023276 <_ZN8touchgfx6Canvas5closeEv>
 8023450:	2800      	cmp	r0, #0
 8023452:	d1e6      	bne.n	8023422 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8023454:	b002      	add	sp, #8
 8023456:	bd10      	pop	{r4, pc}
 8023458:	6963      	ldr	r3, [r4, #20]
 802345a:	429a      	cmp	r2, r3
 802345c:	bfac      	ite	ge
 802345e:	2302      	movge	r3, #2
 8023460:	2300      	movlt	r3, #0
 8023462:	e7ee      	b.n	8023442 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8023464:	6920      	ldr	r0, [r4, #16]
 8023466:	4281      	cmp	r1, r0
 8023468:	bfac      	ite	ge
 802346a:	2008      	movge	r0, #8
 802346c:	2000      	movlt	r0, #0
 802346e:	4318      	orrs	r0, r3
 8023470:	b2c3      	uxtb	r3, r0
 8023472:	b158      	cbz	r0, 802348c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8023474:	2201      	movs	r2, #1
 8023476:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802347a:	9901      	ldr	r1, [sp, #4]
 802347c:	9a00      	ldr	r2, [sp, #0]
 802347e:	66a1      	str	r1, [r4, #104]	; 0x68
 8023480:	66e2      	str	r2, [r4, #108]	; 0x6c
 8023482:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8023486:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 802348a:	e7e3      	b.n	8023454 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802348c:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8023490:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8023494:	4298      	cmp	r0, r3
 8023496:	d803      	bhi.n	80234a0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8023498:	f104 0020 	add.w	r0, r4, #32
 802349c:	f7ee ffa0 	bl	80123e0 <_ZN8touchgfx7Outline6moveToEii>
 80234a0:	2300      	movs	r3, #0
 80234a2:	2201      	movs	r2, #1
 80234a4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80234a8:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80234ac:	e7e5      	b.n	802347a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080234ae <_ZN8touchgfx6CircleD1Ev>:
 80234ae:	4770      	bx	lr

080234b0 <_ZN8touchgfx6CircleD0Ev>:
 80234b0:	b510      	push	{r4, lr}
 80234b2:	4604      	mov	r4, r0
 80234b4:	2148      	movs	r1, #72	; 0x48
 80234b6:	f001 fc5a 	bl	8024d6e <_ZdlPvj>
 80234ba:	4620      	mov	r0, r4
 80234bc:	bd10      	pop	{r4, pc}

080234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 80234be:	b508      	push	{r3, lr}
 80234c0:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80234c4:	f7ec feb2 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80234c8:	bd08      	pop	{r3, pc}
	...

080234cc <_ZN8touchgfx6CircleC1Ev>:
 80234cc:	b510      	push	{r4, lr}
 80234ce:	4604      	mov	r4, r0
 80234d0:	f000 fd60 	bl	8023f94 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80234d4:	4b08      	ldr	r3, [pc, #32]	; (80234f8 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80234d6:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80234da:	4620      	mov	r0, r4
 80234dc:	6023      	str	r3, [r4, #0]
 80234de:	2300      	movs	r3, #0
 80234e0:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 80234e4:	f24b 4205 	movw	r2, #46085	; 0xb405
 80234e8:	60a3      	str	r3, [r4, #8]
 80234ea:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80234ee:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80234f2:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 80234f6:	bd10      	pop	{r4, pc}
 80234f8:	0802a270 	.word	0x0802a270

080234fc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80234fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023500:	428a      	cmp	r2, r1
 8023502:	4680      	mov	r8, r0
 8023504:	4610      	mov	r0, r2
 8023506:	4699      	mov	r9, r3
 8023508:	bfaa      	itet	ge
 802350a:	460a      	movge	r2, r1
 802350c:	460b      	movlt	r3, r1
 802350e:	4603      	movge	r3, r0
 8023510:	b085      	sub	sp, #20
 8023512:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 8023516:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 802351a:	1a99      	subs	r1, r3, r2
 802351c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802351e:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 8023522:	bfa4      	itt	ge
 8023524:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8023528:	2200      	movge	r2, #0
 802352a:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 802352e:	9300      	str	r3, [sp, #0]
 8023530:	f102 0b01 	add.w	fp, r2, #1
 8023534:	2c00      	cmp	r4, #0
 8023536:	f040 80ae 	bne.w	8023696 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 802353a:	4610      	mov	r0, r2
 802353c:	9201      	str	r2, [sp, #4]
 802353e:	f7ec fe75 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023542:	a903      	add	r1, sp, #12
 8023544:	9003      	str	r0, [sp, #12]
 8023546:	4650      	mov	r0, sl
 8023548:	f7ec fd38 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802354c:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8023550:	9a01      	ldr	r2, [sp, #4]
 8023552:	4408      	add	r0, r1
 8023554:	f8d9 1000 	ldr.w	r1, [r9]
 8023558:	4281      	cmp	r1, r0
 802355a:	bfc8      	it	gt
 802355c:	f8c9 0000 	strgt.w	r0, [r9]
 8023560:	6839      	ldr	r1, [r7, #0]
 8023562:	4288      	cmp	r0, r1
 8023564:	bfc8      	it	gt
 8023566:	6038      	strgt	r0, [r7, #0]
 8023568:	4610      	mov	r0, r2
 802356a:	f7ff ffa8 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802356e:	a903      	add	r1, sp, #12
 8023570:	9003      	str	r0, [sp, #12]
 8023572:	4650      	mov	r0, sl
 8023574:	f7ec fd22 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023578:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802357c:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8023580:	1a10      	subs	r0, r2, r0
 8023582:	6832      	ldr	r2, [r6, #0]
 8023584:	4282      	cmp	r2, r0
 8023586:	bfc8      	it	gt
 8023588:	6030      	strgt	r0, [r6, #0]
 802358a:	682a      	ldr	r2, [r5, #0]
 802358c:	4290      	cmp	r0, r2
 802358e:	fb9b f2f1 	sdiv	r2, fp, r1
 8023592:	fb01 b212 	mls	r2, r1, r2, fp
 8023596:	bfc8      	it	gt
 8023598:	6028      	strgt	r0, [r5, #0]
 802359a:	1a8a      	subs	r2, r1, r2
 802359c:	fb92 f0f1 	sdiv	r0, r2, r1
 80235a0:	fb01 2210 	mls	r2, r1, r0, r2
 80235a4:	4493      	add	fp, r2
 80235a6:	9b00      	ldr	r3, [sp, #0]
 80235a8:	455b      	cmp	r3, fp
 80235aa:	db2a      	blt.n	8023602 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 80235ac:	4658      	mov	r0, fp
 80235ae:	f7ec fe3d 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80235b2:	a903      	add	r1, sp, #12
 80235b4:	9003      	str	r0, [sp, #12]
 80235b6:	4650      	mov	r0, sl
 80235b8:	f7ec fd00 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80235bc:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80235c0:	4410      	add	r0, r2
 80235c2:	f8d9 2000 	ldr.w	r2, [r9]
 80235c6:	4282      	cmp	r2, r0
 80235c8:	bfc8      	it	gt
 80235ca:	f8c9 0000 	strgt.w	r0, [r9]
 80235ce:	683a      	ldr	r2, [r7, #0]
 80235d0:	4290      	cmp	r0, r2
 80235d2:	bfc8      	it	gt
 80235d4:	6038      	strgt	r0, [r7, #0]
 80235d6:	4658      	mov	r0, fp
 80235d8:	f7ff ff71 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80235dc:	a903      	add	r1, sp, #12
 80235de:	9003      	str	r0, [sp, #12]
 80235e0:	4650      	mov	r0, sl
 80235e2:	f7ec fceb 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80235e6:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80235ea:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 80235ee:	1a10      	subs	r0, r2, r0
 80235f0:	6832      	ldr	r2, [r6, #0]
 80235f2:	4282      	cmp	r2, r0
 80235f4:	bfc8      	it	gt
 80235f6:	6030      	strgt	r0, [r6, #0]
 80235f8:	682a      	ldr	r2, [r5, #0]
 80235fa:	4290      	cmp	r0, r2
 80235fc:	bfc8      	it	gt
 80235fe:	6028      	strgt	r0, [r5, #0]
 8023600:	e7d1      	b.n	80235a6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 8023602:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 8023606:	9b00      	ldr	r3, [sp, #0]
 8023608:	455b      	cmp	r3, fp
 802360a:	dd27      	ble.n	802365c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 802360c:	4618      	mov	r0, r3
 802360e:	f7ec fe0d 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023612:	a903      	add	r1, sp, #12
 8023614:	9003      	str	r0, [sp, #12]
 8023616:	4650      	mov	r0, sl
 8023618:	f7ec fcd0 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802361c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8023620:	4410      	add	r0, r2
 8023622:	f8d9 2000 	ldr.w	r2, [r9]
 8023626:	4282      	cmp	r2, r0
 8023628:	bfc8      	it	gt
 802362a:	f8c9 0000 	strgt.w	r0, [r9]
 802362e:	683a      	ldr	r2, [r7, #0]
 8023630:	4290      	cmp	r0, r2
 8023632:	bfc8      	it	gt
 8023634:	6038      	strgt	r0, [r7, #0]
 8023636:	9800      	ldr	r0, [sp, #0]
 8023638:	f7ff ff41 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802363c:	a903      	add	r1, sp, #12
 802363e:	9003      	str	r0, [sp, #12]
 8023640:	4650      	mov	r0, sl
 8023642:	f7ec fcbb 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023646:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802364a:	1a10      	subs	r0, r2, r0
 802364c:	6832      	ldr	r2, [r6, #0]
 802364e:	4282      	cmp	r2, r0
 8023650:	bfc8      	it	gt
 8023652:	6030      	strgt	r0, [r6, #0]
 8023654:	682a      	ldr	r2, [r5, #0]
 8023656:	4290      	cmp	r0, r2
 8023658:	bfc8      	it	gt
 802365a:	6028      	strgt	r0, [r5, #0]
 802365c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8023660:	f8d9 1000 	ldr.w	r1, [r9]
 8023664:	4291      	cmp	r1, r2
 8023666:	bfc8      	it	gt
 8023668:	f8c9 2000 	strgt.w	r2, [r9]
 802366c:	683a      	ldr	r2, [r7, #0]
 802366e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8023672:	429a      	cmp	r2, r3
 8023674:	bfb8      	it	lt
 8023676:	603b      	strlt	r3, [r7, #0]
 8023678:	6832      	ldr	r2, [r6, #0]
 802367a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 802367e:	429a      	cmp	r2, r3
 8023680:	bfc8      	it	gt
 8023682:	6033      	strgt	r3, [r6, #0]
 8023684:	682a      	ldr	r2, [r5, #0]
 8023686:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 802368a:	429a      	cmp	r2, r3
 802368c:	da00      	bge.n	8023690 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 802368e:	602b      	str	r3, [r5, #0]
 8023690:	b005      	add	sp, #20
 8023692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023696:	2002      	movs	r0, #2
 8023698:	3401      	adds	r4, #1
 802369a:	9201      	str	r2, [sp, #4]
 802369c:	fb94 f4f0 	sdiv	r4, r4, r0
 80236a0:	4610      	mov	r0, r2
 80236a2:	f7ec fdc3 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80236a6:	a903      	add	r1, sp, #12
 80236a8:	9003      	str	r0, [sp, #12]
 80236aa:	4650      	mov	r0, sl
 80236ac:	f7ec fc86 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80236b0:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80236b4:	9a01      	ldr	r2, [sp, #4]
 80236b6:	4408      	add	r0, r1
 80236b8:	f8d9 1000 	ldr.w	r1, [r9]
 80236bc:	1b03      	subs	r3, r0, r4
 80236be:	4420      	add	r0, r4
 80236c0:	4299      	cmp	r1, r3
 80236c2:	bfc8      	it	gt
 80236c4:	f8c9 3000 	strgt.w	r3, [r9]
 80236c8:	6839      	ldr	r1, [r7, #0]
 80236ca:	428b      	cmp	r3, r1
 80236cc:	bfc8      	it	gt
 80236ce:	603b      	strgt	r3, [r7, #0]
 80236d0:	f8d9 1000 	ldr.w	r1, [r9]
 80236d4:	4281      	cmp	r1, r0
 80236d6:	bfc8      	it	gt
 80236d8:	f8c9 0000 	strgt.w	r0, [r9]
 80236dc:	6839      	ldr	r1, [r7, #0]
 80236de:	4288      	cmp	r0, r1
 80236e0:	bfc8      	it	gt
 80236e2:	6038      	strgt	r0, [r7, #0]
 80236e4:	4610      	mov	r0, r2
 80236e6:	f7ff feea 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80236ea:	a903      	add	r1, sp, #12
 80236ec:	9003      	str	r0, [sp, #12]
 80236ee:	4650      	mov	r0, sl
 80236f0:	f7ec fc64 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80236f4:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80236f8:	1a10      	subs	r0, r2, r0
 80236fa:	6832      	ldr	r2, [r6, #0]
 80236fc:	1b01      	subs	r1, r0, r4
 80236fe:	4420      	add	r0, r4
 8023700:	428a      	cmp	r2, r1
 8023702:	bfc8      	it	gt
 8023704:	6031      	strgt	r1, [r6, #0]
 8023706:	682a      	ldr	r2, [r5, #0]
 8023708:	4291      	cmp	r1, r2
 802370a:	bfc8      	it	gt
 802370c:	6029      	strgt	r1, [r5, #0]
 802370e:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8023712:	6832      	ldr	r2, [r6, #0]
 8023714:	4282      	cmp	r2, r0
 8023716:	bfc8      	it	gt
 8023718:	6030      	strgt	r0, [r6, #0]
 802371a:	682a      	ldr	r2, [r5, #0]
 802371c:	4290      	cmp	r0, r2
 802371e:	fb9b f2f1 	sdiv	r2, fp, r1
 8023722:	fb01 b212 	mls	r2, r1, r2, fp
 8023726:	bfc8      	it	gt
 8023728:	6028      	strgt	r0, [r5, #0]
 802372a:	1a8a      	subs	r2, r1, r2
 802372c:	fb92 f0f1 	sdiv	r0, r2, r1
 8023730:	fb01 2210 	mls	r2, r1, r0, r2
 8023734:	4493      	add	fp, r2
 8023736:	9b00      	ldr	r3, [sp, #0]
 8023738:	455b      	cmp	r3, fp
 802373a:	db40      	blt.n	80237be <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 802373c:	4658      	mov	r0, fp
 802373e:	f7ec fd75 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023742:	a903      	add	r1, sp, #12
 8023744:	9003      	str	r0, [sp, #12]
 8023746:	4650      	mov	r0, sl
 8023748:	f7ec fc38 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802374c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8023750:	4410      	add	r0, r2
 8023752:	f8d9 2000 	ldr.w	r2, [r9]
 8023756:	1b01      	subs	r1, r0, r4
 8023758:	4420      	add	r0, r4
 802375a:	428a      	cmp	r2, r1
 802375c:	bfc8      	it	gt
 802375e:	f8c9 1000 	strgt.w	r1, [r9]
 8023762:	683a      	ldr	r2, [r7, #0]
 8023764:	4291      	cmp	r1, r2
 8023766:	bfc8      	it	gt
 8023768:	6039      	strgt	r1, [r7, #0]
 802376a:	f8d9 2000 	ldr.w	r2, [r9]
 802376e:	4282      	cmp	r2, r0
 8023770:	bfc8      	it	gt
 8023772:	f8c9 0000 	strgt.w	r0, [r9]
 8023776:	683a      	ldr	r2, [r7, #0]
 8023778:	4290      	cmp	r0, r2
 802377a:	bfc8      	it	gt
 802377c:	6038      	strgt	r0, [r7, #0]
 802377e:	4658      	mov	r0, fp
 8023780:	f7ff fe9d 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023784:	a903      	add	r1, sp, #12
 8023786:	9003      	str	r0, [sp, #12]
 8023788:	4650      	mov	r0, sl
 802378a:	f7ec fc17 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802378e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8023792:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8023796:	1a10      	subs	r0, r2, r0
 8023798:	6832      	ldr	r2, [r6, #0]
 802379a:	1b01      	subs	r1, r0, r4
 802379c:	4420      	add	r0, r4
 802379e:	428a      	cmp	r2, r1
 80237a0:	bfc8      	it	gt
 80237a2:	6031      	strgt	r1, [r6, #0]
 80237a4:	682a      	ldr	r2, [r5, #0]
 80237a6:	4291      	cmp	r1, r2
 80237a8:	bfc8      	it	gt
 80237aa:	6029      	strgt	r1, [r5, #0]
 80237ac:	6832      	ldr	r2, [r6, #0]
 80237ae:	4282      	cmp	r2, r0
 80237b0:	bfc8      	it	gt
 80237b2:	6030      	strgt	r0, [r6, #0]
 80237b4:	682a      	ldr	r2, [r5, #0]
 80237b6:	4290      	cmp	r0, r2
 80237b8:	bfc8      	it	gt
 80237ba:	6028      	strgt	r0, [r5, #0]
 80237bc:	e7bb      	b.n	8023736 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 80237be:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80237c2:	9b00      	ldr	r3, [sp, #0]
 80237c4:	455b      	cmp	r3, fp
 80237c6:	f77f af63 	ble.w	8023690 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 80237ca:	4618      	mov	r0, r3
 80237cc:	f7ec fd2e 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80237d0:	a903      	add	r1, sp, #12
 80237d2:	9003      	str	r0, [sp, #12]
 80237d4:	4650      	mov	r0, sl
 80237d6:	f7ec fbf1 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80237da:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80237de:	4410      	add	r0, r2
 80237e0:	f8d9 2000 	ldr.w	r2, [r9]
 80237e4:	1b01      	subs	r1, r0, r4
 80237e6:	4420      	add	r0, r4
 80237e8:	428a      	cmp	r2, r1
 80237ea:	bfc8      	it	gt
 80237ec:	f8c9 1000 	strgt.w	r1, [r9]
 80237f0:	683a      	ldr	r2, [r7, #0]
 80237f2:	4291      	cmp	r1, r2
 80237f4:	bfc8      	it	gt
 80237f6:	6039      	strgt	r1, [r7, #0]
 80237f8:	f8d9 2000 	ldr.w	r2, [r9]
 80237fc:	4282      	cmp	r2, r0
 80237fe:	bfc8      	it	gt
 8023800:	f8c9 0000 	strgt.w	r0, [r9]
 8023804:	683b      	ldr	r3, [r7, #0]
 8023806:	4298      	cmp	r0, r3
 8023808:	bfc8      	it	gt
 802380a:	6038      	strgt	r0, [r7, #0]
 802380c:	9800      	ldr	r0, [sp, #0]
 802380e:	f7ff fe56 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023812:	a903      	add	r1, sp, #12
 8023814:	9003      	str	r0, [sp, #12]
 8023816:	4650      	mov	r0, sl
 8023818:	f7ec fbd0 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802381c:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8023820:	6832      	ldr	r2, [r6, #0]
 8023822:	1a18      	subs	r0, r3, r0
 8023824:	1b03      	subs	r3, r0, r4
 8023826:	4404      	add	r4, r0
 8023828:	429a      	cmp	r2, r3
 802382a:	bfc8      	it	gt
 802382c:	6033      	strgt	r3, [r6, #0]
 802382e:	682a      	ldr	r2, [r5, #0]
 8023830:	4293      	cmp	r3, r2
 8023832:	bfc8      	it	gt
 8023834:	602b      	strgt	r3, [r5, #0]
 8023836:	6833      	ldr	r3, [r6, #0]
 8023838:	42a3      	cmp	r3, r4
 802383a:	bfc8      	it	gt
 802383c:	6034      	strgt	r4, [r6, #0]
 802383e:	682b      	ldr	r3, [r5, #0]
 8023840:	429c      	cmp	r4, r3
 8023842:	bfc8      	it	gt
 8023844:	602c      	strgt	r4, [r5, #0]
 8023846:	e723      	b.n	8023690 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

08023848 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8023848:	b530      	push	{r4, r5, lr}
 802384a:	4604      	mov	r4, r0
 802384c:	4608      	mov	r0, r1
 802384e:	4611      	mov	r1, r2
 8023850:	461a      	mov	r2, r3
 8023852:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8023856:	b089      	sub	sp, #36	; 0x24
 8023858:	2500      	movs	r5, #0
 802385a:	015b      	lsls	r3, r3, #5
 802385c:	9505      	str	r5, [sp, #20]
 802385e:	9304      	str	r3, [sp, #16]
 8023860:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8023864:	015b      	lsls	r3, r3, #5
 8023866:	e9cd 3506 	strd	r3, r5, [sp, #24]
 802386a:	ab07      	add	r3, sp, #28
 802386c:	2520      	movs	r5, #32
 802386e:	9302      	str	r3, [sp, #8]
 8023870:	ab06      	add	r3, sp, #24
 8023872:	9301      	str	r3, [sp, #4]
 8023874:	ab05      	add	r3, sp, #20
 8023876:	9300      	str	r3, [sp, #0]
 8023878:	ab04      	add	r3, sp, #16
 802387a:	f7ff fe3f 	bl	80234fc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 802387e:	9a04      	ldr	r2, [sp, #16]
 8023880:	9805      	ldr	r0, [sp, #20]
 8023882:	9b06      	ldr	r3, [sp, #24]
 8023884:	9907      	ldr	r1, [sp, #28]
 8023886:	fb92 f2f5 	sdiv	r2, r2, r5
 802388a:	fb90 f0f5 	sdiv	r0, r0, r5
 802388e:	fb93 f3f5 	sdiv	r3, r3, r5
 8023892:	fb91 f1f5 	sdiv	r1, r1, r5
 8023896:	b292      	uxth	r2, r2
 8023898:	3002      	adds	r0, #2
 802389a:	b29b      	uxth	r3, r3
 802389c:	3102      	adds	r1, #2
 802389e:	1a80      	subs	r0, r0, r2
 80238a0:	3a01      	subs	r2, #1
 80238a2:	1ac9      	subs	r1, r1, r3
 80238a4:	3b01      	subs	r3, #1
 80238a6:	80a0      	strh	r0, [r4, #4]
 80238a8:	4620      	mov	r0, r4
 80238aa:	8022      	strh	r2, [r4, #0]
 80238ac:	8063      	strh	r3, [r4, #2]
 80238ae:	80e1      	strh	r1, [r4, #6]
 80238b0:	b009      	add	sp, #36	; 0x24
 80238b2:	bd30      	pop	{r4, r5, pc}

080238b4 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 80238b4:	b510      	push	{r4, lr}
 80238b6:	4604      	mov	r4, r0
 80238b8:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 80238bc:	f7ff ffc4 	bl	8023848 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80238c0:	4620      	mov	r0, r4
 80238c2:	bd10      	pop	{r4, pc}

080238c4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 80238c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238c6:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	; 0x38
 80238ca:	4606      	mov	r6, r0
 80238cc:	f891 0044 	ldrb.w	r0, [r1, #68]	; 0x44
 80238d0:	42a5      	cmp	r5, r4
 80238d2:	6813      	ldr	r3, [r2, #0]
 80238d4:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80238d8:	da2b      	bge.n	8023932 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 80238da:	42a3      	cmp	r3, r4
 80238dc:	dd14      	ble.n	8023908 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 80238de:	b168      	cbz	r0, 80238fc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80238e0:	4267      	negs	r7, r4
 80238e2:	fb97 f2f0 	sdiv	r2, r7, r0
 80238e6:	fb00 7212 	mls	r2, r0, r2, r7
 80238ea:	1a82      	subs	r2, r0, r2
 80238ec:	fb92 f7f0 	sdiv	r7, r2, r0
 80238f0:	fb00 2017 	mls	r0, r0, r7, r2
 80238f4:	1a24      	subs	r4, r4, r0
 80238f6:	42ac      	cmp	r4, r5
 80238f8:	bfb8      	it	lt
 80238fa:	462c      	movlt	r4, r5
 80238fc:	4630      	mov	r0, r6
 80238fe:	4622      	mov	r2, r4
 8023900:	f7ff ffa2 	bl	8023848 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8023904:	4630      	mov	r0, r6
 8023906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023908:	42ab      	cmp	r3, r5
 802390a:	dd0e      	ble.n	802392a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 802390c:	b168      	cbz	r0, 802392a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 802390e:	425f      	negs	r7, r3
 8023910:	fb97 f2f0 	sdiv	r2, r7, r0
 8023914:	fb00 7212 	mls	r2, r0, r2, r7
 8023918:	1a82      	subs	r2, r0, r2
 802391a:	fb92 f7f0 	sdiv	r7, r2, r0
 802391e:	fb00 2017 	mls	r0, r0, r7, r2
 8023922:	1a1b      	subs	r3, r3, r0
 8023924:	42ab      	cmp	r3, r5
 8023926:	bfb8      	it	lt
 8023928:	462b      	movlt	r3, r5
 802392a:	4622      	mov	r2, r4
 802392c:	461c      	mov	r4, r3
 802392e:	4613      	mov	r3, r2
 8023930:	e7e4      	b.n	80238fc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8023932:	42a3      	cmp	r3, r4
 8023934:	da10      	bge.n	8023958 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8023936:	b148      	cbz	r0, 802394c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8023938:	fb94 f2f0 	sdiv	r2, r4, r0
 802393c:	fb00 4212 	mls	r2, r0, r2, r4
 8023940:	1a82      	subs	r2, r0, r2
 8023942:	fb92 f7f0 	sdiv	r7, r2, r0
 8023946:	fb00 2017 	mls	r0, r0, r7, r2
 802394a:	4404      	add	r4, r0
 802394c:	42a5      	cmp	r5, r4
 802394e:	bfa8      	it	ge
 8023950:	4625      	movge	r5, r4
 8023952:	461c      	mov	r4, r3
 8023954:	462b      	mov	r3, r5
 8023956:	e7d1      	b.n	80238fc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8023958:	42ab      	cmp	r3, r5
 802395a:	dacf      	bge.n	80238fc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 802395c:	2800      	cmp	r0, #0
 802395e:	d0cd      	beq.n	80238fc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8023960:	fb93 f2f0 	sdiv	r2, r3, r0
 8023964:	fb00 3212 	mls	r2, r0, r2, r3
 8023968:	1a82      	subs	r2, r0, r2
 802396a:	fb92 f7f0 	sdiv	r7, r2, r0
 802396e:	fb00 2017 	mls	r0, r0, r7, r2
 8023972:	4403      	add	r3, r0
 8023974:	42ab      	cmp	r3, r5
 8023976:	bfa8      	it	ge
 8023978:	462b      	movge	r3, r5
 802397a:	e7bf      	b.n	80238fc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

0802397c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 802397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023980:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 8023984:	2220      	movs	r2, #32
 8023986:	468b      	mov	fp, r1
 8023988:	42b5      	cmp	r5, r6
 802398a:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 802398e:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 8023992:	b0ab      	sub	sp, #172	; 0xac
 8023994:	bfdc      	itt	le
 8023996:	4633      	movle	r3, r6
 8023998:	462e      	movle	r6, r5
 802399a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 802399c:	4604      	mov	r4, r0
 802399e:	bfd8      	it	le
 80239a0:	461d      	movle	r5, r3
 80239a2:	1bab      	subs	r3, r5, r6
 80239a4:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80239a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80239aa:	bfa4      	itt	ge
 80239ac:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 80239b0:	2600      	movge	r6, #0
 80239b2:	fb99 f9f2 	sdiv	r9, r9, r2
 80239b6:	fb9a faf2 	sdiv	sl, sl, r2
 80239ba:	2900      	cmp	r1, #0
 80239bc:	f000 80f1 	beq.w	8023ba2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x226>
 80239c0:	f9bb 0000 	ldrsh.w	r0, [fp]
 80239c4:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 80239c8:	eba9 0700 	sub.w	r7, r9, r0
 80239cc:	ebaa 0802 	sub.w	r8, sl, r2
 80239d0:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 80239d4:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 80239d8:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 80239dc:	4407      	add	r7, r0
 80239de:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 80239e2:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 80239e6:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 80239ea:	b23f      	sxth	r7, r7
 80239ec:	4490      	add	r8, r2
 80239ee:	2202      	movs	r2, #2
 80239f0:	eba9 0707 	sub.w	r7, r9, r7
 80239f4:	fa0f f888 	sxth.w	r8, r8
 80239f8:	9201      	str	r2, [sp, #4]
 80239fa:	2f00      	cmp	r7, #0
 80239fc:	ebaa 0808 	sub.w	r8, sl, r8
 8023a00:	bfb8      	it	lt
 8023a02:	427f      	neglt	r7, r7
 8023a04:	f1b8 0f00 	cmp.w	r8, #0
 8023a08:	bfb8      	it	lt
 8023a0a:	f1c8 0800 	rsblt	r8, r8, #0
 8023a0e:	45bc      	cmp	ip, r7
 8023a10:	bfcc      	ite	gt
 8023a12:	f10c 0701 	addgt.w	r7, ip, #1
 8023a16:	3701      	addle	r7, #1
 8023a18:	4540      	cmp	r0, r8
 8023a1a:	bfc8      	it	gt
 8023a1c:	f100 0801 	addgt.w	r8, r0, #1
 8023a20:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8023a24:	bfd8      	it	le
 8023a26:	f108 0801 	addle.w	r8, r8, #1
 8023a2a:	3001      	adds	r0, #1
 8023a2c:	fb08 f808 	mul.w	r8, r8, r8
 8023a30:	1040      	asrs	r0, r0, #1
 8023a32:	fb07 8707 	mla	r7, r7, r7, r8
 8023a36:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8023a3a:	fb91 f1f2 	sdiv	r1, r1, r2
 8023a3e:	1a5b      	subs	r3, r3, r1
 8023a40:	930d      	str	r3, [sp, #52]	; 0x34
 8023a42:	f7ec fbd3 	bl	80101ec <_ZN8touchgfx7CWRUtil4sineEi>
 8023a46:	a92a      	add	r1, sp, #168	; 0xa8
 8023a48:	f841 0d70 	str.w	r0, [r1, #-112]!
 8023a4c:	a80d      	add	r0, sp, #52	; 0x34
 8023a4e:	f7ec fab5 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023a52:	f04f 0c20 	mov.w	ip, #32
 8023a56:	9a01      	ldr	r2, [sp, #4]
 8023a58:	fb90 f0fc 	sdiv	r0, r0, ip
 8023a5c:	4340      	muls	r0, r0
 8023a5e:	4287      	cmp	r7, r0
 8023a60:	da04      	bge.n	8023a6c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf0>
 8023a62:	2401      	movs	r4, #1
 8023a64:	4620      	mov	r0, r4
 8023a66:	b02b      	add	sp, #172	; 0xac
 8023a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023a6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023a70:	fb91 f3f2 	sdiv	r3, r1, r2
 8023a74:	4403      	add	r3, r0
 8023a76:	fb93 f3fc 	sdiv	r3, r3, ip
 8023a7a:	f9bb 1000 	ldrsh.w	r1, [fp]
 8023a7e:	3301      	adds	r3, #1
 8023a80:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8023a84:	435b      	muls	r3, r3
 8023a86:	440a      	add	r2, r1
 8023a88:	b212      	sxth	r2, r2
 8023a8a:	454a      	cmp	r2, r9
 8023a8c:	bfa8      	it	ge
 8023a8e:	464a      	movge	r2, r9
 8023a90:	428a      	cmp	r2, r1
 8023a92:	bfac      	ite	ge
 8023a94:	eba9 0902 	subge.w	r9, r9, r2
 8023a98:	eba9 0901 	sublt.w	r9, r9, r1
 8023a9c:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8023aa0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8023aa4:	440a      	add	r2, r1
 8023aa6:	b212      	sxth	r2, r2
 8023aa8:	4552      	cmp	r2, sl
 8023aaa:	bfa8      	it	ge
 8023aac:	4652      	movge	r2, sl
 8023aae:	428a      	cmp	r2, r1
 8023ab0:	bfac      	ite	ge
 8023ab2:	ebaa 0a02 	subge.w	sl, sl, r2
 8023ab6:	ebaa 0a01 	sublt.w	sl, sl, r1
 8023aba:	fb0a fa0a 	mul.w	sl, sl, sl
 8023abe:	fb09 a909 	mla	r9, r9, r9, sl
 8023ac2:	4599      	cmp	r9, r3
 8023ac4:	dccd      	bgt.n	8023a62 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe6>
 8023ac6:	465a      	mov	r2, fp
 8023ac8:	4621      	mov	r1, r4
 8023aca:	a80e      	add	r0, sp, #56	; 0x38
 8023acc:	f7ff facc 	bl	8023068 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8023ad0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8023ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8023ad6:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8023ada:	930a      	str	r3, [sp, #40]	; 0x28
 8023adc:	dd07      	ble.n	8023aee <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 8023ade:	2102      	movs	r1, #2
 8023ae0:	fb93 f3f1 	sdiv	r3, r3, r1
 8023ae4:	4413      	add	r3, r2
 8023ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8023ae8:	fb93 f3f1 	sdiv	r3, r3, r1
 8023aec:	9309      	str	r3, [sp, #36]	; 0x24
 8023aee:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8023af2:	f04f 0a02 	mov.w	sl, #2
 8023af6:	4630      	mov	r0, r6
 8023af8:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 8023afc:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8023b00:	017f      	lsls	r7, r7, #5
 8023b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023b06:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b0c:	f7ec fb8e 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023b10:	f849 0d74 	str.w	r0, [r9, #-116]!
 8023b14:	a80b      	add	r0, sp, #44	; 0x2c
 8023b16:	4649      	mov	r1, r9
 8023b18:	f7ec fa50 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023b1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023b1e:	fb90 f0fa 	sdiv	r0, r0, sl
 8023b22:	eb00 0b03 	add.w	fp, r0, r3
 8023b26:	4630      	mov	r0, r6
 8023b28:	f7ff fcc9 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023b2c:	f848 0d78 	str.w	r0, [r8, #-120]!
 8023b30:	a80b      	add	r0, sp, #44	; 0x2c
 8023b32:	4641      	mov	r1, r8
 8023b34:	f7ec fa42 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023b38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8023b3a:	4659      	mov	r1, fp
 8023b3c:	fb90 f0fa 	sdiv	r0, r0, sl
 8023b40:	1a12      	subs	r2, r2, r0
 8023b42:	a80e      	add	r0, sp, #56	; 0x38
 8023b44:	f7ff fc66 	bl	8023414 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8023b48:	f106 0a20 	add.w	sl, r6, #32
 8023b4c:	bb67      	cbnz	r7, 8023ba8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8023b4e:	46b3      	mov	fp, r6
 8023b50:	45aa      	cmp	sl, r5
 8023b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b54:	dc33      	bgt.n	8023bbe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 8023b56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023b58:	4650      	mov	r0, sl
 8023b5a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8023b5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023b60:	f7ec fb64 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023b64:	4641      	mov	r1, r8
 8023b66:	900c      	str	r0, [sp, #48]	; 0x30
 8023b68:	a80b      	add	r0, sp, #44	; 0x2c
 8023b6a:	f7ec fa27 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023b6e:	2302      	movs	r3, #2
 8023b70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8023b72:	fb90 f0f3 	sdiv	r0, r0, r3
 8023b76:	eb00 0b02 	add.w	fp, r0, r2
 8023b7a:	4650      	mov	r0, sl
 8023b7c:	f7ff fc9f 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023b80:	4649      	mov	r1, r9
 8023b82:	900d      	str	r0, [sp, #52]	; 0x34
 8023b84:	a80b      	add	r0, sp, #44	; 0x2c
 8023b86:	f7ec fa19 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023b8a:	2302      	movs	r3, #2
 8023b8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8023b8e:	4659      	mov	r1, fp
 8023b90:	46d3      	mov	fp, sl
 8023b92:	44ba      	add	sl, r7
 8023b94:	fb90 f0f3 	sdiv	r0, r0, r3
 8023b98:	1a12      	subs	r2, r2, r0
 8023b9a:	a80e      	add	r0, sp, #56	; 0x38
 8023b9c:	f7ff fb12 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023ba0:	e7d6      	b.n	8023b50 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d4>
 8023ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8023ba6:	e768      	b.n	8023a7a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xfe>
 8023ba8:	fb9a f2f7 	sdiv	r2, sl, r7
 8023bac:	fb07 a212 	mls	r2, r7, r2, sl
 8023bb0:	1aba      	subs	r2, r7, r2
 8023bb2:	fb92 f1f7 	sdiv	r1, r2, r7
 8023bb6:	fb07 2211 	mls	r2, r7, r1, r2
 8023bba:	4492      	add	sl, r2
 8023bbc:	e7c7      	b.n	8023b4e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d2>
 8023bbe:	455d      	cmp	r5, fp
 8023bc0:	dd23      	ble.n	8023c0a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x28e>
 8023bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bc4:	f04f 0a02 	mov.w	sl, #2
 8023bc8:	4628      	mov	r0, r5
 8023bca:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8023bce:	920b      	str	r2, [sp, #44]	; 0x2c
 8023bd0:	f7ec fb2c 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023bd4:	4641      	mov	r1, r8
 8023bd6:	900c      	str	r0, [sp, #48]	; 0x30
 8023bd8:	a80b      	add	r0, sp, #44	; 0x2c
 8023bda:	f7ec f9ef 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023bde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023be0:	fb90 f0fa 	sdiv	r0, r0, sl
 8023be4:	4403      	add	r3, r0
 8023be6:	4628      	mov	r0, r5
 8023be8:	9301      	str	r3, [sp, #4]
 8023bea:	f7ff fc68 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023bee:	4649      	mov	r1, r9
 8023bf0:	900d      	str	r0, [sp, #52]	; 0x34
 8023bf2:	a80b      	add	r0, sp, #44	; 0x2c
 8023bf4:	f7ec f9e2 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023bf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8023bfa:	9b01      	ldr	r3, [sp, #4]
 8023bfc:	fb90 f0fa 	sdiv	r0, r0, sl
 8023c00:	4619      	mov	r1, r3
 8023c02:	1a12      	subs	r2, r2, r0
 8023c04:	a80e      	add	r0, sp, #56	; 0x38
 8023c06:	f7ff fadd 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c0c:	b98b      	cbnz	r3, 8023c32 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b6>
 8023c0e:	1bad      	subs	r5, r5, r6
 8023c10:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8023c14:	da04      	bge.n	8023c20 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8023c16:	a80e      	add	r0, sp, #56	; 0x38
 8023c18:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 8023c1c:	f7ff fad2 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023c20:	21ff      	movs	r1, #255	; 0xff
 8023c22:	a80e      	add	r0, sp, #56	; 0x38
 8023c24:	f7ff fb4a 	bl	80232bc <_ZN8touchgfx6Canvas6renderEh>
 8023c28:	4604      	mov	r4, r0
 8023c2a:	a80e      	add	r0, sp, #56	; 0x38
 8023c2c:	f7ec fcbe 	bl	80105ac <_ZN8touchgfx6CanvasD1Ev>
 8023c30:	e718      	b.n	8023a64 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 8023c32:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 8023c36:	429a      	cmp	r2, r3
 8023c38:	f200 8107 	bhi.w	8023e4a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4ce>
 8023c3c:	1bab      	subs	r3, r5, r6
 8023c3e:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8023c42:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8023c46:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8023c4a:	9301      	str	r3, [sp, #4]
 8023c4c:	da43      	bge.n	8023cd6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35a>
 8023c4e:	4628      	mov	r0, r5
 8023c50:	f7ec faec 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023c54:	4649      	mov	r1, r9
 8023c56:	900d      	str	r0, [sp, #52]	; 0x34
 8023c58:	a809      	add	r0, sp, #36	; 0x24
 8023c5a:	f7ec f9af 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023c5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023c60:	18c3      	adds	r3, r0, r3
 8023c62:	4628      	mov	r0, r5
 8023c64:	9303      	str	r3, [sp, #12]
 8023c66:	f7ff fc2a 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023c6a:	4649      	mov	r1, r9
 8023c6c:	900d      	str	r0, [sp, #52]	; 0x34
 8023c6e:	a809      	add	r0, sp, #36	; 0x24
 8023c70:	f7ec f9a4 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023c74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023c76:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 8023c7a:	1a1b      	subs	r3, r3, r0
 8023c7c:	9204      	str	r2, [sp, #16]
 8023c7e:	9302      	str	r3, [sp, #8]
 8023c80:	eb05 030a 	add.w	r3, r5, sl
 8023c84:	9a04      	ldr	r2, [sp, #16]
 8023c86:	4293      	cmp	r3, r2
 8023c88:	da25      	bge.n	8023cd6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35a>
 8023c8a:	4618      	mov	r0, r3
 8023c8c:	9306      	str	r3, [sp, #24]
 8023c8e:	f7ec facd 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023c92:	4649      	mov	r1, r9
 8023c94:	900d      	str	r0, [sp, #52]	; 0x34
 8023c96:	a80a      	add	r0, sp, #40	; 0x28
 8023c98:	f7ec f990 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023c9c:	2202      	movs	r2, #2
 8023c9e:	9b03      	ldr	r3, [sp, #12]
 8023ca0:	9207      	str	r2, [sp, #28]
 8023ca2:	fb90 f0f2 	sdiv	r0, r0, r2
 8023ca6:	18c3      	adds	r3, r0, r3
 8023ca8:	9305      	str	r3, [sp, #20]
 8023caa:	9b06      	ldr	r3, [sp, #24]
 8023cac:	4618      	mov	r0, r3
 8023cae:	f7ff fc06 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023cb2:	a92a      	add	r1, sp, #168	; 0xa8
 8023cb4:	f841 0d78 	str.w	r0, [r1, #-120]!
 8023cb8:	a80a      	add	r0, sp, #40	; 0x28
 8023cba:	f7ec f97f 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023cbe:	9a07      	ldr	r2, [sp, #28]
 8023cc0:	9b02      	ldr	r3, [sp, #8]
 8023cc2:	9905      	ldr	r1, [sp, #20]
 8023cc4:	fb90 f2f2 	sdiv	r2, r0, r2
 8023cc8:	a80e      	add	r0, sp, #56	; 0x38
 8023cca:	1a9a      	subs	r2, r3, r2
 8023ccc:	f7ff fa7a 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023cd0:	9b06      	ldr	r3, [sp, #24]
 8023cd2:	4453      	add	r3, sl
 8023cd4:	e7d6      	b.n	8023c84 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x308>
 8023cd6:	455d      	cmp	r5, fp
 8023cd8:	dd25      	ble.n	8023d26 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3aa>
 8023cda:	4628      	mov	r0, r5
 8023cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023ce0:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8023ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ce6:	f7ec faa1 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023cea:	4641      	mov	r1, r8
 8023cec:	900c      	str	r0, [sp, #48]	; 0x30
 8023cee:	a80b      	add	r0, sp, #44	; 0x2c
 8023cf0:	f7ec f964 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023cf4:	2202      	movs	r2, #2
 8023cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023cf8:	9202      	str	r2, [sp, #8]
 8023cfa:	fb90 f0f2 	sdiv	r0, r0, r2
 8023cfe:	eb00 0903 	add.w	r9, r0, r3
 8023d02:	4628      	mov	r0, r5
 8023d04:	f7ff fbdb 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023d08:	a92a      	add	r1, sp, #168	; 0xa8
 8023d0a:	f841 0d74 	str.w	r0, [r1, #-116]!
 8023d0e:	a80b      	add	r0, sp, #44	; 0x2c
 8023d10:	f7ec f954 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023d14:	9a02      	ldr	r2, [sp, #8]
 8023d16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023d18:	4649      	mov	r1, r9
 8023d1a:	fb90 f2f2 	sdiv	r2, r0, r2
 8023d1e:	a80e      	add	r0, sp, #56	; 0x38
 8023d20:	1a9a      	subs	r2, r3, r2
 8023d22:	f7ff fa4f 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023d26:	46d9      	mov	r9, fp
 8023d28:	2502      	movs	r5, #2
 8023d2a:	45b1      	cmp	r9, r6
 8023d2c:	db25      	blt.n	8023d7a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3fe>
 8023d2e:	4648      	mov	r0, r9
 8023d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023d34:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8023d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8023d3a:	f7ec fa77 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023d3e:	4641      	mov	r1, r8
 8023d40:	900c      	str	r0, [sp, #48]	; 0x30
 8023d42:	a80b      	add	r0, sp, #44	; 0x2c
 8023d44:	f7ec f93a 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023d48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023d4a:	fb90 f0f5 	sdiv	r0, r0, r5
 8023d4e:	eb00 0b03 	add.w	fp, r0, r3
 8023d52:	4648      	mov	r0, r9
 8023d54:	f7ff fbb3 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023d58:	a90d      	add	r1, sp, #52	; 0x34
 8023d5a:	900d      	str	r0, [sp, #52]	; 0x34
 8023d5c:	a80b      	add	r0, sp, #44	; 0x2c
 8023d5e:	f7ec f92d 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023d62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8023d64:	4659      	mov	r1, fp
 8023d66:	46cb      	mov	fp, r9
 8023d68:	eba9 0907 	sub.w	r9, r9, r7
 8023d6c:	fb90 f0f5 	sdiv	r0, r0, r5
 8023d70:	1a12      	subs	r2, r2, r0
 8023d72:	a80e      	add	r0, sp, #56	; 0x38
 8023d74:	f7ff fa26 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023d78:	e7d7      	b.n	8023d2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 8023d7a:	455e      	cmp	r6, fp
 8023d7c:	da22      	bge.n	8023dc4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x448>
 8023d7e:	2502      	movs	r5, #2
 8023d80:	4630      	mov	r0, r6
 8023d82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023d86:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8023d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023d8c:	f7ec fa4e 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023d90:	4641      	mov	r1, r8
 8023d92:	900c      	str	r0, [sp, #48]	; 0x30
 8023d94:	a80b      	add	r0, sp, #44	; 0x2c
 8023d96:	f7ec f911 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023d9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8023d9c:	fb90 f0f5 	sdiv	r0, r0, r5
 8023da0:	4407      	add	r7, r0
 8023da2:	4630      	mov	r0, r6
 8023da4:	f7ff fb8b 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023da8:	a92a      	add	r1, sp, #168	; 0xa8
 8023daa:	f841 0d74 	str.w	r0, [r1, #-116]!
 8023dae:	a80b      	add	r0, sp, #44	; 0x2c
 8023db0:	f7ec f904 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023db4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8023db6:	4639      	mov	r1, r7
 8023db8:	fb90 f0f5 	sdiv	r0, r0, r5
 8023dbc:	1a12      	subs	r2, r2, r0
 8023dbe:	a80e      	add	r0, sp, #56	; 0x38
 8023dc0:	f7ff fa00 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023dc4:	9b01      	ldr	r3, [sp, #4]
 8023dc6:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8023dca:	f6bf af29 	bge.w	8023c20 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8023dce:	ad2a      	add	r5, sp, #168	; 0xa8
 8023dd0:	4630      	mov	r0, r6
 8023dd2:	f7ec fa2b 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023dd6:	f04f 0b02 	mov.w	fp, #2
 8023dda:	f845 0d74 	str.w	r0, [r5, #-116]!
 8023dde:	a809      	add	r0, sp, #36	; 0x24
 8023de0:	4629      	mov	r1, r5
 8023de2:	f7ec f8eb 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023de6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023de8:	eb00 0903 	add.w	r9, r0, r3
 8023dec:	4630      	mov	r0, r6
 8023dee:	f7ff fb66 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023df2:	4629      	mov	r1, r5
 8023df4:	900d      	str	r0, [sp, #52]	; 0x34
 8023df6:	a809      	add	r0, sp, #36	; 0x24
 8023df8:	f7ec f8e0 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023dfe:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 8023e02:	eba3 0800 	sub.w	r8, r3, r0
 8023e06:	4454      	add	r4, sl
 8023e08:	42b4      	cmp	r4, r6
 8023e0a:	f6bf af09 	bge.w	8023c20 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8023e0e:	4620      	mov	r0, r4
 8023e10:	f7ec fa0c 	bl	801022c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8023e14:	4629      	mov	r1, r5
 8023e16:	900d      	str	r0, [sp, #52]	; 0x34
 8023e18:	a80a      	add	r0, sp, #40	; 0x28
 8023e1a:	f7ec f8cf 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023e1e:	fb90 f0fb 	sdiv	r0, r0, fp
 8023e22:	eb00 0709 	add.w	r7, r0, r9
 8023e26:	4620      	mov	r0, r4
 8023e28:	f7ff fb49 	bl	80234be <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8023e2c:	a90c      	add	r1, sp, #48	; 0x30
 8023e2e:	900c      	str	r0, [sp, #48]	; 0x30
 8023e30:	a80a      	add	r0, sp, #40	; 0x28
 8023e32:	f7ec f8c3 	bl	800ffbc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8023e36:	4639      	mov	r1, r7
 8023e38:	4454      	add	r4, sl
 8023e3a:	fb90 f2fb 	sdiv	r2, r0, fp
 8023e3e:	a80e      	add	r0, sp, #56	; 0x38
 8023e40:	eba8 0202 	sub.w	r2, r8, r2
 8023e44:	f7ff f9be 	bl	80231c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8023e48:	e7de      	b.n	8023e08 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x48c>
 8023e4a:	2400      	movs	r4, #0
 8023e4c:	e6ed      	b.n	8023c2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ae>

08023e4e <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8023e4e:	b510      	push	{r4, lr}
 8023e50:	2200      	movs	r2, #0
 8023e52:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8023e56:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8023e5a:	8002      	strh	r2, [r0, #0]
 8023e5c:	8042      	strh	r2, [r0, #2]
 8023e5e:	8084      	strh	r4, [r0, #4]
 8023e60:	80c1      	strh	r1, [r0, #6]
 8023e62:	bd10      	pop	{r4, pc}

08023e64 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8023e64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8023e66:	6803      	ldr	r3, [r0, #0]
 8023e68:	460d      	mov	r5, r1
 8023e6a:	4604      	mov	r4, r0
 8023e6c:	4601      	mov	r1, r0
 8023e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023e70:	a802      	add	r0, sp, #8
 8023e72:	4798      	blx	r3
 8023e74:	6828      	ldr	r0, [r5, #0]
 8023e76:	6869      	ldr	r1, [r5, #4]
 8023e78:	466b      	mov	r3, sp
 8023e7a:	c303      	stmia	r3!, {r0, r1}
 8023e7c:	4668      	mov	r0, sp
 8023e7e:	4619      	mov	r1, r3
 8023e80:	f7eb f81a 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8023e84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8023e86:	b1a8      	cbz	r0, 8023eb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8023e88:	6803      	ldr	r3, [r0, #0]
 8023e8a:	1d21      	adds	r1, r4, #4
 8023e8c:	68db      	ldr	r3, [r3, #12]
 8023e8e:	4798      	blx	r3
 8023e90:	b180      	cbz	r0, 8023eb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8023e92:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	dd0c      	ble.n	8023eb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8023e9a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8023e9e:	2d00      	cmp	r5, #0
 8023ea0:	dd08      	ble.n	8023eb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8023ea2:	4a2d      	ldr	r2, [pc, #180]	; (8023f58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8023ea4:	7812      	ldrb	r2, [r2, #0]
 8023ea6:	b13a      	cbz	r2, 8023eb8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8023ea8:	2a01      	cmp	r2, #1
 8023eaa:	d02d      	beq.n	8023f08 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8023eac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8023eae:	6803      	ldr	r3, [r0, #0]
 8023eb0:	691b      	ldr	r3, [r3, #16]
 8023eb2:	4798      	blx	r3
 8023eb4:	b004      	add	sp, #16
 8023eb6:	bd70      	pop	{r4, r5, r6, pc}
 8023eb8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8023ebc:	441d      	add	r5, r3
 8023ebe:	b2ad      	uxth	r5, r5
 8023ec0:	b22e      	sxth	r6, r5
 8023ec2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8023ec6:	42b3      	cmp	r3, r6
 8023ec8:	daf0      	bge.n	8023eac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8023eca:	6823      	ldr	r3, [r4, #0]
 8023ecc:	4669      	mov	r1, sp
 8023ece:	4620      	mov	r0, r4
 8023ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023ed2:	4798      	blx	r3
 8023ed4:	b940      	cbnz	r0, 8023ee8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8023ed6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8023eda:	2b01      	cmp	r3, #1
 8023edc:	d004      	beq.n	8023ee8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8023ede:	3301      	adds	r3, #1
 8023ee0:	105b      	asrs	r3, r3, #1
 8023ee2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023ee6:	e7f0      	b.n	8023eca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8023ee8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8023eec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8023ef0:	4413      	add	r3, r2
 8023ef2:	b29b      	uxth	r3, r3
 8023ef4:	441a      	add	r2, r3
 8023ef6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8023efa:	b212      	sxth	r2, r2
 8023efc:	4296      	cmp	r6, r2
 8023efe:	dae0      	bge.n	8023ec2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8023f00:	1aeb      	subs	r3, r5, r3
 8023f02:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023f06:	e7dc      	b.n	8023ec2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8023f08:	f8bd 5000 	ldrh.w	r5, [sp]
 8023f0c:	441d      	add	r5, r3
 8023f0e:	b2ad      	uxth	r5, r5
 8023f10:	b22e      	sxth	r6, r5
 8023f12:	f9bd 3000 	ldrsh.w	r3, [sp]
 8023f16:	42b3      	cmp	r3, r6
 8023f18:	dac8      	bge.n	8023eac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8023f1a:	6823      	ldr	r3, [r4, #0]
 8023f1c:	4669      	mov	r1, sp
 8023f1e:	4620      	mov	r0, r4
 8023f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023f22:	4798      	blx	r3
 8023f24:	b940      	cbnz	r0, 8023f38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8023f26:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8023f2a:	2b01      	cmp	r3, #1
 8023f2c:	d004      	beq.n	8023f38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8023f2e:	3301      	adds	r3, #1
 8023f30:	105b      	asrs	r3, r3, #1
 8023f32:	f8ad 3004 	strh.w	r3, [sp, #4]
 8023f36:	e7f0      	b.n	8023f1a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8023f38:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8023f3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8023f40:	4413      	add	r3, r2
 8023f42:	b29b      	uxth	r3, r3
 8023f44:	441a      	add	r2, r3
 8023f46:	f8ad 3000 	strh.w	r3, [sp]
 8023f4a:	b212      	sxth	r2, r2
 8023f4c:	4296      	cmp	r6, r2
 8023f4e:	dae0      	bge.n	8023f12 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8023f50:	1aeb      	subs	r3, r5, r3
 8023f52:	f8ad 3004 	strh.w	r3, [sp, #4]
 8023f56:	e7dc      	b.n	8023f12 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8023f58:	20027e90 	.word	0x20027e90

08023f5c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8023f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023f5e:	6803      	ldr	r3, [r0, #0]
 8023f60:	4604      	mov	r4, r0
 8023f62:	4601      	mov	r1, r0
 8023f64:	4668      	mov	r0, sp
 8023f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f68:	4798      	blx	r3
 8023f6a:	2100      	movs	r1, #0
 8023f6c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8023f70:	4668      	mov	r0, sp
 8023f72:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8023f76:	9102      	str	r1, [sp, #8]
 8023f78:	a902      	add	r1, sp, #8
 8023f7a:	f8ad 200c 	strh.w	r2, [sp, #12]
 8023f7e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f82:	f7ea ff99 	bl	800eeb8 <_ZN8touchgfx4RectaNERKS0_>
 8023f86:	6823      	ldr	r3, [r4, #0]
 8023f88:	4669      	mov	r1, sp
 8023f8a:	4620      	mov	r0, r4
 8023f8c:	691b      	ldr	r3, [r3, #16]
 8023f8e:	4798      	blx	r3
 8023f90:	b004      	add	sp, #16
 8023f92:	bd10      	pop	{r4, pc}

08023f94 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8023f94:	2101      	movs	r1, #1
 8023f96:	2200      	movs	r2, #0
 8023f98:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8023f9c:	490a      	ldr	r1, [pc, #40]	; (8023fc8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8023f9e:	8082      	strh	r2, [r0, #4]
 8023fa0:	6001      	str	r1, [r0, #0]
 8023fa2:	21ff      	movs	r1, #255	; 0xff
 8023fa4:	80c2      	strh	r2, [r0, #6]
 8023fa6:	8102      	strh	r2, [r0, #8]
 8023fa8:	8142      	strh	r2, [r0, #10]
 8023faa:	8182      	strh	r2, [r0, #12]
 8023fac:	81c2      	strh	r2, [r0, #14]
 8023fae:	8202      	strh	r2, [r0, #16]
 8023fb0:	8242      	strh	r2, [r0, #18]
 8023fb2:	61c2      	str	r2, [r0, #28]
 8023fb4:	8402      	strh	r2, [r0, #32]
 8023fb6:	8442      	strh	r2, [r0, #34]	; 0x22
 8023fb8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8023fbc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8023fc0:	6282      	str	r2, [r0, #40]	; 0x28
 8023fc2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8023fc6:	4770      	bx	lr
 8023fc8:	0802a2e8 	.word	0x0802a2e8

08023fcc <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8023fcc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8023fd0:	4770      	bx	lr

08023fd2 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8023fd2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8023fd6:	4770      	bx	lr

08023fd8 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8023fd8:	6802      	ldr	r2, [r0, #0]
 8023fda:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8023fde:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8023fe0:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8023fe4:	4710      	bx	r2

08023fe6 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8023fe6:	6802      	ldr	r2, [r0, #0]
 8023fe8:	eef0 0a40 	vmov.f32	s1, s0
 8023fec:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8023ff0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8023ff2:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8023ff6:	4710      	bx	r2

08023ff8 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8023ff8:	6802      	ldr	r2, [r0, #0]
 8023ffa:	eeb0 1a40 	vmov.f32	s2, s0
 8023ffe:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8024002:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8024004:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8024008:	4710      	bx	r2

0802400a <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 802400a:	6802      	ldr	r2, [r0, #0]
 802400c:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8024010:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8024012:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8024016:	4710      	bx	r2

08024018 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8024018:	6802      	ldr	r2, [r0, #0]
 802401a:	eef0 0a40 	vmov.f32	s1, s0
 802401e:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8024022:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8024024:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8024028:	4710      	bx	r2

0802402a <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 802402a:	6802      	ldr	r2, [r0, #0]
 802402c:	eeb0 1a40 	vmov.f32	s2, s0
 8024030:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8024034:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8024036:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 802403a:	4710      	bx	r2

0802403c <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 802403c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8024040:	4770      	bx	lr

08024042 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8024042:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8024046:	4770      	bx	lr

08024048 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8024048:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 802404c:	4770      	bx	lr

0802404e <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 802404e:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 8024052:	4770      	bx	lr

08024054 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8024054:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 8024058:	4770      	bx	lr

0802405a <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 802405a:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 802405e:	4770      	bx	lr

08024060 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8024060:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8024064:	4770      	bx	lr

08024066 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8024066:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 802406a:	4770      	bx	lr

0802406c <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 802406c:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 8024070:	4770      	bx	lr

08024072 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8024072:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 8024076:	4770      	bx	lr

08024078 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8024078:	ee07 2a90 	vmov	s15, r2
 802407c:	6803      	ldr	r3, [r0, #0]
 802407e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8024082:	ee07 1a90 	vmov	s15, r1
 8024086:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 802408a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802408e:	4718      	bx	r3

08024090 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8024090:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8024094:	4770      	bx	lr

08024096 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8024096:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 802409a:	4770      	bx	lr

0802409c <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 802409c:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 80240a0:	4770      	bx	lr

080240a2 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 80240a2:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 80240a6:	4770      	bx	lr

080240a8 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 80240a8:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 80240ac:	4770      	bx	lr

080240ae <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 80240ae:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 80240b2:	4770      	bx	lr

080240b4 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 80240b4:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 80240b8:	4770      	bx	lr

080240ba <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 80240ba:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 80240be:	4770      	bx	lr

080240c0 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 80240c0:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 80240c4:	4770      	bx	lr

080240c6 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 80240c6:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 80240ca:	4770      	bx	lr

080240cc <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 80240cc:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 80240d0:	4770      	bx	lr

080240d2 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 80240d2:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 80240d6:	4770      	bx	lr

080240d8 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 80240d8:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 80240dc:	4770      	bx	lr

080240de <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 80240de:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 80240e2:	4770      	bx	lr

080240e4 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 80240e4:	b510      	push	{r4, lr}
 80240e6:	ed2d 8b04 	vpush	{d8-d9}
 80240ea:	6803      	ldr	r3, [r0, #0]
 80240ec:	4604      	mov	r4, r0
 80240ee:	eeb0 8a40 	vmov.f32	s16, s0
 80240f2:	eef0 8a60 	vmov.f32	s17, s1
 80240f6:	699b      	ldr	r3, [r3, #24]
 80240f8:	eeb0 9a41 	vmov.f32	s18, s2
 80240fc:	4798      	blx	r3
 80240fe:	6823      	ldr	r3, [r4, #0]
 8024100:	4620      	mov	r0, r4
 8024102:	eef0 0a68 	vmov.f32	s1, s17
 8024106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024108:	eeb0 1a49 	vmov.f32	s2, s18
 802410c:	eeb0 0a48 	vmov.f32	s0, s16
 8024110:	4798      	blx	r3
 8024112:	6823      	ldr	r3, [r4, #0]
 8024114:	4620      	mov	r0, r4
 8024116:	699b      	ldr	r3, [r3, #24]
 8024118:	ecbd 8b04 	vpop	{d8-d9}
 802411c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024120:	4718      	bx	r3

08024122 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8024122:	b510      	push	{r4, lr}
 8024124:	ed2d 8b02 	vpush	{d8}
 8024128:	6803      	ldr	r3, [r0, #0]
 802412a:	4604      	mov	r4, r0
 802412c:	eeb0 8a40 	vmov.f32	s16, s0
 8024130:	699b      	ldr	r3, [r3, #24]
 8024132:	4798      	blx	r3
 8024134:	6823      	ldr	r3, [r4, #0]
 8024136:	4620      	mov	r0, r4
 8024138:	eeb0 0a48 	vmov.f32	s0, s16
 802413c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8024140:	4798      	blx	r3
 8024142:	6823      	ldr	r3, [r4, #0]
 8024144:	4620      	mov	r0, r4
 8024146:	699b      	ldr	r3, [r3, #24]
 8024148:	ecbd 8b02 	vpop	{d8}
 802414c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024150:	4718      	bx	r3

08024152 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8024152:	2200      	movs	r2, #0
 8024154:	8002      	strh	r2, [r0, #0]
 8024156:	8042      	strh	r2, [r0, #2]
 8024158:	8082      	strh	r2, [r0, #4]
 802415a:	80c2      	strh	r2, [r0, #6]
 802415c:	4770      	bx	lr

0802415e <_ZN8touchgfx13TextureMapperD1Ev>:
 802415e:	4770      	bx	lr

08024160 <_ZN8touchgfx13TextureMapperD0Ev>:
 8024160:	b510      	push	{r4, lr}
 8024162:	4604      	mov	r4, r0
 8024164:	2190      	movs	r1, #144	; 0x90
 8024166:	f000 fe02 	bl	8024d6e <_ZdlPvj>
 802416a:	4620      	mov	r0, r4
 802416c:	bd10      	pop	{r4, pc}
	...

08024170 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8024170:	b538      	push	{r3, r4, r5, lr}
 8024172:	2301      	movs	r3, #1
 8024174:	2500      	movs	r5, #0
 8024176:	4604      	mov	r4, r0
 8024178:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 802417c:	4b1f      	ldr	r3, [pc, #124]	; (80241fc <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 802417e:	8085      	strh	r5, [r0, #4]
 8024180:	80c5      	strh	r5, [r0, #6]
 8024182:	8105      	strh	r5, [r0, #8]
 8024184:	8145      	strh	r5, [r0, #10]
 8024186:	8185      	strh	r5, [r0, #12]
 8024188:	81c5      	strh	r5, [r0, #14]
 802418a:	8205      	strh	r5, [r0, #16]
 802418c:	8245      	strh	r5, [r0, #18]
 802418e:	61c5      	str	r5, [r0, #28]
 8024190:	8405      	strh	r5, [r0, #32]
 8024192:	8445      	strh	r5, [r0, #34]	; 0x22
 8024194:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8024198:	6003      	str	r3, [r0, #0]
 802419a:	e9c0 5505 	strd	r5, r5, [r0, #20]
 802419e:	880b      	ldrh	r3, [r1, #0]
 80241a0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80241a2:	23ff      	movs	r3, #255	; 0xff
 80241a4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80241a8:	f7ed fbae 	bl	8011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80241ac:	4b14      	ldr	r3, [pc, #80]	; (8024200 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 80241ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80241b2:	4914      	ldr	r1, [pc, #80]	; (8024204 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 80241b4:	6023      	str	r3, [r4, #0]
 80241b6:	2300      	movs	r3, #0
 80241b8:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 80241bc:	4620      	mov	r0, r4
 80241be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80241c0:	6323      	str	r3, [r4, #48]	; 0x30
 80241c2:	6363      	str	r3, [r4, #52]	; 0x34
 80241c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80241c6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80241c8:	6463      	str	r3, [r4, #68]	; 0x44
 80241ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80241cc:	6523      	str	r3, [r4, #80]	; 0x50
 80241ce:	6563      	str	r3, [r4, #84]	; 0x54
 80241d0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80241d2:	6623      	str	r3, [r4, #96]	; 0x60
 80241d4:	66a3      	str	r3, [r4, #104]	; 0x68
 80241d6:	66e3      	str	r3, [r4, #108]	; 0x6c
 80241d8:	6763      	str	r3, [r4, #116]	; 0x74
 80241da:	67a3      	str	r3, [r4, #120]	; 0x78
 80241dc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80241e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80241e4:	230c      	movs	r3, #12
 80241e6:	6422      	str	r2, [r4, #64]	; 0x40
 80241e8:	64e1      	str	r1, [r4, #76]	; 0x4c
 80241ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80241ec:	6662      	str	r2, [r4, #100]	; 0x64
 80241ee:	6722      	str	r2, [r4, #112]	; 0x70
 80241f0:	67e2      	str	r2, [r4, #124]	; 0x7c
 80241f2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80241f6:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 80241fa:	bd38      	pop	{r3, r4, r5, pc}
 80241fc:	08029df0 	.word	0x08029df0
 8024200:	0802a360 	.word	0x0802a360
 8024204:	447a0000 	.word	0x447a0000

08024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8024208:	b570      	push	{r4, r5, r6, lr}
 802420a:	ed2d 8b04 	vpush	{d8-d9}
 802420e:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8024212:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8024214:	4604      	mov	r4, r0
 8024216:	add0      	add	r5, sp, #832	; 0x340
 8024218:	f825 3d40 	strh.w	r3, [r5, #-64]!
 802421c:	4628      	mov	r0, r5
 802421e:	f7f3 f859 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024222:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8024224:	4606      	mov	r6, r0
 8024226:	4628      	mov	r0, r5
 8024228:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 802422c:	f7f3 f886 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8024230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024234:	1c72      	adds	r2, r6, #1
 8024236:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 802423a:	3001      	adds	r0, #1
 802423c:	ee07 2a90 	vmov	s15, r2
 8024240:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8024244:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8024248:	ee06 0a90 	vmov	s13, r0
 802424c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8024250:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024256:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 802425a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802425e:	9312      	str	r3, [sp, #72]	; 0x48
 8024260:	9316      	str	r3, [sp, #88]	; 0x58
 8024262:	a830      	add	r0, sp, #192	; 0xc0
 8024264:	ee77 7a86 	vadd.f32	s15, s15, s12
 8024268:	931a      	str	r3, [sp, #104]	; 0x68
 802426a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 802426e:	931e      	str	r3, [sp, #120]	; 0x78
 8024270:	2300      	movs	r3, #0
 8024272:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8024276:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 802427a:	ae70      	add	r6, sp, #448	; 0x1c0
 802427c:	9320      	str	r3, [sp, #128]	; 0x80
 802427e:	9321      	str	r3, [sp, #132]	; 0x84
 8024280:	9322      	str	r3, [sp, #136]	; 0x88
 8024282:	9324      	str	r3, [sp, #144]	; 0x90
 8024284:	9325      	str	r3, [sp, #148]	; 0x94
 8024286:	9326      	str	r3, [sp, #152]	; 0x98
 8024288:	9328      	str	r3, [sp, #160]	; 0xa0
 802428a:	9329      	str	r3, [sp, #164]	; 0xa4
 802428c:	932a      	str	r3, [sp, #168]	; 0xa8
 802428e:	932c      	str	r3, [sp, #176]	; 0xb0
 8024290:	932d      	str	r3, [sp, #180]	; 0xb4
 8024292:	932e      	str	r3, [sp, #184]	; 0xb8
 8024294:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8024298:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 802429c:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 80242a0:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 80242a4:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 80242a8:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 80242ac:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 80242b0:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 80242b4:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80242b8:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 80242bc:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 80242c0:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 80242c4:	f000 fc2c 	bl	8024b20 <_ZN8touchgfx9Matrix4x4C1Ev>
 80242c8:	eeb1 0a49 	vneg.f32	s0, s18
 80242cc:	a830      	add	r0, sp, #192	; 0xc0
 80242ce:	f000 fcf7 	bl	8024cc0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80242d2:	eeb1 0a68 	vneg.f32	s0, s17
 80242d6:	f000 fd01 	bl	8024cdc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80242da:	eeb1 0a48 	vneg.f32	s0, s16
 80242de:	f000 fd0c 	bl	8024cfa <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 80242e2:	a840      	add	r0, sp, #256	; 0x100
 80242e4:	f000 fc1c 	bl	8024b20 <_ZN8touchgfx9Matrix4x4C1Ev>
 80242e8:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80242ec:	a840      	add	r0, sp, #256	; 0x100
 80242ee:	f000 fc6b 	bl	8024bc8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 80242f2:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 80242f6:	f000 fc91 	bl	8024c1c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 80242fa:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80242fe:	f000 fcb6 	bl	8024c6e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8024302:	a850      	add	r0, sp, #320	; 0x140
 8024304:	f000 fc0c 	bl	8024b20 <_ZN8touchgfx9Matrix4x4C1Ev>
 8024308:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 802430c:	a850      	add	r0, sp, #320	; 0x140
 802430e:	f000 fd03 	bl	8024d18 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8024312:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8024316:	f000 fd0b 	bl	8024d30 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 802431a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 802431e:	f000 fd14 	bl	8024d4a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8024322:	a860      	add	r0, sp, #384	; 0x180
 8024324:	f000 fbfc 	bl	8024b20 <_ZN8touchgfx9Matrix4x4C1Ev>
 8024328:	eeb0 0a49 	vmov.f32	s0, s18
 802432c:	a860      	add	r0, sp, #384	; 0x180
 802432e:	f000 fcc7 	bl	8024cc0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8024332:	eeb0 0a68 	vmov.f32	s0, s17
 8024336:	f000 fcd1 	bl	8024cdc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 802433a:	eeb0 0a48 	vmov.f32	s0, s16
 802433e:	f000 fcdc 	bl	8024cfa <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8024342:	aa50      	add	r2, sp, #320	; 0x140
 8024344:	a960      	add	r1, sp, #384	; 0x180
 8024346:	a8b0      	add	r0, sp, #704	; 0x2c0
 8024348:	f000 fc02 	bl	8024b50 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802434c:	4628      	mov	r0, r5
 802434e:	aa40      	add	r2, sp, #256	; 0x100
 8024350:	a9b0      	add	r1, sp, #704	; 0x2c0
 8024352:	f000 fbfd 	bl	8024b50 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8024356:	4629      	mov	r1, r5
 8024358:	aa30      	add	r2, sp, #192	; 0xc0
 802435a:	a870      	add	r0, sp, #448	; 0x1c0
 802435c:	f000 fbf8 	bl	8024b50 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8024360:	a880      	add	r0, sp, #512	; 0x200
 8024362:	f000 fbdd 	bl	8024b20 <_ZN8touchgfx9Matrix4x4C1Ev>
 8024366:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 802436a:	a880      	add	r0, sp, #512	; 0x200
 802436c:	eeb1 0a40 	vneg.f32	s0, s0
 8024370:	f000 fca6 	bl	8024cc0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8024374:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8024378:	a880      	add	r0, sp, #512	; 0x200
 802437a:	eeb1 0a40 	vneg.f32	s0, s0
 802437e:	f000 fcad 	bl	8024cdc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8024382:	a890      	add	r0, sp, #576	; 0x240
 8024384:	f000 fbcc 	bl	8024b20 <_ZN8touchgfx9Matrix4x4C1Ev>
 8024388:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 802438c:	a890      	add	r0, sp, #576	; 0x240
 802438e:	f000 fc0b 	bl	8024ba8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8024392:	a8a0      	add	r0, sp, #640	; 0x280
 8024394:	f000 fbc4 	bl	8024b20 <_ZN8touchgfx9Matrix4x4C1Ev>
 8024398:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 802439c:	a8a0      	add	r0, sp, #640	; 0x280
 802439e:	f000 fc8f 	bl	8024cc0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80243a2:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 80243a6:	f000 fc99 	bl	8024cdc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80243aa:	aa90      	add	r2, sp, #576	; 0x240
 80243ac:	a9a0      	add	r1, sp, #640	; 0x280
 80243ae:	a8b0      	add	r0, sp, #704	; 0x2c0
 80243b0:	f000 fbce 	bl	8024b50 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80243b4:	4628      	mov	r0, r5
 80243b6:	aa80      	add	r2, sp, #512	; 0x200
 80243b8:	a9b0      	add	r1, sp, #704	; 0x2c0
 80243ba:	f000 fbc9 	bl	8024b50 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80243be:	4629      	mov	r1, r5
 80243c0:	466d      	mov	r5, sp
 80243c2:	aa70      	add	r2, sp, #448	; 0x1c0
 80243c4:	4668      	mov	r0, sp
 80243c6:	f000 fbc3 	bl	8024b50 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80243ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80243cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80243ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80243d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80243d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80243d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80243d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80243da:	2500      	movs	r5, #0
 80243dc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80243e0:	0129      	lsls	r1, r5, #4
 80243e2:	ab20      	add	r3, sp, #128	; 0x80
 80243e4:	3501      	adds	r5, #1
 80243e6:	a870      	add	r0, sp, #448	; 0x1c0
 80243e8:	185e      	adds	r6, r3, r1
 80243ea:	ab10      	add	r3, sp, #64	; 0x40
 80243ec:	4419      	add	r1, r3
 80243ee:	f000 fb67 	bl	8024ac0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 80243f2:	2d04      	cmp	r5, #4
 80243f4:	ed86 0a00 	vstr	s0, [r6]
 80243f8:	edc6 0a01 	vstr	s1, [r6, #4]
 80243fc:	ed86 1a02 	vstr	s2, [r6, #8]
 8024400:	edc6 1a03 	vstr	s3, [r6, #12]
 8024404:	d1ec      	bne.n	80243e0 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8024406:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 802440a:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 802440e:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 8024412:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8024416:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 802441a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802441e:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8024422:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8024426:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 802442a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802442e:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 8024432:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8024436:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 802443a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802443e:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 8024442:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8024446:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 802444a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802444e:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 8024452:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8024456:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 802445a:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 802445e:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 8024462:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8024466:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 802446a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802446e:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 8024472:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8024476:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 802447a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802447e:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8024482:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8024486:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 802448a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802448e:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 8024492:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8024496:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 802449a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802449e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80244a2:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 80244a6:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 80244aa:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 80244ae:	ecbd 8b04 	vpop	{d8-d9}
 80244b2:	bd70      	pop	{r4, r5, r6, pc}

080244b4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 80244b4:	b510      	push	{r4, lr}
 80244b6:	4604      	mov	r4, r0
 80244b8:	f7ed fa26 	bl	8011908 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80244bc:	4620      	mov	r0, r4
 80244be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244c2:	f7ff bea1 	b.w	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080244c6 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 80244c6:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 80244ca:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 80244ce:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 80244d2:	f7ff be99 	b.w	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080244d6 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 80244d6:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 80244da:	f7ff be95 	b.w	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080244de <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 80244de:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 80244e2:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 80244e6:	f7ff be8f 	b.w	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080244ea <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 80244ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80244ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80244f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244f6:	fe30 0a27 	vselgt.f32	s0, s0, s15
 80244fa:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 80244fe:	f7ff be83 	b.w	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08024502 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8024502:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 8024506:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 802450a:	f7ff be7d 	b.w	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802450e <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 802450e:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8024512:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8024516:	f7ff be77 	b.w	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802451a <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 802451a:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 802451e:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8024522:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 8024526:	f7ff be6f 	b.w	8024208 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802452a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 802452a:	b510      	push	{r4, lr}
 802452c:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
 8024530:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
 8024534:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 8024538:	eef4 7ae5 	vcmpe.f32	s15, s11
 802453c:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
 8024540:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8024544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024548:	bf54      	ite	pl
 802454a:	eeb0 7a65 	vmovpl.f32	s14, s11
 802454e:	eeb0 7a67 	vmovmi.f32	s14, s15
 8024552:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8024556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802455a:	fe37 7a06 	vselgt.f32	s14, s14, s12
 802455e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8024562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024566:	fe37 7a26 	vselgt.f32	s14, s14, s13
 802456a:	febb 7a47 	vrintm.f32	s14, s14
 802456e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8024572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024576:	eef4 7ae5 	vcmpe.f32	s15, s11
 802457a:	bf56      	itet	pl
 802457c:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8024580:	2200      	movmi	r2, #0
 8024582:	ee17 3a10 	vmovpl	r3, s14
 8024586:	ee07 4a10 	vmov	s14, r4
 802458a:	bf58      	it	pl
 802458c:	b21a      	sxthpl	r2, r3
 802458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024596:	8002      	strh	r2, [r0, #0]
 8024598:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 802459c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80245a0:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
 80245a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245a8:	bf58      	it	pl
 80245aa:	eef0 7a46 	vmovpl.f32	s15, s12
 80245ae:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
 80245b2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80245b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245ba:	bf58      	it	pl
 80245bc:	eef0 7a66 	vmovpl.f32	s15, s13
 80245c0:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 80245c4:	fefa 7a67 	vrintp.f32	s15, s15
 80245c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80245cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245d0:	bfdc      	itt	le
 80245d2:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80245d6:	ee17 3a90 	vmovle	r3, s15
 80245da:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
 80245de:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80245e2:	eef4 7ae5 	vcmpe.f32	s15, s11
 80245e6:	bfd8      	it	le
 80245e8:	b21c      	sxthle	r4, r3
 80245ea:	1aa2      	subs	r2, r4, r2
 80245ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245f0:	8082      	strh	r2, [r0, #4]
 80245f2:	bf54      	ite	pl
 80245f4:	eeb0 7a65 	vmovpl.f32	s14, s11
 80245f8:	eeb0 7a67 	vmovmi.f32	s14, s15
 80245fc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8024600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024604:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8024608:	eef4 6ac7 	vcmpe.f32	s13, s14
 802460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024610:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8024614:	febb 7a47 	vrintm.f32	s14, s14
 8024618:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024620:	eef4 7ae5 	vcmpe.f32	s15, s11
 8024624:	bf56      	itet	pl
 8024626:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 802462a:	2300      	movmi	r3, #0
 802462c:	ee17 3a10 	vmovpl	r3, s14
 8024630:	ee07 1a10 	vmov	s14, r1
 8024634:	bf58      	it	pl
 8024636:	b21b      	sxthpl	r3, r3
 8024638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802463c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024640:	8043      	strh	r3, [r0, #2]
 8024642:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8024646:	eeb4 6ae7 	vcmpe.f32	s12, s15
 802464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802464e:	bf58      	it	pl
 8024650:	eef0 7a46 	vmovpl.f32	s15, s12
 8024654:	eef4 6ae7 	vcmpe.f32	s13, s15
 8024658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802465c:	bf58      	it	pl
 802465e:	eef0 7a66 	vmovpl.f32	s15, s13
 8024662:	fefa 7a67 	vrintp.f32	s15, s15
 8024666:	eef4 7ac7 	vcmpe.f32	s15, s14
 802466a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802466e:	bfde      	ittt	le
 8024670:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8024674:	ee17 1a90 	vmovle	r1, s15
 8024678:	b209      	sxthle	r1, r1
 802467a:	1acb      	subs	r3, r1, r3
 802467c:	80c3      	strh	r3, [r0, #6]
 802467e:	bd10      	pop	{r4, pc}

08024680 <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 8024680:	b513      	push	{r0, r1, r4, lr}
 8024682:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8024686:	4604      	mov	r4, r0
 8024688:	b143      	cbz	r3, 802469c <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 802468a:	4601      	mov	r1, r0
 802468c:	4668      	mov	r0, sp
 802468e:	f7ff ff4c 	bl	802452a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8024692:	6823      	ldr	r3, [r4, #0]
 8024694:	4669      	mov	r1, sp
 8024696:	4620      	mov	r0, r4
 8024698:	691b      	ldr	r3, [r3, #16]
 802469a:	4798      	blx	r3
 802469c:	b002      	add	sp, #8
 802469e:	bd10      	pop	{r4, pc}

080246a0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 80246a0:	4603      	mov	r3, r0
 80246a2:	3026      	adds	r0, #38	; 0x26
 80246a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80246a8:	b90b      	cbnz	r3, 80246ae <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 80246aa:	f7f0 be4d 	b.w	8015348 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80246ae:	f7f0 be5b 	b.w	8015368 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080246b4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80246b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246b8:	4604      	mov	r4, r0
 80246ba:	469b      	mov	fp, r3
 80246bc:	ed2d 8b04 	vpush	{d8-d9}
 80246c0:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80246c4:	b0b3      	sub	sp, #204	; 0xcc
 80246c6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80246ca:	f9b1 6000 	ldrsh.w	r6, [r1]
 80246ce:	8888      	ldrh	r0, [r1, #4]
 80246d0:	9206      	str	r2, [sp, #24]
 80246d2:	2200      	movs	r2, #0
 80246d4:	4430      	add	r0, r6
 80246d6:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 80246da:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 80246de:	b280      	uxth	r0, r0
 80246e0:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 80246e4:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 80246e6:	fa0f fe80 	sxth.w	lr, r0
 80246ea:	9211      	str	r2, [sp, #68]	; 0x44
 80246ec:	4596      	cmp	lr, r2
 80246ee:	f340 8129 	ble.w	8024944 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80246f2:	45b4      	cmp	ip, r6
 80246f4:	f340 8126 	ble.w	8024944 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80246f8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80246fc:	88ca      	ldrh	r2, [r1, #6]
 80246fe:	442a      	add	r2, r5
 8024700:	b292      	uxth	r2, r2
 8024702:	b211      	sxth	r1, r2
 8024704:	2900      	cmp	r1, #0
 8024706:	f340 811d 	ble.w	8024944 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802470a:	42ab      	cmp	r3, r5
 802470c:	f340 811a 	ble.w	8024944 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8024710:	45f4      	cmp	ip, lr
 8024712:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8024716:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802471a:	bfb8      	it	lt
 802471c:	fa1f f08c 	uxthlt.w	r0, ip
 8024720:	428b      	cmp	r3, r1
 8024722:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8024726:	bfb8      	it	lt
 8024728:	b29a      	uxthlt	r2, r3
 802472a:	1b80      	subs	r0, r0, r6
 802472c:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8024730:	1b52      	subs	r2, r2, r5
 8024732:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8024736:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 802473a:	ab11      	add	r3, sp, #68	; 0x44
 802473c:	ad13      	add	r5, sp, #76	; 0x4c
 802473e:	6822      	ldr	r2, [r4, #0]
 8024740:	1d26      	adds	r6, r4, #4
 8024742:	9307      	str	r3, [sp, #28]
 8024744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8024746:	e893 0003 	ldmia.w	r3, {r0, r1}
 802474a:	e885 0003 	stmia.w	r5, {r0, r1}
 802474e:	4629      	mov	r1, r5
 8024750:	4620      	mov	r0, r4
 8024752:	4790      	blx	r2
 8024754:	4621      	mov	r1, r4
 8024756:	a815      	add	r0, sp, #84	; 0x54
 8024758:	f7f0 fd58 	bl	801520c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802475c:	a815      	add	r0, sp, #84	; 0x54
 802475e:	f7ef fac5 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024762:	9b07      	ldr	r3, [sp, #28]
 8024764:	4631      	mov	r1, r6
 8024766:	4618      	mov	r0, r3
 8024768:	f7ef fb04 	bl	8013d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802476c:	4628      	mov	r0, r5
 802476e:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8024772:	f7ef fabb 	bl	8013cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024776:	4628      	mov	r0, r5
 8024778:	f7f2 fe98 	bl	80174ac <_ZNK8touchgfx6Bitmap7getDataEv>
 802477c:	9007      	str	r0, [sp, #28]
 802477e:	2800      	cmp	r0, #0
 8024780:	f000 80db 	beq.w	802493a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8024784:	f8db 2000 	ldr.w	r2, [fp]
 8024788:	a90d      	add	r1, sp, #52	; 0x34
 802478a:	a809      	add	r0, sp, #36	; 0x24
 802478c:	9209      	str	r2, [sp, #36]	; 0x24
 802478e:	f8db 2004 	ldr.w	r2, [fp, #4]
 8024792:	920a      	str	r2, [sp, #40]	; 0x28
 8024794:	f8db 2008 	ldr.w	r2, [fp, #8]
 8024798:	920b      	str	r2, [sp, #44]	; 0x2c
 802479a:	f8db 200c 	ldr.w	r2, [fp, #12]
 802479e:	920c      	str	r2, [sp, #48]	; 0x30
 80247a0:	f8da 2000 	ldr.w	r2, [sl]
 80247a4:	920d      	str	r2, [sp, #52]	; 0x34
 80247a6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80247aa:	920e      	str	r2, [sp, #56]	; 0x38
 80247ac:	f8da 2008 	ldr.w	r2, [sl, #8]
 80247b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80247b2:	f8da 200c 	ldr.w	r2, [sl, #12]
 80247b6:	9210      	str	r2, [sp, #64]	; 0x40
 80247b8:	4632      	mov	r2, r6
 80247ba:	f7ef fabf 	bl	8013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80247be:	4632      	mov	r2, r6
 80247c0:	a90e      	add	r1, sp, #56	; 0x38
 80247c2:	a80a      	add	r0, sp, #40	; 0x28
 80247c4:	f7ef faba 	bl	8013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80247c8:	4632      	mov	r2, r6
 80247ca:	a90f      	add	r1, sp, #60	; 0x3c
 80247cc:	a80b      	add	r0, sp, #44	; 0x2c
 80247ce:	f7ef fab5 	bl	8013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80247d2:	4632      	mov	r2, r6
 80247d4:	a910      	add	r1, sp, #64	; 0x40
 80247d6:	a80c      	add	r0, sp, #48	; 0x30
 80247d8:	f7ef fab0 	bl	8013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80247dc:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80247e0:	edd7 4a00 	vldr	s9, [r7]
 80247e4:	eef0 6a67 	vmov.f32	s13, s15
 80247e8:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80247ec:	edd7 5a01 	vldr	s11, [r7, #4]
 80247f0:	eeb0 7a67 	vmov.f32	s14, s15
 80247f4:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80247f8:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80247fc:	ed98 4a00 	vldr	s8, [r8]
 8024800:	eeb0 6a67 	vmov.f32	s12, s15
 8024804:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8024808:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 802480c:	ed98 5a01 	vldr	s10, [r8, #4]
 8024810:	ed99 9a00 	vldr	s18, [r9]
 8024814:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8024818:	ed99 8a01 	vldr	s16, [r9, #4]
 802481c:	edd9 8a02 	vldr	s17, [r9, #8]
 8024820:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8024824:	ee16 6a10 	vmov	r6, s12
 8024828:	eeb0 6a67 	vmov.f32	s12, s15
 802482c:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8024830:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8024834:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8024838:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 802483c:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 8024840:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 8024844:	ee16 0a10 	vmov	r0, s12
 8024848:	eeb0 6a67 	vmov.f32	s12, s15
 802484c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8024850:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8024854:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8024858:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 802485c:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 8024860:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8024864:	ee16 1a10 	vmov	r1, s12
 8024868:	eeb0 6a67 	vmov.f32	s12, s15
 802486c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8024870:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8024874:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8024878:	68ff      	ldr	r7, [r7, #12]
 802487a:	9624      	str	r6, [sp, #144]	; 0x90
 802487c:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8024880:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 8024884:	ee16 2a10 	vmov	r2, s12
 8024888:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 802488c:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 8024890:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8024894:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8024898:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 802489c:	4628      	mov	r0, r5
 802489e:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 80248a2:	9b06      	ldr	r3, [sp, #24]
 80248a4:	922d      	str	r2, [sp, #180]	; 0xb4
 80248a6:	4a29      	ldr	r2, [pc, #164]	; (802494c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 80248a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80248aa:	8812      	ldrh	r2, [r2, #0]
 80248ac:	9b07      	ldr	r3, [sp, #28]
 80248ae:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 80248b2:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 80248b6:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 80248ba:	9218      	str	r2, [sp, #96]	; 0x60
 80248bc:	9319      	str	r3, [sp, #100]	; 0x64
 80248be:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 80248c2:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 80248c6:	9731      	str	r7, [sp, #196]	; 0xc4
 80248c8:	f7f2 fe20 	bl	801750c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80248cc:	901a      	str	r0, [sp, #104]	; 0x68
 80248ce:	4628      	mov	r0, r5
 80248d0:	f7f2 fd00 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80248d4:	901b      	str	r0, [sp, #108]	; 0x6c
 80248d6:	4628      	mov	r0, r5
 80248d8:	f7f2 fd30 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80248dc:	901c      	str	r0, [sp, #112]	; 0x70
 80248de:	4628      	mov	r0, r5
 80248e0:	f7f2 fcf8 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80248e4:	eeb4 9a48 	vcmp.f32	s18, s16
 80248e8:	901d      	str	r0, [sp, #116]	; 0x74
 80248ea:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 80248ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248f2:	d107      	bne.n	8024904 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 80248f4:	eeb4 8a68 	vcmp.f32	s16, s17
 80248f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80248fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024900:	bf08      	it	eq
 8024902:	461e      	moveq	r6, r3
 8024904:	4b12      	ldr	r3, [pc, #72]	; (8024950 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8024906:	681b      	ldr	r3, [r3, #0]
 8024908:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 802490c:	b10a      	cbz	r2, 8024912 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 802490e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8024910:	b905      	cbnz	r5, 8024914 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8024912:	689d      	ldr	r5, [r3, #8]
 8024914:	682b      	ldr	r3, [r5, #0]
 8024916:	4620      	mov	r0, r4
 8024918:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 802491a:	f7ff fec1 	bl	80246a0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 802491e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8024922:	aa1e      	add	r2, sp, #120	; 0x78
 8024924:	9604      	str	r6, [sp, #16]
 8024926:	a917      	add	r1, sp, #92	; 0x5c
 8024928:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802492c:	ab13      	add	r3, sp, #76	; 0x4c
 802492e:	4628      	mov	r0, r5
 8024930:	9301      	str	r3, [sp, #4]
 8024932:	ab15      	add	r3, sp, #84	; 0x54
 8024934:	9300      	str	r3, [sp, #0]
 8024936:	ab19      	add	r3, sp, #100	; 0x64
 8024938:	47b8      	blx	r7
 802493a:	b033      	add	sp, #204	; 0xcc
 802493c:	ecbd 8b04 	vpop	{d8-d9}
 8024940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024944:	2300      	movs	r3, #0
 8024946:	9312      	str	r3, [sp, #72]	; 0x48
 8024948:	e6f7      	b.n	802473a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 802494a:	bf00      	nop
 802494c:	20027e92 	.word	0x20027e92
 8024950:	20027e98 	.word	0x20027e98

08024954 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8024954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024958:	ed2d 8b02 	vpush	{d8}
 802495c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8024960:	b098      	sub	sp, #96	; 0x60
 8024962:	4604      	mov	r4, r0
 8024964:	4688      	mov	r8, r1
 8024966:	2b00      	cmp	r3, #0
 8024968:	d077      	beq.n	8024a5a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 802496a:	f100 0526 	add.w	r5, r0, #38	; 0x26
 802496e:	4628      	mov	r0, r5
 8024970:	f7f2 fcb0 	bl	80172d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024974:	ee07 0a90 	vmov	s15, r0
 8024978:	4628      	mov	r0, r5
 802497a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 802497e:	f7f2 fcdd 	bl	801733c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8024982:	4b4e      	ldr	r3, [pc, #312]	; (8024abc <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8024984:	ee07 0a90 	vmov	s15, r0
 8024988:	781b      	ldrb	r3, [r3, #0]
 802498a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802498e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8024992:	2b01      	cmp	r3, #1
 8024994:	d066      	beq.n	8024a64 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8024996:	eeb0 6a47 	vmov.f32	s12, s14
 802499a:	ee17 3a10 	vmov	r3, s14
 802499e:	eeb0 4a48 	vmov.f32	s8, s16
 80249a2:	eeb0 7a48 	vmov.f32	s14, s16
 80249a6:	eef0 4a67 	vmov.f32	s9, s15
 80249aa:	eeb0 8a67 	vmov.f32	s16, s15
 80249ae:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 80249b2:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 80249b6:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 80249ba:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 80249be:	ee73 1a65 	vsub.f32	s3, s6, s11
 80249c2:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 80249c6:	ee72 6ac5 	vsub.f32	s13, s5, s10
 80249ca:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 80249ce:	ee32 1a45 	vsub.f32	s2, s4, s10
 80249d2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80249d4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80249d6:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 80249da:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80249dc:	ee73 1ae5 	vsub.f32	s3, s7, s11
 80249e0:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 80249e4:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 80249e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80249ec:	eee1 6a21 	vfma.f32	s13, s2, s3
 80249f0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80249f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249f8:	dd3d      	ble.n	8024a76 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 80249fa:	ed8d 5a04 	vstr	s10, [sp, #16]
 80249fe:	ed8d 2a05 	vstr	s4, [sp, #20]
 8024a02:	edcd 2a06 	vstr	s5, [sp, #24]
 8024a06:	f8cd c01c 	str.w	ip, [sp, #28]
 8024a0a:	edcd 5a08 	vstr	s11, [sp, #32]
 8024a0e:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 8024a12:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8024a16:	970b      	str	r7, [sp, #44]	; 0x2c
 8024a18:	960c      	str	r6, [sp, #48]	; 0x30
 8024a1a:	950d      	str	r5, [sp, #52]	; 0x34
 8024a1c:	920e      	str	r2, [sp, #56]	; 0x38
 8024a1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8024a20:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8024a24:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8024a28:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8024a2c:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 8024a30:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8024a34:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8024a38:	9316      	str	r3, [sp, #88]	; 0x58
 8024a3a:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8024a3e:	ab14      	add	r3, sp, #80	; 0x50
 8024a40:	2200      	movs	r2, #0
 8024a42:	4641      	mov	r1, r8
 8024a44:	4620      	mov	r0, r4
 8024a46:	9303      	str	r3, [sp, #12]
 8024a48:	ab10      	add	r3, sp, #64	; 0x40
 8024a4a:	9302      	str	r3, [sp, #8]
 8024a4c:	ab0c      	add	r3, sp, #48	; 0x30
 8024a4e:	9301      	str	r3, [sp, #4]
 8024a50:	ab08      	add	r3, sp, #32
 8024a52:	9300      	str	r3, [sp, #0]
 8024a54:	ab04      	add	r3, sp, #16
 8024a56:	f7ff fe2d 	bl	80246b4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8024a5a:	b018      	add	sp, #96	; 0x60
 8024a5c:	ecbd 8b02 	vpop	{d8}
 8024a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a64:	eeb0 6a48 	vmov.f32	s12, s16
 8024a68:	ee17 3a90 	vmov	r3, s15
 8024a6c:	eef0 4a47 	vmov.f32	s9, s14
 8024a70:	eeb0 4a67 	vmov.f32	s8, s15
 8024a74:	e79b      	b.n	80249ae <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8024a76:	ed8d 5a05 	vstr	s10, [sp, #20]
 8024a7a:	ed8d 2a04 	vstr	s4, [sp, #16]
 8024a7e:	f8cd c018 	str.w	ip, [sp, #24]
 8024a82:	edcd 2a07 	vstr	s5, [sp, #28]
 8024a86:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8024a8a:	ed8d 3a08 	vstr	s6, [sp, #32]
 8024a8e:	970a      	str	r7, [sp, #40]	; 0x28
 8024a90:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8024a94:	960d      	str	r6, [sp, #52]	; 0x34
 8024a96:	950c      	str	r5, [sp, #48]	; 0x30
 8024a98:	900e      	str	r0, [sp, #56]	; 0x38
 8024a9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8024a9c:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8024aa0:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8024aa4:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8024aa8:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8024aac:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8024ab0:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8024ab4:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8024ab8:	9317      	str	r3, [sp, #92]	; 0x5c
 8024aba:	e7c0      	b.n	8024a3e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8024abc:	20027e90 	.word	0x20027e90

08024ac0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8024ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ac2:	2300      	movs	r3, #0
 8024ac4:	b08d      	sub	sp, #52	; 0x34
 8024ac6:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8024aca:	f101 0710 	add.w	r7, r1, #16
 8024ace:	9304      	str	r3, [sp, #16]
 8024ad0:	aa04      	add	r2, sp, #16
 8024ad2:	9305      	str	r3, [sp, #20]
 8024ad4:	9306      	str	r3, [sp, #24]
 8024ad6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024ada:	9307      	str	r3, [sp, #28]
 8024adc:	4613      	mov	r3, r2
 8024ade:	460c      	mov	r4, r1
 8024ae0:	4605      	mov	r5, r0
 8024ae2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8024b1c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8024ae6:	ecb4 7a01 	vldmia	r4!, {s14}
 8024aea:	ecf5 6a01 	vldmia	r5!, {s13}
 8024aee:	42bc      	cmp	r4, r7
 8024af0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024af4:	d1f7      	bne.n	8024ae6 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8024af6:	3010      	adds	r0, #16
 8024af8:	ece2 7a01 	vstmia	r2!, {s15}
 8024afc:	42b0      	cmp	r0, r6
 8024afe:	d1ee      	bne.n	8024ade <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8024b00:	ac0c      	add	r4, sp, #48	; 0x30
 8024b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024b04:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8024b08:	ed9d 0a08 	vldr	s0, [sp, #32]
 8024b0c:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8024b10:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8024b14:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8024b18:	b00d      	add	sp, #52	; 0x34
 8024b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b1c:	00000000 	.word	0x00000000

08024b20 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8024b20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024b24:	2300      	movs	r3, #0
 8024b26:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8024b4c <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 8024b2a:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8024b2e:	2200      	movs	r2, #0
 8024b30:	4293      	cmp	r3, r2
 8024b32:	f102 0201 	add.w	r2, r2, #1
 8024b36:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8024b3a:	2a04      	cmp	r2, #4
 8024b3c:	ece1 6a01 	vstmia	r1!, {s13}
 8024b40:	d1f6      	bne.n	8024b30 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8024b42:	3301      	adds	r3, #1
 8024b44:	2b04      	cmp	r3, #4
 8024b46:	d1f0      	bne.n	8024b2a <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8024b48:	4770      	bx	lr
 8024b4a:	bf00      	nop
 8024b4c:	00000000 	.word	0x00000000

08024b50 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8024b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b54:	460c      	mov	r4, r1
 8024b56:	4605      	mov	r5, r0
 8024b58:	4690      	mov	r8, r2
 8024b5a:	f7ff ffe1 	bl	8024b20 <_ZN8touchgfx9Matrix4x4C1Ev>
 8024b5e:	4628      	mov	r0, r5
 8024b60:	4621      	mov	r1, r4
 8024b62:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8024b66:	2300      	movs	r3, #0
 8024b68:	eb08 0603 	add.w	r6, r8, r3
 8024b6c:	460f      	mov	r7, r1
 8024b6e:	2400      	movs	r4, #0
 8024b70:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8024ba4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8024b74:	4632      	mov	r2, r6
 8024b76:	3401      	adds	r4, #1
 8024b78:	ecf7 6a01 	vldmia	r7!, {s13}
 8024b7c:	3610      	adds	r6, #16
 8024b7e:	ed92 7a00 	vldr	s14, [r2]
 8024b82:	2c04      	cmp	r4, #4
 8024b84:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024b88:	d1f4      	bne.n	8024b74 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8024b8a:	18c2      	adds	r2, r0, r3
 8024b8c:	3304      	adds	r3, #4
 8024b8e:	2b10      	cmp	r3, #16
 8024b90:	edc2 7a00 	vstr	s15, [r2]
 8024b94:	d1e8      	bne.n	8024b68 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8024b96:	3110      	adds	r1, #16
 8024b98:	3010      	adds	r0, #16
 8024b9a:	4561      	cmp	r1, ip
 8024b9c:	d1e3      	bne.n	8024b66 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8024b9e:	4628      	mov	r0, r5
 8024ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ba4:	00000000 	.word	0x00000000

08024ba8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8024ba8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024bac:	f100 0320 	add.w	r3, r0, #32
 8024bb0:	3030      	adds	r0, #48	; 0x30
 8024bb2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8024bb6:	ecf3 7a01 	vldmia	r3!, {s15}
 8024bba:	4283      	cmp	r3, r0
 8024bbc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8024bc0:	edc3 7a03 	vstr	s15, [r3, #12]
 8024bc4:	d1f7      	bne.n	8024bb6 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8024bc6:	4770      	bx	lr

08024bc8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8024bc8:	b510      	push	{r4, lr}
 8024bca:	ed2d 8b02 	vpush	{d8}
 8024bce:	eef0 8a40 	vmov.f32	s17, s0
 8024bd2:	4604      	mov	r4, r0
 8024bd4:	f000 fa08 	bl	8024fe8 <sinf>
 8024bd8:	eeb0 8a40 	vmov.f32	s16, s0
 8024bdc:	eeb0 0a68 	vmov.f32	s0, s17
 8024be0:	f000 f91a 	bl	8024e18 <cosf>
 8024be4:	eeb1 6a48 	vneg.f32	s12, s16
 8024be8:	f104 0310 	add.w	r3, r4, #16
 8024bec:	f104 0220 	add.w	r2, r4, #32
 8024bf0:	edd3 7a04 	vldr	s15, [r3, #16]
 8024bf4:	edd3 6a00 	vldr	s13, [r3]
 8024bf8:	ee26 7a27 	vmul.f32	s14, s12, s15
 8024bfc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024c00:	eea6 7a80 	vfma.f32	s14, s13, s0
 8024c04:	eee6 7a88 	vfma.f32	s15, s13, s16
 8024c08:	eca3 7a01 	vstmia	r3!, {s14}
 8024c0c:	429a      	cmp	r2, r3
 8024c0e:	edc3 7a03 	vstr	s15, [r3, #12]
 8024c12:	d1ed      	bne.n	8024bf0 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8024c14:	4620      	mov	r0, r4
 8024c16:	ecbd 8b02 	vpop	{d8}
 8024c1a:	bd10      	pop	{r4, pc}

08024c1c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8024c1c:	b510      	push	{r4, lr}
 8024c1e:	ed2d 8b02 	vpush	{d8}
 8024c22:	eef0 8a40 	vmov.f32	s17, s0
 8024c26:	4604      	mov	r4, r0
 8024c28:	f000 f9de 	bl	8024fe8 <sinf>
 8024c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8024c30:	eeb0 0a68 	vmov.f32	s0, s17
 8024c34:	f000 f8f0 	bl	8024e18 <cosf>
 8024c38:	eeb1 6a48 	vneg.f32	s12, s16
 8024c3c:	4623      	mov	r3, r4
 8024c3e:	f104 0210 	add.w	r2, r4, #16
 8024c42:	edd3 7a08 	vldr	s15, [r3, #32]
 8024c46:	edd3 6a00 	vldr	s13, [r3]
 8024c4a:	ee27 7a88 	vmul.f32	s14, s15, s16
 8024c4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024c52:	eea6 7a80 	vfma.f32	s14, s13, s0
 8024c56:	eee6 7a26 	vfma.f32	s15, s12, s13
 8024c5a:	eca3 7a01 	vstmia	r3!, {s14}
 8024c5e:	429a      	cmp	r2, r3
 8024c60:	edc3 7a07 	vstr	s15, [r3, #28]
 8024c64:	d1ed      	bne.n	8024c42 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8024c66:	4620      	mov	r0, r4
 8024c68:	ecbd 8b02 	vpop	{d8}
 8024c6c:	bd10      	pop	{r4, pc}

08024c6e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8024c6e:	b510      	push	{r4, lr}
 8024c70:	ed2d 8b02 	vpush	{d8}
 8024c74:	eef0 8a40 	vmov.f32	s17, s0
 8024c78:	4604      	mov	r4, r0
 8024c7a:	f000 f9b5 	bl	8024fe8 <sinf>
 8024c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8024c82:	eeb0 0a68 	vmov.f32	s0, s17
 8024c86:	f000 f8c7 	bl	8024e18 <cosf>
 8024c8a:	eeb1 6a48 	vneg.f32	s12, s16
 8024c8e:	4623      	mov	r3, r4
 8024c90:	f104 0210 	add.w	r2, r4, #16
 8024c94:	edd3 7a04 	vldr	s15, [r3, #16]
 8024c98:	edd3 6a00 	vldr	s13, [r3]
 8024c9c:	ee26 7a27 	vmul.f32	s14, s12, s15
 8024ca0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024ca4:	eea6 7a80 	vfma.f32	s14, s13, s0
 8024ca8:	eee6 7a88 	vfma.f32	s15, s13, s16
 8024cac:	eca3 7a01 	vstmia	r3!, {s14}
 8024cb0:	429a      	cmp	r2, r3
 8024cb2:	edc3 7a03 	vstr	s15, [r3, #12]
 8024cb6:	d1ed      	bne.n	8024c94 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8024cb8:	4620      	mov	r0, r4
 8024cba:	ecbd 8b02 	vpop	{d8}
 8024cbe:	bd10      	pop	{r4, pc}

08024cc0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8024cc0:	4603      	mov	r3, r0
 8024cc2:	f100 0210 	add.w	r2, r0, #16
 8024cc6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8024cca:	edd3 7a00 	vldr	s15, [r3]
 8024cce:	eee7 7a00 	vfma.f32	s15, s14, s0
 8024cd2:	ece3 7a01 	vstmia	r3!, {s15}
 8024cd6:	4293      	cmp	r3, r2
 8024cd8:	d1f5      	bne.n	8024cc6 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 8024cda:	4770      	bx	lr

08024cdc <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 8024cdc:	f100 0310 	add.w	r3, r0, #16
 8024ce0:	f100 0220 	add.w	r2, r0, #32
 8024ce4:	ed93 7a08 	vldr	s14, [r3, #32]
 8024ce8:	edd3 7a00 	vldr	s15, [r3]
 8024cec:	eee7 7a00 	vfma.f32	s15, s14, s0
 8024cf0:	ece3 7a01 	vstmia	r3!, {s15}
 8024cf4:	4293      	cmp	r3, r2
 8024cf6:	d1f5      	bne.n	8024ce4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8024cf8:	4770      	bx	lr

08024cfa <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 8024cfa:	f100 0320 	add.w	r3, r0, #32
 8024cfe:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8024d02:	ed93 7a04 	vldr	s14, [r3, #16]
 8024d06:	edd3 7a00 	vldr	s15, [r3]
 8024d0a:	eee7 7a00 	vfma.f32	s15, s14, s0
 8024d0e:	ece3 7a01 	vstmia	r3!, {s15}
 8024d12:	4293      	cmp	r3, r2
 8024d14:	d1f5      	bne.n	8024d02 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8024d16:	4770      	bx	lr

08024d18 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8024d18:	4603      	mov	r3, r0
 8024d1a:	f100 0210 	add.w	r2, r0, #16
 8024d1e:	edd3 7a00 	vldr	s15, [r3]
 8024d22:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024d26:	ece3 7a01 	vstmia	r3!, {s15}
 8024d2a:	4293      	cmp	r3, r2
 8024d2c:	d1f7      	bne.n	8024d1e <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8024d2e:	4770      	bx	lr

08024d30 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8024d30:	f100 0310 	add.w	r3, r0, #16
 8024d34:	f100 0220 	add.w	r2, r0, #32
 8024d38:	edd3 7a00 	vldr	s15, [r3]
 8024d3c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024d40:	ece3 7a01 	vstmia	r3!, {s15}
 8024d44:	4293      	cmp	r3, r2
 8024d46:	d1f7      	bne.n	8024d38 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8024d48:	4770      	bx	lr

08024d4a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 8024d4a:	f100 0320 	add.w	r3, r0, #32
 8024d4e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8024d52:	edd3 7a00 	vldr	s15, [r3]
 8024d56:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024d5a:	ece3 7a01 	vstmia	r3!, {s15}
 8024d5e:	4293      	cmp	r3, r2
 8024d60:	d1f7      	bne.n	8024d52 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8024d62:	4770      	bx	lr

08024d64 <__aeabi_atexit>:
 8024d64:	460b      	mov	r3, r1
 8024d66:	4601      	mov	r1, r0
 8024d68:	4618      	mov	r0, r3
 8024d6a:	f000 ba01 	b.w	8025170 <__cxa_atexit>

08024d6e <_ZdlPvj>:
 8024d6e:	f000 b812 	b.w	8024d96 <_ZdlPv>

08024d72 <__cxa_guard_acquire>:
 8024d72:	6803      	ldr	r3, [r0, #0]
 8024d74:	07db      	lsls	r3, r3, #31
 8024d76:	d406      	bmi.n	8024d86 <__cxa_guard_acquire+0x14>
 8024d78:	7843      	ldrb	r3, [r0, #1]
 8024d7a:	b103      	cbz	r3, 8024d7e <__cxa_guard_acquire+0xc>
 8024d7c:	deff      	udf	#255	; 0xff
 8024d7e:	2301      	movs	r3, #1
 8024d80:	7043      	strb	r3, [r0, #1]
 8024d82:	4618      	mov	r0, r3
 8024d84:	4770      	bx	lr
 8024d86:	2000      	movs	r0, #0
 8024d88:	4770      	bx	lr

08024d8a <__cxa_guard_release>:
 8024d8a:	2301      	movs	r3, #1
 8024d8c:	6003      	str	r3, [r0, #0]
 8024d8e:	4770      	bx	lr

08024d90 <__cxa_pure_virtual>:
 8024d90:	b508      	push	{r3, lr}
 8024d92:	f000 f80f 	bl	8024db4 <_ZSt9terminatev>

08024d96 <_ZdlPv>:
 8024d96:	f000 ba41 	b.w	802521c <free>

08024d9a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024d9a:	b508      	push	{r3, lr}
 8024d9c:	4780      	blx	r0
 8024d9e:	f000 f9bb 	bl	8025118 <abort>
	...

08024da4 <_ZSt13get_terminatev>:
 8024da4:	4b02      	ldr	r3, [pc, #8]	; (8024db0 <_ZSt13get_terminatev+0xc>)
 8024da6:	6818      	ldr	r0, [r3, #0]
 8024da8:	f3bf 8f5b 	dmb	ish
 8024dac:	4770      	bx	lr
 8024dae:	bf00      	nop
 8024db0:	200000e4 	.word	0x200000e4

08024db4 <_ZSt9terminatev>:
 8024db4:	b508      	push	{r3, lr}
 8024db6:	f7ff fff5 	bl	8024da4 <_ZSt13get_terminatev>
 8024dba:	f7ff ffee 	bl	8024d9a <_ZN10__cxxabiv111__terminateEPFvvE>

08024dbe <sinf_poly>:
 8024dbe:	07cb      	lsls	r3, r1, #31
 8024dc0:	d412      	bmi.n	8024de8 <sinf_poly+0x2a>
 8024dc2:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024dc6:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8024dca:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8024dce:	eea6 7b01 	vfma.f64	d7, d6, d1
 8024dd2:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8024dd6:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024dda:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024dde:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024de2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024de6:	4770      	bx	lr
 8024de8:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8024dec:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024df0:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8024df4:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8024df8:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024dfc:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8024e00:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024e04:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8024e08:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024e0c:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024e10:	e7e5      	b.n	8024dde <sinf_poly+0x20>
 8024e12:	0000      	movs	r0, r0
 8024e14:	0000      	movs	r0, r0
	...

08024e18 <cosf>:
 8024e18:	b538      	push	{r3, r4, r5, lr}
 8024e1a:	ee10 4a10 	vmov	r4, s0
 8024e1e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024e22:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8024e26:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8024e2a:	d21f      	bcs.n	8024e6c <cosf+0x54>
 8024e2c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8024e30:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8024e34:	f0c0 8088 	bcc.w	8024f48 <cosf+0x130>
 8024e38:	ee20 4b00 	vmul.f64	d4, d0, d0
 8024e3c:	4b46      	ldr	r3, [pc, #280]	; (8024f58 <cosf+0x140>)
 8024e3e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 8024e42:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8024e46:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8024e4a:	eea0 6b05 	vfma.f64	d6, d0, d5
 8024e4e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8024e52:	eea0 7b05 	vfma.f64	d7, d0, d5
 8024e56:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8024e5a:	ee20 0b04 	vmul.f64	d0, d0, d4
 8024e5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8024e62:	eea6 7b00 	vfma.f64	d7, d6, d0
 8024e66:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8024e6a:	bd38      	pop	{r3, r4, r5, pc}
 8024e6c:	f240 422e 	movw	r2, #1070	; 0x42e
 8024e70:	4293      	cmp	r3, r2
 8024e72:	d82b      	bhi.n	8024ecc <cosf+0xb4>
 8024e74:	4b38      	ldr	r3, [pc, #224]	; (8024f58 <cosf+0x140>)
 8024e76:	ed93 6b08 	vldr	d6, [r3, #32]
 8024e7a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8024e7e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8024e82:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8024e86:	ee16 1a90 	vmov	r1, s13
 8024e8a:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8024e8e:	1609      	asrs	r1, r1, #24
 8024e90:	ee06 1a90 	vmov	s13, r1
 8024e94:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8024e98:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8024e9c:	f001 0203 	and.w	r2, r1, #3
 8024ea0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024ea4:	eea5 7b46 	vfms.f64	d7, d5, d6
 8024ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8024eac:	ed92 7b00 	vldr	d7, [r2]
 8024eb0:	ee20 1b00 	vmul.f64	d1, d0, d0
 8024eb4:	f011 0f02 	tst.w	r1, #2
 8024eb8:	bf08      	it	eq
 8024eba:	4618      	moveq	r0, r3
 8024ebc:	f081 0101 	eor.w	r1, r1, #1
 8024ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024ec4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024ec8:	f7ff bf79 	b.w	8024dbe <sinf_poly>
 8024ecc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8024ed0:	d236      	bcs.n	8024f40 <cosf+0x128>
 8024ed2:	4a22      	ldr	r2, [pc, #136]	; (8024f5c <cosf+0x144>)
 8024ed4:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8024ed8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8024edc:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8024ee0:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8024ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8024ee8:	4083      	lsls	r3, r0
 8024eea:	6a28      	ldr	r0, [r5, #32]
 8024eec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8024ef0:	fba3 1000 	umull	r1, r0, r3, r0
 8024ef4:	6929      	ldr	r1, [r5, #16]
 8024ef6:	435a      	muls	r2, r3
 8024ef8:	fbe3 0201 	umlal	r0, r2, r3, r1
 8024efc:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8024f00:	0f8d      	lsrs	r5, r1, #30
 8024f02:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8024f06:	1a51      	subs	r1, r2, r1
 8024f08:	f7db fb78 	bl	80005fc <__aeabi_l2d>
 8024f0c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8024f10:	4b11      	ldr	r3, [pc, #68]	; (8024f58 <cosf+0x140>)
 8024f12:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8024f50 <cosf+0x138>
 8024f16:	ec41 0b16 	vmov	d6, r0, r1
 8024f1a:	f004 0203 	and.w	r2, r4, #3
 8024f1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024f22:	f014 0f02 	tst.w	r4, #2
 8024f26:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8024f2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024f2e:	ed92 0b00 	vldr	d0, [r2]
 8024f32:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024f36:	f085 0101 	eor.w	r1, r5, #1
 8024f3a:	bf08      	it	eq
 8024f3c:	4618      	moveq	r0, r3
 8024f3e:	e7bf      	b.n	8024ec0 <cosf+0xa8>
 8024f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024f44:	f000 b817 	b.w	8024f76 <__math_invalidf>
 8024f48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024f4c:	e78d      	b.n	8024e6a <cosf+0x52>
 8024f4e:	bf00      	nop
 8024f50:	54442d18 	.word	0x54442d18
 8024f54:	3c1921fb 	.word	0x3c1921fb
 8024f58:	0802a4d0 	.word	0x0802a4d0
 8024f5c:	0802a46c 	.word	0x0802a46c

08024f60 <with_errnof>:
 8024f60:	b513      	push	{r0, r1, r4, lr}
 8024f62:	4604      	mov	r4, r0
 8024f64:	ed8d 0a01 	vstr	s0, [sp, #4]
 8024f68:	f000 f910 	bl	802518c <__errno>
 8024f6c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8024f70:	6004      	str	r4, [r0, #0]
 8024f72:	b002      	add	sp, #8
 8024f74:	bd10      	pop	{r4, pc}

08024f76 <__math_invalidf>:
 8024f76:	eef0 7a40 	vmov.f32	s15, s0
 8024f7a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8024f7e:	eef4 7a67 	vcmp.f32	s15, s15
 8024f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f86:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8024f8a:	d602      	bvs.n	8024f92 <__math_invalidf+0x1c>
 8024f8c:	2021      	movs	r0, #33	; 0x21
 8024f8e:	f7ff bfe7 	b.w	8024f60 <with_errnof>
 8024f92:	4770      	bx	lr

08024f94 <sinf_poly>:
 8024f94:	07cb      	lsls	r3, r1, #31
 8024f96:	d412      	bmi.n	8024fbe <sinf_poly+0x2a>
 8024f98:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024f9c:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8024fa0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8024fa4:	eea6 7b01 	vfma.f64	d7, d6, d1
 8024fa8:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8024fac:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024fb0:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024fb4:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024fb8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024fbc:	4770      	bx	lr
 8024fbe:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8024fc2:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024fc6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8024fca:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8024fce:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024fd2:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8024fd6:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024fda:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8024fde:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024fe2:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024fe6:	e7e5      	b.n	8024fb4 <sinf_poly+0x20>

08024fe8 <sinf>:
 8024fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024fea:	ee10 4a10 	vmov	r4, s0
 8024fee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024ff2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8024ff6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8024ffa:	eef0 7a40 	vmov.f32	s15, s0
 8024ffe:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8025002:	d218      	bcs.n	8025036 <sinf+0x4e>
 8025004:	ee26 1b06 	vmul.f64	d1, d6, d6
 8025008:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802500c:	d20a      	bcs.n	8025024 <sinf+0x3c>
 802500e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8025012:	d103      	bne.n	802501c <sinf+0x34>
 8025014:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8025018:	ed8d 1a01 	vstr	s2, [sp, #4]
 802501c:	eeb0 0a67 	vmov.f32	s0, s15
 8025020:	b003      	add	sp, #12
 8025022:	bd30      	pop	{r4, r5, pc}
 8025024:	483a      	ldr	r0, [pc, #232]	; (8025110 <sinf+0x128>)
 8025026:	eeb0 0b46 	vmov.f64	d0, d6
 802502a:	2100      	movs	r1, #0
 802502c:	b003      	add	sp, #12
 802502e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025032:	f7ff bfaf 	b.w	8024f94 <sinf_poly>
 8025036:	f240 422e 	movw	r2, #1070	; 0x42e
 802503a:	4293      	cmp	r3, r2
 802503c:	d824      	bhi.n	8025088 <sinf+0xa0>
 802503e:	4b34      	ldr	r3, [pc, #208]	; (8025110 <sinf+0x128>)
 8025040:	ed93 7b08 	vldr	d7, [r3, #32]
 8025044:	ee26 7b07 	vmul.f64	d7, d6, d7
 8025048:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802504c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8025050:	ee17 1a90 	vmov	r1, s15
 8025054:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8025058:	1609      	asrs	r1, r1, #24
 802505a:	ee07 1a90 	vmov	s15, r1
 802505e:	f001 0203 	and.w	r2, r1, #3
 8025062:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8025066:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802506a:	ed92 0b00 	vldr	d0, [r2]
 802506e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8025072:	f011 0f02 	tst.w	r1, #2
 8025076:	eea5 6b47 	vfms.f64	d6, d5, d7
 802507a:	bf08      	it	eq
 802507c:	4618      	moveq	r0, r3
 802507e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8025082:	ee20 0b06 	vmul.f64	d0, d0, d6
 8025086:	e7d1      	b.n	802502c <sinf+0x44>
 8025088:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802508c:	d237      	bcs.n	80250fe <sinf+0x116>
 802508e:	4a21      	ldr	r2, [pc, #132]	; (8025114 <sinf+0x12c>)
 8025090:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8025094:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8025098:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802509c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80250a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80250a4:	4083      	lsls	r3, r0
 80250a6:	6a28      	ldr	r0, [r5, #32]
 80250a8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80250ac:	fba3 1000 	umull	r1, r0, r3, r0
 80250b0:	6929      	ldr	r1, [r5, #16]
 80250b2:	435a      	muls	r2, r3
 80250b4:	fbe3 0201 	umlal	r0, r2, r3, r1
 80250b8:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 80250bc:	0f8d      	lsrs	r5, r1, #30
 80250be:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80250c2:	1a51      	subs	r1, r2, r1
 80250c4:	f7db fa9a 	bl	80005fc <__aeabi_l2d>
 80250c8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80250cc:	4b10      	ldr	r3, [pc, #64]	; (8025110 <sinf+0x128>)
 80250ce:	f004 0203 	and.w	r2, r4, #3
 80250d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80250d6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8025108 <sinf+0x120>
 80250da:	ed92 0b00 	vldr	d0, [r2]
 80250de:	ec41 0b16 	vmov	d6, r0, r1
 80250e2:	f014 0f02 	tst.w	r4, #2
 80250e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80250ea:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80250ee:	4629      	mov	r1, r5
 80250f0:	bf08      	it	eq
 80250f2:	4618      	moveq	r0, r3
 80250f4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80250f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80250fc:	e796      	b.n	802502c <sinf+0x44>
 80250fe:	b003      	add	sp, #12
 8025100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025104:	f7ff bf37 	b.w	8024f76 <__math_invalidf>
 8025108:	54442d18 	.word	0x54442d18
 802510c:	3c1921fb 	.word	0x3c1921fb
 8025110:	0802a4d0 	.word	0x0802a4d0
 8025114:	0802a46c 	.word	0x0802a46c

08025118 <abort>:
 8025118:	b508      	push	{r3, lr}
 802511a:	2006      	movs	r0, #6
 802511c:	f000 fca2 	bl	8025a64 <raise>
 8025120:	2001      	movs	r0, #1
 8025122:	f7df fb31 	bl	8004788 <_exit>
	...

08025128 <__assert_func>:
 8025128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802512a:	4614      	mov	r4, r2
 802512c:	461a      	mov	r2, r3
 802512e:	4b09      	ldr	r3, [pc, #36]	; (8025154 <__assert_func+0x2c>)
 8025130:	681b      	ldr	r3, [r3, #0]
 8025132:	4605      	mov	r5, r0
 8025134:	68d8      	ldr	r0, [r3, #12]
 8025136:	b14c      	cbz	r4, 802514c <__assert_func+0x24>
 8025138:	4b07      	ldr	r3, [pc, #28]	; (8025158 <__assert_func+0x30>)
 802513a:	9100      	str	r1, [sp, #0]
 802513c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025140:	4906      	ldr	r1, [pc, #24]	; (802515c <__assert_func+0x34>)
 8025142:	462b      	mov	r3, r5
 8025144:	f000 f828 	bl	8025198 <fiprintf>
 8025148:	f7ff ffe6 	bl	8025118 <abort>
 802514c:	4b04      	ldr	r3, [pc, #16]	; (8025160 <__assert_func+0x38>)
 802514e:	461c      	mov	r4, r3
 8025150:	e7f3      	b.n	802513a <__assert_func+0x12>
 8025152:	bf00      	nop
 8025154:	200000e8 	.word	0x200000e8
 8025158:	0802a5b0 	.word	0x0802a5b0
 802515c:	0802a5bd 	.word	0x0802a5bd
 8025160:	0802a5eb 	.word	0x0802a5eb

08025164 <atexit>:
 8025164:	2300      	movs	r3, #0
 8025166:	4601      	mov	r1, r0
 8025168:	461a      	mov	r2, r3
 802516a:	4618      	mov	r0, r3
 802516c:	f000 bd6a 	b.w	8025c44 <__register_exitproc>

08025170 <__cxa_atexit>:
 8025170:	b510      	push	{r4, lr}
 8025172:	4c05      	ldr	r4, [pc, #20]	; (8025188 <__cxa_atexit+0x18>)
 8025174:	4613      	mov	r3, r2
 8025176:	b12c      	cbz	r4, 8025184 <__cxa_atexit+0x14>
 8025178:	460a      	mov	r2, r1
 802517a:	4601      	mov	r1, r0
 802517c:	2002      	movs	r0, #2
 802517e:	f000 fd61 	bl	8025c44 <__register_exitproc>
 8025182:	bd10      	pop	{r4, pc}
 8025184:	4620      	mov	r0, r4
 8025186:	e7fc      	b.n	8025182 <__cxa_atexit+0x12>
 8025188:	08025c45 	.word	0x08025c45

0802518c <__errno>:
 802518c:	4b01      	ldr	r3, [pc, #4]	; (8025194 <__errno+0x8>)
 802518e:	6818      	ldr	r0, [r3, #0]
 8025190:	4770      	bx	lr
 8025192:	bf00      	nop
 8025194:	200000e8 	.word	0x200000e8

08025198 <fiprintf>:
 8025198:	b40e      	push	{r1, r2, r3}
 802519a:	b503      	push	{r0, r1, lr}
 802519c:	4601      	mov	r1, r0
 802519e:	ab03      	add	r3, sp, #12
 80251a0:	4805      	ldr	r0, [pc, #20]	; (80251b8 <fiprintf+0x20>)
 80251a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80251a6:	6800      	ldr	r0, [r0, #0]
 80251a8:	9301      	str	r3, [sp, #4]
 80251aa:	f000 f95f 	bl	802546c <_vfiprintf_r>
 80251ae:	b002      	add	sp, #8
 80251b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80251b4:	b003      	add	sp, #12
 80251b6:	4770      	bx	lr
 80251b8:	200000e8 	.word	0x200000e8

080251bc <__libc_init_array>:
 80251bc:	b570      	push	{r4, r5, r6, lr}
 80251be:	4d0d      	ldr	r5, [pc, #52]	; (80251f4 <__libc_init_array+0x38>)
 80251c0:	4c0d      	ldr	r4, [pc, #52]	; (80251f8 <__libc_init_array+0x3c>)
 80251c2:	1b64      	subs	r4, r4, r5
 80251c4:	10a4      	asrs	r4, r4, #2
 80251c6:	2600      	movs	r6, #0
 80251c8:	42a6      	cmp	r6, r4
 80251ca:	d109      	bne.n	80251e0 <__libc_init_array+0x24>
 80251cc:	4d0b      	ldr	r5, [pc, #44]	; (80251fc <__libc_init_array+0x40>)
 80251ce:	4c0c      	ldr	r4, [pc, #48]	; (8025200 <__libc_init_array+0x44>)
 80251d0:	f001 f86e 	bl	80262b0 <_init>
 80251d4:	1b64      	subs	r4, r4, r5
 80251d6:	10a4      	asrs	r4, r4, #2
 80251d8:	2600      	movs	r6, #0
 80251da:	42a6      	cmp	r6, r4
 80251dc:	d105      	bne.n	80251ea <__libc_init_array+0x2e>
 80251de:	bd70      	pop	{r4, r5, r6, pc}
 80251e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80251e4:	4798      	blx	r3
 80251e6:	3601      	adds	r6, #1
 80251e8:	e7ee      	b.n	80251c8 <__libc_init_array+0xc>
 80251ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80251ee:	4798      	blx	r3
 80251f0:	3601      	adds	r6, #1
 80251f2:	e7f2      	b.n	80251da <__libc_init_array+0x1e>
 80251f4:	0802ab04 	.word	0x0802ab04
 80251f8:	0802ab04 	.word	0x0802ab04
 80251fc:	0802ab04 	.word	0x0802ab04
 8025200:	0802ab20 	.word	0x0802ab20

08025204 <__retarget_lock_init_recursive>:
 8025204:	4770      	bx	lr

08025206 <__retarget_lock_acquire_recursive>:
 8025206:	4770      	bx	lr

08025208 <__retarget_lock_release>:
 8025208:	4770      	bx	lr

0802520a <__retarget_lock_release_recursive>:
 802520a:	4770      	bx	lr

0802520c <malloc>:
 802520c:	4b02      	ldr	r3, [pc, #8]	; (8025218 <malloc+0xc>)
 802520e:	4601      	mov	r1, r0
 8025210:	6818      	ldr	r0, [r3, #0]
 8025212:	f000 b88d 	b.w	8025330 <_malloc_r>
 8025216:	bf00      	nop
 8025218:	200000e8 	.word	0x200000e8

0802521c <free>:
 802521c:	4b02      	ldr	r3, [pc, #8]	; (8025228 <free+0xc>)
 802521e:	4601      	mov	r1, r0
 8025220:	6818      	ldr	r0, [r3, #0]
 8025222:	f000 b819 	b.w	8025258 <_free_r>
 8025226:	bf00      	nop
 8025228:	200000e8 	.word	0x200000e8

0802522c <memcpy>:
 802522c:	440a      	add	r2, r1
 802522e:	4291      	cmp	r1, r2
 8025230:	f100 33ff 	add.w	r3, r0, #4294967295
 8025234:	d100      	bne.n	8025238 <memcpy+0xc>
 8025236:	4770      	bx	lr
 8025238:	b510      	push	{r4, lr}
 802523a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802523e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025242:	4291      	cmp	r1, r2
 8025244:	d1f9      	bne.n	802523a <memcpy+0xe>
 8025246:	bd10      	pop	{r4, pc}

08025248 <memset>:
 8025248:	4402      	add	r2, r0
 802524a:	4603      	mov	r3, r0
 802524c:	4293      	cmp	r3, r2
 802524e:	d100      	bne.n	8025252 <memset+0xa>
 8025250:	4770      	bx	lr
 8025252:	f803 1b01 	strb.w	r1, [r3], #1
 8025256:	e7f9      	b.n	802524c <memset+0x4>

08025258 <_free_r>:
 8025258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802525a:	2900      	cmp	r1, #0
 802525c:	d044      	beq.n	80252e8 <_free_r+0x90>
 802525e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025262:	9001      	str	r0, [sp, #4]
 8025264:	2b00      	cmp	r3, #0
 8025266:	f1a1 0404 	sub.w	r4, r1, #4
 802526a:	bfb8      	it	lt
 802526c:	18e4      	addlt	r4, r4, r3
 802526e:	f000 ff67 	bl	8026140 <__malloc_lock>
 8025272:	4a1e      	ldr	r2, [pc, #120]	; (80252ec <_free_r+0x94>)
 8025274:	9801      	ldr	r0, [sp, #4]
 8025276:	6813      	ldr	r3, [r2, #0]
 8025278:	b933      	cbnz	r3, 8025288 <_free_r+0x30>
 802527a:	6063      	str	r3, [r4, #4]
 802527c:	6014      	str	r4, [r2, #0]
 802527e:	b003      	add	sp, #12
 8025280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025284:	f000 bf62 	b.w	802614c <__malloc_unlock>
 8025288:	42a3      	cmp	r3, r4
 802528a:	d908      	bls.n	802529e <_free_r+0x46>
 802528c:	6825      	ldr	r5, [r4, #0]
 802528e:	1961      	adds	r1, r4, r5
 8025290:	428b      	cmp	r3, r1
 8025292:	bf01      	itttt	eq
 8025294:	6819      	ldreq	r1, [r3, #0]
 8025296:	685b      	ldreq	r3, [r3, #4]
 8025298:	1949      	addeq	r1, r1, r5
 802529a:	6021      	streq	r1, [r4, #0]
 802529c:	e7ed      	b.n	802527a <_free_r+0x22>
 802529e:	461a      	mov	r2, r3
 80252a0:	685b      	ldr	r3, [r3, #4]
 80252a2:	b10b      	cbz	r3, 80252a8 <_free_r+0x50>
 80252a4:	42a3      	cmp	r3, r4
 80252a6:	d9fa      	bls.n	802529e <_free_r+0x46>
 80252a8:	6811      	ldr	r1, [r2, #0]
 80252aa:	1855      	adds	r5, r2, r1
 80252ac:	42a5      	cmp	r5, r4
 80252ae:	d10b      	bne.n	80252c8 <_free_r+0x70>
 80252b0:	6824      	ldr	r4, [r4, #0]
 80252b2:	4421      	add	r1, r4
 80252b4:	1854      	adds	r4, r2, r1
 80252b6:	42a3      	cmp	r3, r4
 80252b8:	6011      	str	r1, [r2, #0]
 80252ba:	d1e0      	bne.n	802527e <_free_r+0x26>
 80252bc:	681c      	ldr	r4, [r3, #0]
 80252be:	685b      	ldr	r3, [r3, #4]
 80252c0:	6053      	str	r3, [r2, #4]
 80252c2:	4421      	add	r1, r4
 80252c4:	6011      	str	r1, [r2, #0]
 80252c6:	e7da      	b.n	802527e <_free_r+0x26>
 80252c8:	d902      	bls.n	80252d0 <_free_r+0x78>
 80252ca:	230c      	movs	r3, #12
 80252cc:	6003      	str	r3, [r0, #0]
 80252ce:	e7d6      	b.n	802527e <_free_r+0x26>
 80252d0:	6825      	ldr	r5, [r4, #0]
 80252d2:	1961      	adds	r1, r4, r5
 80252d4:	428b      	cmp	r3, r1
 80252d6:	bf04      	itt	eq
 80252d8:	6819      	ldreq	r1, [r3, #0]
 80252da:	685b      	ldreq	r3, [r3, #4]
 80252dc:	6063      	str	r3, [r4, #4]
 80252de:	bf04      	itt	eq
 80252e0:	1949      	addeq	r1, r1, r5
 80252e2:	6021      	streq	r1, [r4, #0]
 80252e4:	6054      	str	r4, [r2, #4]
 80252e6:	e7ca      	b.n	802527e <_free_r+0x26>
 80252e8:	b003      	add	sp, #12
 80252ea:	bd30      	pop	{r4, r5, pc}
 80252ec:	20027fa0 	.word	0x20027fa0

080252f0 <sbrk_aligned>:
 80252f0:	b570      	push	{r4, r5, r6, lr}
 80252f2:	4e0e      	ldr	r6, [pc, #56]	; (802532c <sbrk_aligned+0x3c>)
 80252f4:	460c      	mov	r4, r1
 80252f6:	6831      	ldr	r1, [r6, #0]
 80252f8:	4605      	mov	r5, r0
 80252fa:	b911      	cbnz	r1, 8025302 <sbrk_aligned+0x12>
 80252fc:	f000 fb7a 	bl	80259f4 <_sbrk_r>
 8025300:	6030      	str	r0, [r6, #0]
 8025302:	4621      	mov	r1, r4
 8025304:	4628      	mov	r0, r5
 8025306:	f000 fb75 	bl	80259f4 <_sbrk_r>
 802530a:	1c43      	adds	r3, r0, #1
 802530c:	d00a      	beq.n	8025324 <sbrk_aligned+0x34>
 802530e:	1cc4      	adds	r4, r0, #3
 8025310:	f024 0403 	bic.w	r4, r4, #3
 8025314:	42a0      	cmp	r0, r4
 8025316:	d007      	beq.n	8025328 <sbrk_aligned+0x38>
 8025318:	1a21      	subs	r1, r4, r0
 802531a:	4628      	mov	r0, r5
 802531c:	f000 fb6a 	bl	80259f4 <_sbrk_r>
 8025320:	3001      	adds	r0, #1
 8025322:	d101      	bne.n	8025328 <sbrk_aligned+0x38>
 8025324:	f04f 34ff 	mov.w	r4, #4294967295
 8025328:	4620      	mov	r0, r4
 802532a:	bd70      	pop	{r4, r5, r6, pc}
 802532c:	20027fa4 	.word	0x20027fa4

08025330 <_malloc_r>:
 8025330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025334:	1ccd      	adds	r5, r1, #3
 8025336:	f025 0503 	bic.w	r5, r5, #3
 802533a:	3508      	adds	r5, #8
 802533c:	2d0c      	cmp	r5, #12
 802533e:	bf38      	it	cc
 8025340:	250c      	movcc	r5, #12
 8025342:	2d00      	cmp	r5, #0
 8025344:	4607      	mov	r7, r0
 8025346:	db01      	blt.n	802534c <_malloc_r+0x1c>
 8025348:	42a9      	cmp	r1, r5
 802534a:	d905      	bls.n	8025358 <_malloc_r+0x28>
 802534c:	230c      	movs	r3, #12
 802534e:	603b      	str	r3, [r7, #0]
 8025350:	2600      	movs	r6, #0
 8025352:	4630      	mov	r0, r6
 8025354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025358:	4e2e      	ldr	r6, [pc, #184]	; (8025414 <_malloc_r+0xe4>)
 802535a:	f000 fef1 	bl	8026140 <__malloc_lock>
 802535e:	6833      	ldr	r3, [r6, #0]
 8025360:	461c      	mov	r4, r3
 8025362:	bb34      	cbnz	r4, 80253b2 <_malloc_r+0x82>
 8025364:	4629      	mov	r1, r5
 8025366:	4638      	mov	r0, r7
 8025368:	f7ff ffc2 	bl	80252f0 <sbrk_aligned>
 802536c:	1c43      	adds	r3, r0, #1
 802536e:	4604      	mov	r4, r0
 8025370:	d14d      	bne.n	802540e <_malloc_r+0xde>
 8025372:	6834      	ldr	r4, [r6, #0]
 8025374:	4626      	mov	r6, r4
 8025376:	2e00      	cmp	r6, #0
 8025378:	d140      	bne.n	80253fc <_malloc_r+0xcc>
 802537a:	6823      	ldr	r3, [r4, #0]
 802537c:	4631      	mov	r1, r6
 802537e:	4638      	mov	r0, r7
 8025380:	eb04 0803 	add.w	r8, r4, r3
 8025384:	f000 fb36 	bl	80259f4 <_sbrk_r>
 8025388:	4580      	cmp	r8, r0
 802538a:	d13a      	bne.n	8025402 <_malloc_r+0xd2>
 802538c:	6821      	ldr	r1, [r4, #0]
 802538e:	3503      	adds	r5, #3
 8025390:	1a6d      	subs	r5, r5, r1
 8025392:	f025 0503 	bic.w	r5, r5, #3
 8025396:	3508      	adds	r5, #8
 8025398:	2d0c      	cmp	r5, #12
 802539a:	bf38      	it	cc
 802539c:	250c      	movcc	r5, #12
 802539e:	4629      	mov	r1, r5
 80253a0:	4638      	mov	r0, r7
 80253a2:	f7ff ffa5 	bl	80252f0 <sbrk_aligned>
 80253a6:	3001      	adds	r0, #1
 80253a8:	d02b      	beq.n	8025402 <_malloc_r+0xd2>
 80253aa:	6823      	ldr	r3, [r4, #0]
 80253ac:	442b      	add	r3, r5
 80253ae:	6023      	str	r3, [r4, #0]
 80253b0:	e00e      	b.n	80253d0 <_malloc_r+0xa0>
 80253b2:	6822      	ldr	r2, [r4, #0]
 80253b4:	1b52      	subs	r2, r2, r5
 80253b6:	d41e      	bmi.n	80253f6 <_malloc_r+0xc6>
 80253b8:	2a0b      	cmp	r2, #11
 80253ba:	d916      	bls.n	80253ea <_malloc_r+0xba>
 80253bc:	1961      	adds	r1, r4, r5
 80253be:	42a3      	cmp	r3, r4
 80253c0:	6025      	str	r5, [r4, #0]
 80253c2:	bf18      	it	ne
 80253c4:	6059      	strne	r1, [r3, #4]
 80253c6:	6863      	ldr	r3, [r4, #4]
 80253c8:	bf08      	it	eq
 80253ca:	6031      	streq	r1, [r6, #0]
 80253cc:	5162      	str	r2, [r4, r5]
 80253ce:	604b      	str	r3, [r1, #4]
 80253d0:	4638      	mov	r0, r7
 80253d2:	f104 060b 	add.w	r6, r4, #11
 80253d6:	f000 feb9 	bl	802614c <__malloc_unlock>
 80253da:	f026 0607 	bic.w	r6, r6, #7
 80253de:	1d23      	adds	r3, r4, #4
 80253e0:	1af2      	subs	r2, r6, r3
 80253e2:	d0b6      	beq.n	8025352 <_malloc_r+0x22>
 80253e4:	1b9b      	subs	r3, r3, r6
 80253e6:	50a3      	str	r3, [r4, r2]
 80253e8:	e7b3      	b.n	8025352 <_malloc_r+0x22>
 80253ea:	6862      	ldr	r2, [r4, #4]
 80253ec:	42a3      	cmp	r3, r4
 80253ee:	bf0c      	ite	eq
 80253f0:	6032      	streq	r2, [r6, #0]
 80253f2:	605a      	strne	r2, [r3, #4]
 80253f4:	e7ec      	b.n	80253d0 <_malloc_r+0xa0>
 80253f6:	4623      	mov	r3, r4
 80253f8:	6864      	ldr	r4, [r4, #4]
 80253fa:	e7b2      	b.n	8025362 <_malloc_r+0x32>
 80253fc:	4634      	mov	r4, r6
 80253fe:	6876      	ldr	r6, [r6, #4]
 8025400:	e7b9      	b.n	8025376 <_malloc_r+0x46>
 8025402:	230c      	movs	r3, #12
 8025404:	603b      	str	r3, [r7, #0]
 8025406:	4638      	mov	r0, r7
 8025408:	f000 fea0 	bl	802614c <__malloc_unlock>
 802540c:	e7a1      	b.n	8025352 <_malloc_r+0x22>
 802540e:	6025      	str	r5, [r4, #0]
 8025410:	e7de      	b.n	80253d0 <_malloc_r+0xa0>
 8025412:	bf00      	nop
 8025414:	20027fa0 	.word	0x20027fa0

08025418 <__sfputc_r>:
 8025418:	6893      	ldr	r3, [r2, #8]
 802541a:	3b01      	subs	r3, #1
 802541c:	2b00      	cmp	r3, #0
 802541e:	b410      	push	{r4}
 8025420:	6093      	str	r3, [r2, #8]
 8025422:	da08      	bge.n	8025436 <__sfputc_r+0x1e>
 8025424:	6994      	ldr	r4, [r2, #24]
 8025426:	42a3      	cmp	r3, r4
 8025428:	db01      	blt.n	802542e <__sfputc_r+0x16>
 802542a:	290a      	cmp	r1, #10
 802542c:	d103      	bne.n	8025436 <__sfputc_r+0x1e>
 802542e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025432:	f000 bb47 	b.w	8025ac4 <__swbuf_r>
 8025436:	6813      	ldr	r3, [r2, #0]
 8025438:	1c58      	adds	r0, r3, #1
 802543a:	6010      	str	r0, [r2, #0]
 802543c:	7019      	strb	r1, [r3, #0]
 802543e:	4608      	mov	r0, r1
 8025440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025444:	4770      	bx	lr

08025446 <__sfputs_r>:
 8025446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025448:	4606      	mov	r6, r0
 802544a:	460f      	mov	r7, r1
 802544c:	4614      	mov	r4, r2
 802544e:	18d5      	adds	r5, r2, r3
 8025450:	42ac      	cmp	r4, r5
 8025452:	d101      	bne.n	8025458 <__sfputs_r+0x12>
 8025454:	2000      	movs	r0, #0
 8025456:	e007      	b.n	8025468 <__sfputs_r+0x22>
 8025458:	f814 1b01 	ldrb.w	r1, [r4], #1
 802545c:	463a      	mov	r2, r7
 802545e:	4630      	mov	r0, r6
 8025460:	f7ff ffda 	bl	8025418 <__sfputc_r>
 8025464:	1c43      	adds	r3, r0, #1
 8025466:	d1f3      	bne.n	8025450 <__sfputs_r+0xa>
 8025468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802546c <_vfiprintf_r>:
 802546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025470:	460d      	mov	r5, r1
 8025472:	b09d      	sub	sp, #116	; 0x74
 8025474:	4614      	mov	r4, r2
 8025476:	4698      	mov	r8, r3
 8025478:	4606      	mov	r6, r0
 802547a:	b118      	cbz	r0, 8025484 <_vfiprintf_r+0x18>
 802547c:	6983      	ldr	r3, [r0, #24]
 802547e:	b90b      	cbnz	r3, 8025484 <_vfiprintf_r+0x18>
 8025480:	f000 fd5c 	bl	8025f3c <__sinit>
 8025484:	4b89      	ldr	r3, [pc, #548]	; (80256ac <_vfiprintf_r+0x240>)
 8025486:	429d      	cmp	r5, r3
 8025488:	d11b      	bne.n	80254c2 <_vfiprintf_r+0x56>
 802548a:	6875      	ldr	r5, [r6, #4]
 802548c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802548e:	07d9      	lsls	r1, r3, #31
 8025490:	d405      	bmi.n	802549e <_vfiprintf_r+0x32>
 8025492:	89ab      	ldrh	r3, [r5, #12]
 8025494:	059a      	lsls	r2, r3, #22
 8025496:	d402      	bmi.n	802549e <_vfiprintf_r+0x32>
 8025498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802549a:	f7ff feb4 	bl	8025206 <__retarget_lock_acquire_recursive>
 802549e:	89ab      	ldrh	r3, [r5, #12]
 80254a0:	071b      	lsls	r3, r3, #28
 80254a2:	d501      	bpl.n	80254a8 <_vfiprintf_r+0x3c>
 80254a4:	692b      	ldr	r3, [r5, #16]
 80254a6:	b9eb      	cbnz	r3, 80254e4 <_vfiprintf_r+0x78>
 80254a8:	4629      	mov	r1, r5
 80254aa:	4630      	mov	r0, r6
 80254ac:	f000 fb5c 	bl	8025b68 <__swsetup_r>
 80254b0:	b1c0      	cbz	r0, 80254e4 <_vfiprintf_r+0x78>
 80254b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80254b4:	07dc      	lsls	r4, r3, #31
 80254b6:	d50e      	bpl.n	80254d6 <_vfiprintf_r+0x6a>
 80254b8:	f04f 30ff 	mov.w	r0, #4294967295
 80254bc:	b01d      	add	sp, #116	; 0x74
 80254be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254c2:	4b7b      	ldr	r3, [pc, #492]	; (80256b0 <_vfiprintf_r+0x244>)
 80254c4:	429d      	cmp	r5, r3
 80254c6:	d101      	bne.n	80254cc <_vfiprintf_r+0x60>
 80254c8:	68b5      	ldr	r5, [r6, #8]
 80254ca:	e7df      	b.n	802548c <_vfiprintf_r+0x20>
 80254cc:	4b79      	ldr	r3, [pc, #484]	; (80256b4 <_vfiprintf_r+0x248>)
 80254ce:	429d      	cmp	r5, r3
 80254d0:	bf08      	it	eq
 80254d2:	68f5      	ldreq	r5, [r6, #12]
 80254d4:	e7da      	b.n	802548c <_vfiprintf_r+0x20>
 80254d6:	89ab      	ldrh	r3, [r5, #12]
 80254d8:	0598      	lsls	r0, r3, #22
 80254da:	d4ed      	bmi.n	80254b8 <_vfiprintf_r+0x4c>
 80254dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80254de:	f7ff fe94 	bl	802520a <__retarget_lock_release_recursive>
 80254e2:	e7e9      	b.n	80254b8 <_vfiprintf_r+0x4c>
 80254e4:	2300      	movs	r3, #0
 80254e6:	9309      	str	r3, [sp, #36]	; 0x24
 80254e8:	2320      	movs	r3, #32
 80254ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80254ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80254f2:	2330      	movs	r3, #48	; 0x30
 80254f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80256b8 <_vfiprintf_r+0x24c>
 80254f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80254fc:	f04f 0901 	mov.w	r9, #1
 8025500:	4623      	mov	r3, r4
 8025502:	469a      	mov	sl, r3
 8025504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025508:	b10a      	cbz	r2, 802550e <_vfiprintf_r+0xa2>
 802550a:	2a25      	cmp	r2, #37	; 0x25
 802550c:	d1f9      	bne.n	8025502 <_vfiprintf_r+0x96>
 802550e:	ebba 0b04 	subs.w	fp, sl, r4
 8025512:	d00b      	beq.n	802552c <_vfiprintf_r+0xc0>
 8025514:	465b      	mov	r3, fp
 8025516:	4622      	mov	r2, r4
 8025518:	4629      	mov	r1, r5
 802551a:	4630      	mov	r0, r6
 802551c:	f7ff ff93 	bl	8025446 <__sfputs_r>
 8025520:	3001      	adds	r0, #1
 8025522:	f000 80aa 	beq.w	802567a <_vfiprintf_r+0x20e>
 8025526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025528:	445a      	add	r2, fp
 802552a:	9209      	str	r2, [sp, #36]	; 0x24
 802552c:	f89a 3000 	ldrb.w	r3, [sl]
 8025530:	2b00      	cmp	r3, #0
 8025532:	f000 80a2 	beq.w	802567a <_vfiprintf_r+0x20e>
 8025536:	2300      	movs	r3, #0
 8025538:	f04f 32ff 	mov.w	r2, #4294967295
 802553c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025540:	f10a 0a01 	add.w	sl, sl, #1
 8025544:	9304      	str	r3, [sp, #16]
 8025546:	9307      	str	r3, [sp, #28]
 8025548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802554c:	931a      	str	r3, [sp, #104]	; 0x68
 802554e:	4654      	mov	r4, sl
 8025550:	2205      	movs	r2, #5
 8025552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025556:	4858      	ldr	r0, [pc, #352]	; (80256b8 <_vfiprintf_r+0x24c>)
 8025558:	f7da fe72 	bl	8000240 <memchr>
 802555c:	9a04      	ldr	r2, [sp, #16]
 802555e:	b9d8      	cbnz	r0, 8025598 <_vfiprintf_r+0x12c>
 8025560:	06d1      	lsls	r1, r2, #27
 8025562:	bf44      	itt	mi
 8025564:	2320      	movmi	r3, #32
 8025566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802556a:	0713      	lsls	r3, r2, #28
 802556c:	bf44      	itt	mi
 802556e:	232b      	movmi	r3, #43	; 0x2b
 8025570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025574:	f89a 3000 	ldrb.w	r3, [sl]
 8025578:	2b2a      	cmp	r3, #42	; 0x2a
 802557a:	d015      	beq.n	80255a8 <_vfiprintf_r+0x13c>
 802557c:	9a07      	ldr	r2, [sp, #28]
 802557e:	4654      	mov	r4, sl
 8025580:	2000      	movs	r0, #0
 8025582:	f04f 0c0a 	mov.w	ip, #10
 8025586:	4621      	mov	r1, r4
 8025588:	f811 3b01 	ldrb.w	r3, [r1], #1
 802558c:	3b30      	subs	r3, #48	; 0x30
 802558e:	2b09      	cmp	r3, #9
 8025590:	d94e      	bls.n	8025630 <_vfiprintf_r+0x1c4>
 8025592:	b1b0      	cbz	r0, 80255c2 <_vfiprintf_r+0x156>
 8025594:	9207      	str	r2, [sp, #28]
 8025596:	e014      	b.n	80255c2 <_vfiprintf_r+0x156>
 8025598:	eba0 0308 	sub.w	r3, r0, r8
 802559c:	fa09 f303 	lsl.w	r3, r9, r3
 80255a0:	4313      	orrs	r3, r2
 80255a2:	9304      	str	r3, [sp, #16]
 80255a4:	46a2      	mov	sl, r4
 80255a6:	e7d2      	b.n	802554e <_vfiprintf_r+0xe2>
 80255a8:	9b03      	ldr	r3, [sp, #12]
 80255aa:	1d19      	adds	r1, r3, #4
 80255ac:	681b      	ldr	r3, [r3, #0]
 80255ae:	9103      	str	r1, [sp, #12]
 80255b0:	2b00      	cmp	r3, #0
 80255b2:	bfbb      	ittet	lt
 80255b4:	425b      	neglt	r3, r3
 80255b6:	f042 0202 	orrlt.w	r2, r2, #2
 80255ba:	9307      	strge	r3, [sp, #28]
 80255bc:	9307      	strlt	r3, [sp, #28]
 80255be:	bfb8      	it	lt
 80255c0:	9204      	strlt	r2, [sp, #16]
 80255c2:	7823      	ldrb	r3, [r4, #0]
 80255c4:	2b2e      	cmp	r3, #46	; 0x2e
 80255c6:	d10c      	bne.n	80255e2 <_vfiprintf_r+0x176>
 80255c8:	7863      	ldrb	r3, [r4, #1]
 80255ca:	2b2a      	cmp	r3, #42	; 0x2a
 80255cc:	d135      	bne.n	802563a <_vfiprintf_r+0x1ce>
 80255ce:	9b03      	ldr	r3, [sp, #12]
 80255d0:	1d1a      	adds	r2, r3, #4
 80255d2:	681b      	ldr	r3, [r3, #0]
 80255d4:	9203      	str	r2, [sp, #12]
 80255d6:	2b00      	cmp	r3, #0
 80255d8:	bfb8      	it	lt
 80255da:	f04f 33ff 	movlt.w	r3, #4294967295
 80255de:	3402      	adds	r4, #2
 80255e0:	9305      	str	r3, [sp, #20]
 80255e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80256c8 <_vfiprintf_r+0x25c>
 80255e6:	7821      	ldrb	r1, [r4, #0]
 80255e8:	2203      	movs	r2, #3
 80255ea:	4650      	mov	r0, sl
 80255ec:	f7da fe28 	bl	8000240 <memchr>
 80255f0:	b140      	cbz	r0, 8025604 <_vfiprintf_r+0x198>
 80255f2:	2340      	movs	r3, #64	; 0x40
 80255f4:	eba0 000a 	sub.w	r0, r0, sl
 80255f8:	fa03 f000 	lsl.w	r0, r3, r0
 80255fc:	9b04      	ldr	r3, [sp, #16]
 80255fe:	4303      	orrs	r3, r0
 8025600:	3401      	adds	r4, #1
 8025602:	9304      	str	r3, [sp, #16]
 8025604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025608:	482c      	ldr	r0, [pc, #176]	; (80256bc <_vfiprintf_r+0x250>)
 802560a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802560e:	2206      	movs	r2, #6
 8025610:	f7da fe16 	bl	8000240 <memchr>
 8025614:	2800      	cmp	r0, #0
 8025616:	d03f      	beq.n	8025698 <_vfiprintf_r+0x22c>
 8025618:	4b29      	ldr	r3, [pc, #164]	; (80256c0 <_vfiprintf_r+0x254>)
 802561a:	bb1b      	cbnz	r3, 8025664 <_vfiprintf_r+0x1f8>
 802561c:	9b03      	ldr	r3, [sp, #12]
 802561e:	3307      	adds	r3, #7
 8025620:	f023 0307 	bic.w	r3, r3, #7
 8025624:	3308      	adds	r3, #8
 8025626:	9303      	str	r3, [sp, #12]
 8025628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802562a:	443b      	add	r3, r7
 802562c:	9309      	str	r3, [sp, #36]	; 0x24
 802562e:	e767      	b.n	8025500 <_vfiprintf_r+0x94>
 8025630:	fb0c 3202 	mla	r2, ip, r2, r3
 8025634:	460c      	mov	r4, r1
 8025636:	2001      	movs	r0, #1
 8025638:	e7a5      	b.n	8025586 <_vfiprintf_r+0x11a>
 802563a:	2300      	movs	r3, #0
 802563c:	3401      	adds	r4, #1
 802563e:	9305      	str	r3, [sp, #20]
 8025640:	4619      	mov	r1, r3
 8025642:	f04f 0c0a 	mov.w	ip, #10
 8025646:	4620      	mov	r0, r4
 8025648:	f810 2b01 	ldrb.w	r2, [r0], #1
 802564c:	3a30      	subs	r2, #48	; 0x30
 802564e:	2a09      	cmp	r2, #9
 8025650:	d903      	bls.n	802565a <_vfiprintf_r+0x1ee>
 8025652:	2b00      	cmp	r3, #0
 8025654:	d0c5      	beq.n	80255e2 <_vfiprintf_r+0x176>
 8025656:	9105      	str	r1, [sp, #20]
 8025658:	e7c3      	b.n	80255e2 <_vfiprintf_r+0x176>
 802565a:	fb0c 2101 	mla	r1, ip, r1, r2
 802565e:	4604      	mov	r4, r0
 8025660:	2301      	movs	r3, #1
 8025662:	e7f0      	b.n	8025646 <_vfiprintf_r+0x1da>
 8025664:	ab03      	add	r3, sp, #12
 8025666:	9300      	str	r3, [sp, #0]
 8025668:	462a      	mov	r2, r5
 802566a:	4b16      	ldr	r3, [pc, #88]	; (80256c4 <_vfiprintf_r+0x258>)
 802566c:	a904      	add	r1, sp, #16
 802566e:	4630      	mov	r0, r6
 8025670:	f3af 8000 	nop.w
 8025674:	4607      	mov	r7, r0
 8025676:	1c78      	adds	r0, r7, #1
 8025678:	d1d6      	bne.n	8025628 <_vfiprintf_r+0x1bc>
 802567a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802567c:	07d9      	lsls	r1, r3, #31
 802567e:	d405      	bmi.n	802568c <_vfiprintf_r+0x220>
 8025680:	89ab      	ldrh	r3, [r5, #12]
 8025682:	059a      	lsls	r2, r3, #22
 8025684:	d402      	bmi.n	802568c <_vfiprintf_r+0x220>
 8025686:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025688:	f7ff fdbf 	bl	802520a <__retarget_lock_release_recursive>
 802568c:	89ab      	ldrh	r3, [r5, #12]
 802568e:	065b      	lsls	r3, r3, #25
 8025690:	f53f af12 	bmi.w	80254b8 <_vfiprintf_r+0x4c>
 8025694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025696:	e711      	b.n	80254bc <_vfiprintf_r+0x50>
 8025698:	ab03      	add	r3, sp, #12
 802569a:	9300      	str	r3, [sp, #0]
 802569c:	462a      	mov	r2, r5
 802569e:	4b09      	ldr	r3, [pc, #36]	; (80256c4 <_vfiprintf_r+0x258>)
 80256a0:	a904      	add	r1, sp, #16
 80256a2:	4630      	mov	r0, r6
 80256a4:	f000 f880 	bl	80257a8 <_printf_i>
 80256a8:	e7e4      	b.n	8025674 <_vfiprintf_r+0x208>
 80256aa:	bf00      	nop
 80256ac:	0802a648 	.word	0x0802a648
 80256b0:	0802a668 	.word	0x0802a668
 80256b4:	0802a628 	.word	0x0802a628
 80256b8:	0802a5f0 	.word	0x0802a5f0
 80256bc:	0802a5fa 	.word	0x0802a5fa
 80256c0:	00000000 	.word	0x00000000
 80256c4:	08025447 	.word	0x08025447
 80256c8:	0802a5f6 	.word	0x0802a5f6

080256cc <_printf_common>:
 80256cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256d0:	4616      	mov	r6, r2
 80256d2:	4699      	mov	r9, r3
 80256d4:	688a      	ldr	r2, [r1, #8]
 80256d6:	690b      	ldr	r3, [r1, #16]
 80256d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80256dc:	4293      	cmp	r3, r2
 80256de:	bfb8      	it	lt
 80256e0:	4613      	movlt	r3, r2
 80256e2:	6033      	str	r3, [r6, #0]
 80256e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80256e8:	4607      	mov	r7, r0
 80256ea:	460c      	mov	r4, r1
 80256ec:	b10a      	cbz	r2, 80256f2 <_printf_common+0x26>
 80256ee:	3301      	adds	r3, #1
 80256f0:	6033      	str	r3, [r6, #0]
 80256f2:	6823      	ldr	r3, [r4, #0]
 80256f4:	0699      	lsls	r1, r3, #26
 80256f6:	bf42      	ittt	mi
 80256f8:	6833      	ldrmi	r3, [r6, #0]
 80256fa:	3302      	addmi	r3, #2
 80256fc:	6033      	strmi	r3, [r6, #0]
 80256fe:	6825      	ldr	r5, [r4, #0]
 8025700:	f015 0506 	ands.w	r5, r5, #6
 8025704:	d106      	bne.n	8025714 <_printf_common+0x48>
 8025706:	f104 0a19 	add.w	sl, r4, #25
 802570a:	68e3      	ldr	r3, [r4, #12]
 802570c:	6832      	ldr	r2, [r6, #0]
 802570e:	1a9b      	subs	r3, r3, r2
 8025710:	42ab      	cmp	r3, r5
 8025712:	dc26      	bgt.n	8025762 <_printf_common+0x96>
 8025714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025718:	1e13      	subs	r3, r2, #0
 802571a:	6822      	ldr	r2, [r4, #0]
 802571c:	bf18      	it	ne
 802571e:	2301      	movne	r3, #1
 8025720:	0692      	lsls	r2, r2, #26
 8025722:	d42b      	bmi.n	802577c <_printf_common+0xb0>
 8025724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025728:	4649      	mov	r1, r9
 802572a:	4638      	mov	r0, r7
 802572c:	47c0      	blx	r8
 802572e:	3001      	adds	r0, #1
 8025730:	d01e      	beq.n	8025770 <_printf_common+0xa4>
 8025732:	6823      	ldr	r3, [r4, #0]
 8025734:	68e5      	ldr	r5, [r4, #12]
 8025736:	6832      	ldr	r2, [r6, #0]
 8025738:	f003 0306 	and.w	r3, r3, #6
 802573c:	2b04      	cmp	r3, #4
 802573e:	bf08      	it	eq
 8025740:	1aad      	subeq	r5, r5, r2
 8025742:	68a3      	ldr	r3, [r4, #8]
 8025744:	6922      	ldr	r2, [r4, #16]
 8025746:	bf0c      	ite	eq
 8025748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802574c:	2500      	movne	r5, #0
 802574e:	4293      	cmp	r3, r2
 8025750:	bfc4      	itt	gt
 8025752:	1a9b      	subgt	r3, r3, r2
 8025754:	18ed      	addgt	r5, r5, r3
 8025756:	2600      	movs	r6, #0
 8025758:	341a      	adds	r4, #26
 802575a:	42b5      	cmp	r5, r6
 802575c:	d11a      	bne.n	8025794 <_printf_common+0xc8>
 802575e:	2000      	movs	r0, #0
 8025760:	e008      	b.n	8025774 <_printf_common+0xa8>
 8025762:	2301      	movs	r3, #1
 8025764:	4652      	mov	r2, sl
 8025766:	4649      	mov	r1, r9
 8025768:	4638      	mov	r0, r7
 802576a:	47c0      	blx	r8
 802576c:	3001      	adds	r0, #1
 802576e:	d103      	bne.n	8025778 <_printf_common+0xac>
 8025770:	f04f 30ff 	mov.w	r0, #4294967295
 8025774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025778:	3501      	adds	r5, #1
 802577a:	e7c6      	b.n	802570a <_printf_common+0x3e>
 802577c:	18e1      	adds	r1, r4, r3
 802577e:	1c5a      	adds	r2, r3, #1
 8025780:	2030      	movs	r0, #48	; 0x30
 8025782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025786:	4422      	add	r2, r4
 8025788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802578c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025790:	3302      	adds	r3, #2
 8025792:	e7c7      	b.n	8025724 <_printf_common+0x58>
 8025794:	2301      	movs	r3, #1
 8025796:	4622      	mov	r2, r4
 8025798:	4649      	mov	r1, r9
 802579a:	4638      	mov	r0, r7
 802579c:	47c0      	blx	r8
 802579e:	3001      	adds	r0, #1
 80257a0:	d0e6      	beq.n	8025770 <_printf_common+0xa4>
 80257a2:	3601      	adds	r6, #1
 80257a4:	e7d9      	b.n	802575a <_printf_common+0x8e>
	...

080257a8 <_printf_i>:
 80257a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80257ac:	7e0f      	ldrb	r7, [r1, #24]
 80257ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80257b0:	2f78      	cmp	r7, #120	; 0x78
 80257b2:	4691      	mov	r9, r2
 80257b4:	4680      	mov	r8, r0
 80257b6:	460c      	mov	r4, r1
 80257b8:	469a      	mov	sl, r3
 80257ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80257be:	d807      	bhi.n	80257d0 <_printf_i+0x28>
 80257c0:	2f62      	cmp	r7, #98	; 0x62
 80257c2:	d80a      	bhi.n	80257da <_printf_i+0x32>
 80257c4:	2f00      	cmp	r7, #0
 80257c6:	f000 80d8 	beq.w	802597a <_printf_i+0x1d2>
 80257ca:	2f58      	cmp	r7, #88	; 0x58
 80257cc:	f000 80a3 	beq.w	8025916 <_printf_i+0x16e>
 80257d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80257d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80257d8:	e03a      	b.n	8025850 <_printf_i+0xa8>
 80257da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80257de:	2b15      	cmp	r3, #21
 80257e0:	d8f6      	bhi.n	80257d0 <_printf_i+0x28>
 80257e2:	a101      	add	r1, pc, #4	; (adr r1, 80257e8 <_printf_i+0x40>)
 80257e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80257e8:	08025841 	.word	0x08025841
 80257ec:	08025855 	.word	0x08025855
 80257f0:	080257d1 	.word	0x080257d1
 80257f4:	080257d1 	.word	0x080257d1
 80257f8:	080257d1 	.word	0x080257d1
 80257fc:	080257d1 	.word	0x080257d1
 8025800:	08025855 	.word	0x08025855
 8025804:	080257d1 	.word	0x080257d1
 8025808:	080257d1 	.word	0x080257d1
 802580c:	080257d1 	.word	0x080257d1
 8025810:	080257d1 	.word	0x080257d1
 8025814:	08025961 	.word	0x08025961
 8025818:	08025885 	.word	0x08025885
 802581c:	08025943 	.word	0x08025943
 8025820:	080257d1 	.word	0x080257d1
 8025824:	080257d1 	.word	0x080257d1
 8025828:	08025983 	.word	0x08025983
 802582c:	080257d1 	.word	0x080257d1
 8025830:	08025885 	.word	0x08025885
 8025834:	080257d1 	.word	0x080257d1
 8025838:	080257d1 	.word	0x080257d1
 802583c:	0802594b 	.word	0x0802594b
 8025840:	682b      	ldr	r3, [r5, #0]
 8025842:	1d1a      	adds	r2, r3, #4
 8025844:	681b      	ldr	r3, [r3, #0]
 8025846:	602a      	str	r2, [r5, #0]
 8025848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802584c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025850:	2301      	movs	r3, #1
 8025852:	e0a3      	b.n	802599c <_printf_i+0x1f4>
 8025854:	6820      	ldr	r0, [r4, #0]
 8025856:	6829      	ldr	r1, [r5, #0]
 8025858:	0606      	lsls	r6, r0, #24
 802585a:	f101 0304 	add.w	r3, r1, #4
 802585e:	d50a      	bpl.n	8025876 <_printf_i+0xce>
 8025860:	680e      	ldr	r6, [r1, #0]
 8025862:	602b      	str	r3, [r5, #0]
 8025864:	2e00      	cmp	r6, #0
 8025866:	da03      	bge.n	8025870 <_printf_i+0xc8>
 8025868:	232d      	movs	r3, #45	; 0x2d
 802586a:	4276      	negs	r6, r6
 802586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025870:	485e      	ldr	r0, [pc, #376]	; (80259ec <_printf_i+0x244>)
 8025872:	230a      	movs	r3, #10
 8025874:	e019      	b.n	80258aa <_printf_i+0x102>
 8025876:	680e      	ldr	r6, [r1, #0]
 8025878:	602b      	str	r3, [r5, #0]
 802587a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802587e:	bf18      	it	ne
 8025880:	b236      	sxthne	r6, r6
 8025882:	e7ef      	b.n	8025864 <_printf_i+0xbc>
 8025884:	682b      	ldr	r3, [r5, #0]
 8025886:	6820      	ldr	r0, [r4, #0]
 8025888:	1d19      	adds	r1, r3, #4
 802588a:	6029      	str	r1, [r5, #0]
 802588c:	0601      	lsls	r1, r0, #24
 802588e:	d501      	bpl.n	8025894 <_printf_i+0xec>
 8025890:	681e      	ldr	r6, [r3, #0]
 8025892:	e002      	b.n	802589a <_printf_i+0xf2>
 8025894:	0646      	lsls	r6, r0, #25
 8025896:	d5fb      	bpl.n	8025890 <_printf_i+0xe8>
 8025898:	881e      	ldrh	r6, [r3, #0]
 802589a:	4854      	ldr	r0, [pc, #336]	; (80259ec <_printf_i+0x244>)
 802589c:	2f6f      	cmp	r7, #111	; 0x6f
 802589e:	bf0c      	ite	eq
 80258a0:	2308      	moveq	r3, #8
 80258a2:	230a      	movne	r3, #10
 80258a4:	2100      	movs	r1, #0
 80258a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80258aa:	6865      	ldr	r5, [r4, #4]
 80258ac:	60a5      	str	r5, [r4, #8]
 80258ae:	2d00      	cmp	r5, #0
 80258b0:	bfa2      	ittt	ge
 80258b2:	6821      	ldrge	r1, [r4, #0]
 80258b4:	f021 0104 	bicge.w	r1, r1, #4
 80258b8:	6021      	strge	r1, [r4, #0]
 80258ba:	b90e      	cbnz	r6, 80258c0 <_printf_i+0x118>
 80258bc:	2d00      	cmp	r5, #0
 80258be:	d04d      	beq.n	802595c <_printf_i+0x1b4>
 80258c0:	4615      	mov	r5, r2
 80258c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80258c6:	fb03 6711 	mls	r7, r3, r1, r6
 80258ca:	5dc7      	ldrb	r7, [r0, r7]
 80258cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80258d0:	4637      	mov	r7, r6
 80258d2:	42bb      	cmp	r3, r7
 80258d4:	460e      	mov	r6, r1
 80258d6:	d9f4      	bls.n	80258c2 <_printf_i+0x11a>
 80258d8:	2b08      	cmp	r3, #8
 80258da:	d10b      	bne.n	80258f4 <_printf_i+0x14c>
 80258dc:	6823      	ldr	r3, [r4, #0]
 80258de:	07de      	lsls	r6, r3, #31
 80258e0:	d508      	bpl.n	80258f4 <_printf_i+0x14c>
 80258e2:	6923      	ldr	r3, [r4, #16]
 80258e4:	6861      	ldr	r1, [r4, #4]
 80258e6:	4299      	cmp	r1, r3
 80258e8:	bfde      	ittt	le
 80258ea:	2330      	movle	r3, #48	; 0x30
 80258ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80258f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80258f4:	1b52      	subs	r2, r2, r5
 80258f6:	6122      	str	r2, [r4, #16]
 80258f8:	f8cd a000 	str.w	sl, [sp]
 80258fc:	464b      	mov	r3, r9
 80258fe:	aa03      	add	r2, sp, #12
 8025900:	4621      	mov	r1, r4
 8025902:	4640      	mov	r0, r8
 8025904:	f7ff fee2 	bl	80256cc <_printf_common>
 8025908:	3001      	adds	r0, #1
 802590a:	d14c      	bne.n	80259a6 <_printf_i+0x1fe>
 802590c:	f04f 30ff 	mov.w	r0, #4294967295
 8025910:	b004      	add	sp, #16
 8025912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025916:	4835      	ldr	r0, [pc, #212]	; (80259ec <_printf_i+0x244>)
 8025918:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802591c:	6829      	ldr	r1, [r5, #0]
 802591e:	6823      	ldr	r3, [r4, #0]
 8025920:	f851 6b04 	ldr.w	r6, [r1], #4
 8025924:	6029      	str	r1, [r5, #0]
 8025926:	061d      	lsls	r5, r3, #24
 8025928:	d514      	bpl.n	8025954 <_printf_i+0x1ac>
 802592a:	07df      	lsls	r7, r3, #31
 802592c:	bf44      	itt	mi
 802592e:	f043 0320 	orrmi.w	r3, r3, #32
 8025932:	6023      	strmi	r3, [r4, #0]
 8025934:	b91e      	cbnz	r6, 802593e <_printf_i+0x196>
 8025936:	6823      	ldr	r3, [r4, #0]
 8025938:	f023 0320 	bic.w	r3, r3, #32
 802593c:	6023      	str	r3, [r4, #0]
 802593e:	2310      	movs	r3, #16
 8025940:	e7b0      	b.n	80258a4 <_printf_i+0xfc>
 8025942:	6823      	ldr	r3, [r4, #0]
 8025944:	f043 0320 	orr.w	r3, r3, #32
 8025948:	6023      	str	r3, [r4, #0]
 802594a:	2378      	movs	r3, #120	; 0x78
 802594c:	4828      	ldr	r0, [pc, #160]	; (80259f0 <_printf_i+0x248>)
 802594e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025952:	e7e3      	b.n	802591c <_printf_i+0x174>
 8025954:	0659      	lsls	r1, r3, #25
 8025956:	bf48      	it	mi
 8025958:	b2b6      	uxthmi	r6, r6
 802595a:	e7e6      	b.n	802592a <_printf_i+0x182>
 802595c:	4615      	mov	r5, r2
 802595e:	e7bb      	b.n	80258d8 <_printf_i+0x130>
 8025960:	682b      	ldr	r3, [r5, #0]
 8025962:	6826      	ldr	r6, [r4, #0]
 8025964:	6961      	ldr	r1, [r4, #20]
 8025966:	1d18      	adds	r0, r3, #4
 8025968:	6028      	str	r0, [r5, #0]
 802596a:	0635      	lsls	r5, r6, #24
 802596c:	681b      	ldr	r3, [r3, #0]
 802596e:	d501      	bpl.n	8025974 <_printf_i+0x1cc>
 8025970:	6019      	str	r1, [r3, #0]
 8025972:	e002      	b.n	802597a <_printf_i+0x1d2>
 8025974:	0670      	lsls	r0, r6, #25
 8025976:	d5fb      	bpl.n	8025970 <_printf_i+0x1c8>
 8025978:	8019      	strh	r1, [r3, #0]
 802597a:	2300      	movs	r3, #0
 802597c:	6123      	str	r3, [r4, #16]
 802597e:	4615      	mov	r5, r2
 8025980:	e7ba      	b.n	80258f8 <_printf_i+0x150>
 8025982:	682b      	ldr	r3, [r5, #0]
 8025984:	1d1a      	adds	r2, r3, #4
 8025986:	602a      	str	r2, [r5, #0]
 8025988:	681d      	ldr	r5, [r3, #0]
 802598a:	6862      	ldr	r2, [r4, #4]
 802598c:	2100      	movs	r1, #0
 802598e:	4628      	mov	r0, r5
 8025990:	f7da fc56 	bl	8000240 <memchr>
 8025994:	b108      	cbz	r0, 802599a <_printf_i+0x1f2>
 8025996:	1b40      	subs	r0, r0, r5
 8025998:	6060      	str	r0, [r4, #4]
 802599a:	6863      	ldr	r3, [r4, #4]
 802599c:	6123      	str	r3, [r4, #16]
 802599e:	2300      	movs	r3, #0
 80259a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80259a4:	e7a8      	b.n	80258f8 <_printf_i+0x150>
 80259a6:	6923      	ldr	r3, [r4, #16]
 80259a8:	462a      	mov	r2, r5
 80259aa:	4649      	mov	r1, r9
 80259ac:	4640      	mov	r0, r8
 80259ae:	47d0      	blx	sl
 80259b0:	3001      	adds	r0, #1
 80259b2:	d0ab      	beq.n	802590c <_printf_i+0x164>
 80259b4:	6823      	ldr	r3, [r4, #0]
 80259b6:	079b      	lsls	r3, r3, #30
 80259b8:	d413      	bmi.n	80259e2 <_printf_i+0x23a>
 80259ba:	68e0      	ldr	r0, [r4, #12]
 80259bc:	9b03      	ldr	r3, [sp, #12]
 80259be:	4298      	cmp	r0, r3
 80259c0:	bfb8      	it	lt
 80259c2:	4618      	movlt	r0, r3
 80259c4:	e7a4      	b.n	8025910 <_printf_i+0x168>
 80259c6:	2301      	movs	r3, #1
 80259c8:	4632      	mov	r2, r6
 80259ca:	4649      	mov	r1, r9
 80259cc:	4640      	mov	r0, r8
 80259ce:	47d0      	blx	sl
 80259d0:	3001      	adds	r0, #1
 80259d2:	d09b      	beq.n	802590c <_printf_i+0x164>
 80259d4:	3501      	adds	r5, #1
 80259d6:	68e3      	ldr	r3, [r4, #12]
 80259d8:	9903      	ldr	r1, [sp, #12]
 80259da:	1a5b      	subs	r3, r3, r1
 80259dc:	42ab      	cmp	r3, r5
 80259de:	dcf2      	bgt.n	80259c6 <_printf_i+0x21e>
 80259e0:	e7eb      	b.n	80259ba <_printf_i+0x212>
 80259e2:	2500      	movs	r5, #0
 80259e4:	f104 0619 	add.w	r6, r4, #25
 80259e8:	e7f5      	b.n	80259d6 <_printf_i+0x22e>
 80259ea:	bf00      	nop
 80259ec:	0802a601 	.word	0x0802a601
 80259f0:	0802a612 	.word	0x0802a612

080259f4 <_sbrk_r>:
 80259f4:	b538      	push	{r3, r4, r5, lr}
 80259f6:	4d06      	ldr	r5, [pc, #24]	; (8025a10 <_sbrk_r+0x1c>)
 80259f8:	2300      	movs	r3, #0
 80259fa:	4604      	mov	r4, r0
 80259fc:	4608      	mov	r0, r1
 80259fe:	602b      	str	r3, [r5, #0]
 8025a00:	f7de fef0 	bl	80047e4 <_sbrk>
 8025a04:	1c43      	adds	r3, r0, #1
 8025a06:	d102      	bne.n	8025a0e <_sbrk_r+0x1a>
 8025a08:	682b      	ldr	r3, [r5, #0]
 8025a0a:	b103      	cbz	r3, 8025a0e <_sbrk_r+0x1a>
 8025a0c:	6023      	str	r3, [r4, #0]
 8025a0e:	bd38      	pop	{r3, r4, r5, pc}
 8025a10:	20028140 	.word	0x20028140

08025a14 <_raise_r>:
 8025a14:	291f      	cmp	r1, #31
 8025a16:	b538      	push	{r3, r4, r5, lr}
 8025a18:	4604      	mov	r4, r0
 8025a1a:	460d      	mov	r5, r1
 8025a1c:	d904      	bls.n	8025a28 <_raise_r+0x14>
 8025a1e:	2316      	movs	r3, #22
 8025a20:	6003      	str	r3, [r0, #0]
 8025a22:	f04f 30ff 	mov.w	r0, #4294967295
 8025a26:	bd38      	pop	{r3, r4, r5, pc}
 8025a28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025a2a:	b112      	cbz	r2, 8025a32 <_raise_r+0x1e>
 8025a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025a30:	b94b      	cbnz	r3, 8025a46 <_raise_r+0x32>
 8025a32:	4620      	mov	r0, r4
 8025a34:	f000 f830 	bl	8025a98 <_getpid_r>
 8025a38:	462a      	mov	r2, r5
 8025a3a:	4601      	mov	r1, r0
 8025a3c:	4620      	mov	r0, r4
 8025a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025a42:	f000 b817 	b.w	8025a74 <_kill_r>
 8025a46:	2b01      	cmp	r3, #1
 8025a48:	d00a      	beq.n	8025a60 <_raise_r+0x4c>
 8025a4a:	1c59      	adds	r1, r3, #1
 8025a4c:	d103      	bne.n	8025a56 <_raise_r+0x42>
 8025a4e:	2316      	movs	r3, #22
 8025a50:	6003      	str	r3, [r0, #0]
 8025a52:	2001      	movs	r0, #1
 8025a54:	e7e7      	b.n	8025a26 <_raise_r+0x12>
 8025a56:	2400      	movs	r4, #0
 8025a58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025a5c:	4628      	mov	r0, r5
 8025a5e:	4798      	blx	r3
 8025a60:	2000      	movs	r0, #0
 8025a62:	e7e0      	b.n	8025a26 <_raise_r+0x12>

08025a64 <raise>:
 8025a64:	4b02      	ldr	r3, [pc, #8]	; (8025a70 <raise+0xc>)
 8025a66:	4601      	mov	r1, r0
 8025a68:	6818      	ldr	r0, [r3, #0]
 8025a6a:	f7ff bfd3 	b.w	8025a14 <_raise_r>
 8025a6e:	bf00      	nop
 8025a70:	200000e8 	.word	0x200000e8

08025a74 <_kill_r>:
 8025a74:	b538      	push	{r3, r4, r5, lr}
 8025a76:	4d07      	ldr	r5, [pc, #28]	; (8025a94 <_kill_r+0x20>)
 8025a78:	2300      	movs	r3, #0
 8025a7a:	4604      	mov	r4, r0
 8025a7c:	4608      	mov	r0, r1
 8025a7e:	4611      	mov	r1, r2
 8025a80:	602b      	str	r3, [r5, #0]
 8025a82:	f7de fe79 	bl	8004778 <_kill>
 8025a86:	1c43      	adds	r3, r0, #1
 8025a88:	d102      	bne.n	8025a90 <_kill_r+0x1c>
 8025a8a:	682b      	ldr	r3, [r5, #0]
 8025a8c:	b103      	cbz	r3, 8025a90 <_kill_r+0x1c>
 8025a8e:	6023      	str	r3, [r4, #0]
 8025a90:	bd38      	pop	{r3, r4, r5, pc}
 8025a92:	bf00      	nop
 8025a94:	20028140 	.word	0x20028140

08025a98 <_getpid_r>:
 8025a98:	f7de be6c 	b.w	8004774 <_getpid>

08025a9c <strncmp>:
 8025a9c:	b510      	push	{r4, lr}
 8025a9e:	b17a      	cbz	r2, 8025ac0 <strncmp+0x24>
 8025aa0:	4603      	mov	r3, r0
 8025aa2:	3901      	subs	r1, #1
 8025aa4:	1884      	adds	r4, r0, r2
 8025aa6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025aaa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8025aae:	4290      	cmp	r0, r2
 8025ab0:	d101      	bne.n	8025ab6 <strncmp+0x1a>
 8025ab2:	42a3      	cmp	r3, r4
 8025ab4:	d101      	bne.n	8025aba <strncmp+0x1e>
 8025ab6:	1a80      	subs	r0, r0, r2
 8025ab8:	bd10      	pop	{r4, pc}
 8025aba:	2800      	cmp	r0, #0
 8025abc:	d1f3      	bne.n	8025aa6 <strncmp+0xa>
 8025abe:	e7fa      	b.n	8025ab6 <strncmp+0x1a>
 8025ac0:	4610      	mov	r0, r2
 8025ac2:	e7f9      	b.n	8025ab8 <strncmp+0x1c>

08025ac4 <__swbuf_r>:
 8025ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ac6:	460e      	mov	r6, r1
 8025ac8:	4614      	mov	r4, r2
 8025aca:	4605      	mov	r5, r0
 8025acc:	b118      	cbz	r0, 8025ad6 <__swbuf_r+0x12>
 8025ace:	6983      	ldr	r3, [r0, #24]
 8025ad0:	b90b      	cbnz	r3, 8025ad6 <__swbuf_r+0x12>
 8025ad2:	f000 fa33 	bl	8025f3c <__sinit>
 8025ad6:	4b21      	ldr	r3, [pc, #132]	; (8025b5c <__swbuf_r+0x98>)
 8025ad8:	429c      	cmp	r4, r3
 8025ada:	d12b      	bne.n	8025b34 <__swbuf_r+0x70>
 8025adc:	686c      	ldr	r4, [r5, #4]
 8025ade:	69a3      	ldr	r3, [r4, #24]
 8025ae0:	60a3      	str	r3, [r4, #8]
 8025ae2:	89a3      	ldrh	r3, [r4, #12]
 8025ae4:	071a      	lsls	r2, r3, #28
 8025ae6:	d52f      	bpl.n	8025b48 <__swbuf_r+0x84>
 8025ae8:	6923      	ldr	r3, [r4, #16]
 8025aea:	b36b      	cbz	r3, 8025b48 <__swbuf_r+0x84>
 8025aec:	6923      	ldr	r3, [r4, #16]
 8025aee:	6820      	ldr	r0, [r4, #0]
 8025af0:	1ac0      	subs	r0, r0, r3
 8025af2:	6963      	ldr	r3, [r4, #20]
 8025af4:	b2f6      	uxtb	r6, r6
 8025af6:	4283      	cmp	r3, r0
 8025af8:	4637      	mov	r7, r6
 8025afa:	dc04      	bgt.n	8025b06 <__swbuf_r+0x42>
 8025afc:	4621      	mov	r1, r4
 8025afe:	4628      	mov	r0, r5
 8025b00:	f000 f988 	bl	8025e14 <_fflush_r>
 8025b04:	bb30      	cbnz	r0, 8025b54 <__swbuf_r+0x90>
 8025b06:	68a3      	ldr	r3, [r4, #8]
 8025b08:	3b01      	subs	r3, #1
 8025b0a:	60a3      	str	r3, [r4, #8]
 8025b0c:	6823      	ldr	r3, [r4, #0]
 8025b0e:	1c5a      	adds	r2, r3, #1
 8025b10:	6022      	str	r2, [r4, #0]
 8025b12:	701e      	strb	r6, [r3, #0]
 8025b14:	6963      	ldr	r3, [r4, #20]
 8025b16:	3001      	adds	r0, #1
 8025b18:	4283      	cmp	r3, r0
 8025b1a:	d004      	beq.n	8025b26 <__swbuf_r+0x62>
 8025b1c:	89a3      	ldrh	r3, [r4, #12]
 8025b1e:	07db      	lsls	r3, r3, #31
 8025b20:	d506      	bpl.n	8025b30 <__swbuf_r+0x6c>
 8025b22:	2e0a      	cmp	r6, #10
 8025b24:	d104      	bne.n	8025b30 <__swbuf_r+0x6c>
 8025b26:	4621      	mov	r1, r4
 8025b28:	4628      	mov	r0, r5
 8025b2a:	f000 f973 	bl	8025e14 <_fflush_r>
 8025b2e:	b988      	cbnz	r0, 8025b54 <__swbuf_r+0x90>
 8025b30:	4638      	mov	r0, r7
 8025b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b34:	4b0a      	ldr	r3, [pc, #40]	; (8025b60 <__swbuf_r+0x9c>)
 8025b36:	429c      	cmp	r4, r3
 8025b38:	d101      	bne.n	8025b3e <__swbuf_r+0x7a>
 8025b3a:	68ac      	ldr	r4, [r5, #8]
 8025b3c:	e7cf      	b.n	8025ade <__swbuf_r+0x1a>
 8025b3e:	4b09      	ldr	r3, [pc, #36]	; (8025b64 <__swbuf_r+0xa0>)
 8025b40:	429c      	cmp	r4, r3
 8025b42:	bf08      	it	eq
 8025b44:	68ec      	ldreq	r4, [r5, #12]
 8025b46:	e7ca      	b.n	8025ade <__swbuf_r+0x1a>
 8025b48:	4621      	mov	r1, r4
 8025b4a:	4628      	mov	r0, r5
 8025b4c:	f000 f80c 	bl	8025b68 <__swsetup_r>
 8025b50:	2800      	cmp	r0, #0
 8025b52:	d0cb      	beq.n	8025aec <__swbuf_r+0x28>
 8025b54:	f04f 37ff 	mov.w	r7, #4294967295
 8025b58:	e7ea      	b.n	8025b30 <__swbuf_r+0x6c>
 8025b5a:	bf00      	nop
 8025b5c:	0802a648 	.word	0x0802a648
 8025b60:	0802a668 	.word	0x0802a668
 8025b64:	0802a628 	.word	0x0802a628

08025b68 <__swsetup_r>:
 8025b68:	4b32      	ldr	r3, [pc, #200]	; (8025c34 <__swsetup_r+0xcc>)
 8025b6a:	b570      	push	{r4, r5, r6, lr}
 8025b6c:	681d      	ldr	r5, [r3, #0]
 8025b6e:	4606      	mov	r6, r0
 8025b70:	460c      	mov	r4, r1
 8025b72:	b125      	cbz	r5, 8025b7e <__swsetup_r+0x16>
 8025b74:	69ab      	ldr	r3, [r5, #24]
 8025b76:	b913      	cbnz	r3, 8025b7e <__swsetup_r+0x16>
 8025b78:	4628      	mov	r0, r5
 8025b7a:	f000 f9df 	bl	8025f3c <__sinit>
 8025b7e:	4b2e      	ldr	r3, [pc, #184]	; (8025c38 <__swsetup_r+0xd0>)
 8025b80:	429c      	cmp	r4, r3
 8025b82:	d10f      	bne.n	8025ba4 <__swsetup_r+0x3c>
 8025b84:	686c      	ldr	r4, [r5, #4]
 8025b86:	89a3      	ldrh	r3, [r4, #12]
 8025b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025b8c:	0719      	lsls	r1, r3, #28
 8025b8e:	d42c      	bmi.n	8025bea <__swsetup_r+0x82>
 8025b90:	06dd      	lsls	r5, r3, #27
 8025b92:	d411      	bmi.n	8025bb8 <__swsetup_r+0x50>
 8025b94:	2309      	movs	r3, #9
 8025b96:	6033      	str	r3, [r6, #0]
 8025b98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025b9c:	81a3      	strh	r3, [r4, #12]
 8025b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8025ba2:	e03e      	b.n	8025c22 <__swsetup_r+0xba>
 8025ba4:	4b25      	ldr	r3, [pc, #148]	; (8025c3c <__swsetup_r+0xd4>)
 8025ba6:	429c      	cmp	r4, r3
 8025ba8:	d101      	bne.n	8025bae <__swsetup_r+0x46>
 8025baa:	68ac      	ldr	r4, [r5, #8]
 8025bac:	e7eb      	b.n	8025b86 <__swsetup_r+0x1e>
 8025bae:	4b24      	ldr	r3, [pc, #144]	; (8025c40 <__swsetup_r+0xd8>)
 8025bb0:	429c      	cmp	r4, r3
 8025bb2:	bf08      	it	eq
 8025bb4:	68ec      	ldreq	r4, [r5, #12]
 8025bb6:	e7e6      	b.n	8025b86 <__swsetup_r+0x1e>
 8025bb8:	0758      	lsls	r0, r3, #29
 8025bba:	d512      	bpl.n	8025be2 <__swsetup_r+0x7a>
 8025bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025bbe:	b141      	cbz	r1, 8025bd2 <__swsetup_r+0x6a>
 8025bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025bc4:	4299      	cmp	r1, r3
 8025bc6:	d002      	beq.n	8025bce <__swsetup_r+0x66>
 8025bc8:	4630      	mov	r0, r6
 8025bca:	f7ff fb45 	bl	8025258 <_free_r>
 8025bce:	2300      	movs	r3, #0
 8025bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8025bd2:	89a3      	ldrh	r3, [r4, #12]
 8025bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025bd8:	81a3      	strh	r3, [r4, #12]
 8025bda:	2300      	movs	r3, #0
 8025bdc:	6063      	str	r3, [r4, #4]
 8025bde:	6923      	ldr	r3, [r4, #16]
 8025be0:	6023      	str	r3, [r4, #0]
 8025be2:	89a3      	ldrh	r3, [r4, #12]
 8025be4:	f043 0308 	orr.w	r3, r3, #8
 8025be8:	81a3      	strh	r3, [r4, #12]
 8025bea:	6923      	ldr	r3, [r4, #16]
 8025bec:	b94b      	cbnz	r3, 8025c02 <__swsetup_r+0x9a>
 8025bee:	89a3      	ldrh	r3, [r4, #12]
 8025bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025bf8:	d003      	beq.n	8025c02 <__swsetup_r+0x9a>
 8025bfa:	4621      	mov	r1, r4
 8025bfc:	4630      	mov	r0, r6
 8025bfe:	f000 fa5f 	bl	80260c0 <__smakebuf_r>
 8025c02:	89a0      	ldrh	r0, [r4, #12]
 8025c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025c08:	f010 0301 	ands.w	r3, r0, #1
 8025c0c:	d00a      	beq.n	8025c24 <__swsetup_r+0xbc>
 8025c0e:	2300      	movs	r3, #0
 8025c10:	60a3      	str	r3, [r4, #8]
 8025c12:	6963      	ldr	r3, [r4, #20]
 8025c14:	425b      	negs	r3, r3
 8025c16:	61a3      	str	r3, [r4, #24]
 8025c18:	6923      	ldr	r3, [r4, #16]
 8025c1a:	b943      	cbnz	r3, 8025c2e <__swsetup_r+0xc6>
 8025c1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025c20:	d1ba      	bne.n	8025b98 <__swsetup_r+0x30>
 8025c22:	bd70      	pop	{r4, r5, r6, pc}
 8025c24:	0781      	lsls	r1, r0, #30
 8025c26:	bf58      	it	pl
 8025c28:	6963      	ldrpl	r3, [r4, #20]
 8025c2a:	60a3      	str	r3, [r4, #8]
 8025c2c:	e7f4      	b.n	8025c18 <__swsetup_r+0xb0>
 8025c2e:	2000      	movs	r0, #0
 8025c30:	e7f7      	b.n	8025c22 <__swsetup_r+0xba>
 8025c32:	bf00      	nop
 8025c34:	200000e8 	.word	0x200000e8
 8025c38:	0802a648 	.word	0x0802a648
 8025c3c:	0802a668 	.word	0x0802a668
 8025c40:	0802a628 	.word	0x0802a628

08025c44 <__register_exitproc>:
 8025c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c48:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025d04 <__register_exitproc+0xc0>
 8025c4c:	4606      	mov	r6, r0
 8025c4e:	f8d8 0000 	ldr.w	r0, [r8]
 8025c52:	461f      	mov	r7, r3
 8025c54:	460d      	mov	r5, r1
 8025c56:	4691      	mov	r9, r2
 8025c58:	f7ff fad5 	bl	8025206 <__retarget_lock_acquire_recursive>
 8025c5c:	4b25      	ldr	r3, [pc, #148]	; (8025cf4 <__register_exitproc+0xb0>)
 8025c5e:	681c      	ldr	r4, [r3, #0]
 8025c60:	b934      	cbnz	r4, 8025c70 <__register_exitproc+0x2c>
 8025c62:	4c25      	ldr	r4, [pc, #148]	; (8025cf8 <__register_exitproc+0xb4>)
 8025c64:	601c      	str	r4, [r3, #0]
 8025c66:	4b25      	ldr	r3, [pc, #148]	; (8025cfc <__register_exitproc+0xb8>)
 8025c68:	b113      	cbz	r3, 8025c70 <__register_exitproc+0x2c>
 8025c6a:	681b      	ldr	r3, [r3, #0]
 8025c6c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025c70:	6863      	ldr	r3, [r4, #4]
 8025c72:	2b1f      	cmp	r3, #31
 8025c74:	dd07      	ble.n	8025c86 <__register_exitproc+0x42>
 8025c76:	f8d8 0000 	ldr.w	r0, [r8]
 8025c7a:	f7ff fac6 	bl	802520a <__retarget_lock_release_recursive>
 8025c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8025c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c86:	b34e      	cbz	r6, 8025cdc <__register_exitproc+0x98>
 8025c88:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025c8c:	b988      	cbnz	r0, 8025cb2 <__register_exitproc+0x6e>
 8025c8e:	4b1c      	ldr	r3, [pc, #112]	; (8025d00 <__register_exitproc+0xbc>)
 8025c90:	b923      	cbnz	r3, 8025c9c <__register_exitproc+0x58>
 8025c92:	f8d8 0000 	ldr.w	r0, [r8]
 8025c96:	f7ff fab7 	bl	8025208 <__retarget_lock_release>
 8025c9a:	e7f0      	b.n	8025c7e <__register_exitproc+0x3a>
 8025c9c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025ca0:	f7ff fab4 	bl	802520c <malloc>
 8025ca4:	2800      	cmp	r0, #0
 8025ca6:	d0f4      	beq.n	8025c92 <__register_exitproc+0x4e>
 8025ca8:	2300      	movs	r3, #0
 8025caa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025cae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025cb2:	6863      	ldr	r3, [r4, #4]
 8025cb4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025cb8:	2201      	movs	r2, #1
 8025cba:	409a      	lsls	r2, r3
 8025cbc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025cc0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025cc4:	4313      	orrs	r3, r2
 8025cc6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025cca:	2e02      	cmp	r6, #2
 8025ccc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025cd0:	bf02      	ittt	eq
 8025cd2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025cd6:	4313      	orreq	r3, r2
 8025cd8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025cdc:	6863      	ldr	r3, [r4, #4]
 8025cde:	f8d8 0000 	ldr.w	r0, [r8]
 8025ce2:	1c5a      	adds	r2, r3, #1
 8025ce4:	3302      	adds	r3, #2
 8025ce6:	6062      	str	r2, [r4, #4]
 8025ce8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025cec:	f7ff fa8d 	bl	802520a <__retarget_lock_release_recursive>
 8025cf0:	2000      	movs	r0, #0
 8025cf2:	e7c6      	b.n	8025c82 <__register_exitproc+0x3e>
 8025cf4:	2002813c 	.word	0x2002813c
 8025cf8:	200280b0 	.word	0x200280b0
 8025cfc:	0802a624 	.word	0x0802a624
 8025d00:	0802520d 	.word	0x0802520d
 8025d04:	2000014c 	.word	0x2000014c

08025d08 <__sflush_r>:
 8025d08:	898a      	ldrh	r2, [r1, #12]
 8025d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d0e:	4605      	mov	r5, r0
 8025d10:	0710      	lsls	r0, r2, #28
 8025d12:	460c      	mov	r4, r1
 8025d14:	d458      	bmi.n	8025dc8 <__sflush_r+0xc0>
 8025d16:	684b      	ldr	r3, [r1, #4]
 8025d18:	2b00      	cmp	r3, #0
 8025d1a:	dc05      	bgt.n	8025d28 <__sflush_r+0x20>
 8025d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025d1e:	2b00      	cmp	r3, #0
 8025d20:	dc02      	bgt.n	8025d28 <__sflush_r+0x20>
 8025d22:	2000      	movs	r0, #0
 8025d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025d2a:	2e00      	cmp	r6, #0
 8025d2c:	d0f9      	beq.n	8025d22 <__sflush_r+0x1a>
 8025d2e:	2300      	movs	r3, #0
 8025d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025d34:	682f      	ldr	r7, [r5, #0]
 8025d36:	602b      	str	r3, [r5, #0]
 8025d38:	d032      	beq.n	8025da0 <__sflush_r+0x98>
 8025d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025d3c:	89a3      	ldrh	r3, [r4, #12]
 8025d3e:	075a      	lsls	r2, r3, #29
 8025d40:	d505      	bpl.n	8025d4e <__sflush_r+0x46>
 8025d42:	6863      	ldr	r3, [r4, #4]
 8025d44:	1ac0      	subs	r0, r0, r3
 8025d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025d48:	b10b      	cbz	r3, 8025d4e <__sflush_r+0x46>
 8025d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025d4c:	1ac0      	subs	r0, r0, r3
 8025d4e:	2300      	movs	r3, #0
 8025d50:	4602      	mov	r2, r0
 8025d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025d54:	6a21      	ldr	r1, [r4, #32]
 8025d56:	4628      	mov	r0, r5
 8025d58:	47b0      	blx	r6
 8025d5a:	1c43      	adds	r3, r0, #1
 8025d5c:	89a3      	ldrh	r3, [r4, #12]
 8025d5e:	d106      	bne.n	8025d6e <__sflush_r+0x66>
 8025d60:	6829      	ldr	r1, [r5, #0]
 8025d62:	291d      	cmp	r1, #29
 8025d64:	d82c      	bhi.n	8025dc0 <__sflush_r+0xb8>
 8025d66:	4a2a      	ldr	r2, [pc, #168]	; (8025e10 <__sflush_r+0x108>)
 8025d68:	40ca      	lsrs	r2, r1
 8025d6a:	07d6      	lsls	r6, r2, #31
 8025d6c:	d528      	bpl.n	8025dc0 <__sflush_r+0xb8>
 8025d6e:	2200      	movs	r2, #0
 8025d70:	6062      	str	r2, [r4, #4]
 8025d72:	04d9      	lsls	r1, r3, #19
 8025d74:	6922      	ldr	r2, [r4, #16]
 8025d76:	6022      	str	r2, [r4, #0]
 8025d78:	d504      	bpl.n	8025d84 <__sflush_r+0x7c>
 8025d7a:	1c42      	adds	r2, r0, #1
 8025d7c:	d101      	bne.n	8025d82 <__sflush_r+0x7a>
 8025d7e:	682b      	ldr	r3, [r5, #0]
 8025d80:	b903      	cbnz	r3, 8025d84 <__sflush_r+0x7c>
 8025d82:	6560      	str	r0, [r4, #84]	; 0x54
 8025d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025d86:	602f      	str	r7, [r5, #0]
 8025d88:	2900      	cmp	r1, #0
 8025d8a:	d0ca      	beq.n	8025d22 <__sflush_r+0x1a>
 8025d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025d90:	4299      	cmp	r1, r3
 8025d92:	d002      	beq.n	8025d9a <__sflush_r+0x92>
 8025d94:	4628      	mov	r0, r5
 8025d96:	f7ff fa5f 	bl	8025258 <_free_r>
 8025d9a:	2000      	movs	r0, #0
 8025d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8025d9e:	e7c1      	b.n	8025d24 <__sflush_r+0x1c>
 8025da0:	6a21      	ldr	r1, [r4, #32]
 8025da2:	2301      	movs	r3, #1
 8025da4:	4628      	mov	r0, r5
 8025da6:	47b0      	blx	r6
 8025da8:	1c41      	adds	r1, r0, #1
 8025daa:	d1c7      	bne.n	8025d3c <__sflush_r+0x34>
 8025dac:	682b      	ldr	r3, [r5, #0]
 8025dae:	2b00      	cmp	r3, #0
 8025db0:	d0c4      	beq.n	8025d3c <__sflush_r+0x34>
 8025db2:	2b1d      	cmp	r3, #29
 8025db4:	d001      	beq.n	8025dba <__sflush_r+0xb2>
 8025db6:	2b16      	cmp	r3, #22
 8025db8:	d101      	bne.n	8025dbe <__sflush_r+0xb6>
 8025dba:	602f      	str	r7, [r5, #0]
 8025dbc:	e7b1      	b.n	8025d22 <__sflush_r+0x1a>
 8025dbe:	89a3      	ldrh	r3, [r4, #12]
 8025dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025dc4:	81a3      	strh	r3, [r4, #12]
 8025dc6:	e7ad      	b.n	8025d24 <__sflush_r+0x1c>
 8025dc8:	690f      	ldr	r7, [r1, #16]
 8025dca:	2f00      	cmp	r7, #0
 8025dcc:	d0a9      	beq.n	8025d22 <__sflush_r+0x1a>
 8025dce:	0793      	lsls	r3, r2, #30
 8025dd0:	680e      	ldr	r6, [r1, #0]
 8025dd2:	bf08      	it	eq
 8025dd4:	694b      	ldreq	r3, [r1, #20]
 8025dd6:	600f      	str	r7, [r1, #0]
 8025dd8:	bf18      	it	ne
 8025dda:	2300      	movne	r3, #0
 8025ddc:	eba6 0807 	sub.w	r8, r6, r7
 8025de0:	608b      	str	r3, [r1, #8]
 8025de2:	f1b8 0f00 	cmp.w	r8, #0
 8025de6:	dd9c      	ble.n	8025d22 <__sflush_r+0x1a>
 8025de8:	6a21      	ldr	r1, [r4, #32]
 8025dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025dec:	4643      	mov	r3, r8
 8025dee:	463a      	mov	r2, r7
 8025df0:	4628      	mov	r0, r5
 8025df2:	47b0      	blx	r6
 8025df4:	2800      	cmp	r0, #0
 8025df6:	dc06      	bgt.n	8025e06 <__sflush_r+0xfe>
 8025df8:	89a3      	ldrh	r3, [r4, #12]
 8025dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025dfe:	81a3      	strh	r3, [r4, #12]
 8025e00:	f04f 30ff 	mov.w	r0, #4294967295
 8025e04:	e78e      	b.n	8025d24 <__sflush_r+0x1c>
 8025e06:	4407      	add	r7, r0
 8025e08:	eba8 0800 	sub.w	r8, r8, r0
 8025e0c:	e7e9      	b.n	8025de2 <__sflush_r+0xda>
 8025e0e:	bf00      	nop
 8025e10:	20400001 	.word	0x20400001

08025e14 <_fflush_r>:
 8025e14:	b538      	push	{r3, r4, r5, lr}
 8025e16:	690b      	ldr	r3, [r1, #16]
 8025e18:	4605      	mov	r5, r0
 8025e1a:	460c      	mov	r4, r1
 8025e1c:	b913      	cbnz	r3, 8025e24 <_fflush_r+0x10>
 8025e1e:	2500      	movs	r5, #0
 8025e20:	4628      	mov	r0, r5
 8025e22:	bd38      	pop	{r3, r4, r5, pc}
 8025e24:	b118      	cbz	r0, 8025e2e <_fflush_r+0x1a>
 8025e26:	6983      	ldr	r3, [r0, #24]
 8025e28:	b90b      	cbnz	r3, 8025e2e <_fflush_r+0x1a>
 8025e2a:	f000 f887 	bl	8025f3c <__sinit>
 8025e2e:	4b14      	ldr	r3, [pc, #80]	; (8025e80 <_fflush_r+0x6c>)
 8025e30:	429c      	cmp	r4, r3
 8025e32:	d11b      	bne.n	8025e6c <_fflush_r+0x58>
 8025e34:	686c      	ldr	r4, [r5, #4]
 8025e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025e3a:	2b00      	cmp	r3, #0
 8025e3c:	d0ef      	beq.n	8025e1e <_fflush_r+0xa>
 8025e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025e40:	07d0      	lsls	r0, r2, #31
 8025e42:	d404      	bmi.n	8025e4e <_fflush_r+0x3a>
 8025e44:	0599      	lsls	r1, r3, #22
 8025e46:	d402      	bmi.n	8025e4e <_fflush_r+0x3a>
 8025e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025e4a:	f7ff f9dc 	bl	8025206 <__retarget_lock_acquire_recursive>
 8025e4e:	4628      	mov	r0, r5
 8025e50:	4621      	mov	r1, r4
 8025e52:	f7ff ff59 	bl	8025d08 <__sflush_r>
 8025e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025e58:	07da      	lsls	r2, r3, #31
 8025e5a:	4605      	mov	r5, r0
 8025e5c:	d4e0      	bmi.n	8025e20 <_fflush_r+0xc>
 8025e5e:	89a3      	ldrh	r3, [r4, #12]
 8025e60:	059b      	lsls	r3, r3, #22
 8025e62:	d4dd      	bmi.n	8025e20 <_fflush_r+0xc>
 8025e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025e66:	f7ff f9d0 	bl	802520a <__retarget_lock_release_recursive>
 8025e6a:	e7d9      	b.n	8025e20 <_fflush_r+0xc>
 8025e6c:	4b05      	ldr	r3, [pc, #20]	; (8025e84 <_fflush_r+0x70>)
 8025e6e:	429c      	cmp	r4, r3
 8025e70:	d101      	bne.n	8025e76 <_fflush_r+0x62>
 8025e72:	68ac      	ldr	r4, [r5, #8]
 8025e74:	e7df      	b.n	8025e36 <_fflush_r+0x22>
 8025e76:	4b04      	ldr	r3, [pc, #16]	; (8025e88 <_fflush_r+0x74>)
 8025e78:	429c      	cmp	r4, r3
 8025e7a:	bf08      	it	eq
 8025e7c:	68ec      	ldreq	r4, [r5, #12]
 8025e7e:	e7da      	b.n	8025e36 <_fflush_r+0x22>
 8025e80:	0802a648 	.word	0x0802a648
 8025e84:	0802a668 	.word	0x0802a668
 8025e88:	0802a628 	.word	0x0802a628

08025e8c <std>:
 8025e8c:	2300      	movs	r3, #0
 8025e8e:	b510      	push	{r4, lr}
 8025e90:	4604      	mov	r4, r0
 8025e92:	e9c0 3300 	strd	r3, r3, [r0]
 8025e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025e9a:	6083      	str	r3, [r0, #8]
 8025e9c:	8181      	strh	r1, [r0, #12]
 8025e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8025ea0:	81c2      	strh	r2, [r0, #14]
 8025ea2:	6183      	str	r3, [r0, #24]
 8025ea4:	4619      	mov	r1, r3
 8025ea6:	2208      	movs	r2, #8
 8025ea8:	305c      	adds	r0, #92	; 0x5c
 8025eaa:	f7ff f9cd 	bl	8025248 <memset>
 8025eae:	4b05      	ldr	r3, [pc, #20]	; (8025ec4 <std+0x38>)
 8025eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8025eb2:	4b05      	ldr	r3, [pc, #20]	; (8025ec8 <std+0x3c>)
 8025eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8025eb6:	4b05      	ldr	r3, [pc, #20]	; (8025ecc <std+0x40>)
 8025eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025eba:	4b05      	ldr	r3, [pc, #20]	; (8025ed0 <std+0x44>)
 8025ebc:	6224      	str	r4, [r4, #32]
 8025ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8025ec0:	bd10      	pop	{r4, pc}
 8025ec2:	bf00      	nop
 8025ec4:	08026159 	.word	0x08026159
 8025ec8:	0802617b 	.word	0x0802617b
 8025ecc:	080261b3 	.word	0x080261b3
 8025ed0:	080261d7 	.word	0x080261d7

08025ed4 <_cleanup_r>:
 8025ed4:	4901      	ldr	r1, [pc, #4]	; (8025edc <_cleanup_r+0x8>)
 8025ed6:	f000 b8af 	b.w	8026038 <_fwalk_reent>
 8025eda:	bf00      	nop
 8025edc:	08025e15 	.word	0x08025e15

08025ee0 <__sfmoreglue>:
 8025ee0:	b570      	push	{r4, r5, r6, lr}
 8025ee2:	2268      	movs	r2, #104	; 0x68
 8025ee4:	1e4d      	subs	r5, r1, #1
 8025ee6:	4355      	muls	r5, r2
 8025ee8:	460e      	mov	r6, r1
 8025eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025eee:	f7ff fa1f 	bl	8025330 <_malloc_r>
 8025ef2:	4604      	mov	r4, r0
 8025ef4:	b140      	cbz	r0, 8025f08 <__sfmoreglue+0x28>
 8025ef6:	2100      	movs	r1, #0
 8025ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8025efc:	300c      	adds	r0, #12
 8025efe:	60a0      	str	r0, [r4, #8]
 8025f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025f04:	f7ff f9a0 	bl	8025248 <memset>
 8025f08:	4620      	mov	r0, r4
 8025f0a:	bd70      	pop	{r4, r5, r6, pc}

08025f0c <__sfp_lock_acquire>:
 8025f0c:	4801      	ldr	r0, [pc, #4]	; (8025f14 <__sfp_lock_acquire+0x8>)
 8025f0e:	f7ff b97a 	b.w	8025206 <__retarget_lock_acquire_recursive>
 8025f12:	bf00      	nop
 8025f14:	20027f9e 	.word	0x20027f9e

08025f18 <__sfp_lock_release>:
 8025f18:	4801      	ldr	r0, [pc, #4]	; (8025f20 <__sfp_lock_release+0x8>)
 8025f1a:	f7ff b976 	b.w	802520a <__retarget_lock_release_recursive>
 8025f1e:	bf00      	nop
 8025f20:	20027f9e 	.word	0x20027f9e

08025f24 <__sinit_lock_acquire>:
 8025f24:	4801      	ldr	r0, [pc, #4]	; (8025f2c <__sinit_lock_acquire+0x8>)
 8025f26:	f7ff b96e 	b.w	8025206 <__retarget_lock_acquire_recursive>
 8025f2a:	bf00      	nop
 8025f2c:	20027f9f 	.word	0x20027f9f

08025f30 <__sinit_lock_release>:
 8025f30:	4801      	ldr	r0, [pc, #4]	; (8025f38 <__sinit_lock_release+0x8>)
 8025f32:	f7ff b96a 	b.w	802520a <__retarget_lock_release_recursive>
 8025f36:	bf00      	nop
 8025f38:	20027f9f 	.word	0x20027f9f

08025f3c <__sinit>:
 8025f3c:	b510      	push	{r4, lr}
 8025f3e:	4604      	mov	r4, r0
 8025f40:	f7ff fff0 	bl	8025f24 <__sinit_lock_acquire>
 8025f44:	69a3      	ldr	r3, [r4, #24]
 8025f46:	b11b      	cbz	r3, 8025f50 <__sinit+0x14>
 8025f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f4c:	f7ff bff0 	b.w	8025f30 <__sinit_lock_release>
 8025f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025f54:	6523      	str	r3, [r4, #80]	; 0x50
 8025f56:	4b13      	ldr	r3, [pc, #76]	; (8025fa4 <__sinit+0x68>)
 8025f58:	4a13      	ldr	r2, [pc, #76]	; (8025fa8 <__sinit+0x6c>)
 8025f5a:	681b      	ldr	r3, [r3, #0]
 8025f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8025f5e:	42a3      	cmp	r3, r4
 8025f60:	bf04      	itt	eq
 8025f62:	2301      	moveq	r3, #1
 8025f64:	61a3      	streq	r3, [r4, #24]
 8025f66:	4620      	mov	r0, r4
 8025f68:	f000 f820 	bl	8025fac <__sfp>
 8025f6c:	6060      	str	r0, [r4, #4]
 8025f6e:	4620      	mov	r0, r4
 8025f70:	f000 f81c 	bl	8025fac <__sfp>
 8025f74:	60a0      	str	r0, [r4, #8]
 8025f76:	4620      	mov	r0, r4
 8025f78:	f000 f818 	bl	8025fac <__sfp>
 8025f7c:	2200      	movs	r2, #0
 8025f7e:	60e0      	str	r0, [r4, #12]
 8025f80:	2104      	movs	r1, #4
 8025f82:	6860      	ldr	r0, [r4, #4]
 8025f84:	f7ff ff82 	bl	8025e8c <std>
 8025f88:	68a0      	ldr	r0, [r4, #8]
 8025f8a:	2201      	movs	r2, #1
 8025f8c:	2109      	movs	r1, #9
 8025f8e:	f7ff ff7d 	bl	8025e8c <std>
 8025f92:	68e0      	ldr	r0, [r4, #12]
 8025f94:	2202      	movs	r2, #2
 8025f96:	2112      	movs	r1, #18
 8025f98:	f7ff ff78 	bl	8025e8c <std>
 8025f9c:	2301      	movs	r3, #1
 8025f9e:	61a3      	str	r3, [r4, #24]
 8025fa0:	e7d2      	b.n	8025f48 <__sinit+0xc>
 8025fa2:	bf00      	nop
 8025fa4:	0802a5ec 	.word	0x0802a5ec
 8025fa8:	08025ed5 	.word	0x08025ed5

08025fac <__sfp>:
 8025fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025fae:	4607      	mov	r7, r0
 8025fb0:	f7ff ffac 	bl	8025f0c <__sfp_lock_acquire>
 8025fb4:	4b1e      	ldr	r3, [pc, #120]	; (8026030 <__sfp+0x84>)
 8025fb6:	681e      	ldr	r6, [r3, #0]
 8025fb8:	69b3      	ldr	r3, [r6, #24]
 8025fba:	b913      	cbnz	r3, 8025fc2 <__sfp+0x16>
 8025fbc:	4630      	mov	r0, r6
 8025fbe:	f7ff ffbd 	bl	8025f3c <__sinit>
 8025fc2:	3648      	adds	r6, #72	; 0x48
 8025fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025fc8:	3b01      	subs	r3, #1
 8025fca:	d503      	bpl.n	8025fd4 <__sfp+0x28>
 8025fcc:	6833      	ldr	r3, [r6, #0]
 8025fce:	b30b      	cbz	r3, 8026014 <__sfp+0x68>
 8025fd0:	6836      	ldr	r6, [r6, #0]
 8025fd2:	e7f7      	b.n	8025fc4 <__sfp+0x18>
 8025fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025fd8:	b9d5      	cbnz	r5, 8026010 <__sfp+0x64>
 8025fda:	4b16      	ldr	r3, [pc, #88]	; (8026034 <__sfp+0x88>)
 8025fdc:	60e3      	str	r3, [r4, #12]
 8025fde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8025fe4:	f7ff f90e 	bl	8025204 <__retarget_lock_init_recursive>
 8025fe8:	f7ff ff96 	bl	8025f18 <__sfp_lock_release>
 8025fec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025ff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025ff4:	6025      	str	r5, [r4, #0]
 8025ff6:	61a5      	str	r5, [r4, #24]
 8025ff8:	2208      	movs	r2, #8
 8025ffa:	4629      	mov	r1, r5
 8025ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026000:	f7ff f922 	bl	8025248 <memset>
 8026004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802600c:	4620      	mov	r0, r4
 802600e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026010:	3468      	adds	r4, #104	; 0x68
 8026012:	e7d9      	b.n	8025fc8 <__sfp+0x1c>
 8026014:	2104      	movs	r1, #4
 8026016:	4638      	mov	r0, r7
 8026018:	f7ff ff62 	bl	8025ee0 <__sfmoreglue>
 802601c:	4604      	mov	r4, r0
 802601e:	6030      	str	r0, [r6, #0]
 8026020:	2800      	cmp	r0, #0
 8026022:	d1d5      	bne.n	8025fd0 <__sfp+0x24>
 8026024:	f7ff ff78 	bl	8025f18 <__sfp_lock_release>
 8026028:	230c      	movs	r3, #12
 802602a:	603b      	str	r3, [r7, #0]
 802602c:	e7ee      	b.n	802600c <__sfp+0x60>
 802602e:	bf00      	nop
 8026030:	0802a5ec 	.word	0x0802a5ec
 8026034:	ffff0001 	.word	0xffff0001

08026038 <_fwalk_reent>:
 8026038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802603c:	4606      	mov	r6, r0
 802603e:	4688      	mov	r8, r1
 8026040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026044:	2700      	movs	r7, #0
 8026046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802604a:	f1b9 0901 	subs.w	r9, r9, #1
 802604e:	d505      	bpl.n	802605c <_fwalk_reent+0x24>
 8026050:	6824      	ldr	r4, [r4, #0]
 8026052:	2c00      	cmp	r4, #0
 8026054:	d1f7      	bne.n	8026046 <_fwalk_reent+0xe>
 8026056:	4638      	mov	r0, r7
 8026058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802605c:	89ab      	ldrh	r3, [r5, #12]
 802605e:	2b01      	cmp	r3, #1
 8026060:	d907      	bls.n	8026072 <_fwalk_reent+0x3a>
 8026062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026066:	3301      	adds	r3, #1
 8026068:	d003      	beq.n	8026072 <_fwalk_reent+0x3a>
 802606a:	4629      	mov	r1, r5
 802606c:	4630      	mov	r0, r6
 802606e:	47c0      	blx	r8
 8026070:	4307      	orrs	r7, r0
 8026072:	3568      	adds	r5, #104	; 0x68
 8026074:	e7e9      	b.n	802604a <_fwalk_reent+0x12>

08026076 <__swhatbuf_r>:
 8026076:	b570      	push	{r4, r5, r6, lr}
 8026078:	460e      	mov	r6, r1
 802607a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802607e:	2900      	cmp	r1, #0
 8026080:	b096      	sub	sp, #88	; 0x58
 8026082:	4614      	mov	r4, r2
 8026084:	461d      	mov	r5, r3
 8026086:	da08      	bge.n	802609a <__swhatbuf_r+0x24>
 8026088:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802608c:	2200      	movs	r2, #0
 802608e:	602a      	str	r2, [r5, #0]
 8026090:	061a      	lsls	r2, r3, #24
 8026092:	d410      	bmi.n	80260b6 <__swhatbuf_r+0x40>
 8026094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026098:	e00e      	b.n	80260b8 <__swhatbuf_r+0x42>
 802609a:	466a      	mov	r2, sp
 802609c:	f000 f8c2 	bl	8026224 <_fstat_r>
 80260a0:	2800      	cmp	r0, #0
 80260a2:	dbf1      	blt.n	8026088 <__swhatbuf_r+0x12>
 80260a4:	9a01      	ldr	r2, [sp, #4]
 80260a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80260aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80260ae:	425a      	negs	r2, r3
 80260b0:	415a      	adcs	r2, r3
 80260b2:	602a      	str	r2, [r5, #0]
 80260b4:	e7ee      	b.n	8026094 <__swhatbuf_r+0x1e>
 80260b6:	2340      	movs	r3, #64	; 0x40
 80260b8:	2000      	movs	r0, #0
 80260ba:	6023      	str	r3, [r4, #0]
 80260bc:	b016      	add	sp, #88	; 0x58
 80260be:	bd70      	pop	{r4, r5, r6, pc}

080260c0 <__smakebuf_r>:
 80260c0:	898b      	ldrh	r3, [r1, #12]
 80260c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80260c4:	079d      	lsls	r5, r3, #30
 80260c6:	4606      	mov	r6, r0
 80260c8:	460c      	mov	r4, r1
 80260ca:	d507      	bpl.n	80260dc <__smakebuf_r+0x1c>
 80260cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80260d0:	6023      	str	r3, [r4, #0]
 80260d2:	6123      	str	r3, [r4, #16]
 80260d4:	2301      	movs	r3, #1
 80260d6:	6163      	str	r3, [r4, #20]
 80260d8:	b002      	add	sp, #8
 80260da:	bd70      	pop	{r4, r5, r6, pc}
 80260dc:	ab01      	add	r3, sp, #4
 80260de:	466a      	mov	r2, sp
 80260e0:	f7ff ffc9 	bl	8026076 <__swhatbuf_r>
 80260e4:	9900      	ldr	r1, [sp, #0]
 80260e6:	4605      	mov	r5, r0
 80260e8:	4630      	mov	r0, r6
 80260ea:	f7ff f921 	bl	8025330 <_malloc_r>
 80260ee:	b948      	cbnz	r0, 8026104 <__smakebuf_r+0x44>
 80260f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80260f4:	059a      	lsls	r2, r3, #22
 80260f6:	d4ef      	bmi.n	80260d8 <__smakebuf_r+0x18>
 80260f8:	f023 0303 	bic.w	r3, r3, #3
 80260fc:	f043 0302 	orr.w	r3, r3, #2
 8026100:	81a3      	strh	r3, [r4, #12]
 8026102:	e7e3      	b.n	80260cc <__smakebuf_r+0xc>
 8026104:	4b0d      	ldr	r3, [pc, #52]	; (802613c <__smakebuf_r+0x7c>)
 8026106:	62b3      	str	r3, [r6, #40]	; 0x28
 8026108:	89a3      	ldrh	r3, [r4, #12]
 802610a:	6020      	str	r0, [r4, #0]
 802610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026110:	81a3      	strh	r3, [r4, #12]
 8026112:	9b00      	ldr	r3, [sp, #0]
 8026114:	6163      	str	r3, [r4, #20]
 8026116:	9b01      	ldr	r3, [sp, #4]
 8026118:	6120      	str	r0, [r4, #16]
 802611a:	b15b      	cbz	r3, 8026134 <__smakebuf_r+0x74>
 802611c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026120:	4630      	mov	r0, r6
 8026122:	f000 f891 	bl	8026248 <_isatty_r>
 8026126:	b128      	cbz	r0, 8026134 <__smakebuf_r+0x74>
 8026128:	89a3      	ldrh	r3, [r4, #12]
 802612a:	f023 0303 	bic.w	r3, r3, #3
 802612e:	f043 0301 	orr.w	r3, r3, #1
 8026132:	81a3      	strh	r3, [r4, #12]
 8026134:	89a0      	ldrh	r0, [r4, #12]
 8026136:	4305      	orrs	r5, r0
 8026138:	81a5      	strh	r5, [r4, #12]
 802613a:	e7cd      	b.n	80260d8 <__smakebuf_r+0x18>
 802613c:	08025ed5 	.word	0x08025ed5

08026140 <__malloc_lock>:
 8026140:	4801      	ldr	r0, [pc, #4]	; (8026148 <__malloc_lock+0x8>)
 8026142:	f7ff b860 	b.w	8025206 <__retarget_lock_acquire_recursive>
 8026146:	bf00      	nop
 8026148:	20027f9d 	.word	0x20027f9d

0802614c <__malloc_unlock>:
 802614c:	4801      	ldr	r0, [pc, #4]	; (8026154 <__malloc_unlock+0x8>)
 802614e:	f7ff b85c 	b.w	802520a <__retarget_lock_release_recursive>
 8026152:	bf00      	nop
 8026154:	20027f9d 	.word	0x20027f9d

08026158 <__sread>:
 8026158:	b510      	push	{r4, lr}
 802615a:	460c      	mov	r4, r1
 802615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026160:	f000 f894 	bl	802628c <_read_r>
 8026164:	2800      	cmp	r0, #0
 8026166:	bfab      	itete	ge
 8026168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802616a:	89a3      	ldrhlt	r3, [r4, #12]
 802616c:	181b      	addge	r3, r3, r0
 802616e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026172:	bfac      	ite	ge
 8026174:	6563      	strge	r3, [r4, #84]	; 0x54
 8026176:	81a3      	strhlt	r3, [r4, #12]
 8026178:	bd10      	pop	{r4, pc}

0802617a <__swrite>:
 802617a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802617e:	461f      	mov	r7, r3
 8026180:	898b      	ldrh	r3, [r1, #12]
 8026182:	05db      	lsls	r3, r3, #23
 8026184:	4605      	mov	r5, r0
 8026186:	460c      	mov	r4, r1
 8026188:	4616      	mov	r6, r2
 802618a:	d505      	bpl.n	8026198 <__swrite+0x1e>
 802618c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026190:	2302      	movs	r3, #2
 8026192:	2200      	movs	r2, #0
 8026194:	f000 f868 	bl	8026268 <_lseek_r>
 8026198:	89a3      	ldrh	r3, [r4, #12]
 802619a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802619e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80261a2:	81a3      	strh	r3, [r4, #12]
 80261a4:	4632      	mov	r2, r6
 80261a6:	463b      	mov	r3, r7
 80261a8:	4628      	mov	r0, r5
 80261aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80261ae:	f000 b817 	b.w	80261e0 <_write_r>

080261b2 <__sseek>:
 80261b2:	b510      	push	{r4, lr}
 80261b4:	460c      	mov	r4, r1
 80261b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261ba:	f000 f855 	bl	8026268 <_lseek_r>
 80261be:	1c43      	adds	r3, r0, #1
 80261c0:	89a3      	ldrh	r3, [r4, #12]
 80261c2:	bf15      	itete	ne
 80261c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80261c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80261ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80261ce:	81a3      	strheq	r3, [r4, #12]
 80261d0:	bf18      	it	ne
 80261d2:	81a3      	strhne	r3, [r4, #12]
 80261d4:	bd10      	pop	{r4, pc}

080261d6 <__sclose>:
 80261d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261da:	f000 b813 	b.w	8026204 <_close_r>
	...

080261e0 <_write_r>:
 80261e0:	b538      	push	{r3, r4, r5, lr}
 80261e2:	4d07      	ldr	r5, [pc, #28]	; (8026200 <_write_r+0x20>)
 80261e4:	4604      	mov	r4, r0
 80261e6:	4608      	mov	r0, r1
 80261e8:	4611      	mov	r1, r2
 80261ea:	2200      	movs	r2, #0
 80261ec:	602a      	str	r2, [r5, #0]
 80261ee:	461a      	mov	r2, r3
 80261f0:	f7de fade 	bl	80047b0 <_write>
 80261f4:	1c43      	adds	r3, r0, #1
 80261f6:	d102      	bne.n	80261fe <_write_r+0x1e>
 80261f8:	682b      	ldr	r3, [r5, #0]
 80261fa:	b103      	cbz	r3, 80261fe <_write_r+0x1e>
 80261fc:	6023      	str	r3, [r4, #0]
 80261fe:	bd38      	pop	{r3, r4, r5, pc}
 8026200:	20028140 	.word	0x20028140

08026204 <_close_r>:
 8026204:	b538      	push	{r3, r4, r5, lr}
 8026206:	4d06      	ldr	r5, [pc, #24]	; (8026220 <_close_r+0x1c>)
 8026208:	2300      	movs	r3, #0
 802620a:	4604      	mov	r4, r0
 802620c:	4608      	mov	r0, r1
 802620e:	602b      	str	r3, [r5, #0]
 8026210:	f7de fadc 	bl	80047cc <_close>
 8026214:	1c43      	adds	r3, r0, #1
 8026216:	d102      	bne.n	802621e <_close_r+0x1a>
 8026218:	682b      	ldr	r3, [r5, #0]
 802621a:	b103      	cbz	r3, 802621e <_close_r+0x1a>
 802621c:	6023      	str	r3, [r4, #0]
 802621e:	bd38      	pop	{r3, r4, r5, pc}
 8026220:	20028140 	.word	0x20028140

08026224 <_fstat_r>:
 8026224:	b538      	push	{r3, r4, r5, lr}
 8026226:	4d07      	ldr	r5, [pc, #28]	; (8026244 <_fstat_r+0x20>)
 8026228:	2300      	movs	r3, #0
 802622a:	4604      	mov	r4, r0
 802622c:	4608      	mov	r0, r1
 802622e:	4611      	mov	r1, r2
 8026230:	602b      	str	r3, [r5, #0]
 8026232:	f7de face 	bl	80047d2 <_fstat>
 8026236:	1c43      	adds	r3, r0, #1
 8026238:	d102      	bne.n	8026240 <_fstat_r+0x1c>
 802623a:	682b      	ldr	r3, [r5, #0]
 802623c:	b103      	cbz	r3, 8026240 <_fstat_r+0x1c>
 802623e:	6023      	str	r3, [r4, #0]
 8026240:	bd38      	pop	{r3, r4, r5, pc}
 8026242:	bf00      	nop
 8026244:	20028140 	.word	0x20028140

08026248 <_isatty_r>:
 8026248:	b538      	push	{r3, r4, r5, lr}
 802624a:	4d06      	ldr	r5, [pc, #24]	; (8026264 <_isatty_r+0x1c>)
 802624c:	2300      	movs	r3, #0
 802624e:	4604      	mov	r4, r0
 8026250:	4608      	mov	r0, r1
 8026252:	602b      	str	r3, [r5, #0]
 8026254:	f7de fac2 	bl	80047dc <_isatty>
 8026258:	1c43      	adds	r3, r0, #1
 802625a:	d102      	bne.n	8026262 <_isatty_r+0x1a>
 802625c:	682b      	ldr	r3, [r5, #0]
 802625e:	b103      	cbz	r3, 8026262 <_isatty_r+0x1a>
 8026260:	6023      	str	r3, [r4, #0]
 8026262:	bd38      	pop	{r3, r4, r5, pc}
 8026264:	20028140 	.word	0x20028140

08026268 <_lseek_r>:
 8026268:	b538      	push	{r3, r4, r5, lr}
 802626a:	4d07      	ldr	r5, [pc, #28]	; (8026288 <_lseek_r+0x20>)
 802626c:	4604      	mov	r4, r0
 802626e:	4608      	mov	r0, r1
 8026270:	4611      	mov	r1, r2
 8026272:	2200      	movs	r2, #0
 8026274:	602a      	str	r2, [r5, #0]
 8026276:	461a      	mov	r2, r3
 8026278:	f7de fab2 	bl	80047e0 <_lseek>
 802627c:	1c43      	adds	r3, r0, #1
 802627e:	d102      	bne.n	8026286 <_lseek_r+0x1e>
 8026280:	682b      	ldr	r3, [r5, #0]
 8026282:	b103      	cbz	r3, 8026286 <_lseek_r+0x1e>
 8026284:	6023      	str	r3, [r4, #0]
 8026286:	bd38      	pop	{r3, r4, r5, pc}
 8026288:	20028140 	.word	0x20028140

0802628c <_read_r>:
 802628c:	b538      	push	{r3, r4, r5, lr}
 802628e:	4d07      	ldr	r5, [pc, #28]	; (80262ac <_read_r+0x20>)
 8026290:	4604      	mov	r4, r0
 8026292:	4608      	mov	r0, r1
 8026294:	4611      	mov	r1, r2
 8026296:	2200      	movs	r2, #0
 8026298:	602a      	str	r2, [r5, #0]
 802629a:	461a      	mov	r2, r3
 802629c:	f7de fa7a 	bl	8004794 <_read>
 80262a0:	1c43      	adds	r3, r0, #1
 80262a2:	d102      	bne.n	80262aa <_read_r+0x1e>
 80262a4:	682b      	ldr	r3, [r5, #0]
 80262a6:	b103      	cbz	r3, 80262aa <_read_r+0x1e>
 80262a8:	6023      	str	r3, [r4, #0]
 80262aa:	bd38      	pop	{r3, r4, r5, pc}
 80262ac:	20028140 	.word	0x20028140

080262b0 <_init>:
 80262b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262b2:	bf00      	nop
 80262b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80262b6:	bc08      	pop	{r3}
 80262b8:	469e      	mov	lr, r3
 80262ba:	4770      	bx	lr

080262bc <_fini>:
 80262bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262be:	bf00      	nop
 80262c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80262c2:	bc08      	pop	{r3}
 80262c4:	469e      	mov	lr, r3
 80262c6:	4770      	bx	lr
